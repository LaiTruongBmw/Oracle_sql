DROP TRIGGER HPDQ.AC_TAC_ABACCTCODE_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_ABACCTCODE_TRG 
   AFTER INSERT
   ON HPDQ.TAC_ABACCTCODE
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DISABLE
DECLARE
   l_tac_abtracgrp_pk   NUMBER;
/******************************************************************************
   NAME:       TAC_ABACCTCODE_trg1
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        01/28/2010             1. Created this trigger.

   NOTES:
******************************************************************************/
BEGIN
   SELECT pk
     INTO l_tac_abtracgrp_pk
     FROM tac_abtracgrp
    WHERE del_if = 0 AND ac_grp = 'ALL';

   ac_upd_account_group_d ('INSERT',
                           NULL,
                           l_tac_abtracgrp_pk,
                           :NEW.ac_cd,
                           :NEW.pk,
                           :NEW.crt_by
                          );
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END tac_abacctcode_trg1;
/


DROP TRIGGER HPDQ.AC_TAC_ALLEXP_ACCRUE_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_ALLEXP_ACCRUE_TRG 
BEFORE UPDATE
ON HPDQ.TAC_ALLEXP_ACCRUE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DISABLE
DECLARE
   l_cust_charger_nm   TCO_BUSPARTNER.PARTNER_NAME%TYPE;
   l_rtn_msg           VARCHAR2 (255);
   V_TEMP              VARCHAR2 (255);
   V_TRHPK             NUMBER;
BEGIN
   IF :NEW.TR_STATUS = '2' AND :OLD.TR_STATUS <> :NEW.TR_STATUS
   THEN
      SELECT PARTNER_NAME
        INTO l_cust_charger_nm
        FROM TCO_BUSPARTNER
       WHERE PK = :OLD.TCO_BUSPARTNER_PK AND DEL_IF = 0;

      ac_pro_allexp_accrue_confirm (:OLD.PK,
                                    :OLD.TCO_COMPANY_PK,
                                    :OLD.TR_DATE,
                                    :NEW.VOUCHERNO,
                                    :NEW.VOUCHER_TYPE,
                                    :OLD.TCO_BUSPARTNER_PK,
                                    l_cust_charger_nm,
                                    :NEW.TR_SEQ,
                                    :OLD.AUTO_YN,
                                    :OLD.TAC_ABTRTYPE_PK,
                                    :OLD.CCY,
                                    :OLD.TR_RATE,
                                    :OLD.BK_RATE,
                                    :OLD.TRANS_AMT,
                                    :OLD.BOOKS_AMT,
                                    :OLD.TRANS_AMT_VAT,
                                    :OLD.BOOKS_AMT_VAT,
                                    :OLD.REMARK,
                                    :OLD.REMARK2,
                                    :OLD.TAC_ABACCTCODE_PK,
                                    :OLD.TCO_BSUSER_PK,
                                    :OLD.TCO_ORG_PK,
                                    :NEW.MOD_BY,
                                    l_rtn_msg);

      FOR CUR
         IN (SELECT d.pk,D.TCO_ITEM_PK,
                    d.TRANS_AMT_ALLOCATE,
                    d.BOOKS_AMT_ALLOCATE,
                    d.TAC_ABACCTCODE_PK,
                    A.TIN_WAREHOUSE_PK,
                    A.AP_UNIT,
                    A.tac_abpl_pk
               FROM TAC_ALLEXP_ACCRUED D, TAC_CRDAD A
              WHERE     D.TAC_ALLEXP_ACCRUE_PK = :OLD.PK
                    AND D.DEL_IF = 0
                    AND D.TAC_CRDAD_PK = A.PK
                    AND A.DEL_IF = 0)
      LOOP
         INSERT INTO TAC_STOCKTR (PK,
                                  TCO_ITEM_PK,
                                  INPUT_QTY,
                                  IN_TRAMT,
                                  IN_AMT,
                                  STD_YM,
                                  TR_DATE,
                                  TCO_COMPANY_PK,
                                  TIN_WAREHOUSE_PK,
                                  TR_STATUS,
                                  TRIN_TYPE,
                                  STOCKTR_NO,
                                  TAC_ABACCTCODE_PK,
                                  ITEM_UOM,
                                  tac_abpl_pk,
                                  TR_TABLE_NM,
                                  TR_TABLE_PK,
                                  IN_CCY,
                                  CRT_BY)
              VALUES (TAC_STOCKTR_SEQ.NEXTVAL,
                      CUR.TCO_ITEM_PK,
                      0,
                      NVL (CUR.TRANS_AMT_ALLOCATE, 0),
                      NVL (CUR.BOOKS_AMT_ALLOCATE, 0),
                      SUBSTR (:OLD.TR_DATE, 1, 6),
                      :OLD.TR_DATE,
                      :OLD.TCO_COMPANY_PK,
                      CUR.TIN_WAREHOUSE_PK,
                      '2',
                      '11',
                      :NEW.VOUCHERNO,
                      CUR.TAC_ABACCTCODE_PK,
                      CUR.AP_UNIT,
                      CUR.tac_abpl_pk,
                      'TAC_ALLEXP_ACCRUED',
                      CUR.PK,
                      :OLD.CCY,
                      :NEW.MOD_BY);
      END LOOP;
   ELSIF :NEW.TR_STATUS = '3' AND :OLD.TR_STATUS <> :NEW.TR_STATUS
   THEN
      FOR CUR_2
         IN (SELECT D.pk
               FROM TAC_ALLEXP_ACCRUED D
              WHERE     D.TAC_ALLEXP_ACCRUE_PK = :OLD.PK
                    AND D.DEL_IF = 0
                   )
      LOOP
         SELECT PK
           INTO V_TRHPK
           FROM TAC_STOCKTR
          WHERE     TR_TABLE_NM = 'TAC_ALLEXP_ACCRUED'
                AND TR_TABLE_PK = CUR_2.PK
                AND DEL_IF = 0
                AND TR_STATUS IN ('2', '0');

         UPDATE TAC_STOCKTR
            SET DEL_IF = PK, MOD_DT = SYSDATE, MOD_BY = :NEW.MOD_BY
          WHERE PK = V_TRHPK;
      END LOOP;

      -- DELETE FROM TAC_HGTRH
      SELECT PK
        INTO V_TRHPK
        FROM TAC_HGTRH
       WHERE     TR_TABLE_PK = :OLD.PK
             AND TR_TABLENM = 'TAC_ALLEXP_ACCRUE'
             AND TCO_COMPANY_PK = :OLD.TCO_COMPANY_PK
             AND TR_STATUS IN ('2', '0')
             AND DEL_IF = 0;

      ac_pro_CTL_MST_CONFIRM_CANCEL (V_TRHPK,
                                     :OLD.TCO_COMPANY_PK,
                                     '',
                                     'TAC_ALLEXP_ACCRUE',
                                     :NEW.MOD_BY,
                                     V_TEMP);
   END IF;
END;
/


DROP TRIGGER HPDQ.AC_TAC_BPRVPV_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_BPRVPV_TRG 
   before update
   ON HPDQ.TAC_BPRVPV
   referencing new as new old as old
   for each row
DISABLE
declare
   -- LOCAL VARIABLES HERE
   v_trhpk   number;
   v_temp    number;
   v_count   number;
begin
   if :new.tr_status = 2 and :new.tr_status <> :old.tr_status
   then                                                                                                              -- Confirm --
      -- Check data --
      ac_pro_check_upd_tac_bprvpv (:old.tco_company_pk, :old.pk, :old.voucher_type);

      -- Trans data from TAC_BPRVPV to TAC_HGTRH --
      ac_upd_confirm_tac_bprvpv (:old.tco_company_pk,
                                 :old.pk,
                                 :old.TAC_ABTRTYPE_PK,
                                 :old.tr_date,
                                 :old.remark,
                                 :old.remark2,
                                 :new.voucherno,
                                 :new.voucher_type,
                                 :new.tr_seq,
                                 :new.auto_yn,
                                 :old.tco_org_pk,
                                 :new.total,
                                 :new.mod_by,
                                 :new.tr_enclose);
   elsif :new.tr_status = 3 and :new.tr_status <> :old.tr_status
   then                                                                                                               -- Cancel --
      select count (*)
        into v_count
        from tac_hgtrh
       where tr_table_pk = :old.pk and tr_tablenm = 'TAC_BPRVPV' and tco_company_pk = :old.tco_company_pk;

      if (v_count > 0)
      then
         select pk
           into v_trhpk
           from tac_hgtrh
          where tr_table_pk = :old.pk and tr_tablenm = 'TAC_BPRVPV' and tco_company_pk = :old.tco_company_pk;

         -- Delete from TAC_HGTRH --
         ac_pro_ctl_mst_confirm_cancel (v_trhpk,
                                        :old.tco_company_pk,
                                        :new.cancel_cause,
                                        'TAC_BPRVPV',
                                        :new.mod_by,
                                        v_temp);
      end if;
   end if;
exception
   when others
   then
      raise_application_error (-20001, sqlerrm);
      
end AC_TAC_BPRVPV_TRG;
/


DROP TRIGGER HPDQ.AC_TAC_CARECVH_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_CARECVH_TRG 
BEFORE UPDATE ON HPDQ.TAC_CARECVH REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DISABLE
DECLARE
    
    -- LOCAL VARIABLES HERE
    v_trhpk            NUMBER;
    v_temp             NUMBER;
    v_count            NUMBER;
    
BEGIN
    IF (:NEW.TR_STATUS = 2) AND (:NEW.TR_STATUS  <> :OLD.TR_STATUS) THEN -- Confirm --

        -- Trans data from TAC_CARECVH to TAC_HGTRH --
        ac_upd_CONFIRM_TAC_CARECVH(:OLD.PK,
                                    :OLD.TCO_COMPANY_PK,
                                    :NEW.VOUCHERNO, 
                                    :NEW.VOUCHER_TYPE,
                                    :NEW.TR_SEQ,
                                    :NEW.AUTO_YN,
                                    :OLD.TR_DATE,
                                    :OLD.TAC_ABTRTYPE_PK,
                                    :OLD.TCO_DEPT_PK,
                                    :OLD.TOT_AMT,
                                    :OLD.REMARK,
                                    :OLD.REMARK2,
                                    :NEW.MOD_BY
                                   );
    
    ELSIF (:NEW.TR_STATUS = 3) THEN      -- Cancel --

       SELECT COUNT(*) INTO v_count
         FROM TAC_HGTRH
        WHERE TR_TABLE_PK    = :OLD.PK
          AND TR_TABLENM     = 'TAC_CARECVH'
               AND DEL_IF = 0 
               AND TR_STATUS IN ('2', '0')
          AND TCO_COMPANY_PK = :OLD.TCO_COMPANY_PK;

       IF (v_count > 0) THEN
            SELECT PK INTO v_trhpk
              FROM TAC_HGTRH
             WHERE TR_TABLE_PK      = :OLD.PK
               AND TR_TABLENM       = 'TAC_CARECVH'
               AND DEL_IF = 0 
               AND TR_STATUS IN ('2', '0')
               AND TCO_COMPANY_PK   = :OLD.TCO_COMPANY_PK;
    
            -- Delete from TAC_HGTRH --
            ac_pro_CTL_MST_CONFIRM_CANCEL(v_trhpk, :OLD.TCO_COMPANY_PK, '', 'TAC_CARECVH', :NEW.MOD_BY,  v_temp);
       END IF;
    END IF;
END;
/


DROP TRIGGER HPDQ.AC_TAC_CLOSE_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_CLOSE_TRG 
after delete or insert or update
ON HPDQ.TAC_CLOSE referencing new as new old as old
for each row
DISABLE
declare

/******************************************************************************
   NAME:       TRG_TAC_CLOSE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        19-Aug-08             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_TAC_CLOSE
      Sysdate:         19-Aug-08
      Date and Time:   19-Aug-08, 8:55:42 AM, and 19-Aug-08 8:55:42 AM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      TAC_CLOSE (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
begin
   if inserting or updating then
        insert into tac_close_his
        (pk, id, month_close, close_yn, close_dt, from_dt, to_dt, remark, del_if, crt_dt, crt_by, mod_dt, mod_by,times, tco_buspartner_pk,tac_abpl_pk, tlg_in_warehouse_pk)
        values
        (tac_close_his_seq.nextval, :new.id, :new.month_close, :new.close_yn, :new.close_dt, :new.from_dt, :new.to_dt, :new.remark, :new.del_if, :new.crt_dt, :new.crt_by, :new.mod_dt, :new.mod_by,:new.times, :new.tco_buspartner_pk,:new.tac_abpl_pk, :new.tlg_in_warehouse_pk);
   else
       insert into tac_close_his
        (pk, id, month_close, close_yn, close_dt, from_dt, to_dt, remark, del_if, crt_dt, crt_by, mod_dt, mod_by,times,tco_buspartner_pk,tac_abpl_pk, tlg_in_warehouse_pk)
        values
        (tac_close_his_seq.nextval, :old.id, :old.month_close, :old.close_yn, :old.close_dt, :old.from_dt, :old.to_dt, :old.remark, :old.del_if, :old.crt_dt, :old.crt_by, :old.mod_dt, :old.mod_by,:old.times, :old.tco_buspartner_pk,:old.tac_abpl_pk, :old.tlg_in_warehouse_pk);

   end if;




   exception
     when others then
       -- Consider logging the error and then re-raise
       raise;
end Ac_TAC_CLOSE_trg;
/


DROP TRIGGER HPDQ.AC_TAC_CRCA_OTHER_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_CRCA_OTHER_TRG 
AFTER UPDATE
ON HPDQ.TAC_CRCA_OTHER
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DISABLE
DECLARE
l_tac_hgtrh_pk   number;
/******************************************************************************
   NAME:       AC_TAC_CRCA_other_TRG
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/28/2015      phuc       1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     AC_TAC_CRCA_other_TRG
      Sysdate:         7/28/2015
      Date and Time:   7/28/2015, 10:03:31 AM, and 7/28/2015 10:03:31 AM
      Username:        phuc (set in TOAD Options, Proc Templates)
      Table Name:      TAC_CRCA_OTHER (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/


begin
   if :new.del_if <> :old.del_if and :new.del_if > 0
   then
      select max (pk)
        into l_tac_hgtrh_pk
        from tac_hgtrh
       where tr_tablenm = 'TAC_CRCA_OTHER' and tr_table_pk = :old.pk and del_if = 0 and tr_status in (0, 2);

      if l_tac_hgtrh_pk is not null
      then
         raise_application_error (-20001,
                                  'This data was confirmed. You cannot delete it. Please check Seq:' || l_tac_hgtrh_pk);
      end if;
   end if;

   if :new.tr_status <> :old.tr_status and :new.tr_status = '3'
   then
      for cur in (select pk
                    from tac_crcad_other
                   where del_if = 0 and tac_crca_other_pk = :old.pk)
      loop
         update tac_stocktr
            set tr_status = :new.tr_status,
                del_if = pk,
                mod_dt = sysdate,
                mod_by = :new.mod_by
          where tr_table_nm = 'TAC_CRCAD_OTHER' and tr_table_pk = cur.pk and del_if = 0;
      end loop;
   end if;


   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END AC_TAC_CRCA_other_TRG;
/


DROP TRIGGER HPDQ.AC_TAC_CRCA_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_CRCA_TRG 
   after update
   ON HPDQ.TAC_CRCA
   referencing new as new old as old
   for each row
DISABLE
declare
   l_tac_hgtrh_pk   number;
   v_cnt number;
begin
   if :new.del_if <> :old.del_if and :new.del_if > 0
   then
      select max (pk)
        into l_tac_hgtrh_pk
        from tac_hgtrh
       where tr_tablenm = 'TAC_CRCA' and tr_table_pk = :old.pk and del_if = 0 and tr_status in (0, 2);

      if l_tac_hgtrh_pk is not null
      then
         raise_application_error (-20001,
                                  'This data was confirmed. You cannot delete it. Please check Seq:' || l_tac_hgtrh_pk);
      end if;
   end if;

   if :new.tr_status <> :old.tr_status and :new.tr_status = '3'
   then
   
      -------------ADD---CHECK----E-INVOICE---------
      select max (pk)
        into l_tac_hgtrh_pk
        from tac_hgtrh
       where tr_tablenm = 'TAC_CRCA' and tr_table_pk = :old.pk and del_if = 0 and tr_status in (0, 2);
       
      select count(*) into v_cnt from tac_e_invoice_crca x where x.del_if=0 and x.tac_crca_pk=:old.pk;
      
      if v_cnt >0
      then
         raise_application_error (-20001,
                                  'This data was confirmed to E-INVOICE. You cannot cancel it. Please check Seq:' || l_tac_hgtrh_pk);
      end if;
      --------END-----ADD---CHECK----E-INVOICE------  
      for cur in (select pk
                    from tac_crcad
                   where del_if = 0 and tac_crca_pk = :old.pk)
      loop
         update tac_stocktr
            set tr_status = :new.tr_status,
                del_if = pk,
                mod_dt = sysdate,
                mod_by = :new.mod_by
          where tr_table_nm = 'TAC_CRCAD' and tr_table_pk = cur.pk and del_if = 0;
      end loop;
   end if;
end;
/


DROP TRIGGER HPDQ.AC_TAC_CRDA_OTHER_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_CRDA_OTHER_TRG 
AFTER UPDATE
ON HPDQ.TAC_CRDA_OTHER 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DISABLE
DECLARE

/******************************************************************************
   NAME:       
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/13/2009   Van Le          1. Created this trigger.

   NOTES:

******************************************************************************/ 
     V_BUSPART_NM            VARCHAR2(200);            
     L_CUST_CHARGER_NM      VARCHAR2(200);    
     V_TRHPK                         NUMBER;                    
     V_TEMP               NUMBER ;
     L_CNT                NUMBER;                                                                                                    
BEGIN
            IF (:OLD.APTR_TYPE = 'OR') THEN
        IF (:NEW.TR_STATUS = 2) AND (:NEW.TR_STATUS <> :OLD.TR_STATUS) THEN         -- Confirm --
            -- Check Data --
            AC_PRO_CHECK_TAC_CRDA_OTHER(:OLD.TCO_COMPANY_PK, :OLD.PK, :OLD.TR_DATE, :OLD.TAC_ABACCTCODE_PK, :OLD.TCO_BUSPARTNER_PK, :OLD.STORAGE_FAMT, :OLD.STORAGE_AMT, :OLD.APTR_TYPE);

            -- Get Partner name --
            SELECT PARTNER_NAME INTO V_BUSPART_NM
              FROM TCO_BUSPARTNER
             WHERE DEL_IF   = 0
               AND PK       = :OLD.TCO_BUSPARTNER_PK;
               
               SELECT MAX(PARTNER_NAME) INTO L_CUST_CHARGER_NM FROM TCO_BUSPARTNER 
               WHERE PK = :OLD.TCO_BUSPARTNER_PK_AP ;
             -- Trans data from TAC_CRDA to TAC_HGTRH --
            ac_pro_tac_crda_confirm_or(:OLD.TCO_COMPANY_PK, 
                                    :OLD.PK, 
                                    :OLD.TR_DATE, 
                                    :OLD.REMARK, 
                                    :OLD.REMARK2, 
                                    :OLD.TAC_ABTRTYPE_PK,
                                    :OLD.TR_CCY,
                                    :OLD.TR_RATE,
                                    :OLD.TAC_ABACCTCODE_PK,
                                    :OLD.TCO_BUSPARTNER_PK,
                                    V_BUSPART_NM,
                                    :OLD.STORAGE_FAMT,
                                    :OLD.STORAGE_AMT,
                                    :NEW.VOUCHERNO, 
                                    :NEW.VOUCHER_TYPE,
                                    :NEW.TR_SEQ,
                                    :NEW.AUTO_YN,
                                    :OLD.TCO_ORG_PK,
                                    :OLD.STORAGE_AMT,
                                    :OLD.TCO_BUSPARTNER_PK_AP,                                                                            
                                    L_CUST_CHARGER_NM,
                                    :OLD.BK_RATE,
                                    :NEW.MOD_BY);
         ----------------------TRANS DATA TAC_STOCKTR 
             FOR CUR IN (
                SELECT * FROM TAC_CRDAD_OTHER WHERE DEL_IF = 0 AND TAC_CRDA_OTHER_PK = :OLD.PK AND AP_COST_YN = 'Y'
             )         
             LOOP
                   SELECT COUNT(PK) INTO L_CNT FROM TAC_STOCKTR WHERE TR_STATUS IN ('2','0')
                   AND DEL_IF = 0 AND TR_TABLE_NM='TAC_CRDAD_OTHER' AND TR_TABLE_PK = CUR.PK;
                   IF L_CNT = 0 THEN
                        ac_upd_stocktr_in (
                       'INSERT',
                       :NEW.VOUCHERNO,
                       :OLD.TR_DATE,
                       NULL,
                       :OLD.TCO_BUSPARTNER_PK,
                       CUR.tac_abpl_pk,
                       CUR.TLG_IN_WAREHOUSE_PK,
                       CUR.TLG_IT_ITEM_PK,
                       CUR.AP_UNIT,
                       CUR.TAC_ABACCTCODE_PK,
                       '10',
                       CUR.AP_QTY,
                       CUR.STORAGE_AMT,
                       :OLD.TR_CCY,
                       CUR.STORAGE_FAMT,
                       'TAC_CRDAD_OTHER',
                       CUR.PK,
                       CUR.REMARK,
                       CUR.REMARK2,
                       CUR.REMARK2,
                       CUR.AP_UPRICE,
                       '2',
                       NULL,
                       SUBSTR(:OLD.TR_DATE,1, 6),
                       :OLD.TCO_COMPANY_PK,
                       :NEW.MOD_BY
                    );                   
                   END IF;
    END LOOP;
                    
        ELSIF (:NEW.TR_STATUS = 3) AND (:NEW.TR_STATUS <> :OLD.TR_STATUS) THEN            -- Cancel --

            SELECT PK INTO V_TRHPK
              FROM TAC_HGTRH
             WHERE TR_TABLE_PK    = :OLD.PK
               AND TR_TABLENM     = 'TAC_CRDA_OTHER'
               --AND TR_STATUS      = 2
               AND TCO_COMPANY_PK = :OLD.TCO_COMPANY_PK;
            
            -- Delete from TAC_HGTRH --
            ac_pro_ctl_mst_confirm_cancel(V_TRHPK, :OLD.TCO_COMPANY_PK, :NEW.CANCEL_REMARK, 'TAC_CRDA_OTHER', :NEW.MOD_BY,  V_TEMP);
            -- delete from tac_stocktr 
            update tac_stocktr t
            set t.tr_status = '3',
            t.del_if = t.pk,
            t.mod_by = :new.mod_by,
            t.mod_dt = sysdate              
            where t.tr_table_nm = 'TAC_CRDAD_OTHER'
            and t.tr_table_pk in (select d.pk from tac_crdad_other d where d.tac_crda_other_pk = :old.pk ); 
        
        END IF;                    
    END IF;        
  
END ;
/


DROP TRIGGER HPDQ.AC_TAC_HGTRD_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_HGTRD_TRG 
   before delete or insert or update
   ON HPDQ.TAC_HGTRD
   referencing new as new old as old
   for each row
DISABLE
declare
   l_tr_status   varchar2 (1);
begin
    
 /*  select max (tr_status)
     into l_tr_status
     from tac_hgtrh
    where pk = :new.tac_hgtrh_pk;*/
    
   

--   if l_tr_status = '0' or l_tr_status = '2'
--   then
--      raise_application_error (-20001, 'This slip was approved or confirmed. So can not change.');
--   end if;

   if (:new.del_if <> 0 or :new.tac_abacctcode_pk <> :old.tac_abacctcode_pk)
   then
   
      update tac_hgtrditem t
         set t.del_if = pk, t.mod_by = :new.mod_by, t.mod_dt = sysdate
       where t.tac_hgtrd_pk = :old.pk and t.del_if = 0;
   end if;
   
end;
/


DROP TRIGGER HPDQ.AC_TAC_HGTRH_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_HGTRH_TRG 
BEFORE UPDATE
ON HPDQ.TAC_HGTRH
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DISABLE
declare
   -- LOCAL VARIABLES HERE
   v_cnt         number;
   l_cancel_yn   varchar2 (1);
begin
     

   if :new.tr_status = 2 and :new.tr_status <> :old.tr_status
   then  
                                                                                               -- Confirm --
      select count (*)
        into v_cnt
        from tac_icmmclose
       where tco_company_pk = :old.tco_company_pk and del_if = 0 and std_ym = to_char (:old.tr_date, 'YYYYMM') and close_yn = 'Y';
        
      if v_cnt > 0
      then
         raise_application_error (-20001, 'Month ' || to_char (:old.tr_date, 'YYYYMM') || ' has been closed!!!');
      end if;

      select count (*)
        into v_cnt
        from tac_hgtrd
       where tac_hgtrh_pk = :old.pk and del_if = 0 and close_yn = 'Y';

      if v_cnt = 0
      then
         select count (*)
           into v_cnt
           from tac_hgddbal
          where     std_ymd like to_char (:old.tr_date, 'YYYYMM') || '%'
                and tr_status in (0, 2)
                and del_if = 0
                and close_yn = 'Y'
                and tco_company_pk = :old.tco_company_pk;

         if v_cnt > 0
         then
            raise_application_error (
               -20001,
                  'Thang '
               || to_char (:old.tr_date, 'YYYYMM')
               || ' da chay ket chuyen roi. Ban khong the them bac ky chung tu nao trong thang nay.');
         end if;
      end if;

      -- Check data --
      if nvl (:old.io_yn, 'N') = 'N'
      then
         --1-----
         
           ac_pro_check_before_update (:old.pk, :old.tac_abtrtype_pk, :old.tco_company_pk);  
          
          
                                          -- off
          ac_upd_confirm_tac_hgddbal (:old.pk,
                                     :old.tco_company_pk,
                                     :old.tr_date,
                                     :new.tr_status);                                                                        --off
         --3 Trans data to TAC_HGDEPODDBAL --
         ac_upd_confirm_tac_hgdepoddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --4 Trans data to TAC_HGITEMDDBAL --
         ac_upd_confirm_tac_hgitemddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --5 Trans data to TAC_HGPLDDBAL --
         ac_upd_confirm_tac_hgplddbal (:old.pk,
                                       :old.tco_company_pk,
                                       :old.tr_date,
                                       :new.tr_status);

         --6 Trans data to TAC_HGCUSTDDBAL --
         ac_upd_confirm_tac_hgcustddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --7 Trans data to TAC_MTVAT --
         l_cancel_yn := 'N';

         if :old.tr_tablenm = 'TAC_CRCA'
         then
            select cancel_yn
              into l_cancel_yn
              from tac_crca
             where pk = :old.tr_table_pk;
         end if;

         ac_upd_confirm_tac_mtvat (:old.pk,
                                   :old.tco_company_pk,
                                   :old.tr_date,
                                   :new.tr_status,
                                   :old.tac_abtrtype_pk,
                                   :new.voucherno,
                                   l_cancel_yn,
                                   :new.mod_by);
         --8 Trans data to TAC_HGEMPDDBAL --
         ac_upd_confirm_tac_hgempddbal (:old.pk,
                                        :old.tco_company_pk,
                                        :old.tr_date,
                                        :new.tr_status);
         --9 Trans data to TAC_HGTRD_REF (khong su dung cho tai khoan ngoai bang)--
         ac_upd_confirm_tac_hgtrd_ref (:old.pk, :new.mod_by);
         --10 Trans data to TAC_HGDDBAL_ST --
         ac_upd_confirm_tac_hgddbal_st (:old.pk,
                                        :old.tco_company_pk,
                                        :old.tr_date,
                                        :new.tr_status);                                                                     --off
         --11 Trans data to TAC_HGDDBAL_LOCAL --
         ac_upd_cf_tac_hgddbal_local (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);                                                                       --off
         --13 Trans data to TAC_HGBGDDBAL  --
         ac_upd_confirm_tac_hgbgddbal (:old.pk,
                                       :old.tco_company_pk,
                                       :old.tr_date,
                                       :new.tr_status);
         --14 Trans data to TAC_excise --
         ac_upd_cf_excise (:old.pk,
                           :old.tco_company_pk,
                           :old.tr_date,
                           :new.tr_status,
                           :old.tac_abtrtype_pk,
                           :new.voucherno,
                           :new.mod_by);
                           
         --management customer 
--         ac_upd_cf_tac_hgcustplddbal1 (:OLD.PK,
--                                      :OLD.TCO_COMPANY_PK,
--                                      :old.TR_DATE,
--                                      :NEW.tr_status,
--                                      :NEW.voucherno);                    
      --12 item colunm--
      --SP_TAC_HGTRDITEMC(:OLD.pk);
            -- Trans data to TAC_CARECV --
         ac_upd_confirm_tac_carecv (:old.pk,
                                    :old.tco_company_pk,
                                    :old.tr_date,
                                    :old.tco_org_pk,
                                    :old.tco_bsuser_pk,
                                    1,
                                    :old.tr_tablenm,
                                    :old.tr_table_pk,
                                    :new.mod_by);
      else
         --1 check valid data b4 update using for off balance sheet accounts
         ac_pro_b4_update_slipoff (:old.pk, :old.tac_abtrtype_pk, :old.tco_company_pk);
         --2 Trans data to TAC_HGDDBAL --
         ac_upd_confirm_tac_hgddbal (:old.pk,
                                     :old.tco_company_pk,
                                     :old.tr_date,
                                     :new.tr_status);
         --3 Trans data to TAC_HGDEPODDBAL --
         ac_upd_confirm_tac_hgdepoddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --4 Trans data to TAC_HGITEMDDBAL --
         ac_upd_confirm_tac_hgitemddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --5 Trans data to TAC_HGPLDDBAL --
         ac_upd_confirm_tac_hgplddbal (:old.pk,
                                       :old.tco_company_pk,
                                       :old.tr_date,
                                       :new.tr_status);
         --6 Trans data to TAC_HGCUSTDDBAL --
         ac_upd_confirm_tac_hgcustddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --7 Trans data to TAC_MTVAT --
         l_cancel_yn := 'N';

         if :old.tr_tablenm = 'TAC_CRCA'
         then
            select cancel_yn
              into l_cancel_yn
              from tac_crca
             where pk = :old.tr_table_pk;
         end if;

         ac_upd_confirm_tac_mtvat (:old.pk,
                                   :old.tco_company_pk,
                                   :old.tr_date,
                                   :new.tr_status,
                                   :old.tac_abtrtype_pk,
                                   :new.voucherno,
                                   l_cancel_yn,
                                   :new.mod_by);
         --8 Trans data to TAC_HGEMPDDBAL --
         ac_upd_confirm_tac_hgempddbal (:old.pk,
                                        :old.tco_company_pk,
                                        :old.tr_date,
                                        :new.tr_status);
         --9 Trans data to TAC_HGBGDDBAL --
         ac_upd_confirm_tac_hgbgddbal (:old.pk,
                                       :old.tco_company_pk,
                                       :old.tr_date,
                                       :new.tr_status);
         --10 Trans data to TAC_excise --
         ac_upd_cf_excise (:old.pk,
                           :old.tco_company_pk,
                           :old.tr_date,
                           :new.tr_status,
                           :old.tac_abtrtype_pk,
                           :new.voucherno,
                           :new.mod_by);
         -- Trans data to TAC_CARECV --
         ac_upd_confirm_tac_carecv (:old.pk,
                                    :old.tco_company_pk,
                                    :old.tr_date,
                                    :old.tco_org_pk,
                                    :old.tco_bsuser_pk,
                                    1,
                                    :old.tr_tablenm,
                                    :old.tr_table_pk,
                                    :new.mod_by);
                                    
--         --management customer 
--         ac_upd_cf_tac_hgcustplddbal1 (:OLD.PK,
--                                      :OLD.TCO_COMPANY_PK,
--                                      :old.TR_DATE,
--                                      :NEW.tr_status,
--                                      :NEW.voucherno);                                    
      end if; 
   elsif :new.tr_status = 3 and :new.tr_status <> :old.tr_status
   then
      select count (*)
        into v_cnt
        from tac_icmmclose
       where tco_company_pk = :old.tco_company_pk and del_if = 0 and std_ym = to_char (:old.tr_date, 'YYYYMM') and close_yn = 'Y';

      if v_cnt > 0
      then
         raise_application_error (-20001, 'Month ' || to_char (:old.tr_date, 'YYYYMM') || ' has been closed!!!');
      end if;

      -- Cancel --
      select count (*)
        into v_cnt
        from tac_hgtrd
       where tac_hgtrh_pk = :old.pk and del_if = 0 and close_yn = 'Y';

      if v_cnt = 0
      then
         select count (*)
           into v_cnt
           from tac_hgddbal
          where     std_ymd like to_char (:old.tr_date, 'YYYYMM') || '%'
                and tr_status in (0, 2)
                and del_if = 0
                and close_yn = 'Y'
                and tco_company_pk = :old.tco_company_pk;

         if v_cnt > 0
         then
            raise_application_error (
               -20001,
                  'Thang '
               || to_char (:old.tr_date, 'YYYYMM')
               || ' da chay ket chuyen roi. Ban khong the huy bac ky chung tu nao trong thang nay.');
         end if;
      end if;

      -- Check data --
      ac_pro_check_bf_cancel_confirm (:old.pk,
                                      :old.tr_status,
                                      :new.tr_status,
                                      :old.tac_abtrtype_pk,
                                      :old.tco_company_pk);
      -- Update data DEL_IF = PK from TAC_HGTRDITEM --
      ac_del_confirm_tac_hgtrditem (:old.pk, :new.mod_by);
      -- Update data DEL_IF = PK from TAC_MTVAT --
      ac_del_confirm_tac_mtvat (:old.pk,
                                :old.tr_tablenm,
                                :old.tr_table_pk,
                                :new.mod_by,
                                :new.tr_status);

      ac_del_confirm_tac_excise (:old.pk,
                                 :old.tr_tablenm,
                                 :old.tr_table_pk,
                                 :new.mod_by,
                                 :new.tr_status);

      -- Delete data --
      ac_del_confirm (:old.pk,
                      :old.tco_company_pk,
                      :old.tr_date,
                      :new.mod_by);
      -- Cancel TFN_EPPAY --
      ac_upd_confirm_tfn_eppay (:old.pk,
                                :old.tco_company_pk,
                                :old.tr_date,
                                :old.tco_org_pk,
                                :old.tco_bsuser_pk,
                                2,
                                :new.mod_by);
      -- Cancel TAC_CARECV --
      ac_upd_confirm_tac_carecv (:old.pk,
                                 :old.tco_company_pk,
                                 :old.tr_date,
                                 :old.tco_org_pk,
                                 :old.tco_bsuser_pk,
                                 2,
                                 :old.tr_tablenm,
                                 :old.tr_table_pk,
                                 :new.mod_by);

      if :old.tr_tablenm = 'TAC_OMCOST_PRICER'
      then
         update tac_omcost_pricerd
            set tac_hgtrh_pk = null, mod_dt = sysdate, mod_by = :new.mod_by
          where tac_hgtrh_pk = :old.pk;

         update tac_omcost_pricer a
            set a.account_voucher_no = '',
                a.account_seq_no = '',
                a.mod_dt = sysdate,
                a.mod_by = :new.mod_by,
                a.tr_status = 1
          where a.pk in (select b.tac_omcost_pricer_pk
                           from tac_omcost_pricerd b
                          where b.del_if = 0 and b.tac_hgtrh_pk = :old.pk);
      end if;
      
--      --management customer 
--      sp_upd_cf_tac_hgcustplddbal (:OLD.PK,
--                                   :OLD.TCO_COMPANY_PK,
--                                   :old.TR_DATE,
--                                   :NEW.tr_status,
--                                   :NEW.voucherno);
   elsif :new.tr_status = 0 and :new.tr_status <> :old.tr_status
   then                                                                                                             -- Approval --
      -- Check data --
      ac_pro_check_before_update (:old.pk, :old.tac_abtrtype_pk, :old.tco_company_pk);
      -- Delete No Approval --
      ac_del_approval_noapp (:old.pk,
                             :old.tco_company_pk,
                             :old.tr_date,
                             4);
      -- Trans data to TAC_HGDDBAL --
      ac_upd_confirm_tac_hgddbal (:old.pk,
                                  :old.tco_company_pk,
                                  :old.tr_date,
                                  :new.tr_status);
      -- Trans data to TAC_HGDEPODDBAL --
      ac_upd_confirm_tac_hgdepoddbal (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);
      -- Trans data to TAC_HGITEMDDBAL --
      ac_upd_confirm_tac_hgitemddbal (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);
      -- Trans data to TAC_HGPLDDBAL --
      ac_upd_confirm_tac_hgplddbal (:old.pk,
                                    :old.tco_company_pk,
                                    :old.tr_date,
                                    :new.tr_status);
      -- Trans data to TAC_HGCUSTDDBAL --
      ac_upd_confirm_tac_hgcustddbal (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);
      -- Trans data to TAC_MTVAT --
      l_cancel_yn := 'N';

      if :old.tr_tablenm = 'TAC_CRCA'
      then
         select cancel_yn
           into l_cancel_yn
           from tac_crca
          where pk = :old.tr_table_pk;
      end if;

      ac_upd_confirm_tac_mtvat (:old.pk,
                                :old.tco_company_pk,
                                :old.tr_date,
                                :new.tr_status,
                                :old.tac_abtrtype_pk,
                                :new.voucherno,
                                l_cancel_yn,
                                :new.mod_by);

      ac_upd_cf_excise (:old.pk,
                        :old.tco_company_pk,
                        :old.tr_date,
                        :new.tr_status,
                        :old.tac_abtrtype_pk,
                        :new.voucherno,
                        :new.mod_by);
      -- Trans data to TAC_HGEMPDDBAL --
      ac_upd_confirm_tac_hgempddbal (:old.pk,
                                     :old.tco_company_pk,
                                     :old.tr_date,
                                     :new.tr_status);
      -- Trans data to TFN_EPPAY --
      ac_upd_confirm_tfn_eppay (:old.pk,
                                :old.tco_company_pk,
                                to_char (:old.tr_date, 'YYYYMMDD'),
                                :old.tco_org_pk,
                                :old.tco_bsuser_pk,
                                1,
                                :new.mod_by);

      -- Trans data to TFN_EPPAY --
      ac_upd_confirm_tfn_eradv_ven (:old.pk,
                                    :old.tco_company_pk,
                                    to_char (:old.tr_date, 'YYYYMMDD'),
                                    :old.tco_org_pk,
                                    :old.tco_bsuser_pk,
                                    1,
                                    :new.mod_by);
      --9 Trans data to TAC_HGBGDDBAL --
      ac_upd_confirm_tac_hgbgddbal (:old.pk,
                                    :old.tco_company_pk,
                                    :old.tr_date,
                                    :new.tr_status);
                                    
--        --management customer                             
--        sp_upd_cf_tac_hgcustplddbal (:OLD.PK,
--                                   :OLD.TCO_COMPANY_PK,
--                                   :old.TR_DATE,
--                                   :NEW.tr_status,
--                                   :NEW.voucherno);
                                                                     
   elsif :new.tr_status = 4 and :new.tr_status <> :old.tr_status
   then                                                                                                          -- No Approval --
      -- Check data --
      ac_pro_check_before_update (:old.pk, :old.tac_abtrtype_pk, :old.tco_company_pk);
      -- Delete Approval --
      ac_del_approval_noapp (:old.pk,
                             :old.tco_company_pk,
                             :old.tr_date,
                             0);
      -- Trans data to TAC_HGDDBAL --
      ac_upd_confirm_tac_hgddbal (:old.pk,
                                  :old.tco_company_pk,
                                  :old.tr_date,
                                  :new.tr_status);
      -- Trans data to TAC_HGDEPODDBAL --
      ac_upd_confirm_tac_hgdepoddbal (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);
      -- Trans data to TAC_HGITEMDDBAL --
      ac_upd_confirm_tac_hgitemddbal (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);
      -- Trans data to TAC_HGPLDDBAL --
      ac_upd_confirm_tac_hgplddbal (:old.pk,
                                    :old.tco_company_pk,
                                    :old.tr_date,
                                    :new.tr_status);
      -- Trans data to TAC_HGCUSTDDBAL --
      ac_upd_confirm_tac_hgcustddbal (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);
      -- Trans data to TAC_MTVAT --
      l_cancel_yn := 'N';

      if :old.tr_tablenm = 'TAC_CRCA'
      then
         select cancel_yn
           into l_cancel_yn
           from tac_crca
          where pk = :old.tr_table_pk;
      end if;

      ac_upd_confirm_tac_mtvat (:old.pk,
                                :old.tco_company_pk,
                                :old.tr_date,
                                :new.tr_status,
                                :old.tac_abtrtype_pk,
                                :new.voucherno,
                                l_cancel_yn,
                                :new.mod_by);

      ac_upd_cf_excise (:old.pk,
                        :old.tco_company_pk,
                        :old.tr_date,
                        :new.tr_status,
                        :old.tac_abtrtype_pk,
                        :new.voucherno,
                        :new.mod_by);
      -- Trans data to TAC_HGEMPDDBAL --
      ac_upd_confirm_tac_hgempddbal (:old.pk,
                                     :old.tco_company_pk,
                                     :old.tr_date,
                                     :new.tr_status);
      -- No App TFN_EPPAY --
      ac_upd_confirm_tfn_eppay (:old.pk,
                                :old.tco_company_pk,
                                to_char (:old.tr_date, 'YYYYMMDD'),
                                :old.tco_org_pk,
                                :old.tco_bsuser_pk,
                                2,
                                :new.mod_by);
      -- No App TAC_CARECV --
      ac_upd_confirm_tac_carecv (:old.pk,
                                 :old.tco_company_pk,
                                 :old.tr_date,
                                 :old.tco_org_pk,
                                 :old.tco_bsuser_pk,
                                 2,
                                 :old.tr_tablenm,
                                 :old.tr_table_pk,
                                 :new.mod_by);
      -- No App TFN_EPPAY --
      ac_upd_confirm_tfn_eradv_ven (:old.pk,
                                    :old.tco_company_pk,
                                    :old.tr_date,
                                    :old.tco_org_pk,
                                    :old.tco_bsuser_pk,
                                    2,
                                    :new.mod_by);
   elsif :new.tr_status = 5 and :new.tr_status <> :old.tr_status
   then                                                                                                                 -- ifrs --
      -----------------------------Kiem tra xem thang do close hay chua
      v_cnt := 0;

      select count (*)
        into v_cnt
        from tac_icmmclose
       where tco_company_pk = :old.tco_company_pk and del_if = 0 and std_ym = to_char (:old.tr_date, 'YYYYMM') and close_yn = 'Y';

      if v_cnt > 0
      then
         raise_application_error (-20001, 'Month ' || to_char (:old.tr_date, 'YYYYMM') || ' has been closed!!!');
      end if;

      -- Check data --
      if nvl (:old.io_yn, 'N') = 'N'
      then
         --1-----
         ac_pro_check_before_update (:old.pk, :old.tac_abtrtype_pk, :old.tco_company_pk);                                   -- off
         --2 Trans data to TAC_HGDDBAL --
         ac_upd_confirm_tac_hgddbal (:old.pk,
                                     :old.tco_company_pk,
                                     :old.tr_date,
                                     :new.tr_status);                                                                        --off
         --3 Trans data to TAC_HGDEPODDBAL --
         ac_upd_confirm_tac_hgdepoddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --4 Trans data to TAC_HGITEMDDBAL --
         ac_upd_confirm_tac_hgitemddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --5 Trans data to TAC_HGPLDDBAL --
         ac_upd_confirm_tac_hgplddbal (:old.pk,
                                       :old.tco_company_pk,
                                       :old.tr_date,
                                       :new.tr_status);

         --6 Trans data to TAC_HGCUSTDDBAL --
         ac_upd_confirm_tac_hgcustddbal (:old.pk,
                                         :old.tco_company_pk,
                                         :old.tr_date,
                                         :new.tr_status);
         --7 Trans data to TAC_MTVAT --
         l_cancel_yn := 'N';

         if :old.tr_tablenm = 'TAC_CRCA'
         then
            select cancel_yn
              into l_cancel_yn
              from tac_crca
             where pk = :old.tr_table_pk;
         end if;

         ac_upd_confirm_tac_mtvat (:old.pk,
                                   :old.tco_company_pk,
                                   :old.tr_date,
                                   :new.tr_status,
                                   :old.tac_abtrtype_pk,
                                   :new.voucherno,
                                   l_cancel_yn,
                                   :new.mod_by);
         --8 Trans data to TAC_HGEMPDDBAL --
         ac_upd_confirm_tac_hgempddbal (:old.pk,
                                        :old.tco_company_pk,
                                        :old.tr_date,
                                        :new.tr_status);
         --9 Trans data to TAC_HGTRD_REF (khong su dung cho tai khoan ngoai bang)--
         ac_upd_confirm_tac_hgtrd_ref (:old.pk, :new.mod_by);
         --10 Trans data to TAC_HGDDBAL_ST --
         ac_upd_confirm_tac_hgddbal_st (:old.pk,
                                        :old.tco_company_pk,
                                        :old.tr_date,
                                        :new.tr_status);                                                                     --off
         --11 Trans data to TAC_HGDDBAL_LOCAL --
         ac_upd_cf_tac_hgddbal_local (:old.pk,
                                      :old.tco_company_pk,
                                      :old.tr_date,
                                      :new.tr_status);                                                                       --off
         --13 Trans data to TAC_HGBGDDBAL  --
         ac_upd_confirm_tac_hgbgddbal (:old.pk,
                                       :old.tco_company_pk,
                                       :old.tr_date,
                                       :new.tr_status);
      end if;
   end if;
--exception
--   when others
--   then
--      raise_application_error (-20001, sqlerrm);
end ac_tac_hgtrh_trg;
/


DROP TRIGGER HPDQ.AC_TAC_ICMMCLOSE_TRG;

CREATE OR REPLACE TRIGGER HPDQ.AC_TAC_ICMMCLOSE_TRG 
   after insert or update
   ON HPDQ.TAC_ICMMCLOSE
   referencing new as new old as old
   for each row
DISABLE
declare
begin
   if :new.close_yn = 'Y'
   then                                                                                               -- Khoa so --
      if inserting
      then                                                                        -- Truong hop add vao dong moi --
         -- Trans data TAC_HGDDBAL to TAC_HGMMBAL --
         ac_upd_closing_tac_hgmmbal (:new.tco_company_pk,
                                     :new.std_ym,
                                     :new.crt_by,
                                     :new.mod_by);

         -- Trans data mm local
         ac_upd_closing_mmbal_local (:new.tco_company_pk,
                                     :new.std_ym,
                                     :new.crt_by,
                                     :new.mod_by);

         -- Trans data TAC_HGCUSTDDBAL to TAC_HGCUSTMMBAL --
         ac_upd_closing_tac_hgcustmmbal (:new.tco_company_pk,
                                         :new.std_ym,
                                         :new.crt_by,
                                         :new.mod_by);

         -- Trans data TAC_HGITEMDDBAL to TAC_HGITEMMMBAL --
         ac_upd_closing_tac_hgitemmmbal (:new.tco_company_pk,
                                         :new.std_ym,
                                         :new.crt_by,
                                         :new.mod_by);

         -- Trans data TAC_HGPLDDBAL to TAC_HGPLMMBAL --
         ac_upd_closing_tac_hgplmmbal (:new.tco_company_pk,
                                       :new.std_ym,
                                       :new.crt_by,
                                       :new.mod_by);

         -- Trans data TAC_HGDEPODDBAL to TAC_HGDEPOMMBAL --
         ac_upd_closing_tac_hgdepoddbal (:new.tco_company_pk,
                                         :new.std_ym,
                                         :new.crt_by,
                                         :new.mod_by);

         -- Trans data TAC_HGEMPDDBAL to TAC_HGEMPMMBAL --
         ac_upd_closing_tac_hgempmmbal (:new.tco_company_pk,
                                        :new.std_ym,
                                        :new.crt_by,
                                        :new.mod_by);
      elsif updating and :old.close_yn <> 'Y'
      then                                                            -- Truong hop update lai gia tri da co = Y --
         -- Trans data TAC_HGDDBAL to TAC_HGMMBAL --
         ac_upd_closing_tac_hgmmbal (:new.tco_company_pk,
                                     :new.std_ym,
                                     :new.crt_by,
                                     :new.mod_by);

         -- Trans data TAC_HGCUSTDDBAL to TAC_HGCUSTMMBAL --
         ac_upd_closing_tac_hgcustmmbal (:new.tco_company_pk,
                                         :new.std_ym,
                                         :new.crt_by,
                                         :new.mod_by);
         -- Trans data mm local
         ac_upd_closing_mmbal_local (:new.tco_company_pk,
                                     :new.std_ym,
                                     :new.crt_by,
                                     :new.mod_by);
         -- Trans data TAC_HGITEMDDBAL to TAC_HGITEMMMBAL --
         ac_upd_closing_tac_hgitemmmbal (:new.tco_company_pk,
                                         :new.std_ym,
                                         :new.crt_by,
                                         :new.mod_by);

         -- Trans data TAC_HGPLDDBAL to TAC_HGPLMMBAL --
         ac_upd_closing_tac_hgplmmbal (:new.tco_company_pk,
                                       :new.std_ym,
                                       :new.crt_by,
                                       :new.mod_by);

         -- Trans data TAC_HGDEPODDBAL to TAC_HGDEPOMMBAL --
         ac_upd_closing_tac_hgdepoddbal (:new.tco_company_pk,
                                         :new.std_ym,
                                         :new.crt_by,
                                         :new.mod_by);

         -- Trans data TAC_HGEMPDDBAL to TAC_HGEMPMMBAL --
         ac_upd_closing_tac_hgempmmbal (:new.tco_company_pk,
                                        :new.std_ym,
                                        :new.crt_by,
                                        :new.mod_by);
      end if;
   elsif :new.close_yn = 'N' and :old.close_yn = 'Y'
   then                                                                                           -- Huy khoa so --
      -- Delete data --
      ac_del_closing_cancel (:new.tco_company_pk, :new.std_ym);
   end if;
end;
/


DROP TRIGGER HPDQ.AC_TR_UPD_TAC_CRDA;

CREATE OR REPLACE TRIGGER HPDQ.AC_TR_UPD_TAC_CRDA 
   before update
   ON HPDQ.TAC_CRDA    referencing new as new old as old
   for each row
DISABLE
declare
   v_temp              number;
   v_trhpk             tac_hgtrh.pk%type;
   v_buspart_nm        tco_buspartner.partner_name%type;
   l_cust_charger_nm   tco_buspartner.partner_name%type;
   l_vat_custom_nm     tco_buspartner.partner_name%type;
   l_cnt               number (5);
   l_tin_stocktr_pk    number;
   l_rtn_msg           varchar2 (255);
begin
   if (:old.aptr_type = 'DO' or :old.aptr_type = 'OR')
   then
      if (:new.tr_status = 2) and (:new.tr_status <> :old.tr_status)
      then                                                                                                           -- Confirm --
         -- Check Data --
         ac_pro_check_upd_tac_crda (:old.tco_company_pk,
                                    :old.pk,
                                    :old.tr_date,
                                    :old.tac_abacctcode_pk,
                                    :old.tco_buspartner_pk,
                                    :old.storage_famt,
                                    :old.storage_amt,
                                    :old.ap_tax,
                                    :old.aptr_type);

         -- Get Partner name --
         select partner_name
           into v_buspart_nm
           from tco_buspartner
          where del_if = 0 and pk = :old.tco_buspartner_pk;

         select max (partner_name)
           into l_cust_charger_nm
           from tco_buspartner
          where pk = :old.tco_buspartner_pk_ap;

         -- Trans data from TAC_CRDA to TAC_HGTRH --
         ac_pro_tac_crda_confirm (:old.tco_company_pk,
                                  :old.pk,
                                  :old.tr_date,
                                  :old.remark,
                                  :old.remark2,
                                  :old.tac_abtrtype_pk,
                                  :old.tr_ccy,
                                  :old.tr_rate,
                                  :old.ap_tax,
                                  :old.ap_vatfamt,
                                  :old.ap_vatamt,
                                  :old.tac_abacctcode_pk,
                                  :old.tco_buspartner_pk,
                                  v_buspart_nm,
                                  :old.storage_famt,
                                  :old.storage_amt,
                                  :new.voucherno,
                                  :old.voucher_type,
                                  :new.tr_seq,
                                  :new.auto_yn,
                                  :old.tco_org_pk,
                                  :old.ap_amt,
                                  :old.ap_tax,
                                  :old.tco_buspartner_pk_ap,
                                  l_cust_charger_nm,
                                  :old.bk_rate,
                                  :old.exp_allocate_famt,
                                  :old.exp_allocate_amt,
                                  :new.mod_by);

         for cur in (select *
                       from tac_crdad
                      where del_if = 0 and tac_crda_pk = :old.pk and ap_cost_yn = 'Y')
         loop
            if cur.tac_crdad_other_pk is not null
            then
               select count (pk)
                 into l_cnt
                 from tac_stocktr
                where     tr_status in ('2', '0')
                      and del_if = 0
                      and tr_table_nm = 'TAC_CRDAD_OTHER'
                      and tr_table_pk = cur.tac_crdad_other_pk;

               if l_cnt = 0
               then
                  ac_upd_stocktr_in ('INSERT',
                                     :new.voucherno,
                                     :old.tr_date,
                                     null,
                                     :old.tco_buspartner_pk,
                                     cur.TAC_ABPL_PK,
                                     cur.tlg_in_warehouse_pk,
                                     cur.tlg_it_item_pk,
                                     cur.ap_unit,
                                     cur.tac_abacctcode_pk,
                                     '10',
                                     cur.ap_qty,
                                     nvl (cur.ap_tramt, 0) + nvl (cur.imp_amt, 0),
                                     :old.tr_ccy,
                                     nvl (cur.ap_trfamt, 0) + nvl (cur.imp_famt, 0),
                                     'TAC_CRDAD',
                                     cur.pk,
                                     cur.remark,
                                     cur.remark2,
                                     cur.remark2,
                                     cur.ap_uprice,
                                     '2',
                                     null,
                                     substr (:old.tr_date, 1, 6),
                                     :old.tco_company_pk,
                                     :old.crt_by);
               end if;
            else
               ac_upd_stocktr_in ('INSERT',
                                  :new.voucherno,
                                  :old.tr_date,
                                  null,
                                  :old.tco_buspartner_pk,
                                  cur.TAC_ABPL_PK,
                                  cur.tlg_in_warehouse_pk,
                                  cur.tco_item_pk,
                                  cur.ap_unit,
                                  cur.tac_abacctcode_pk,
                                  '10',
                                  cur.ap_qty,
                                  nvl (cur.ap_tramt, 0) + nvl (cur.imp_amt, 0),
                                  :old.tr_ccy,
                                  nvl (cur.ap_trfamt, 0) + nvl (cur.imp_famt, 0),
                                  'TAC_CRDAD',
                                  cur.pk,
                                  cur.remark,
                                  cur.remark2,
                                  cur.remark2,
                                  cur.ap_uprice,
                                  '2',
                                  null,
                                  substr (:old.tr_date, 1, 6),
                                  :old.tco_company_pk,
                                  :old.crt_by);
            end if;
         end loop;
      elsif (:new.tr_status = 3) and (:new.tr_status <> :old.tr_status)
      then                                                                                                            -- Cancel --
         select pk
           into v_trhpk
           from tac_hgtrh
          where tr_table_pk = :old.pk and tr_tablenm = 'TAC_CRDA'                               --AND TR_STATUS      IN ('2', '0')
                                                                 and tco_company_pk = :old.tco_company_pk;

         -- Delete from TAC_HGTRH --
         ac_pro_ctl_mst_confirm_cancel (v_trhpk,
                                        :old.tco_company_pk,
                                        :new.cancel_remark,
                                        'TAC_CRDA',
                                        :new.mod_by,
                                        v_temp);
         -- Delete from TAC_STOCKTR --
         ac_upd_confirm_tac_stocktr ('DELETE',
                                     :old.tco_company_pk,
                                     :old.pk,
                                     :new.voucherno,
                                     :old.tr_date,
                                     :old.tco_buspartner_pk,
                                     :old.tr_ccy,
                                     :new.mod_by);
      end if;
   elsif (:old.aptr_type = 'OS')
   then
      if (:new.tr_status = 2) and (:new.tr_status <> :old.tr_status)
      then
         -- check trans date close or not
         select count (*)
           into l_cnt
           from tac_stockdd
          where std_ym = :old.tr_date and tco_company_pk = :old.tco_company_pk and close_yn = 'Y' and del_if = 0;

         if l_cnt > 0
         then
            raise_application_error (-20999, 'The date ' || :old.tr_date || ' has been closed !!!');
         end if;

         -- Get Partner name --
         select partner_name
           into v_buspart_nm
           from tco_buspartner
          where del_if = 0 and pk = :old.tco_buspartner_pk;

         select max (partner_name)
           into l_cust_charger_nm
           from tco_buspartner
          where pk = :old.tco_buspartner_pk_ap;

         select max (partner_lname)
           into l_vat_custom_nm
           from tco_buspartner
          where pk = :old.tco_buspartner_pk_vat;

         ac_pro_tac_crda_confirm_os (:old.tco_company_pk,
                                     :old.pk,
                                     :old.tr_date,
                                     :old.remark,
                                     :old.remark2,
                                     :old.tac_abtrtype_pk,
                                     :old.tr_ccy,
                                     :old.tr_rate,
                                     :old.ap_tax,
                                     :old.ap_vatfamt,
                                     :old.ap_vatamt,
                                     :old.tac_abacctcode_pk,
                                     :old.tco_buspartner_pk,                                                         -------Vendor
                                     v_buspart_nm,                                                              -------Vendor Name
                                     :old.storage_famt,
                                     :old.storage_amt,
                                     :new.voucherno,
                                     :new.voucher_type,
                                     :new.tr_seq,
                                     :new.auto_yn,
                                     :old.tco_org_pk,
                                     :old.ap_amt,
                                     :old.ap_tax,
                                     :old.tco_buspartner_pk,                                                         -------Vendor
                                     v_buspart_nm,                                                              -------Vendor Name
                                     :old.bk_rate,
                                     :old.tco_buspartner_pk_vat,                                                 -- Customs Office
                                     l_vat_custom_nm,                                                       -- Customs Office Name
                                     :new.mod_by);

         /*SP_PRO_TAC_CRDA_OS_DIFFQTY(
                 :OLD.TCO_COMPANY_PK,
                 :OLD.PK,
                 :OLD.TR_DATE,
                 :OLD.REMARK,
                 :OLD.REMARK2,
                 :OLD.TAC_ABTRTYPE_PK,
                 :OLD.TR_CCY,
                 :OLD.TR_RATE,
                 :OLD.TAC_ABACCTCODE_PK,
                 :OLD.TCO_BUSPARTNER_PK,
                 v_buspart_nm,
                 :NEW.VOUCHERNO,
                 :OLD.VOUCHER_TYPE,
                 :NEW.TR_SEQ,
                 :OLD.AUTO_YN,
                 :OLD.TCO_ORG_PK,
                 :OLD.AP_TAX,
                 :OLD.TCO_BUSPARTNER_PK_AP,
                 l_cust_charger_nm,
                 :OLD.BK_RATE,
                 :OLD.TCO_BUSPARTNER_PK_VAT,
                 l_vat_custom_nm,
                 :OLD.ADV_AMT,
                 :OLD.DECLARE_NO,
                 :NEW.CRT_BY);
                 */
         -- Trans data from TAC_CRDA to TAC_STOCKTR --

         for cur in (select *
                       from tac_crdad
                      where del_if = 0 and tac_crda_pk = :old.pk and ap_cost_yn = 'Y')
         loop
            ac_upd_stocktr_in ('INSERT',
                               :new.voucherno,
                               :old.tr_date,
                               null,
                               :old.tco_buspartner_pk,
                               cur.TAC_ABPL_PK,
                               cur.tlg_in_warehouse_pk,
                               cur.tlg_it_item_pk,
                               cur.ap_unit,
                               cur.tac_abacctcode_pk,
                               '10',
                               cur.ap_qty,
                               nvl (cur.ap_tramt, 0) + nvl (cur.imp_amt, 0),
                               :old.tr_ccy,
                               nvl (cur.ap_trfamt, 0) + nvl (cur.imp_famt, 0),
                               'TAC_CRDAD',
                               cur.pk,
                               cur.remark,
                               cur.remark2,
                               cur.remark2,
                               cur.ap_uprice,
                               '2',
                               null,
                               substr (:old.tr_date, 1, 6),
                               :old.tco_company_pk,
                               :old.crt_by);
         end loop;
      elsif (:new.tr_status = 3) and (:new.tr_status <> :old.tr_status)
      then                                                                                                            -- Cancel --
         select max (pk)
           into v_trhpk
           from tac_hgtrh
          where tr_table_pk = :old.pk and tr_tablenm = 'TAC_CRDA'                               --AND TR_STATUS      IN ('2', '0')
                                                                 and tco_company_pk = :old.tco_company_pk;

         -- Delete from TAC_HGTRH --
         ac_pro_ctl_mst_confirm_cancel (v_trhpk,
                                        :old.tco_company_pk,
                                        :new.cancel_remark,
                                        'TAC_CRDA',
                                        :new.mod_by,
                                        v_temp);
         -- Delete from TAC_STOCKTR --
         ac_upd_confirm_tac_stocktr ('DELETE',
                                     :old.tco_company_pk,
                                     :old.pk,
                                     :new.voucherno,
                                     :old.tr_date,
                                     :old.tco_buspartner_pk,
                                     :old.tr_ccy,
                                     :new.mod_by);

         ----------------------TAC_STOCKTR_DIFFQTY
         update tac_stocktr_diffqty
            set del_if = pk
          where     tr_table_nm = 'TAC_CRDAD'
                and tr_table_pk in (select pk
                                      from tac_crdad
                                     where tac_crda_pk = :old.pk and del_if = 0);
      end if;
   end if;

   -- Delete
   if :new.del_if = :old.pk and :old.del_if = 0
   then
      for cur_d in (select d.pk, d.tac_mattakein_ap_pk, d.tac_crdad_other_pk
                      from tac_crdad d
                     where d.del_if = 0 and d.tac_crda_pk = :old.pk)
      loop
         update tac_crdad
            set del_if = pk, mod_by = :new.crt_by, mod_dt = sysdate
          where pk = cur_d.pk;

         --                                    if cur_d.tac_mattakein_ap_pk is not null then
         --                                        update  tin_stocktr t
         --                                        set t.acc_get_yn = 'N'
         --                                        where  t.pk in (
         --                                            select tin_stocktr_pk from tac_mattakein_ap where pk = cur_d.tac_mattakein_ap_pk
         --                                        );
         --                                        delete from tac_mattakein_ap where pk = cur_d.tac_mattakein_ap_pk ;
         --                                    end if;
         if cur_d.tac_crdad_other_pk is not null
         then
            update tac_crdad_other t
               set t.slip_yn = 'N'
             where t.pk = cur_d.tac_crdad_other_pk;
         end if;

         sp_pro_eppay_2 (:old.pk, :new.crt_by, l_rtn_msg);
      end loop;
   end if;
--exception
--   when others
--   then
--      raise_application_error (-20001, sqlerrm);
end;
/


DROP TRIGGER HPDQ.GW_TRG_TCO_BUSPARTNER_LOG;

CREATE OR REPLACE TRIGGER HPDQ.GW_TRG_TCO_BUSPARTNER_LOG 
before delete or update
ON HPDQ.TCO_BUSPARTNER
referencing new as new old as old
for each row
declare
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/17/2011      Nguyen Van Thai       1. Created this trigger.

******************************************************************************/
begin
   insert into tco_buspartner_log(pk,
                                  parent_pk,
                                  tco_company_pk,
                                  partner_id,
                                  partner_name,
                                  partner_lname,
                                  partner_fname,
                                  partner_type,
                                  tax_code,
                                  addr1,
                                  addr2,
                                  addr3,
                                  phone_no,
                                  email_address,
                                  fax_no,
                                  web_site,
                                  company_yn,
                                  cust_yn,
                                  cust_active_yn,
                                  invoice_terms,
                                  invoice_schedule,
                                  invoice_grouping,
                                  delivery_terms,
                                  cust_trade_type,
                                  cust_payment_form,
                                  cust_payment_temrs,
                                  sale_presentative,
                                  credit_limit,
                                  credit_used,
                                  cust_bank_account,
                                  sale_default_tax,
                                  ven_yn,
                                  ven_active_yn,
                                  ven_payment_form,
                                  ven_payment_terms,
                                  ven_bank_account,
                                  pur_default_tax,
                                  ven_trade_type,
                                  emp_active_yn,
                                  emp_represent_yn,
                                  trans_currency,
                                  nation,
                                  active_yn,
                                  anniversary_date,
                                  number_employee,
                                  company_size,
                                  company_capital,
                                  company_industy,
                                  company_product,
                                  tax_office,
                                  valid_from,
                                  valid_to,
                                  description,
                                  del_if,
                                  crt_by,
                                  crt_dt,
                                  mod_by,
                                  mod_dt,
                                  tco_bpphoto_pk,
                                  serial_no,
                                  short_nm,
                                  form_no,
                                  voucher_type,
                                  auto_yn,
                                  t_seq,
                                  cus_swift_no,
                                  represented_by,
                                  ven_swift_no,
                                  memo,
                                  tco_buspartner_pk)
        values (tco_buspartner_log_seq.nextval,
                :old.parent_pk,
                :old.tco_company_pk,
                :old.partner_id,
                :old.partner_name,
                :old.partner_lname,
                :old.partner_fname,
                :old.partner_type,
                :old.tax_code,
                :old.addr1,
                :old.addr2,
                :old.addr3,
                :old.phone_no,
                :old.email_address,
                :old.fax_no,
                :old.web_site,
                :old.company_yn,
                :old.cust_yn,
                :old.cust_active_yn,
                :old.invoice_terms,
                :old.invoice_schedule,
                :old.invoice_grouping,
                :old.delivery_terms,
                :old.cust_trade_type,
                :old.cust_payment_form,
                :old.cust_payment_temrs,
                :old.sale_presentative,
                :old.credit_limit,
                :old.credit_used,
                :old.cust_bank_account,
                :old.sale_default_tax,
                :old.ven_yn,
                :old.ven_active_yn,
                :old.ven_payment_form,
                :old.ven_payment_terms,
                :old.ven_bank_account,
                :old.pur_default_tax,
                :old.ven_trade_type,
                :old.emp_active_yn,
                :old.emp_represent_yn,
                :old.trans_currency,
                :old.nation,
                :old.active_yn,
                :old.anniversary_date,
                :old.number_employee,
                :old.company_size,
                :old.company_capital,
                :old.company_industy,
                :old.company_product,
                :old.tax_office,
                :old.valid_from,
                :old.valid_to,
                :old.description,
                :old.del_if,
                :old.crt_by,
                :old.crt_dt,
                :old.mod_by,
                :old.mod_dt,
                :old.tco_bpphoto_pk,
                :old.serial_no,
                :old.short_nm,
                :old.form_no,
                :old.voucher_type,
                :old.auto_yn,
                :old.t_seq,
                :old.cus_swift_no,
                :old.represented_by,
                :old.ven_swift_no,
                :old.memo,
                :old.pk);
end gw_trg_tco_buspartner_log;
/


DROP TRIGGER HPDQ.HR_MONTH_SALARY;

CREATE OR REPLACE TRIGGER HPDQ.HR_MONTH_SALARY 
AFTER DELETE
ON HPDQ.THR_MONTH_SALARY 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DISABLE
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_MONTH_SALARY
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/10/2010             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_MONTH_SALARY
      Sysdate:         6/10/2010
      Date and Time:   6/10/2010, 4:38:22 PM, and 6/10/2010 4:38:22 PM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_MONTH_SALARY (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   INSERT INTO THR_MONTH_SALARY_HIS
   (PK, THR_EMP_PK, EMP_ID, FULL_NAME, EMPLOYEE_TYPE, JOIN_DT, LEFT_DT, STATUS, ALE_DAY_IN_YEAR, SALARY_YN
   , OT_YN, TAC_ABPL_PK, ACCOUNT, BANK_TYPE, BANK_NM, PAY_TYPE, POS_TYPE, POS_NM, PROBATION_STATUS, TABLE_SALARY_PK
   , SALARY_LEVEL1, SALARY_LEVEL2, THR_GROUP_PK, THR_GROUP_NM, THR_GROUP_KNM, THR_GROUP_FNM, TCO_DEPT_PK, DEPT_NM
   , DEPT_KNM, DEPT_FNM, WORK_MON, FROM_DT, TO_DT, ALLOW_AMT1, ALLOW_AMT2, ALLOW_AMT3, ALLOW_AMT4, ALLOW_AMT5, ALLOW_AMT6
   , ALLOW_AMT7, ALLOW_AMT8, ALLOW_K1_AMT, ALLOW_K2_AMT, ALLOW_K3_AMT, ALLOW_K4_AMT, ALLOW_K5_AMT, ALLOW_K6_AMT, ALLOW_K7_AMT
   , ALLOW_K8_AMT, WT_L2, WT_L2_AMT, WT_L1, WT_L1_AMT, OT_L2, OT_L2_AMT, OT_L1, OT_L1_AMT, ST_L2, ST_L2_AMT, ST_L1, ST_L1_AMT
   , HT_L2, HT_L2_AMT, NT_30_L2, NT_30_L2_AMT, NT_30_L1, NT_30_L1_AMT, NT_45_L2, NT_45_L2_AMT, NT_45_L1, NT_45_L1_AMT, NT_60_L2
   , NT_60_L2_AMT, NT_60_L1, NT_60_L1_AMT, NT_90_L1, NT_90_L1_AMT, NT_90_L2, NT_90_L2_AMT, TOTAL_OT_L1, TOTAL_OT_L1_AMT
   , TOTAL_OT_L2, TOTAL_OT_L2_AMT, TOTAL_ABS_PAY_L1, TOTAL_ABS_PAY_L1_AMT, TOTAL_ABS_PAY_L2, TOTAL_ABS_PAY_L2_AMT
   , TOTAL_ABS_NPAY_L1, TOTAL_ABS_NPAY_L2, ALE_PIT, ALE_PIT_AMT, ALE_STOP, ALE_STOP_AMT, HOL_DAY_L2, HOL_DAY_L2_AMT
   , HOL_DAY_L1, HOL_DAY_L1_AMT, SEVERANCE_MONTH, SEVERANCE_AMT, AVERAGE_SAL, RETURN_AMT, ADVANCE_AMT, INC_AMT
   , GROSS_AMT, INCOME_AMT, INCOME_TAX, SOCIAL_AMT, HEALTH_AMT, UNION_AMT, DAYS_IN_MONTH, NET_AMT, CLOSE_YN, CLOSE_DT
   , REMARK, DEL_IF, MOD_BY, MOD_DT, CRT_BY, CRT_DT, CONFIRM_DT, RECIEVE_NET_YN, SAL_WITH_WT_L1, SAL_WITH_WT_L2
   , SAL_WITH_OT_L1, SAL_WITH_OT_L2, LOCATION_DEPT_PK, MONEY_KIND, NET_VND, EXCHANGE_RATE, HT_L1, HT_L1_AMT
   , BREAK_CONTRACT_AMT, BREAK_CONTRACT_DAYS, ABS_ALE_L1, ABS_ALE_L1_AMT, ABS_OTHER_PAY_L1, ABS_OTHER_PAY_L2
   , ABS_OTHER_PAY_L1_AMT, ABS_OTHER_PAY_L2_AMT, ABS_ALE_L2, ABS_ALE_L2_AMT, INS_PRO_DAY, INS_PRO_AMT, NATION
   , HEALTH_COM_NET, SOCIAL_COM_NET, INCOME_TAX_NET, HEALTH_COMPANY, SOCIAL_COMPANY, INCOME_BEFORE_TAX, RETURN_NO_PIT
   , ADVANCE_NO_PIT, REMAIN_ALE_DAYS, NUMBER_OF_SHIFT, OT_TAX_L1, OT_TAX_L1_AMT, OT_TAX_L2, OT_TAX_L2_AMT, ALLOW_AMT1_L1
   , ALLOW_AMT2_L1, ALLOW_AMT3_L1, ALLOW_AMT4_L1, ALLOW_AMT5_L1, ALLOW_AMT6_L1, ALLOW_AMT7_L1, ALLOW_AMT8_L1, ALLOW_AMT1_L2
   , ALLOW_AMT2_L2, ALLOW_AMT3_L2, ALLOW_AMT4_L2, ALLOW_AMT5_L2, ALLOW_AMT6_L2, ALLOW_AMT7_L2, ALLOW_AMT8_L2, UNEMP_INS
   , UNEMP_COM_INS, FAMILY_DEPEND, DEDUCT_PIT, OHT_L2, OHT_L2_AMT, OHT_L1, OHT_L1_AMT, LAST_PIT_AMT, LAST_PIT_AMT_NET
   , NET_SALARY_YN, TAX_PAYER_AMT, FAMILY_DEPEND_AMT, UNEMP_INS_NET, HEALTH_YN, SOCIAL_YN, HEALTH_CARD_AMT, NON_WORKING_DAY
   , NON_WORKING_DAY_AMT, UNEMP_YN, COST_GROUP, SALARY_L1_K1, COST_KIND, SALARY_L1_K2, SALARY_L1_K3, SALARY_L2_K1, SALARY_L2_K2
   , SALARY_L2_K3, INCENTIVE_02, TOTAL_HOUR_L2, TOTAL_HOUR_L1, TOTAL_HOUR_L1_AMT, TOTAL_HOUR_L2_AMT, WORK_PAYMENT
   , ADDITION_PAYMENT, CRANE_PAYMENT, SALARY_SI, SALARY_HI, STAND_OFF_HOUR, STAND_PRO_HOUR, MONTH_OT_L1, MONTH_OT_L2
   , MONTH_OT_L1_AMT, MONTH_OT_L2_AMT, REFUNDING_BIZ, ADVANCE_HOUSING, HOUSING_FEE, MEAL, ABS_TRAINING_L1, ABS_TRAINING_L1_AMT
   , ABS_TRAINING_L2, ABS_TRAINING_L2_AMT, ABS_BIZ_L1, ABS_BIZ_L1_AMT, ABS_BIZ_L2, ABS_BIZ_L2_AMT, ABS_DUTY_L1, ABS_DUTY_L1_AMT
   , ABS_DUTY_L2, ABS_DUTY_L2_AMT, ABS_LA_L1, ABS_LA_L1_AMT, ABS_LA_L2, ABS_LA_L2_AMT, ABS_WED_FUN_L1, ABS_WED_FUN_L1_AMT
   , ABS_WED_FUN_L2, ABS_WED_FUN_L2_AMT, ABS_PLUS_L1, ABS_PLUS_L2, HOL_ACTUAL_L1, HOL_ACTUAL_L2, JOB_TYPE, JOB_NM
   , TOTAL_ABS_PER_L2, TOTAL_ABS_PER_L1, OST_L1, OST_L1_AMT, OST_L2, OST_L2_AMT, SALARY_TYPE, TIMES, CLOSE_M_YN
   , ABS_NON_PERMISSION, MEAL_NO_PIT, EQUIP1_AMT, EQUIP2_AMT, EQUIP3_AMT, EQUIP4_AMT, EQUIP5_AMT, EQUIP6_AMT, EQUIP7_AMT
   , EQUIP8_AMT, GRADE_CD, BAND_CD, BAND_DT, NUM_TMP1, ADV_HEALTH, ADV_SOCIAL, ADV_UNEMP_INS, POSITION_DT, MEAL_COMPANY
   , BUSSINESS_FEE, BONUS_YEARLY_AMT, WT_TMP_L1, WT_TMP_L2, EMPLOYEE_KIND_PK, WORKING_PLACE, ADVANCE_AMT2, MEAL_MINUS
   , TAX_YN, ALLOW_OF_OT, NOXIOUS_YN, OIL_YN, MEAL_YN, ALE_YN, BANK_BRANCH, SITE_YN, POSITION_YN, TECHNICAL_YN, TOTAL_AMT1
   , TOTAL_AMT2, ADVANCE_TICKET, NUM_TMP4, PHONE_DEDUCT, NUM_TMP3, NUM_TMP2, INCOME_AMT_2, OLD_ID, ABS_MAKE_UP_L1
   , ABS_MAKE_UP_L2, ABS_MAKE_UP_L1_AMT, ABS_MAKE_UP_L2_AMT, TCO_COMPANY_PK)
   VALUES
   (THR_MONTH_SALARY_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.EMP_ID, :OLD.FULL_NAME, :OLD.EMPLOYEE_TYPE, :OLD.JOIN_DT, :OLD.LEFT_DT, :OLD.STATUS, :OLD.ALE_DAY_IN_YEAR, :OLD.SALARY_YN
   , :OLD.OT_YN, :OLD.TAC_ABPL_PK, :OLD.ACCOUNT, :OLD.BANK_TYPE, :OLD.BANK_NM, :OLD.PAY_TYPE, :OLD.POS_TYPE, :OLD.POS_NM, :OLD.PROBATION_STATUS, :OLD.TABLE_SALARY_PK
   , :OLD.SALARY_LEVEL1, :OLD.SALARY_LEVEL2, :OLD.THR_GROUP_PK, :OLD.THR_GROUP_NM, :OLD.THR_GROUP_KNM, :OLD.THR_GROUP_FNM, :OLD.TCO_DEPT_PK, :OLD.DEPT_NM
   , :OLD.DEPT_KNM, :OLD.DEPT_FNM, :OLD.WORK_MON, :OLD.FROM_DT, :OLD.TO_DT, :OLD.ALLOW_AMT1, :OLD.ALLOW_AMT2, :OLD.ALLOW_AMT3, :OLD.ALLOW_AMT4, :OLD.ALLOW_AMT5, :OLD.ALLOW_AMT6
   , :OLD.ALLOW_AMT7, :OLD.ALLOW_AMT8, :OLD.ALLOW_K1_AMT, :OLD.ALLOW_K2_AMT, :OLD.ALLOW_K3_AMT, :OLD.ALLOW_K4_AMT, :OLD.ALLOW_K5_AMT, :OLD.ALLOW_K6_AMT, :OLD.ALLOW_K7_AMT
   , :OLD.ALLOW_K8_AMT, :OLD.WT_L2, :OLD.WT_L2_AMT, :OLD.WT_L1, :OLD.WT_L1_AMT, :OLD.OT_L2, :OLD.OT_L2_AMT, :OLD.OT_L1, :OLD.OT_L1_AMT, :OLD.ST_L2, :OLD.ST_L2_AMT, :OLD.ST_L1, :OLD.ST_L1_AMT
   , :OLD.HT_L2, :OLD.HT_L2_AMT, :OLD.NT_30_L2, :OLD.NT_30_L2_AMT, :OLD.NT_30_L1, :OLD.NT_30_L1_AMT, :OLD.NT_45_L2, :OLD.NT_45_L2_AMT, :OLD.NT_45_L1, :OLD.NT_45_L1_AMT, :OLD.NT_60_L2
   , :OLD.NT_60_L2_AMT, :OLD.NT_60_L1, :OLD.NT_60_L1_AMT, :OLD.NT_90_L1, :OLD.NT_90_L1_AMT, :OLD.NT_90_L2, :OLD.NT_90_L2_AMT, :OLD.TOTAL_OT_L1, :OLD.TOTAL_OT_L1_AMT
   , :OLD.TOTAL_OT_L2, :OLD.TOTAL_OT_L2_AMT, :OLD.TOTAL_ABS_PAY_L1, :OLD.TOTAL_ABS_PAY_L1_AMT, :OLD.TOTAL_ABS_PAY_L2, :OLD.TOTAL_ABS_PAY_L2_AMT
   , :OLD.TOTAL_ABS_NPAY_L1, :OLD.TOTAL_ABS_NPAY_L2, :OLD.ALE_PIT, :OLD.ALE_PIT_AMT, :OLD.ALE_STOP, :OLD.ALE_STOP_AMT, :OLD.HOL_DAY_L2, :OLD.HOL_DAY_L2_AMT
   , :OLD.HOL_DAY_L1, :OLD.HOL_DAY_L1_AMT, :OLD.SEVERANCE_MONTH, :OLD.SEVERANCE_AMT, :OLD.AVERAGE_SAL, :OLD.RETURN_AMT, :OLD.ADVANCE_AMT, :OLD.INC_AMT
   , :OLD.GROSS_AMT, :OLD.INCOME_AMT, :OLD.INCOME_TAX, :OLD.SOCIAL_AMT, :OLD.HEALTH_AMT, :OLD.UNION_AMT, :OLD.DAYS_IN_MONTH, :OLD.NET_AMT, :OLD.CLOSE_YN, :OLD.CLOSE_DT
   , :OLD.REMARK, :OLD.DEL_IF, NULL, NULL, NVL(:NEW.MOD_BY,:NEW.CRT_BY), SYSDATE, :OLD.CONFIRM_DT, :OLD.RECIEVE_NET_YN, :OLD.SAL_WITH_WT_L1, :OLD.SAL_WITH_WT_L2
   , :OLD.SAL_WITH_OT_L1, :OLD.SAL_WITH_OT_L2, :OLD.LOCATION_DEPT_PK, :OLD.MONEY_KIND, :OLD.NET_VND, :OLD.EXCHANGE_RATE, :OLD.HT_L1, :OLD.HT_L1_AMT
   , :OLD.BREAK_CONTRACT_AMT, :OLD.BREAK_CONTRACT_DAYS, :OLD.ABS_ALE_L1, :OLD.ABS_ALE_L1_AMT, :OLD.ABS_OTHER_PAY_L1, :OLD.ABS_OTHER_PAY_L2
   , :OLD.ABS_OTHER_PAY_L1_AMT, :OLD.ABS_OTHER_PAY_L2_AMT, :OLD.ABS_ALE_L2, :OLD.ABS_ALE_L2_AMT, :OLD.INS_PRO_DAY, :OLD.INS_PRO_AMT, :OLD.NATION
   , :OLD.HEALTH_COM_NET, :OLD.SOCIAL_COM_NET, :OLD.INCOME_TAX_NET, :OLD.HEALTH_COMPANY, :OLD.SOCIAL_COMPANY, :OLD.INCOME_BEFORE_TAX, :OLD.RETURN_NO_PIT
   , :OLD.ADVANCE_NO_PIT, :OLD.REMAIN_ALE_DAYS, :OLD.NUMBER_OF_SHIFT, :OLD.OT_TAX_L1, :OLD.OT_TAX_L1_AMT, :OLD.OT_TAX_L2, :OLD.OT_TAX_L2_AMT, :OLD.ALLOW_AMT1_L1
   , :OLD.ALLOW_AMT2_L1, :OLD.ALLOW_AMT3_L1, :OLD.ALLOW_AMT4_L1, :OLD.ALLOW_AMT5_L1, :OLD.ALLOW_AMT6_L1, :OLD.ALLOW_AMT7_L1, :OLD.ALLOW_AMT8_L1, :OLD.ALLOW_AMT1_L2
   , :OLD.ALLOW_AMT2_L2, :OLD.ALLOW_AMT3_L2, :OLD.ALLOW_AMT4_L2, :OLD.ALLOW_AMT5_L2, :OLD.ALLOW_AMT6_L2, :OLD.ALLOW_AMT7_L2, :OLD.ALLOW_AMT8_L2, :OLD.UNEMP_INS
   , :OLD.UNEMP_COM_INS, :OLD.FAMILY_DEPEND, :OLD.DEDUCT_PIT, :OLD.OHT_L2, :OLD.OHT_L2_AMT, :OLD.OHT_L1, :OLD.OHT_L1_AMT, :OLD.LAST_PIT_AMT, :OLD.LAST_PIT_AMT_NET
   , :OLD.NET_SALARY_YN, :OLD.TAX_PAYER_AMT, :OLD.FAMILY_DEPEND_AMT, :OLD.UNEMP_INS_NET, :OLD.HEALTH_YN, :OLD.SOCIAL_YN, :OLD.HEALTH_CARD_AMT, :OLD.NON_WORKING_DAY
   , :OLD.NON_WORKING_DAY_AMT, :OLD.UNEMP_YN, :OLD.COST_GROUP, :OLD.SALARY_L1_K1, :OLD.COST_KIND, :OLD.SALARY_L1_K2, :OLD.SALARY_L1_K3, :OLD.SALARY_L2_K1, :OLD.SALARY_L2_K2
   , :OLD.SALARY_L2_K3, :OLD.INCENTIVE_02, :OLD.TOTAL_HOUR_L2, :OLD.TOTAL_HOUR_L1, :OLD.TOTAL_HOUR_L1_AMT, :OLD.TOTAL_HOUR_L2_AMT, :OLD.WORK_PAYMENT
   , :OLD.ADDITION_PAYMENT, :OLD.CRANE_PAYMENT, :OLD.SALARY_SI, :OLD.SALARY_HI, :OLD.STAND_OFF_HOUR, :OLD.STAND_PRO_HOUR, :OLD.MONTH_OT_L1, :OLD.MONTH_OT_L2
   , :OLD.MONTH_OT_L1_AMT, :OLD.MONTH_OT_L2_AMT, :OLD.REFUNDING_BIZ, :OLD.ADVANCE_HOUSING, :OLD.HOUSING_FEE, :OLD.MEAL, :OLD.ABS_TRAINING_L1, :OLD.ABS_TRAINING_L1_AMT
   , :OLD.ABS_TRAINING_L2, :OLD.ABS_TRAINING_L2_AMT, :OLD.ABS_BIZ_L1, :OLD.ABS_BIZ_L1_AMT, :OLD.ABS_BIZ_L2, :OLD.ABS_BIZ_L2_AMT, :OLD.ABS_DUTY_L1, :OLD.ABS_DUTY_L1_AMT
   , :OLD.ABS_DUTY_L2, :OLD.ABS_DUTY_L2_AMT, :OLD.ABS_LA_L1, :OLD.ABS_LA_L1_AMT, :OLD.ABS_LA_L2, :OLD.ABS_LA_L2_AMT, :OLD.ABS_WED_FUN_L1, :OLD.ABS_WED_FUN_L1_AMT
   , :OLD.ABS_WED_FUN_L2, :OLD.ABS_WED_FUN_L2_AMT, :OLD.ABS_PLUS_L1, :OLD.ABS_PLUS_L2, :OLD.HOL_ACTUAL_L1, :OLD.HOL_ACTUAL_L2, :OLD.JOB_TYPE, :OLD.JOB_NM
   , :OLD.TOTAL_ABS_PER_L2, :OLD.TOTAL_ABS_PER_L1, :OLD.OST_L1, :OLD.OST_L1_AMT, :OLD.OST_L2, :OLD.OST_L2_AMT, :OLD.SALARY_TYPE, :OLD.TIMES, :OLD.CLOSE_M_YN
   , :OLD.ABS_NON_PERMISSION, :OLD.MEAL_NO_PIT, :OLD.EQUIP1_AMT, :OLD.EQUIP2_AMT, :OLD.EQUIP3_AMT, :OLD.EQUIP4_AMT, :OLD.EQUIP5_AMT, :OLD.EQUIP6_AMT, :OLD.EQUIP7_AMT
   , :OLD.EQUIP8_AMT, :OLD.GRADE_CD, :OLD.BAND_CD, :OLD.BAND_DT, :OLD.NUM_TMP1, :OLD.ADV_HEALTH, :OLD.ADV_SOCIAL, :OLD.ADV_UNEMP_INS, :OLD.POSITION_DT, :OLD.MEAL_COMPANY
   , :OLD.BUSSINESS_FEE, :OLD.BONUS_YEARLY_AMT, :OLD.WT_TMP_L1, :OLD.WT_TMP_L2, :OLD.EMPLOYEE_KIND_PK, :OLD.WORKING_PLACE, :OLD.ADVANCE_AMT2, :OLD.MEAL_MINUS
   , :OLD.TAX_YN, :OLD.ALLOW_OF_OT, :OLD.NOXIOUS_YN, :OLD.OIL_YN, :OLD.MEAL_YN, :OLD.ALE_YN, :OLD.BANK_BRANCH, :OLD.SITE_YN, :OLD.POSITION_YN, :OLD.TECHNICAL_YN, :OLD.TOTAL_AMT1
   , :OLD.TOTAL_AMT2, :OLD.ADVANCE_TICKET, :OLD.NUM_TMP4, :OLD.PHONE_DEDUCT, :OLD.NUM_TMP3, :OLD.NUM_TMP2, :OLD.INCOME_AMT_2, :OLD.OLD_ID, :OLD.ABS_MAKE_UP_L1
   , :OLD.ABS_MAKE_UP_L2, :OLD.ABS_MAKE_UP_L1_AMT, :OLD.ABS_MAKE_UP_L2_AMT, :OLD.TCO_COMPANY_PK);

  

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_MONTH_SALARY;
/


DROP TRIGGER HPDQ.HR_MONTH_SALARY_UR;

CREATE OR REPLACE TRIGGER HPDQ.HR_MONTH_SALARY_UR 
AFTER DELETE
ON HPDQ.THR_MONTH_SALARY_UR 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DISABLE
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_MONTH_SALARY_UR
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/10/2010             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_MONTH_SALARY_UR
      Sysdate:         6/10/2010
      Date and Time:   6/10/2010, 4:38:22 PM, and 6/10/2010 4:38:22 PM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_MONTH_SALARY_UR (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   INSERT INTO THR_MONTH_SALARY_UR_HIS
   (PK, THR_EMP_PK, EMP_ID, FULL_NAME, EMPLOYEE_TYPE, JOIN_DT, LEFT_DT, STATUS, ALE_DAY_IN_YEAR, SALARY_YN
   , OT_YN, TAC_ABPL_PK, ACCOUNT, BANK_TYPE, BANK_NM, PAY_TYPE, POS_TYPE, POS_NM, PROBATION_STATUS, TABLE_SALARY_PK
   , SALARY_LEVEL1, SALARY_LEVEL2, THR_GROUP_PK, THR_GROUP_NM, THR_GROUP_KNM, THR_GROUP_FNM, TCO_DEPT_PK, DEPT_NM
   , DEPT_KNM, DEPT_FNM, WORK_MON, FROM_DT, TO_DT, ALLOW_AMT1, ALLOW_AMT2, ALLOW_AMT3, ALLOW_AMT4, ALLOW_AMT5, ALLOW_AMT6
   , ALLOW_AMT7, ALLOW_AMT8, ALLOW_K1_AMT, ALLOW_K2_AMT, ALLOW_K3_AMT, ALLOW_K4_AMT, ALLOW_K5_AMT, ALLOW_K6_AMT, ALLOW_K7_AMT
   , ALLOW_K8_AMT, WT_L2, WT_L2_AMT, WT_L1, WT_L1_AMT, OT_L2, OT_L2_AMT, OT_L1, OT_L1_AMT, ST_L2, ST_L2_AMT, ST_L1, ST_L1_AMT
   , HT_L2, HT_L2_AMT, NT_30_L2, NT_30_L2_AMT, NT_30_L1, NT_30_L1_AMT, NT_45_L2, NT_45_L2_AMT, NT_45_L1, NT_45_L1_AMT, NT_60_L2
   , NT_60_L2_AMT, NT_60_L1, NT_60_L1_AMT, NT_90_L1, NT_90_L1_AMT, NT_90_L2, NT_90_L2_AMT, TOTAL_OT_L1, TOTAL_OT_L1_AMT
   , TOTAL_OT_L2, TOTAL_OT_L2_AMT, TOTAL_ABS_PAY_L1, TOTAL_ABS_PAY_L1_AMT, TOTAL_ABS_PAY_L2, TOTAL_ABS_PAY_L2_AMT
   , TOTAL_ABS_NPAY_L1, TOTAL_ABS_NPAY_L2, ALE_PIT, ALE_PIT_AMT, ALE_STOP, ALE_STOP_AMT, HOL_DAY_L2, HOL_DAY_L2_AMT
   , HOL_DAY_L1, HOL_DAY_L1_AMT, SEVERANCE_MONTH, SEVERANCE_AMT, AVERAGE_SAL, RETURN_AMT, ADVANCE_AMT, INC_AMT
   , GROSS_AMT, INCOME_AMT, INCOME_TAX, SOCIAL_AMT, HEALTH_AMT, UNION_AMT, DAYS_IN_MONTH, NET_AMT, CLOSE_YN, CLOSE_DT
   , REMARK, DEL_IF, MOD_BY, MOD_DT, CRT_BY, CRT_DT, CONFIRM_DT, RECIEVE_NET_YN, SAL_WITH_WT_L1, SAL_WITH_WT_L2
   , SAL_WITH_OT_L1, SAL_WITH_OT_L2, LOCATION_DEPT_PK, MONEY_KIND, NET_VND, EXCHANGE_RATE, HT_L1, HT_L1_AMT
   , BREAK_CONTRACT_AMT, BREAK_CONTRACT_DAYS, ABS_ALE_L1, ABS_ALE_L1_AMT, ABS_OTHER_PAY_L1, ABS_OTHER_PAY_L2
   , ABS_OTHER_PAY_L1_AMT, ABS_OTHER_PAY_L2_AMT, ABS_ALE_L2, ABS_ALE_L2_AMT, INS_PRO_DAY, INS_PRO_AMT, NATION
   , HEALTH_COM_NET, SOCIAL_COM_NET, INCOME_TAX_NET, HEALTH_COMPANY, SOCIAL_COMPANY, INCOME_BEFORE_TAX, RETURN_NO_PIT
   , ADVANCE_NO_PIT, REMAIN_ALE_DAYS, NUMBER_OF_SHIFT, OT_TAX_L1, OT_TAX_L1_AMT, OT_TAX_L2, OT_TAX_L2_AMT, ALLOW_AMT1_L1
   , ALLOW_AMT2_L1, ALLOW_AMT3_L1, ALLOW_AMT4_L1, ALLOW_AMT5_L1, ALLOW_AMT6_L1, ALLOW_AMT7_L1, ALLOW_AMT8_L1, ALLOW_AMT1_L2
   , ALLOW_AMT2_L2, ALLOW_AMT3_L2, ALLOW_AMT4_L2, ALLOW_AMT5_L2, ALLOW_AMT6_L2, ALLOW_AMT7_L2, ALLOW_AMT8_L2, UNEMP_INS
   , UNEMP_COM_INS, FAMILY_DEPEND, DEDUCT_PIT, OHT_L2, OHT_L2_AMT, OHT_L1, OHT_L1_AMT, LAST_PIT_AMT, LAST_PIT_AMT_NET
   , NET_SALARY_YN, TAX_PAYER_AMT, FAMILY_DEPEND_AMT, UNEMP_INS_NET, HEALTH_YN, SOCIAL_YN, HEALTH_CARD_AMT, NON_WORKING_DAY
   , NON_WORKING_DAY_AMT, UNEMP_YN, COST_GROUP, SALARY_L1_K1, COST_KIND, SALARY_L1_K2, SALARY_L1_K3, SALARY_L2_K1, SALARY_L2_K2
   , SALARY_L2_K3, INCENTIVE_02, TOTAL_HOUR_L2, TOTAL_HOUR_L1, TOTAL_HOUR_L1_AMT, TOTAL_HOUR_L2_AMT, WORK_PAYMENT
   , ADDITION_PAYMENT, CRANE_PAYMENT, SALARY_SI, SALARY_HI, STAND_OFF_HOUR, STAND_PRO_HOUR, MONTH_OT_L1, MONTH_OT_L2
   , MONTH_OT_L1_AMT, MONTH_OT_L2_AMT, REFUNDING_BIZ, ADVANCE_HOUSING, HOUSING_FEE, MEAL, ABS_TRAINING_L1, ABS_TRAINING_L1_AMT
   , ABS_TRAINING_L2, ABS_TRAINING_L2_AMT, ABS_BIZ_L1, ABS_BIZ_L1_AMT, ABS_BIZ_L2, ABS_BIZ_L2_AMT, ABS_DUTY_L1, ABS_DUTY_L1_AMT
   , ABS_DUTY_L2, ABS_DUTY_L2_AMT, ABS_LA_L1, ABS_LA_L1_AMT, ABS_LA_L2, ABS_LA_L2_AMT, ABS_WED_FUN_L1, ABS_WED_FUN_L1_AMT
   , ABS_WED_FUN_L2, ABS_WED_FUN_L2_AMT, ABS_PLUS_L1, ABS_PLUS_L2, HOL_ACTUAL_L1, HOL_ACTUAL_L2, JOB_TYPE, JOB_NM
   , TOTAL_ABS_PER_L2, TOTAL_ABS_PER_L1, OST_L1, OST_L1_AMT, OST_L2, OST_L2_AMT, SALARY_TYPE, TIMES, CLOSE_M_YN
   , ABS_NON_PERMISSION, MEAL_NO_PIT, EQUIP1_AMT, EQUIP2_AMT, EQUIP3_AMT, EQUIP4_AMT, EQUIP5_AMT, EQUIP6_AMT, EQUIP7_AMT
   , EQUIP8_AMT, GRADE_CD, BAND_CD, BAND_DT, NUM_TMP1, ADV_HEALTH, ADV_SOCIAL, ADV_UNEMP_INS, POSITION_DT, MEAL_COMPANY
   , BUSSINESS_FEE, BONUS_YEARLY_AMT, WT_TMP_L1, WT_TMP_L2, EMPLOYEE_KIND_PK, WORKING_PLACE, ADVANCE_AMT2, MEAL_MINUS
   , TAX_YN, ALLOW_OF_OT, NOXIOUS_YN, OIL_YN, MEAL_YN, ALE_YN, BANK_BRANCH, SITE_YN, POSITION_YN, TECHNICAL_YN, TOTAL_AMT1
   , TOTAL_AMT2, ADVANCE_TICKET, NUM_TMP4, PHONE_DEDUCT, NUM_TMP3, NUM_TMP2, INCOME_AMT_2, OLD_ID, ABS_MAKE_UP_L1
   , ABS_MAKE_UP_L2, ABS_MAKE_UP_L1_AMT, ABS_MAKE_UP_L2_AMT, TCO_COMPANY_PK)
   VALUES
   (THR_MONTH_SALARY_UR_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.EMP_ID, :OLD.FULL_NAME, :OLD.EMPLOYEE_TYPE, :OLD.JOIN_DT, :OLD.LEFT_DT, :OLD.STATUS, :OLD.ALE_DAY_IN_YEAR, :OLD.SALARY_YN
   , :OLD.OT_YN, :OLD.TAC_ABPL_PK, :OLD.ACCOUNT, :OLD.BANK_TYPE, :OLD.BANK_NM, :OLD.PAY_TYPE, :OLD.POS_TYPE, :OLD.POS_NM, :OLD.PROBATION_STATUS, :OLD.TABLE_SALARY_PK
   , :OLD.SALARY_LEVEL1, :OLD.SALARY_LEVEL2, :OLD.THR_GROUP_PK, :OLD.THR_GROUP_NM, :OLD.THR_GROUP_KNM, :OLD.THR_GROUP_FNM, :OLD.TCO_DEPT_PK, :OLD.DEPT_NM
   , :OLD.DEPT_KNM, :OLD.DEPT_FNM, :OLD.WORK_MON, :OLD.FROM_DT, :OLD.TO_DT, :OLD.ALLOW_AMT1, :OLD.ALLOW_AMT2, :OLD.ALLOW_AMT3, :OLD.ALLOW_AMT4, :OLD.ALLOW_AMT5, :OLD.ALLOW_AMT6
   , :OLD.ALLOW_AMT7, :OLD.ALLOW_AMT8, :OLD.ALLOW_K1_AMT, :OLD.ALLOW_K2_AMT, :OLD.ALLOW_K3_AMT, :OLD.ALLOW_K4_AMT, :OLD.ALLOW_K5_AMT, :OLD.ALLOW_K6_AMT, :OLD.ALLOW_K7_AMT
   , :OLD.ALLOW_K8_AMT, :OLD.WT_L2, :OLD.WT_L2_AMT, :OLD.WT_L1, :OLD.WT_L1_AMT, :OLD.OT_L2, :OLD.OT_L2_AMT, :OLD.OT_L1, :OLD.OT_L1_AMT, :OLD.ST_L2, :OLD.ST_L2_AMT, :OLD.ST_L1, :OLD.ST_L1_AMT
   , :OLD.HT_L2, :OLD.HT_L2_AMT, :OLD.NT_30_L2, :OLD.NT_30_L2_AMT, :OLD.NT_30_L1, :OLD.NT_30_L1_AMT, :OLD.NT_45_L2, :OLD.NT_45_L2_AMT, :OLD.NT_45_L1, :OLD.NT_45_L1_AMT, :OLD.NT_60_L2
   , :OLD.NT_60_L2_AMT, :OLD.NT_60_L1, :OLD.NT_60_L1_AMT, :OLD.NT_90_L1, :OLD.NT_90_L1_AMT, :OLD.NT_90_L2, :OLD.NT_90_L2_AMT, :OLD.TOTAL_OT_L1, :OLD.TOTAL_OT_L1_AMT
   , :OLD.TOTAL_OT_L2, :OLD.TOTAL_OT_L2_AMT, :OLD.TOTAL_ABS_PAY_L1, :OLD.TOTAL_ABS_PAY_L1_AMT, :OLD.TOTAL_ABS_PAY_L2, :OLD.TOTAL_ABS_PAY_L2_AMT
   , :OLD.TOTAL_ABS_NPAY_L1, :OLD.TOTAL_ABS_NPAY_L2, :OLD.ALE_PIT, :OLD.ALE_PIT_AMT, :OLD.ALE_STOP, :OLD.ALE_STOP_AMT, :OLD.HOL_DAY_L2, :OLD.HOL_DAY_L2_AMT
   , :OLD.HOL_DAY_L1, :OLD.HOL_DAY_L1_AMT, :OLD.SEVERANCE_MONTH, :OLD.SEVERANCE_AMT, :OLD.AVERAGE_SAL, :OLD.RETURN_AMT, :OLD.ADVANCE_AMT, :OLD.INC_AMT
   , :OLD.GROSS_AMT, :OLD.INCOME_AMT, :OLD.INCOME_TAX, :OLD.SOCIAL_AMT, :OLD.HEALTH_AMT, :OLD.UNION_AMT, :OLD.DAYS_IN_MONTH, :OLD.NET_AMT, :OLD.CLOSE_YN, :OLD.CLOSE_DT
   , :OLD.REMARK, :OLD.DEL_IF, NULL, NULL, NULL, SYSDATE, :OLD.CONFIRM_DT, :OLD.RECIEVE_NET_YN, :OLD.SAL_WITH_WT_L1, :OLD.SAL_WITH_WT_L2
   , :OLD.SAL_WITH_OT_L1, :OLD.SAL_WITH_OT_L2, :OLD.LOCATION_DEPT_PK, :OLD.MONEY_KIND, :OLD.NET_VND, :OLD.EXCHANGE_RATE, :OLD.HT_L1, :OLD.HT_L1_AMT
   , :OLD.BREAK_CONTRACT_AMT, :OLD.BREAK_CONTRACT_DAYS, :OLD.ABS_ALE_L1, :OLD.ABS_ALE_L1_AMT, :OLD.ABS_OTHER_PAY_L1, :OLD.ABS_OTHER_PAY_L2
   , :OLD.ABS_OTHER_PAY_L1_AMT, :OLD.ABS_OTHER_PAY_L2_AMT, :OLD.ABS_ALE_L2, :OLD.ABS_ALE_L2_AMT, :OLD.INS_PRO_DAY, :OLD.INS_PRO_AMT, :OLD.NATION
   , :OLD.HEALTH_COM_NET, :OLD.SOCIAL_COM_NET, :OLD.INCOME_TAX_NET, :OLD.HEALTH_COMPANY, :OLD.SOCIAL_COMPANY, :OLD.INCOME_BEFORE_TAX, :OLD.RETURN_NO_PIT
   , :OLD.ADVANCE_NO_PIT, :OLD.REMAIN_ALE_DAYS, :OLD.NUMBER_OF_SHIFT, :OLD.OT_TAX_L1, :OLD.OT_TAX_L1_AMT, :OLD.OT_TAX_L2, :OLD.OT_TAX_L2_AMT, :OLD.ALLOW_AMT1_L1
   , :OLD.ALLOW_AMT2_L1, :OLD.ALLOW_AMT3_L1, :OLD.ALLOW_AMT4_L1, :OLD.ALLOW_AMT5_L1, :OLD.ALLOW_AMT6_L1, :OLD.ALLOW_AMT7_L1, :OLD.ALLOW_AMT8_L1, :OLD.ALLOW_AMT1_L2
   , :OLD.ALLOW_AMT2_L2, :OLD.ALLOW_AMT3_L2, :OLD.ALLOW_AMT4_L2, :OLD.ALLOW_AMT5_L2, :OLD.ALLOW_AMT6_L2, :OLD.ALLOW_AMT7_L2, :OLD.ALLOW_AMT8_L2, :OLD.UNEMP_INS
   , :OLD.UNEMP_COM_INS, :OLD.FAMILY_DEPEND, :OLD.DEDUCT_PIT, :OLD.OHT_L2, :OLD.OHT_L2_AMT, :OLD.OHT_L1, :OLD.OHT_L1_AMT, :OLD.LAST_PIT_AMT, :OLD.LAST_PIT_AMT_NET
   , :OLD.NET_SALARY_YN, :OLD.TAX_PAYER_AMT, :OLD.FAMILY_DEPEND_AMT, :OLD.UNEMP_INS_NET, :OLD.HEALTH_YN, :OLD.SOCIAL_YN, :OLD.HEALTH_CARD_AMT, :OLD.NON_WORKING_DAY
   , :OLD.NON_WORKING_DAY_AMT, :OLD.UNEMP_YN, :OLD.COST_GROUP, :OLD.SALARY_L1_K1, :OLD.COST_KIND, :OLD.SALARY_L1_K2, :OLD.SALARY_L1_K3, :OLD.SALARY_L2_K1, :OLD.SALARY_L2_K2
   , :OLD.SALARY_L2_K3, :OLD.INCENTIVE_02, :OLD.TOTAL_HOUR_L2, :OLD.TOTAL_HOUR_L1, :OLD.TOTAL_HOUR_L1_AMT, :OLD.TOTAL_HOUR_L2_AMT, :OLD.WORK_PAYMENT
   , :OLD.ADDITION_PAYMENT, :OLD.CRANE_PAYMENT, :OLD.SALARY_SI, :OLD.SALARY_HI, :OLD.STAND_OFF_HOUR, :OLD.STAND_PRO_HOUR, :OLD.MONTH_OT_L1, :OLD.MONTH_OT_L2
   , :OLD.MONTH_OT_L1_AMT, :OLD.MONTH_OT_L2_AMT, :OLD.REFUNDING_BIZ, :OLD.ADVANCE_HOUSING, :OLD.HOUSING_FEE, :OLD.MEAL, :OLD.ABS_TRAINING_L1, :OLD.ABS_TRAINING_L1_AMT
   , :OLD.ABS_TRAINING_L2, :OLD.ABS_TRAINING_L2_AMT, :OLD.ABS_BIZ_L1, :OLD.ABS_BIZ_L1_AMT, :OLD.ABS_BIZ_L2, :OLD.ABS_BIZ_L2_AMT, :OLD.ABS_DUTY_L1, :OLD.ABS_DUTY_L1_AMT
   , :OLD.ABS_DUTY_L2, :OLD.ABS_DUTY_L2_AMT, :OLD.ABS_LA_L1, :OLD.ABS_LA_L1_AMT, :OLD.ABS_LA_L2, :OLD.ABS_LA_L2_AMT, :OLD.ABS_WED_FUN_L1, :OLD.ABS_WED_FUN_L1_AMT
   , :OLD.ABS_WED_FUN_L2, :OLD.ABS_WED_FUN_L2_AMT, :OLD.ABS_PLUS_L1, :OLD.ABS_PLUS_L2, :OLD.HOL_ACTUAL_L1, :OLD.HOL_ACTUAL_L2, :OLD.JOB_TYPE, :OLD.JOB_NM
   , :OLD.TOTAL_ABS_PER_L2, :OLD.TOTAL_ABS_PER_L1, :OLD.OST_L1, :OLD.OST_L1_AMT, :OLD.OST_L2, :OLD.OST_L2_AMT, :OLD.SALARY_TYPE, :OLD.TIMES, :OLD.CLOSE_M_YN
   , :OLD.ABS_NON_PERMISSION, :OLD.MEAL_NO_PIT, :OLD.EQUIP1_AMT, :OLD.EQUIP2_AMT, :OLD.EQUIP3_AMT, :OLD.EQUIP4_AMT, :OLD.EQUIP5_AMT, :OLD.EQUIP6_AMT, :OLD.EQUIP7_AMT
   , :OLD.EQUIP8_AMT, :OLD.GRADE_CD, :OLD.BAND_CD, :OLD.BAND_DT, :OLD.NUM_TMP1, :OLD.ADV_HEALTH, :OLD.ADV_SOCIAL, :OLD.ADV_UNEMP_INS, :OLD.POSITION_DT, :OLD.MEAL_COMPANY
   , :OLD.BUSSINESS_FEE, :OLD.BONUS_YEARLY_AMT, :OLD.WT_TMP_L1, :OLD.WT_TMP_L2, :OLD.EMPLOYEE_KIND_PK, :OLD.WORKING_PLACE, :OLD.ADVANCE_AMT2, :OLD.MEAL_MINUS
   , :OLD.TAX_YN, :OLD.ALLOW_OF_OT, :OLD.NOXIOUS_YN, :OLD.OIL_YN, :OLD.MEAL_YN, :OLD.ALE_YN, :OLD.BANK_BRANCH, :OLD.SITE_YN, :OLD.POSITION_YN, :OLD.TECHNICAL_YN, :OLD.TOTAL_AMT1
   , :OLD.TOTAL_AMT2, :OLD.ADVANCE_TICKET, :OLD.NUM_TMP4, :OLD.PHONE_DEDUCT, :OLD.NUM_TMP3, :OLD.NUM_TMP2, :OLD.INCOME_AMT_2, :OLD.OLD_ID, :OLD.ABS_MAKE_UP_L1
   , :OLD.ABS_MAKE_UP_L2, :OLD.ABS_MAKE_UP_L1_AMT, :OLD.ABS_MAKE_UP_L2_AMT, :OLD.TCO_COMPANY_PK);

  

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_MONTH_SALARY_UR;
/


DROP TRIGGER HPDQ.HR_SALARY_MANAGE_HIS;

CREATE OR REPLACE TRIGGER HPDQ.HR_SALARY_MANAGE_HIS 
AFTER DELETE OR INSERT OR UPDATE
ON HPDQ.THR_SALARY_MANAGE REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
L_PK NUMBER;
l_user varchar2(100);
l_ip varchar2(20);
/******************************************************************************
   NAME:       TRG_SALARY_MANAGE_HIS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/3/2008             1.Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_SALARY_MANAGE_HIS
      Sysdate:         4/3/2008
      Date and Time:   4/3/2008, 9:49:09 AM, and 4/3/2008 9:49:09 AM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_SALARY_MANAGE (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN


   L_PK := 0;

   SELECT THR_SALARY_MANAGE_HIS_SEQ.NEXTVAL INTO L_PK FROM dual;

   IF INSERTING OR UPDATING THEN
    INSERT INTO THR_SALARY_MANAGE_HIS
   (PK, THR_EMP_PK, WORK_MON, SALARY_LEVEL1, SALARY_LEVEL2, ALLOW_AMT1, ALLOW_AMT2
   , ALLOW_AMT3, ALLOW_AMT4, ALLOW_AMT5, ALLOW_AMT6, ALLOW_AMT7, ALLOW_AMT8, CONFIRM_DT
   , POS_TYPE, POS_NM, DEL_IF, REMARK, CRT_BY, CRT_DT,REMARK_ACT,EMP_ID,CLOSE_YN,CLOSE_DT)
   VALUES
    (L_PK, :NEW.THR_EMP_PK,:NEW.WORK_MON,:NEW.SALARY_LEVEL1,:NEW.SALARY_LEVEL2,:NEW.ALLOW_AMT1,:NEW.ALLOW_AMT2
   , :NEW.ALLOW_AMT3,:NEW.ALLOW_AMT4, :NEW.ALLOW_AMT5, :NEW.ALLOW_AMT6, :NEW.ALLOW_AMT7,:NEW.ALLOW_AMT8, :NEW.CONFIRM_DT
   , :NEW.POS_TYPE, :NEW.POS_NM, :NEW.DEL_IF, :NEW.REMARK, :NEW.MOD_BY, SYSDATE,'INS-UP',:NEW.EMP_ID,:NEW.CLOSE_YN,:NEW.CLOSE_DT);
   ELSE --DELETE
    /*select sys_context('userenv','ip_address') into l_ip from dual;
    select B.USER_ID||'-'||l_ip INTO l_user from COMM.TCO_BSLOGIN A,COMM.TCO_BSUSER B
    WHERE A.TCO_BSUSER_PK=B.PK(+) AND B.DEL_IF(+)=0
    AND A.PK =(SELECT MAX(C.PK) FROM TCO_BSLOGIN C
                        WHERE C.USER_IP=l_ip);*/

    INSERT INTO THR_SALARY_MANAGE_HIS
   (PK, THR_EMP_PK, WORK_MON, SALARY_LEVEL1, SALARY_LEVEL2, ALLOW_AMT1, ALLOW_AMT2
   , ALLOW_AMT3, ALLOW_AMT4, ALLOW_AMT5, ALLOW_AMT6, ALLOW_AMT7, ALLOW_AMT8, CONFIRM_DT
   , POS_TYPE, POS_NM, DEL_IF, REMARK, CRT_BY, CRT_DT, MOD_BY, MOD_DT,REMARK_ACT,EMP_ID,CLOSE_YN,CLOSE_DT)
   VALUES
    (L_PK, :OLD.THR_EMP_PK,:OLD.WORK_MON,:OLD.SALARY_LEVEL1,:OLD.SALARY_LEVEL2,:OLD.ALLOW_AMT1,:OLD.ALLOW_AMT2
   , :OLD.ALLOW_AMT3,:OLD.ALLOW_AMT4, :OLD.ALLOW_AMT5, :OLD.ALLOW_AMT6, :OLD.ALLOW_AMT7,:OLD.ALLOW_AMT8, :OLD.CONFIRM_DT
   , :OLD.POS_TYPE, :OLD.POS_NM, :OLD.DEL_IF, :OLD.REMARK, NULL, SYSDATE, :OLD.MOD_BY, :OLD.MOD_DT,'DELETE',:OLD.EMP_ID,:OLD.CLOSE_YN,:OLD.CLOSE_DT);
   END IF;


   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_SALARY_MANAGE_HIS;
/


DROP TRIGGER HPDQ.HR_THR_CLOSE;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_CLOSE 
AFTER DELETE OR INSERT OR UPDATE
ON HPDQ.THR_CLOSE REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE

/******************************************************************************
   NAME:       TRG_THR_CLOSE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        19-Aug-08             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_THR_CLOSE
      Sysdate:         19-Aug-08
      Date and Time:   19-Aug-08, 8:55:42 AM, and 19-Aug-08 8:55:42 AM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_CLOSE (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   IF INSERTING OR UPDATING THEN
        INSERT INTO THR_CLOSE_HIS
        (PK, ID, MONTH_CLOSE, CLOSE_YN, CLOSE_DT, FROM_DT, TO_DT, REMARK, DEL_IF, CRT_DT, CRT_BY, MOD_DT, MOD_BY,TIMES)
        VALUES
        (THR_CLOSE_HIS_SEQ.NEXTVAL, :NEW.ID, :NEW.MONTH_CLOSE, :NEW.CLOSE_YN, :NEW.CLOSE_DT, :NEW.FROM_DT, :NEW.TO_DT, :NEW.REMARK, :NEW.DEL_IF, :NEW.CRT_DT, :NEW.CRT_BY, :NEW.MOD_DT, :NEW.MOD_BY,:NEW.TIMES);
   ELSE
       INSERT INTO THR_CLOSE_HIS
        (PK, ID, MONTH_CLOSE, CLOSE_YN, CLOSE_DT, FROM_DT, TO_DT, REMARK, DEL_IF, CRT_DT, CRT_BY, MOD_DT, MOD_BY,TIMES)
        VALUES
        (THR_CLOSE_HIS_SEQ.NEXTVAL, :OLD.ID, :OLD.MONTH_CLOSE, :OLD.CLOSE_YN, :OLD.CLOSE_DT, :OLD.FROM_DT, :OLD.TO_DT, :OLD.REMARK, :OLD.DEL_IF, :OLD.CRT_DT, :OLD.CRT_BY, :OLD.MOD_DT, :OLD.MOD_BY,:OLD.TIMES);

   END IF;



   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_CLOSE;
/


DROP TRIGGER HPDQ.HR_THR_EXTRA_TIME_HIST;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_EXTRA_TIME_HIST 
AFTER DELETE
ON HPDQ.THR_EXTRA_TIME REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
l_user varchar2(100);
l_ip varchar2(20);
/******************************************************************************
   NAME:       TRG_THR_EXTRA_HIST
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/6/2008             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_THR_EXTRA_HIST
      Sysdate:         5/6/2008
      Date and Time:   5/6/2008, 1:34:16 PM, and 5/6/2008 1:34:16 PM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_EXTRA_TIME (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   /*select sys_context('userenv','ip_address') into l_ip from dual;
    select B.USER_ID||'-'||l_ip INTO l_user from COMM.TCO_BSLOGIN A,COMM.TCO_BSUSER B
    WHERE A.TCO_BSUSER_PK=B.PK(+) AND B.DEL_IF(+)=0
    AND A.PK =(SELECT MAX(C.PK) FROM TCO_BSLOGIN C
                    WHERE C.USER_IP=l_ip);*/

    INSERT INTO THR_EXTRA_HIS
    (PK, THR_EMP_PK, OT_TYPE, THR_WG_PK, THR_WS_PK, WORK_DT, START_TIME, END_TIME, OT_TIME, OT_PLUS
    , PAY_RATE, START_TIME_ORG, END_TIME_ORG, MOD_BYHAND_YN, CLOSE_YN, CLOSE_DT, REMARK, DEL_IF, CRT_DT, CRT_BY)
    VALUES
    (THR_EXTRA_HIS_SEQ.NEXTVAL,:OLD.THR_EMP_PK,:OLD.OT_TYPE,:OLD.THR_WG_PK,:OLD.THR_WS_PK,:OLD.WORK_DT,:OLD.START_TIME,:OLD.END_TIME,:OLD.OT_TIME,:OLD.OT_PLUS
    ,:OLD.PAY_RATE,:OLD.START_TIME_ORG,:OLD.END_TIME_ORG,:OLD.MOD_BYHAND_YN,:OLD.CLOSE_YN,:OLD.CLOSE_DT,:OLD.REMARK,:OLD.DEL_IF,SYSDATE,NVL(:NEW.MOD_BY,:NEW.CRT_BY));




   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_EXTRA_TIME_HIST;
/


DROP TRIGGER HPDQ.HR_THR_TIME_MACHINE;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_TIME_MACHINE 
AFTER DELETE
ON HPDQ.THR_TIME_MACHINE 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_TIME_MACHINE
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/10/2011      huynhtruong       1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_TIME_MACHINE
      Sysdate:         5/10/2011
      Date and Time:   5/10/2011, 11:22:19 AM, and 5/10/2011 11:22:19 AM
      Username:        huynhtruong (set in TOAD Options, Proc Templates)
      Table Name:      THR_TIME_MACHINE (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   tmpVar := 0;
  INSERT INTO THR_TIME_HIS
    (PK, THR_EMP_PK, THR_WG_PK, WORK_DT, THR_WS_PK, TIME_IN, TIME_OUT, WORK_TIME
        , PAY_RATE, TIME_IN_ORG, MOD_BYHAND_YN, CLOSE_YN, CLOSE_DT, REMARK
        , DEL_IF, CRT_DT, CRT_BY, MOD_DT, MOD_BY, TIME_OUT_ORG, DATE_IN, DATE_OUT,NO_SCAN_FLAG,MOD_AUTO_YN)
    VALUES(THR_TIME_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.THR_WG_PK, :OLD.WORK_DT, :OLD.THR_WS_PK, :OLD.TIME_IN, :OLD.TIME_OUT, :OLD.WORK_TIME
        , :OLD.PAY_RATE, :OLD.TIME_IN_ORG, :OLD.MOD_BYHAND_YN, :OLD.CLOSE_YN, :OLD.CLOSE_DT, :OLD.REMARK
        , :OLD.DEL_IF, SYSDATE, NVL(:NEW.MOD_BY,:NEW.CRT_BY), :OLD.MOD_DT, :OLD.MOD_BY, :OLD.TIME_OUT_ORG, :OLD.DATE_IN, :OLD.DATE_OUT,:OLD.NO_SCAN_FLAG,:NEW.MOD_AUTO_YN);

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_TIME_MACHINE;
/


DROP TRIGGER HPDQ.HR_THR_TIME_MACHINE_UR;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_TIME_MACHINE_UR 
AFTER DELETE
ON HPDQ.THR_TIME_MACHINE_UR 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_TIME_MACHINE_UR
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/10/2011      huynhtruong       1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_TIME_MACHINE_UR
      Sysdate:         5/10/2011
      Date and Time:   5/10/2011, 11:22:19 AM, and 5/10/2011 11:22:19 AM
      Username:        huynhtruong (set in TOAD Options, Proc Templates)
      Table Name:      THR_TIME_MACHINE_UR (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   tmpVar := 0;
  INSERT INTO THR_TIME_UR_HIS
    (PK, THR_EMP_PK, THR_WG_PK, WORK_DT, THR_WS_PK, TIME_IN, TIME_OUT, WORK_TIME
        , PAY_RATE, TIME_IN_ORG, MOD_BYHAND_YN, CLOSE_YN, CLOSE_DT, REMARK
        , DEL_IF, CRT_DT, CRT_BY, MOD_DT, MOD_BY, TIME_OUT_ORG, DATE_IN, DATE_OUT,NO_SCAN_FLAG,MOD_AUTO_YN)
    VALUES(THR_TIME_UR_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.THR_WG_PK, :OLD.WORK_DT, :OLD.THR_WS_PK, :OLD.TIME_IN, :OLD.TIME_OUT, :OLD.WORK_TIME
        , :OLD.PAY_RATE, :OLD.TIME_IN_ORG, :OLD.MOD_BYHAND_YN, :OLD.CLOSE_YN, :OLD.CLOSE_DT, :OLD.REMARK
        , :OLD.DEL_IF, SYSDATE, :NEW.MOD_BY, :OLD.MOD_DT, :OLD.MOD_BY, :OLD.TIME_OUT_ORG, :OLD.DATE_IN, :OLD.DATE_OUT,:OLD.NO_SCAN_FLAG,:NEW.MOD_AUTO_YN);

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_TIME_MACHINE_UR;
/


DROP TRIGGER HPDQ.HR_THR_WG_HOL_TYPE;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_WG_HOL_TYPE 
AFTER UPDATE
OF HOL_TYPE
ON HPDQ.THR_WG_SCH_DETAIL 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_GW_HOL_TYPE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/21/2009             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_GW_HOL_TYPE
      Sysdate:         2/21/2009
      Date and Time:   2/21/2009, 9:15:54 AM, and 2/21/2009 9:15:54 AM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_WG_SCH_DETAIL (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
 if (nvl(:new.hol_type,' ') <> nvl(:old.hol_type,' ')) then  
   
   UPDATE THR_TIME_MACHINE A
   SET A.DEL_IF=A.PK
       ,A.REMARK='TRG CHANGE HOL TYPE'
      ,A.MOD_BY=:NEW.MOD_BY
      ,A.MOD_DT=SYSDATE
   WHERE A.DEL_IF=0 AND A.WORK_DT=:NEW.WORK_DT
   AND A.THR_EMP_PK=:NEW.THR_EMP_PK
   AND NVL(A.APPROVE_YN,'N')='N' AND NVL(A.CLOSE_YN,'N')='N' AND NVL(A.CLOSE_M_YN,'N')='N';

   UPDATE THR_EXTRA_TIME A
   SET A.DEL_IF=A.PK
       ,A.REMARK='TRG CHANGE HOL TYPE'
      ,A.MOD_BY=:NEW.MOD_BY
      ,A.MOD_DT=SYSDATE
   WHERE A.DEL_IF=0 AND A.WORK_DT=:NEW.WORK_DT
   AND A.THR_EMP_PK=:NEW.THR_EMP_PK
   AND NVL(A.APPROVE_YN,'N')='N'
   AND NVL(A.APPROVE_YN,'N')='N' AND NVL(A.CLOSE_YN,'N')='N' AND NVL(A.CLOSE_M_YN,'N')='N';
   
   
 end if;


   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_WG_HOL_TYPE;
/


DROP TRIGGER HPDQ.HR_THR_WORK_DATE;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_WORK_DATE 
AFTER UPDATE
ON HPDQ.THR_WORK_DATE 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
tmpVar NUMBER;

BEGIN
   tmpVar := 0;
  INSERT INTO THR_WORK_DATE_HIS(PK, THR_EMP_PK, WORK_DT, EMP_ID, THR_WS_PK, WS_NAME, THR_WG_PK, TCO_ORG_PK, TIME_IN, TIME_OUT
            , DATE_IN, DATE_OUT, WT, WT_RATE, OT, OT_RATE, NT, NT_RATE, ONT, ONT_RATE, ABSENCE_TYPE, ABSENCE_TIME
            , REMARK, DEL_IF, CRT_BY, CRT_DT, MOD_BY, MOD_DT, DAY_TYPE, HOL_TYPE, CLOSE_YN, CLOSE_BY, CLOSE_DT
            , APPROVE_YN, TCO_COMPANY_PK, MOD_BYHAND_YN, ID_NUM, ABSENCE_PAY_YN, ABSENCE_PAY_RATE, OT_YN, DESCRIPTION
            , START_OT, START_NT, ABS_LONG_YN, DAYS_SHIFT)
    VALUES(THR_WORK_DATE_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.WORK_DT, :OLD.EMP_ID, :OLD.THR_WS_PK, :OLD.WS_NAME, :OLD.THR_WG_PK, :OLD.TCO_ORG_PK, :OLD.TIME_IN, :OLD.TIME_OUT
            , :OLD.DATE_IN, :OLD.DATE_OUT, :OLD.WT, :OLD.WT_RATE, :OLD.OT, :OLD.OT_RATE, :OLD.NT, :OLD.NT_RATE, :OLD.ONT, :OLD.ONT_RATE, :OLD.ABSENCE_TYPE, :OLD.ABSENCE_TIME
            , :OLD.REMARK, :OLD.DEL_IF, NVL(:NEW.MOD_BY,:NEW.CRT_BY), SYSDATE, NULL, NULL, :OLD.DAY_TYPE, :OLD.HOL_TYPE, :OLD.CLOSE_YN, :OLD.CLOSE_BY, :OLD.CLOSE_DT
            , :OLD.APPROVE_YN, :OLD.TCO_COMPANY_PK, :OLD.MOD_BYHAND_YN, :OLD.ID_NUM, :OLD.ABSENCE_PAY_YN, :OLD.ABSENCE_PAY_RATE, :OLD.OT_YN, :OLD.DESCRIPTION
            , :OLD.START_OT, :OLD.START_NT, :OLD.ABS_LONG_YN, :OLD.DAYS_SHIFT);

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_WORK_DATE;
/


DROP TRIGGER HPDQ.HR_THR_WORK_MON;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_WORK_MON 
AFTER DELETE
ON HPDQ.THR_WORK_MON REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_THR_WORK_MON
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/30/2008             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_THR_WORK_MON
      Sysdate:         7/30/2008
      Date and Time:   7/30/2008, 1:58:30 PM, and 7/30/2008 1:58:30 PM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_WORK_MON (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   tmpVar := 0;

   INSERT INTO THR_WORK_MON_HIS
   (PK, THR_EMP_PK, FULL_NAME, EMP_ID, THR_GROUP_PK, GROUP_NM, GROUP_FNM, GROUP_KNM, WORK_MON, FROM_DT, TO_DT
   , JOIN_DT, LEFT_DT, STATUS, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18
   , D19, D20, D21, D22, D23, D24, D25, D26, D27, D28, D29, D30, D31, REMARK
   , DEL_IF, CRT_BY, CRT_DT, MOD_BY, MOD_DT, DEPT_NM, DEPT_KNM, DEPT_LNM, TCO_DEPT_PK,LOCATION_DEPT_PK,TOTAL_WD
   ,PROBATION_STATUS,CLOSE_YN,CLOSE_DT,TIMES,CLOSE_M_YN
   )
   VALUES
   (THR_WORK_MON_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.FULL_NAME, :OLD.EMP_ID, :OLD.THR_GROUP_PK, :OLD.GROUP_NM
   , :OLD.GROUP_FNM, :OLD.GROUP_KNM, :OLD.WORK_MON, :OLD.FROM_DT, :OLD.TO_DT, :OLD.JOIN_DT, :OLD.LEFT_DT, :OLD.STATUS
   , :OLD.D1, :OLD.D2, :OLD.D3, :OLD.D4, :OLD.D5, :OLD.D6, :OLD.D7, :OLD.D8, :OLD.D9, :OLD.D10, :OLD.D11, :OLD.D12
   , :OLD.D13, :OLD.D14, :OLD.D15, :OLD.D16, :OLD.D17, :OLD.D18, :OLD.D19, :OLD.D20, :OLD.D21, :OLD.D22, :OLD.D23
   , :OLD.D24, :OLD.D25, :OLD.D26, :OLD.D27, :OLD.D28, :OLD.D29, :OLD.D30, :OLD.D31
   , :OLD.REMARK, :OLD.DEL_IF, NULL, SYSDATE, :OLD.crt_by, :OLD.crt_DT, :OLD.DEPT_NM, :OLD.DEPT_KNM
   , :OLD.DEPT_LNM, :OLD.TCO_DEPT_PK,:OLD.LOCATION_DEPT_PK,:OLD.TOTAL_WD,:OLD.PROBATION_STATUS,:OLD.CLOSE_YN,:OLD.CLOSE_DT,:OLD.TIMES,:OLD.CLOSE_M_YN);

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_WORK_MON;
/


DROP TRIGGER HPDQ.HR_THR_WORK_MON_UR;

CREATE OR REPLACE TRIGGER HPDQ.HR_THR_WORK_MON_UR 
AFTER DELETE
ON HPDQ.THR_WORK_MON_UR REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       TRG_THR_WORK_MON_UR
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/30/2008             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_THR_WORK_MON_UR
      Sysdate:         7/30/2008
      Date and Time:   7/30/2008, 1:58:30 PM, and 7/30/2008 1:58:30 PM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_WORK_MON_UR (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   tmpVar := 0;

   INSERT INTO THR_WORK_MON_UR_HIS
   (PK, THR_EMP_PK, FULL_NAME, EMP_ID, THR_GROUP_PK, GROUP_NM, GROUP_FNM, GROUP_KNM, WORK_MON, FROM_DT, TO_DT
   , JOIN_DT, LEFT_DT, STATUS, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18
   , D19, D20, D21, D22, D23, D24, D25, D26, D27, D28, D29, D30, D31, REMARK
   , DEL_IF, CRT_BY, CRT_DT, MOD_BY, MOD_DT, DEPT_NM, DEPT_KNM, DEPT_LNM, TCO_DEPT_PK,LOCATION_DEPT_PK,TOTAL_WD
   ,PROBATION_STATUS,CLOSE_YN,CLOSE_DT,TIMES,CLOSE_M_YN
   )
   VALUES
   (THR_WORK_MON_UR_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.FULL_NAME, :OLD.EMP_ID, :OLD.THR_GROUP_PK, :OLD.GROUP_NM
   , :OLD.GROUP_FNM, :OLD.GROUP_KNM, :OLD.WORK_MON, :OLD.FROM_DT, :OLD.TO_DT, :OLD.JOIN_DT, :OLD.LEFT_DT, :OLD.STATUS
   , :OLD.D1, :OLD.D2, :OLD.D3, :OLD.D4, :OLD.D5, :OLD.D6, :OLD.D7, :OLD.D8, :OLD.D9, :OLD.D10, :OLD.D11, :OLD.D12
   , :OLD.D13, :OLD.D14, :OLD.D15, :OLD.D16, :OLD.D17, :OLD.D18, :OLD.D19, :OLD.D20, :OLD.D21, :OLD.D22, :OLD.D23
   , :OLD.D24, :OLD.D25, :OLD.D26, :OLD.D27, :OLD.D28, :OLD.D29, :OLD.D30, :OLD.D31
   , :OLD.REMARK, :OLD.DEL_IF, NULL, SYSDATE, :OLD.crt_by, :OLD.crt_DT, :OLD.DEPT_NM, :OLD.DEPT_KNM
   , :OLD.DEPT_LNM, :OLD.TCO_DEPT_PK,:OLD.LOCATION_DEPT_PK,:OLD.TOTAL_WD,:OLD.PROBATION_STATUS,:OLD.CLOSE_YN,:OLD.CLOSE_DT,:OLD.TIMES,:OLD.CLOSE_M_YN);

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_THR_WORK_MON_UR;
/


DROP TRIGGER HPDQ.HR_TRG_CURRENT_ALE;

CREATE OR REPLACE TRIGGER HPDQ.HR_TRG_CURRENT_ALE 
AFTER DELETE OR INSERT OR UPDATE
ON HPDQ.THR_ABSENCE 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DISABLE
DECLARE
tmpVar NUMBER;
w_month varchar2(6):='';
l_flag_exist boolean:=FALSE;
l_check     exception;
l_cur_rec number;
l_cur sys_refcursor;
l_sal_period varchar(10);

BEGIN
   /*  dung de insert lai du lieu 
   insert into thr_current_ale
(PK, THR_EMP_PK, WORK_MON, ALE_hours, DEL_IF)
select thr_current_ale_seq.nextval,ale.thr_emp_pk,ale.wm,ale.tt,0
from(
SELECT  A.THR_EMP_PK,f_period_month(A.absence_dt) wm,SUM(NVL(A.ABSENCE_TIME,0)) tt
FROM THR_ABSENCE A
WHERE A.DEL_IF=0 AND A.ABSENCE_TYPE='01'
GROUP BY A.THR_EMP_PK,f_period_month(A.absence_dt))ale
   */
   
   
   
   IF INSERTING THEN 
        select max(e.sal_period) into l_sal_period
         from thr_employee e
            where e.del_if=0 and e.pk=:new.thr_emp_pk;
   
        IF :NEW.ABSENCE_TYPE='01' THEN --ALE 
            --XAC DINH PERIOD
               w_month:=hr_f_period_month_2(:new.absence_dt,l_sal_period); 
               open l_cur for select 1 from thr_current_ale a
               where a.del_if=0 and a.work_mon=w_month and a.thr_emp_pk=:new.thr_emp_pk;
               
               FETCH l_cur INTO l_cur_rec;
              l_flag_exist := l_cur%FOUND;
            CLOSE l_cur;
            
            IF l_flag_exist=FALSE THEN  -- chua co = insert
                    insert into thr_current_ale
                    (PK, THR_EMP_PK, WORK_MON, ALE_HOURS, DEL_IF, CRT_DT, CRT_BY)
                    values
                    (thr_current_ale_seq.nextval,:new.thr_emp_pk,w_month,:new.absence_time,0,SYSDATE,:NEW.CRT_BY);
            ELSE -- CO ROI = UPDATE
                UPDATE THR_CURRENT_ALE A
                SET A.ALE_HOURS=NVL(A.ALE_HOURS,0)+NVL(:NEW.ABSENCE_TIME,0)
                WHERE A.DEL_IF=0 AND A.WORK_MON=w_month AND A.THR_EMP_PK=:NEW.THR_EMP_PK;         
            END IF;
        
        
        END IF;
   ELSIF UPDATING THEN
        select max(e.sal_period) into l_sal_period
         from thr_employee e
            where e.del_if=0 and e.pk=:new.thr_emp_pk;
            
        IF :NEW.DEL_IF=0 THEN
   
                    IF :NEW.ABSENCE_TYPE='01' OR :OLD.ABSENCE_TYPE='01' THEN --ALE 
                            IF :NEW.ABSENCE_TYPE='01' AND :OLD.ABSENCE_TYPE<>'01' THEN --TANG 
                            
                                        --XAC DINH PERIOD
                                          w_month:=hr_f_period_month_2(:new.absence_dt,l_sal_period); 
                                           open l_cur for select 1 from thr_current_ale a
                                           where a.del_if=0 and a.work_mon=w_month and a.thr_emp_pk=:new.thr_emp_pk;
                                           
                                           FETCH l_cur INTO l_cur_rec;
                                          l_flag_exist := l_cur%FOUND;
                                        CLOSE l_cur;
                                        
                                        IF l_flag_exist=FALSE THEN  -- chua co = insert
                                                insert into thr_current_ale
                                                (PK, THR_EMP_PK, WORK_MON, ALE_HOURS, DEL_IF, CRT_DT, CRT_BY)
                                                values
                                                (thr_current_ale_seq.nextval,:new.thr_emp_pk,w_month,:new.absence_time,0,SYSDATE,:NEW.CRT_BY);
                                        ELSE -- CO ROI = UPDATE
                                            UPDATE THR_CURRENT_ALE A
                                            SET A.ALE_HOURS=NVL(A.ALE_HOURS,0)+NVL(:NEW.ABSENCE_TIME,0)
                                            WHERE A.DEL_IF=0 AND A.WORK_MON=w_month AND A.THR_EMP_PK=:NEW.THR_EMP_PK;         
                                        END IF;
                                        
                            ELSIF  :NEW.ABSENCE_TYPE<>'01' AND :OLD.ABSENCE_TYPE='01' THEN --GIAM 
                            
                                        --XAC DINH PERIOD
                                          w_month:=hr_f_period_month_2(:new.absence_dt,l_sal_period); 
                                           open l_cur for select 1 from thr_current_ale a
                                           where a.del_if=0 and a.work_mon=w_month and a.thr_emp_pk=:new.thr_emp_pk;
                                           
                                           FETCH l_cur INTO l_cur_rec;
                                          l_flag_exist := l_cur%FOUND;
                                        CLOSE l_cur;
                                        
                                             UPDATE THR_CURRENT_ALE A
                                            SET A.ALE_HOURS=NVL(A.ALE_HOURS,0)-NVL(:OLD.ABSENCE_TIME,0) --PHAI TRU DI GIA TRI CU 
                                            WHERE A.DEL_IF=0 AND A.WORK_MON=w_month AND A.THR_EMP_PK=:NEW.THR_EMP_PK;  
                            ELSIF NVL(:NEW.ABSENCE_TIME,0)<>NVL(:OLD.ABSENCE_TIME,0) THEN --THAY DOI TIME
                                    
                                            --XAC DINH PERIOD
                                          w_month:=hr_f_period_month_2(:new.absence_dt,l_sal_period); 
                                           open l_cur for select 1 from thr_current_ale a
                                           where a.del_if=0 and a.work_mon=w_month and a.thr_emp_pk=:new.thr_emp_pk;
                                           
                                           FETCH l_cur INTO l_cur_rec;
                                          l_flag_exist := l_cur%FOUND;
                                         CLOSE l_cur;
                                        
                                            UPDATE THR_CURRENT_ALE A
                                            SET A.ALE_HOURS=NVL(A.ALE_HOURS,0)+NVL(:NEW.ABSENCE_TIME,0)-NVL(:OLD.ABSENCE_TIME,0)
                                            WHERE A.DEL_IF=0 AND A.WORK_MON=w_month AND A.THR_EMP_PK=:NEW.THR_EMP_PK;
                                              
                            ELSIF :OLD.DEL_IF<>0 AND :NEW.ABSENCE_TYPE='01' THEN -- UPDATE DEL_IF<>0 THANH 0 
                                    --XAC DINH PERIOD
                                      w_month:=hr_f_period_month_2(:new.absence_dt,l_sal_period); 
                                      UPDATE THR_CURRENT_ALE A
                                      SET A.ALE_HOURS=NVL(A.ALE_HOURS,0)+NVL(:NEW.ABSENCE_TIME,0)
                                      WHERE A.DEL_IF=0 AND A.WORK_MON=w_month AND A.THR_EMP_PK=:NEW.THR_EMP_PK;
                                             
                             
                            END IF;
                    END IF;        
        ELSIF :NEW.ABSENCE_TYPE='01' then  --XOA BAT DEL IF
                        --XAC DINH PERIOD
                           w_month:=hr_f_period_month_2(:new.absence_dt,l_sal_period); 
                           
                            UPDATE THR_CURRENT_ALE A
                            SET A.ALE_HOURS=NVL(A.ALE_HOURS,0)-NVL(:NEW.ABSENCE_TIME,0)
                            WHERE A.DEL_IF=0 AND A.WORK_MON=w_month AND A.THR_EMP_PK=:NEW.THR_EMP_PK;                      
        END IF;
        
   ELSIF :OLD.ABSENCE_TYPE='01' THEN  --delete 
            select max(e.sal_period) into l_sal_period
            from thr_employee e
            where e.del_if=0 and e.pk=:old.thr_emp_pk;
         --XAC DINH PERIOD
                           w_month:=hr_f_period_month_2(:old.absence_dt,l_sal_period); 
                           
                UPDATE THR_CURRENT_ALE A
                SET A.ALE_HOURS=NVL(A.ALE_HOURS,0)-NVL(:OLD.ABSENCE_TIME,0)
                WHERE A.DEL_IF=0 AND A.WORK_MON=w_month AND A.THR_EMP_PK=:OLD.THR_EMP_PK; 
    
   END IF;     



   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_TRG_CURRENT_ALE;
/


DROP TRIGGER HPDQ.HR_TRG_EMPLOYEE_HIS;

CREATE OR REPLACE TRIGGER HPDQ.HR_TRG_EMPLOYEE_HIS 
    after delete or insert or update
    ON HPDQ.THR_EMPLOYEE
    referencing new as new old as old
    for each row
declare
    l_pk                number;
    l_create_schedule    number := 0;
    l_cur                sys_refcursor;
    l_social_emp        number;
    l_health_emp        number;
    l_unemp_emp         number;
    l_social_com        number;
    l_health_com        number;
    l_unemp_com         number;
begin
    select thr_employee_his_seq.nextval into l_pk from dual;


    if inserting or updating then
    
        insert into thr_employee_his
                    (
                        pk,
                        thr_emp_pk,
                        emp_id,
                        old_id,
                        id_num,
                        full_name,
                        full_fname,
                        f_name,
                        l_name,
                        photo_pk,
                        status,
                        join_dt,
                        left_dt,
                        prob_type,
                        sex,
                        birth_dt,
                        place_birth,
                        nation,
                        tel,
                        permanent_addr,
                        present_addr,
                        edu_type,
                        person_id,
                        issue_dt,
                        place_per_id,
                        married_yn,
                        ethnic_type,
                        relig_type,
                        begin_contract,
                        end_contract,
                        begin_probation,
                        end_probation,
                        contract_type,
                        contract_no,
                        ale_day_in_year,
                        employee_type,
                        ot_yn,
                        bank_type,
                        job_type,
                        pos_type,
                        table_salary_pk,
                        basic_sal,
                        pro_sal,
                        allow_amt1,
                        allow_amt2,
                        allow_amt3,
                        allow_amt4,
                        allow_amt5,
                        allow_amt6,
                        allow_amt7,
                        allow_amt8,
                        allow_amt9,
                        allow_amt10,
                        allow_amt11,
                        allow_amt12,
                        union_yn,
                        union_date,
                        social_yn,
                        social_no,
                        social_place,
                        social_dt,
                        health_yn,
                        health_no,
                        health_place,
                        health_dt,
                        resign_type,
                        pay_type,
                        account,
                        tac_abpl_pk,
                        salary_yn,
                        remark,
                        pass_port_no,
                        pass_port_dt,
                        del_if,
                        crt_dt,
                        crt_by,
                        mod_dt,
                        mod_by,
                        contract_times,
                        thr_salary_manage_pk,
                        full_kname,
                        confirm_dt,
                        level1_sal,
                        money_kind,
                        net_salary_yn,
                        labor_no,
                        labor_dt,
                        salary_type,
                        product_dt,
                        al_pay_yn,
                        pit_tax_no,
                        per_addr_1,
                        per_addr_2,
                        per_addr_3,
                        per_addr_4,
                        cur_addr_1,
                        cur_addr_2,
                        cur_addr_3,
                        cur_addr_4,
                        email,
                        native_country,
                        unemp_dt,
                        unemp_yn,
                        cost_group,
                        cost_kind,
                        allow_amt1_l1,
                        allow_amt2_l1,
                        allow_amt3_l1,
                        allow_amt4_l1,
                        allow_amt5_l1,
                        allow_amt6_l1,
                        allow_amt7_l1,
                        allow_amt8_l1,
                        salary_l1_k1,
                        salary_l1_k2,
                        salary_l1_k3,
                        salary_l2_k1,
                        salary_l2_k2,
                        salary_l2_k3,
                        home_phone,
                        office_number,
                        purjob_type,
                        tco_org_pk,
                        grade_cd,
                        band_cd,
                        thr_wg_pk,
                        allow_of_ot,
                        working_place,
                        tax_yn,
                        project_pk,
                        employee_kind_pk,
                        name_other,
                        address_other,
                        tel_other,
                        noxious_yn,
                        oil_yn,
                        meal_yn,
                        ale_yn,
                        bank_branch,
                        site_yn,
                        position_yn,
                        technical_yn,
                        sal_period,
                        mod_sal_by,
                        mod_sal_dt,
                        remark_mod_sal,
                        birth_addr_city,
                        birth_addr_district,
                        birth_addr_ward,
                        birth_addr_no,
                        cur_addr_city,
                        cur_addr_district,
                        cur_addr_ward,
                        cur_addr_no,
                        per_addr_city,
                        per_addr_district,
                        per_addr_ward,
                        per_addr_no,
                        approve_status,
                        approve_by,
                        approve_dt,
                        submit_by,
                        submit_dt,
                        cancel_by,
                        cancel_dt,
                        thr_salary_approval_pk
                    )
        values
               (
                   l_pk,
                   :new.pk,
                   :new.emp_id,
                   :new.old_id,
                   :new.id_num,
                   :new.full_name,
                   :new.full_fname,
                   :new.f_name,
                   :new.l_name,
                   :new.photo_pk,
                   :new.status,
                   :new.join_dt,
                   :new.left_dt,
                   :new.prob_type,
                   :new.sex,
                   :new.birth_dt,
                   :new.place_birth,
                   :new.nation,
                   :new.tel,
                   :new.permanent_addr,
                   :new.present_addr,
                   :new.edu_type,
                   :new.person_id,
                   :new.issue_dt,
                   :new.place_per_id,
                   :new.married_yn,
                   :new.ethnic_type,
                   :new.relig_type,
                   :new.begin_contract,
                   :new.end_contract,
                   :new.begin_probation,
                   :new.end_probation,
                   :new.contract_type,
                   :new.contract_no,
                   :new.ale_day_in_year,
                   :new.employee_type,
                   :new.ot_yn,
                   :new.bank_type,
                   :new.job_type,
                   :new.pos_type,
                   :new.table_salary_pk,
                   :new.basic_sal,
                   :new.pro_sal,
                   :new.allow_amt1,
                   :new.allow_amt2,
                   :new.allow_amt3,
                   :new.allow_amt4,
                   :new.allow_amt5,
                   :new.allow_amt6,
                   :new.allow_amt7,
                   :new.allow_amt8,
                   :new.allow_amt9,
                   :new.allow_amt10,
                   :new.allow_amt11,
                   :new.allow_amt12,
                   :new.union_yn,
                   :new.union_date,
                   :new.social_yn,
                   :new.social_no,
                   :new.social_place,
                   :new.social_dt,
                   :new.health_yn,
                   :new.health_no,
                   :new.health_place,
                   :new.health_dt,
                   :new.resign_type,
                   :new.pay_type,
                   :new.account,
                   :new.tac_abpl_pk,
                   :new.salary_yn,
                   :new.remark,
                   :new.pass_port_no,
                   :new.pass_port_dt,
                   :new.del_if,
                   sysdate,
                   nvl(:new.mod_by, :new.crt_by),
                   null,
                   null,
                   :new.contract_times,
                   :new.thr_salary_manage_pk,
                   :new.full_kname,
                   :new.confirm_dt,
                   :new.level1_sal,
                   :new.money_kind,
                   :new.net_salary_yn,
                   :new.labor_no,
                   :new.labor_dt,
                   :new.salary_type,
                   :new.product_dt,
                   :new.al_pay_yn,
                   :new.pit_tax_no,
                   :new.per_addr_1,
                   :new.per_addr_2,
                   :new.per_addr_3,
                   :new.per_addr_4,
                   :new.cur_addr_1,
                   :new.cur_addr_2,
                   :new.cur_addr_3,
                   :new.cur_addr_4,
                   :new.email,
                   :new.native_country,
                   :new.unemp_dt,
                   :new.unemp_yn,
                   :new.cost_group,
                   :new.cost_kind,
                   :new.allow_amt1_l1,
                   :new.allow_amt2_l1,
                   :new.allow_amt3_l1,
                   :new.allow_amt4_l1,
                   :new.allow_amt5_l1,
                   :new.allow_amt6_l1,
                   :new.allow_amt7_l1,
                   :new.allow_amt8_l1,
                   :new.salary_l1_k1,
                   :new.salary_l1_k2,
                   :new.salary_l1_k3,
                   :new.salary_l2_k1,
                   :new.salary_l2_k2,
                   :new.salary_l2_k3,
                   :new.home_phone,
                   :new.office_number,
                   :new.purjob_type,
                   :new.tco_org_pk,
                   :new.grade_cd,
                   :new.band_cd,
                   :new.thr_wg_pk,
                   :new.allow_of_ot,
                   :new.working_place,
                   :new.tax_yn,
                   :new.project_pk,
                   :new.employee_kind_pk,
                   :new.name_other,
                   :new.address_other,
                   :new.tel_other,
                   :new.noxious_yn,
                   :new.oil_yn,
                   :new.meal_yn,
                   :new.ale_yn,
                   :new.bank_branch,
                   :new.site_yn,
                   :new.position_yn,
                   :new.technical_yn,
                   :new.sal_period,
                   :new.mod_sal_by,
                   :new.mod_sal_dt,
                   :new.remark_mod_sal,
                   :new.birth_addr_city,
                   :new.birth_addr_district,
                   :new.birth_addr_ward,
                   :new.birth_addr_no,
                   :new.cur_addr_city,
                   :new.cur_addr_district,
                   :new.cur_addr_ward,
                   :new.cur_addr_no,
                   :new.per_addr_city,
                   :new.per_addr_district,
                   :new.per_addr_ward,
                   :new.per_addr_no,
                   :new.approve_status,
                   :new.approve_by,
                   :new.approve_dt,
                   :new.submit_by,
                   :new.submit_dt,
                   :new.cancel_by,
                   :new.cancel_dt,
                   :new.thr_salary_approval_pk
               );

        if inserting then
            open l_cur for
                select d.num_4,
                       d.num_5,
                       to_number(d.char_2),
                       to_number(d.char_3)                                --INTO l_health_emp,l_social_emp,l_health_com,l_social_com
                from   thr_code_master m, thr_code_detail d
                where       m.del_if = 0
                       and d.del_if = 0
                       and m.id = 'HR0043'
                       and d.thr_code_master_pk = m.pk
                       and d.char_1 = substr(:new.begin_probation, 0, 4);

            fetch l_cur
                into   l_health_emp,
                       l_social_emp,
                       l_health_com,
                       l_social_com;

            if l_cur%notfound then
                l_health_emp := 0;
                l_social_emp := 0;
                l_health_com := 0;
                l_social_com := 0;
            end if;

            close l_cur;

            open l_cur for
                select d.num_2, d.num_3                                                             --INTO l_unemp_emp,l_unemp_com
                from   thr_code_master m, thr_code_detail d
                where       m.del_if = 0
                       and d.del_if = 0
                       and m.id = 'HR0067'
                       and d.thr_code_master_pk = m.pk
                       and d.char_1 = substr(:new.begin_probation, 0, 4);

            fetch l_cur into   l_unemp_emp, l_unemp_com;

            if l_cur%notfound then
                l_unemp_emp := 0;
                l_unemp_com := 0;
            end if;

            close l_cur;

            -- insert hop dong thu viec
        /*
            insert into thr_labour_contract
                        (
                            pk,
                            thr_employee_pk,
                            begin_probation,
                            end_probation,
                            begin_contract,
                            end_contract,
                            contract_type,
                            contract_no,
                            basic_sal,
                            pro_sal,
                            contract_times,
                            remark,
                            del_if,
                            crt_by,
                            crt_dt,
                            allow_amt1,
                            allow_amt2,
                            allow_amt3,
                            allow_amt4,
                            allow_amt5,
                            allow_amt6,
                            allow_amt7,
                            allow_amt8,
                            prob_type,
                            salary_k1,
                            salary_k2,
                            salary_k3,
                            social_company,
                            health_company,
                            unemp_company,
                            social_emp,
                            health_emp,
                            unemp_emp,
                            allow_amt9,
                            allow_amt10,
                            allow_amt11,
                            allow_amt12,
                            pos_type,
                            job_type
                        )
            values
                   (
                       thr_labour_contract_seq.nextval,
                       :new.pk,
                       :new.begin_probation,
                       :new.end_probation,
                       null,
                       null,
                       :new.contract_type,
                       :new.contract_no,
                       :new.basic_sal,
                       :new.pro_sal,
                       1,
                       null,
                       0,
                       :new.crt_by,
                       sysdate,
                       :new.allow_amt1,
                       :new.allow_amt2,
                       :new.allow_amt3,
                       :new.allow_amt4,
                       :new.allow_amt5,
                       :new.allow_amt6,
                       :new.allow_amt7,
                       :new.allow_amt8,
                       :new.prob_type,
                       :new.salary_l2_k1,
                       :new.salary_l2_k2,
                       :new.salary_l2_k3,
                       l_social_com,
                       l_health_com,
                       l_unemp_com,
                       l_social_emp,
                       l_health_emp,
                       l_unemp_emp,
                       :new.allow_amt9,
                       :new.allow_amt10,
                       :new.allow_amt11,
                       :new.allow_amt12,
                       :new.pos_type,
                       :new.job_type
                   );
            */
            if :new.left_dt is not null then
                insert into thr_employee_resign
                            (
                                pk,
                                thr_emp_pk,
                                join_dt,
                                left_dt,
                                ale_day_in_year,
                                resign_type--,RESIGN_NOTE
                                ,
                                del_if,
                                crt_by,
                                crt_dt,
                                return_health_card,
                                ale_plus
                            )
                values
                       (
                           thr_employee_resign_seq.nextval,
                           :new.pk,
                           :new.join_dt,
                           :new.left_dt,
                           :new.ale_day_in_year,
                           :new.resign_type--,:NEW.REMARK
                           ,
                           0,
                           :new.crt_by,
                           :new.crt_dt,
                           'C',
                           :new.ale_plus
                       );
            end if;

            -- GHI NHAN LAN DAU NHAP LUONG
            insert into thr_salary_audit
                        (
                            pk,
                            thr_emp_pk,
                            del_if,
                            tco_org_pk,
                            thr_wg_pk,
                            pos_type,
                            job_type,
                            emp_id,
                            remark,
                            crt_by,
                            crt_dt,
                            sal_level1,
                            sal_lelve2,
                            allow_amt1,
                            allow_amt1_l1,
                            allow_amt2,
                            allow_amt2_l1,
                            allow_amt3,
                            allow_amt3_l1,
                            allow_amt4,
                            allow_amt4_l1,
                            allow_amt5,
                            allow_amt5_l1,
                            allow_amt6,
                            allow_amt6_l1,
                            allow_amt7,
                            allow_amt7_l1,
                            allow_amt8,
                            allow_amt8_l1,
                            confirm_dt,
                            remark_mod_sal,
                            allow_amt9,
                            allow_amt9_l1,
                            allow_amt10,
                            allow_amt10_l1,
                            allow_amt11,
                            allow_amt11_l1,
                            allow_amt12,
                            allow_amt12_l1
                        )
            values
                   (
                       thr_salary_audit_seq.nextval,
                       :new.pk,
                       :new.del_if,
                       :new.tco_org_pk,
                       :new.thr_wg_pk,
                       :new.pos_type,
                       :new.job_type,
                       :new.emp_id,
                       'AUTO INS EMP TRG',
                       :new.crt_by,
                       sysdate,
                       :new.level1_sal,
                       :new.basic_sal,
                       :new.allow_amt1,
                       :new.allow_amt1_l1,
                       :new.allow_amt2,
                       :new.allow_amt2_l1,
                       :new.allow_amt3,
                       :new.allow_amt3_l1,
                       :new.allow_amt4,
                       :new.allow_amt4_l1,
                       :new.allow_amt5,
                       :new.allow_amt5_l1,
                       :new.allow_amt6,
                       :new.allow_amt6_l1,
                       :new.allow_amt7,
                       :new.allow_amt7_l1,
                       :new.allow_amt8,
                       :new.allow_amt8_l1,
                       :new.confirm_dt,
                       :new.remark_mod_sal,
                       :new.allow_amt9,
                       :new.allow_amt9_l1,
                       :new.allow_amt10,
                       :new.allow_amt10_l1,
                       :new.allow_amt11,
                       :new.allow_amt11_l1,
                       :new.allow_amt12,
                       :new.allow_amt12_l1
                   );
        end if;

        if updating then
            if      nvl(:new.basic_sal, 0) <> nvl(:old.basic_sal, 0)
               or nvl(:new.level1_sal, 0) <> nvl(:old.level1_sal, 0)
               or nvl(:new.confirm_dt, '30000101') <> nvl(:old.confirm_dt, '30000101')
               or nvl(:new.allow_amt1, 0) <> nvl(:old.allow_amt1, 0)
               or nvl(:new.allow_amt2, 0) <> nvl(:old.allow_amt2, 0)
               or nvl(:new.allow_amt3, 0) <> nvl(:old.allow_amt3, 0)
               or nvl(:new.allow_amt4, 0) <> nvl(:old.allow_amt4, 0)
               or nvl(:new.allow_amt5, 0) <> nvl(:old.allow_amt5, 0)
               or nvl(:new.allow_amt6, 0) <> nvl(:old.allow_amt6, 0)
               or nvl(:new.allow_amt7, 0) <> nvl(:old.allow_amt7, 0)
               or nvl(:new.allow_amt8, 0) <> nvl(:old.allow_amt8, 0)
               or nvl(:new.allow_amt9, 0) <> nvl(:old.allow_amt9, 0)
               or nvl(:new.allow_amt10, 0) <> nvl(:old.allow_amt10, 0)
               or nvl(:new.allow_amt11, 0) <> nvl(:old.allow_amt11, 0)
               or nvl(:new.allow_amt12, 0) <> nvl(:old.allow_amt12, 0)
               or nvl(:new.allow_amt1_l1, 0) <> nvl(:old.allow_amt1_l1, 0)
               or nvl(:new.allow_amt2_l1, 0) <> nvl(:old.allow_amt2_l1, 0)
               or nvl(:new.allow_amt3_l1, 0) <> nvl(:old.allow_amt3_l1, 0)
               or nvl(:new.allow_amt4_l1, 0) <> nvl(:old.allow_amt4_l1, 0)
               or nvl(:new.allow_amt5_l1, 0) <> nvl(:old.allow_amt5_l1, 0)
               or nvl(:new.allow_amt6_l1, 0) <> nvl(:old.allow_amt6_l1, 0)
               or nvl(:new.allow_amt7_l1, 0) <> nvl(:old.allow_amt7_l1, 0)
               or nvl(:new.allow_amt8_l1, 0) <> nvl(:old.allow_amt8_l1, 0)
               or nvl(:new.allow_amt9_l1, 0) <> nvl(:old.allow_amt9_l1, 0)
               or nvl(:new.allow_amt10_l1, 0) <> nvl(:old.allow_amt10_l1, 0)
               or nvl(:new.allow_amt11_l1, 0) <> nvl(:old.allow_amt11_l1, 0)
               or nvl(:new.allow_amt12_l1, 0) <> nvl(:old.allow_amt12_l1, 0) then
                insert into thr_salary_audit
                            (
                                pk,
                                thr_emp_pk,
                                del_if,
                                tco_org_pk,
                                thr_wg_pk,
                                pos_type,
                                job_type,
                                emp_id,
                                remark,
                                crt_by,
                                crt_dt,
                                sal_level1,
                                sal_lelve2,
                                allow_amt1,
                                allow_amt1_l1,
                                allow_amt2,
                                allow_amt2_l1,
                                allow_amt3,
                                allow_amt3_l1,
                                allow_amt4,
                                allow_amt4_l1,
                                allow_amt5,
                                allow_amt5_l1,
                                allow_amt6,
                                allow_amt6_l1,
                                allow_amt7,
                                allow_amt7_l1,
                                allow_amt8,
                                allow_amt8_l1,
                                confirm_dt,
                                remark_mod_sal,
                                allow_amt9,
                                allow_amt9_l1,
                                allow_amt10,
                                allow_amt10_l1,
                                allow_amt11,
                                allow_amt11_l1,
                                allow_amt12,
                                allow_amt12_l1
                            )
                values
                       (
                           thr_salary_audit_seq.nextval,
                           :new.pk,
                           :new.del_if,
                           :new.tco_org_pk,
                           :new.thr_wg_pk,
                           :new.pos_type,
                           :new.job_type,
                           :new.emp_id,
                           'AUTO INS EMP TRG',
                           :new.mod_by,
                           sysdate,
                           :new.level1_sal,
                           :new.basic_sal,
                           :new.allow_amt1,
                           :new.allow_amt1_l1,
                           :new.allow_amt2,
                           :new.allow_amt2_l1,
                           :new.allow_amt3,
                           :new.allow_amt3_l1,
                           :new.allow_amt4,
                           :new.allow_amt4_l1,
                           :new.allow_amt5,
                           :new.allow_amt5_l1,
                           :new.allow_amt6,
                           :new.allow_amt6_l1,
                           :new.allow_amt7,
                           :new.allow_amt7_l1,
                           :new.allow_amt8,
                           :new.allow_amt8_l1,
                           :new.confirm_dt,
                           :new.remark_mod_sal,
                           :new.allow_amt9,
                           :new.allow_amt9_l1,
                           :new.allow_amt10,
                           :new.allow_amt10_l1,
                           :new.allow_amt11,
                           :new.allow_amt11_l1,
                           :new.allow_amt12,
                           :new.allow_amt12_l1
                       );
            end if;

            if :new.join_dt <> :old.join_dt or (:new.status = 'A' and  :old.status= 'R') then
                delete thr_wg_sch_detail a
                where  a.del_if = 0 and a.thr_emp_pk = :new.pk and a.work_dt between :old.join_dt and :new.join_dt;

                l_create_schedule := 1;
            end if;

            if :old.left_dt is null and :new.left_dt is not null then                                       --FROM ACTIVE TO RESIGN
                insert into thr_employee_resign
                            (
                                pk,
                                thr_emp_pk,
                                join_dt,
                                left_dt,
                                ale_day_in_year,
                                resign_type--,RESIGN_NOTE
                                ,
                                del_if,
                                crt_by,
                                crt_dt,
                                return_health_card,
                                ale_plus
                            )
                values
                       (
                           thr_employee_resign_seq.nextval,
                           :new.pk,
                           :new.join_dt,
                           :new.left_dt,
                           :new.ale_day_in_year,
                           :new.resign_type--,:NEW.REMARK
                           ,
                           0,
                           :new.crt_by,
                           :new.crt_dt,
                           'C',
                           :new.ale_plus
                       );
            elsif :old.left_dt is not null and :new.left_dt is null then                                   --FROM ACTIVE TO RESIGN
                update thr_employee_resign
                set    del_if = pk, mod_by = :new.mod_by, mod_dt = :new.mod_dt
                where  del_if = 0 and thr_emp_pk = :new.pk;

                update thr_annual_leave a
                set    a.resign_pay_yn = 'N', a.remark = 'RESIGN TO ACTIVE', a.mod_dt = sysdate
                where  a.del_if = 0 and nvl(a.resign_pay_yn, '') = 'Y' and a.thr_emp_pk = :new.pk;
            elsif :old.left_dt is not null and :new.left_dt is not null then                               --FROM ACTIVE TO RESIGN
                update thr_employee_resign
                set    join_dt = :new.join_dt,
                       left_dt = :new.left_dt,
                       ale_day_in_year = :new.ale_day_in_year,
                       resign_type = :new.resign_type--,RESIGN_NOTE=:NEW.REMARK
                       ,
                       del_if = 0,
                       crt_by = :new.mod_by,
                       crt_dt = :new.mod_dt,
                       ale_plus = :new.ale_plus
                where  del_if = 0 and thr_emp_pk = :new.pk;
            end if;
        else
            l_create_schedule := 1;
        end if;                                                                                             --insert lich lam viec
        
        --l_create_schedule := 1 ;

        if l_create_schedule = 1 then
        
            insert into thr_wg_sch_detail
                        (
                            pk,
                            tco_org_pk,
                            thr_wg_master_pk,
                            thr_wg_pk,
                            thr_ws_pk,
                            thr_emp_pk,
                            work_dt,
                            remark,
                            del_if,
                            crt_by,
                            crt_dt,
                            day_type,
                            hol_type,
                            duty_yn
                        )
                select thr_wg_sch_detail_seq.nextval,
                       :new.tco_org_pk,
                       a.pk as thr_wg_sch_master_pk,
                       :new.thr_wg_pk as thr_group_pk,
                       a.thr_ws_pk as thr_ws_pk,
                       :new.pk as thr_emp_pk,
                       a.work_dt,
                       'AUTO INSERT FROM EMP ENTRY',
                       0,
                       :new.crt_by,
                       sysdate,
                       a.day_type,
                       a.hol_type,
                       'N'
                from   thr_wg_sch_master a
                where       a.del_if = 0
                       and :new.pk not in (select g.thr_emp_pk
                                           from   thr_wg_sch_detail g
                                           where  g.del_if = 0 and g.work_dt = a.work_dt and g.thr_emp_pk = :new.pk)
                       and :new.join_dt <= a.work_dt
                       and a.thr_wg_pk = :new.thr_wg_pk
                       and (:new.left_dt is null or :new.left_dt > a.work_dt);


--             insert into thr_wg_sch_detail
--                        (
--                            pk,
--                            thr_wg_master_pk,
--                            thr_wg_pk,
--                            thr_ws_pk,
--                            thr_emp_pk,
--                            work_dt,
--                            remark,
--                            del_if,
--                            crt_by,
--                            crt_dt,
--                            day_type,
--                            hol_type,
--                            duty_yn
--                        )
--                  select thr_wg_sch_detail_seq.nextval,
--                       null as thr_wg_sch_master_pk,
--                       :new.thr_wg_pk as thr_group_pk,
--                       28 as thr_ws_pk,  -- ca 3
--                       :new.pk as thr_emp_pk,
--                       c.car_date,
--                       'AUTO INSERT FROM EMP ENTRY',
--                       0,
--                       :new.crt_by,
--                       sysdate,
--                       c.day_type,
--                       c.hol_type,
--                       'N'
--                from  thr_calendar c
--                where  c.del_if=0 and c.tco_company_pk = 99
--                and C.CAR_DATE between :new.join_dt and '20181231';
                       
--                       
        end if;
    else                                                                                                                 -- DELETE
        --INSERT VAO BANG HISTORY


        insert into thr_employee_his
                    (
                        pk,
                        thr_emp_pk,
                        emp_id,
                        old_id,
                        id_num,
                        full_name,
                        full_fname,
                        f_name,
                        l_name,
                        photo_pk,
                        status,
                        join_dt,
                        left_dt,
                        prob_type,
                        sex,
                        birth_dt,
                        place_birth,
                        nation,
                        tel,
                        permanent_addr,
                        present_addr,
                        edu_type,
                        person_id,
                        issue_dt,
                        place_per_id,
                        married_yn,
                        ethnic_type,
                        relig_type,
                        begin_contract,
                        end_contract,
                        begin_probation,
                        end_probation,
                        contract_type,
                        contract_no,
                        ale_day_in_year,
                        employee_type,
                        ot_yn,
                        bank_type,
                        job_type,
                        pos_type,
                        table_salary_pk,
                        basic_sal,
                        pro_sal,
                        allow_amt1,
                        allow_amt2,
                        allow_amt3,
                        allow_amt4,
                        allow_amt5,
                        allow_amt6,
                        allow_amt7,
                        allow_amt8,
                        union_yn,
                        union_date,
                        social_yn,
                        social_no,
                        social_place,
                        social_dt,
                        health_yn,
                        health_no,
                        health_place,
                        health_dt,
                        resign_type,
                        pay_type,
                        account,
                        tac_abpl_pk,
                        salary_yn,
                        remark,
                        pass_port_no,
                        pass_port_dt,
                        del_if,
                        crt_dt,
                        crt_by,
                        mod_dt,
                        mod_by,
                        contract_times,
                        thr_salary_manage_pk,
                        full_kname,
                        confirm_dt,
                        level1_sal,
                        money_kind,
                        net_salary_yn,
                        labor_no,
                        labor_dt,
                        salary_type,
                        product_dt,
                        al_pay_yn,
                        pit_tax_no,
                        per_addr_1,
                        per_addr_2,
                        per_addr_3,
                        per_addr_4,
                        cur_addr_1,
                        cur_addr_2,
                        cur_addr_3,
                        cur_addr_4,
                        email,
                        native_country,
                        unemp_dt,
                        unemp_yn,
                        cost_group,
                        cost_kind,
                        allow_amt1_l1,
                        allow_amt2_l1,
                        allow_amt3_l1,
                        allow_amt4_l1,
                        allow_amt5_l1,
                        allow_amt6_l1,
                        allow_amt7_l1,
                        allow_amt8_l1,
                        salary_l1_k1,
                        salary_l1_k2,
                        salary_l1_k3,
                        salary_l2_k1,
                        salary_l2_k2,
                        salary_l2_k3,
                        home_phone,
                        office_number,
                        purjob_type,
                        tco_org_pk,
                        grade_cd,
                        band_cd,
                        thr_wg_pk,
                        allow_of_ot,
                        working_place,
                        tax_yn,
                        project_pk,
                        employee_kind_pk,
                        name_other,
                        address_other,
                        tel_other,
                        noxious_yn,
                        oil_yn,
                        meal_yn,
                        ale_yn,
                        bank_branch,
                        site_yn,
                        position_yn,
                        technical_yn,
                        sal_period,
                        birth_addr_city,
                        birth_addr_district,
                        birth_addr_ward,
                        birth_addr_no,
                        cur_addr_city,
                        cur_addr_district,
                        cur_addr_ward,
                        cur_addr_no,
                        per_addr_city,
                        per_addr_district,
                        per_addr_ward,
                        per_addr_no,
                        allow_amt9,
                        allow_amt10,
                        allow_amt11,
                        allow_amt12,
                        allow_amt9_l1,
                        allow_amt10_l1,
                        allow_amt11_l1,
                        allow_amt12_l1
                    )
        values
               (
                   l_pk,
                   :old.pk,
                   :old.emp_id,
                   :old.old_id,
                   :old.id_num,
                   :old.full_name,
                   :old.full_fname,
                   :old.f_name,
                   :old.l_name,
                   :old.photo_pk,
                   :old.status,
                   :old.join_dt,
                   :old.left_dt,
                   :old.prob_type,
                   :old.sex,
                   :old.birth_dt,
                   :old.place_birth,
                   :old.nation,
                   :old.tel,
                   :old.permanent_addr,
                   :old.present_addr,
                   :old.edu_type,
                   :old.person_id,
                   :old.issue_dt,
                   :old.place_per_id,
                   :old.married_yn,
                   :old.ethnic_type,
                   :old.relig_type,
                   :old.begin_contract,
                   :old.end_contract,
                   :old.begin_probation,
                   :old.end_probation,
                   :old.contract_type,
                   :old.contract_no,
                   :old.ale_day_in_year,
                   :old.employee_type,
                   :old.ot_yn,
                   :old.bank_type,
                   :old.job_type,
                   :old.pos_type,
                   :old.table_salary_pk,
                   :old.basic_sal,
                   :old.pro_sal,
                   :old.allow_amt1,
                   :old.allow_amt2,
                   :old.allow_amt3,
                   :old.allow_amt4,
                   :old.allow_amt5,
                   :old.allow_amt6,
                   :old.allow_amt7,
                   :old.allow_amt8,
                   :old.union_yn,
                   :old.union_date,
                   :old.social_yn,
                   :old.social_no,
                   :old.social_place,
                   :old.social_dt,
                   :old.health_yn,
                   :old.health_no,
                   :old.health_place,
                   :old.health_dt,
                   :old.resign_type,
                   :old.pay_type,
                   :old.account,
                   :old.tac_abpl_pk,
                   :old.salary_yn,
                   :old.remark,
                   :old.pass_port_no,
                   :old.pass_port_dt,
                   :old.del_if,
                   sysdate,
                   :old.crt_by,
                   :old.mod_dt,
                   :old.mod_by,
                   :old.contract_times,
                   :old.thr_salary_manage_pk,
                   :old.full_kname,
                   :old.confirm_dt,
                   :old.level1_sal,
                   :old.money_kind,
                   :old.net_salary_yn,
                   :old.labor_no,
                   :old.labor_dt,
                   :old.salary_type,
                   :old.product_dt,
                   :new.al_pay_yn,
                   :new.pit_tax_no,
                   :new.per_addr_1,
                   :new.per_addr_2,
                   :new.per_addr_3,
                   :new.per_addr_4,
                   :new.cur_addr_1,
                   :new.cur_addr_2,
                   :new.cur_addr_3,
                   :new.cur_addr_4,
                   :new.email,
                   :new.native_country,
                   :new.unemp_dt,
                   :new.unemp_yn,
                   :new.cost_group,
                   :new.cost_kind,
                   :new.allow_amt1_l1,
                   :new.allow_amt2_l1,
                   :new.allow_amt3_l1,
                   :new.allow_amt4_l1,
                   :new.allow_amt5_l1,
                   :new.allow_amt6_l1,
                   :new.allow_amt7_l1,
                   :new.allow_amt8_l1,
                   :new.salary_l1_k1,
                   :new.salary_l1_k2,
                   :new.salary_l1_k3,
                   :new.salary_l2_k1,
                   :new.salary_l2_k2,
                   :new.salary_l2_k3,
                   :new.home_phone,
                   :new.office_number,
                   :new.purjob_type,
                   :new.tco_org_pk,
                   :new.grade_cd,
                   :new.band_cd,
                   :new.thr_wg_pk,
                   :new.allow_of_ot,
                   :new.working_place,
                   :new.tax_yn,
                   :new.project_pk,
                   :new.employee_kind_pk,
                   :new.name_other,
                   :new.address_other,
                   :new.tel_other,
                   :new.noxious_yn,
                   :new.oil_yn,
                   :new.meal_yn,
                   :new.ale_yn,
                   :new.bank_branch,
                   :new.site_yn,
                   :new.position_yn,
                   :new.technical_yn,
                   :new.sal_period,
                   :old.birth_addr_city,
                   :old.birth_addr_district,
                   :old.birth_addr_ward,
                   :old.birth_addr_no,
                   :old.cur_addr_city,
                   :old.cur_addr_district,
                   :old.cur_addr_ward,
                   :old.cur_addr_no,
                   :old.per_addr_city,
                   :old.per_addr_district,
                   :old.per_addr_ward,
                   :old.per_addr_no,
                   :old.allow_amt9,
                   :old.allow_amt10,
                   :old.allow_amt11,
                   :old.allow_amt12,
                   :old.allow_amt9_l1,
                   :old.allow_amt10_l1,
                   :old.allow_amt11_l1,
                   :old.allow_amt12_l1
               );
    end if;
exception
    when others then
        -- Consider logging the error and then re-raise
        raise;
end hr_trg_employee_his;
/


DROP TRIGGER HPDQ.TAC_STOCKTR_TRIGGER;

CREATE OR REPLACE TRIGGER HPDQ.TAC_STOCKTR_TRIGGER 
AFTER DELETE OR INSERT OR UPDATE
ON HPDQ.TAC_STOCKTR
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DISABLE
DECLARE
l_count_stockmm  NUMBER;
/******************************************************************************
   NAME:       
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/19/2014      Administrator       1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     
      Sysdate:         11/19/2014
      Date and Time:   11/19/2014, 11:01:46 AM, and 11/19/2014 11:01:46 AM
      Username:        Administrator (set in TOAD Options, Proc Templates)
      Table Name:      TAC_STOCKTR (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
  
   select count(pk) 
    into l_count_stockmm 
    from tac_whmmclose 
    where del_if = 0 
    and close_yn = 'Y'
    and std_ym = :NEW.STD_YM;
    if l_count_stockmm > 0 then
        raise_application_error(-20999,'Stock is closed for this month. You cannot change data.');
    end if;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
/


DROP TRIGGER HPDQ.THR_MEAL_CHECKING_HIS;

CREATE OR REPLACE TRIGGER HPDQ.THR_MEAL_CHECKING_HIS 
AFTER DELETE 
ON HPDQ.THR_MEAL_CHECKING
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
tmpVar NUMBER;
/******************************************************************************
   NAME:       THR_MEAL_CHECKING_HIS
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/9/2014      Administrator       1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     THR_MEAL_CHECKING_HIS
      Sysdate:         10/9/2014
      Date and Time:   10/9/2014, 10:56:23 AM, and 10/9/2014 10:56:23 AM
      Username:        Administrator (set in TOAD Options, Proc Templates)
      Table Name:      THR_MEAL_CHECKING (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   tmpVar := 0;

   INSERT INTO THR_MEAL_CHECKING_HIS (PK, THR_EMP_PK, WORK_DT, TIME_IN, DEL_IF, CRT_BY, CRT_DT, REMARK, TCO_ORG_PK,mod_by_hand,meal_times)
   VALUES (THR_MEAL_CHECKING_HIS_SEQ.NEXTVAL, :OLD.THR_EMP_PK, :OLD.WORK_DT, :OLD.TIME_IN, :OLD.DEL_IF, :NEW.MOD_BY, SYSDATE, :OLD.REMARK, :OLD.TCO_ORG_PK,:OLD.mod_by_hand,:OLD.meal_times) ;
   
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END THR_MEAL_CHECKING_HIS;
/


DROP TRIGGER HPDQ.THT_INVOICE_ADJ_UPDATE;

CREATE OR REPLACE TRIGGER HPDQ.THT_INVOICE_ADJ_UPDATE 
before delete or update
ON HPDQ.THT_INVOICE_ADJ
referencing new as new old as old
for each row
declare

/******************************************************************************
   NAME:       THT_INVOICE_ADJ_update
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/14/2012      Nguyen Van Thai       1. Created this trigger.

   NOTES:

******************************************************************************/
begin
   if to_char (:old.crt_dt,'yyyymmdd') < to_char (sysdate, 'yyyymmdd')
      then
         raise_application_error (
            -20001,
            'You can not change the past data. Only can change today data.');
      end if;
end tht_invoice_adj_update;
/


DROP TRIGGER HPDQ.THT_PREPAYMENTD_TRG;

CREATE OR REPLACE TRIGGER HPDQ.THT_PREPAYMENTD_TRG 
BEFORE DELETE
ON HPDQ.THT_PREPAYMENTD
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
declare
  
   l_printed_yn    varchar2 (100);
begin  
   if :new.tht_prepayment_pk > 0
   then
      select max (a.printed_yn)
        into l_printed_yn
        from tht_room_allocate a,tht_prepayment b
       where b.pk = :new.tht_prepayment_pk and a.pk=b.tht_room_allocate_pk
            and a.del_if = 0 and b.del_if = 0 and a.checkout_date is null;

      if l_printed_yn = 'Y' or l_printed_yn is null
      then
         raise_application_error (
            -20001,
            'This guest already check out or printed bill. So can not make this transaction.');
      end if;
   end if;
end THT_PREPAYMENTD_TRG;
/


DROP TRIGGER HPDQ.THT_PREPAYMENT_TRG;

CREATE OR REPLACE TRIGGER HPDQ.THT_PREPAYMENT_TRG 
BEFORE UPDATE
ON HPDQ.THT_PREPAYMENT
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
declare
  
   l_printed_yn    varchar2 (100);
begin  
   if :new.tht_room_allocate_pk > 0
   then
      select max (printed_yn)
        into l_printed_yn
        from tht_room_allocate
       where pk = :new.tht_room_allocate_pk and del_if = 0 and checkout_date is null;

      if l_printed_yn = 'Y' or l_printed_yn is null
      then
         raise_application_error (
            -20001,
            'This guest already check out or printed bill. So can not make this transaction.');
      end if;
   end if;
end THT_PREPAYMENT_TRG;
/


DROP TRIGGER HPDQ.TLG_DDINHMUC_ECUS_TMP_TRG;

CREATE OR REPLACE TRIGGER HPDQ.TLG_DDINHMUC_ECUS_TMP_TRG 
BEFORE INSERT
ON HPDQ.TLG_DDINHMUC_ECUS_TMP
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column PK
  :new.PK := TLG_DDINHMUC_ECUS_TMP2_SEQ.nextval;
END TLG_DDINHMUC_ECUS_TMP_TRG;
/


DROP TRIGGER HPDQ.TLG_PA_PACKAGES_HIS;

CREATE OR REPLACE TRIGGER HPDQ.TLG_PA_PACKAGES_HIS 
   AFTER DELETE OR INSERT OR UPDATE
   ON HPDQ.TLG_PA_PACKAGES
   REFERENCING NEW AS New OLD AS Old
   FOR EACH ROW
DECLARE
/******************************************************************************
   NAME:       TRG_THR_CLOSE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        19-Aug-08             1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     TRG_THR_CLOSE
      Sysdate:         19-Aug-08
      Date and Time:   19-Aug-08, 8:55:42 AM, and 19-Aug-08 8:55:42 AM
      Username:         (set in TOAD Options, Proc Templates)
      Table Name:      THR_CLOSE (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   IF INSERTING OR UPDATING
   THEN
      INSERT INTO TLG_PA_PACKAGES_HIS (PK,
                                       DEL_IF,
                                       CRT_BY,
                                       CRT_DT,
                                       DESCRIPTION,
                                       PACK_TYPE,
                                       TLG_PA_PACKAGES_TYPE_PK,
                                       TLG_PA_PACKING_TYPE_PK,
                                       ITEM_BC,
                                       PACKAGE_SEQ,
                                       TLG_SA_SALEORDER_M_PK,
                                       TLG_PA_PACKAGES_PROCESS_PK,
                                       TLG_PA_PACKING_WI_PK,
                                       REF_PO_NO,
                                       ATT01,
                                       ATT02,
                                       CLOSE_YN,
                                       STYLE_SPEC,
                                       CHARGER_PK,
                                       TLG_IN_WHLOC_PK,
                                       SOD_NO,
                                       PRINT_YN,
                                       PRINT_TIMES,
                                       PARENT_PK,
                                       PA_GROSS_WEIGHT,
                                       PA_VOLUME,
                                       PA_NET_WEIGHT,
                                       IN_TIME,
                                       OUT_TIME,
                                       IN_BY,
                                       OUT_BY,
                                       YYMMDD,
                                       PACKAGES_TYPE,
                                       YY,
                                       IN_YN,
                                       OUT_YN,
                                       IN_OUT_STATUS,
                                       IN_CHARGER_PK,
                                       OUT_CHARGER_PK,
                                       IN_LINE_PK,
                                       OUT_LINE_PK,
                                       BC_SEQ,
                                       BC_YN,
                                       YYMM,
                                       WH_LOC_ID,
                                       TLG_PA_PACK_WI_M_PK,
                                       PRINT_DATE,
                                       YYYYMMDD,
                                       DATA,
                                       TABLET_BC_YN,
                                       BC_SEQ_TEMP,
                                       PO_PO_D_PK,
                                       TLG_IN_WAREHOUSE_PK,
                                       REMARK,
                                      CREATE_PACK_TYPE,
                                      CREATE_LOT_NO,
                                      CREATE_WH_PK,
                                      CREATE_ITEM_PK,
                                      TLG_SA_SALEORDER_D_PK,
                                      TLG_IT_ITEM_PK,
                                      QTY,
                                      ROLL_NO,
                                      ITEM_CODE,
                                      ITEM_NAME,
                                      TCO_BUSPARTNER_PK,
                                      LEAF_YN,
                                      LOT_NO)
           VALUES (TLG_PA_PACKAGES_HIS_SEQ.NEXTVAL,
                   :NEW.DEL_IF,
                    nvl(:new.mod_by, :new.crt_by),
                    SYSDATE,
                   :NEW.DESCRIPTION,
                   :NEW.PACK_TYPE,
                   :NEW.TLG_PA_PACKAGES_TYPE_PK,
                   :NEW.TLG_PA_PACKING_TYPE_PK,
                   :NEW.ITEM_BC,
                   :NEW.PACKAGE_SEQ,
                   :NEW.TLG_SA_SALEORDER_M_PK,
                   :NEW.TLG_PA_PACKAGES_PROCESS_PK,
                   :NEW.TLG_PA_PACKING_WI_PK,
                   :NEW.REF_PO_NO,
                   :NEW.ATT01,
                   :NEW.ATT02,
                   :NEW.CLOSE_YN,
                   :NEW.STYLE_SPEC,
                   :NEW.CHARGER_PK,
                   :NEW.TLG_IN_WHLOC_PK,
                   :NEW.SOD_NO,
                   :NEW.PRINT_YN,
                   :NEW.PRINT_TIMES,
                   :NEW.PARENT_PK,
                   :NEW.PA_GROSS_WEIGHT,
                   :NEW.PA_VOLUME,
                   :NEW.PA_NET_WEIGHT,
                   :NEW.IN_TIME,
                   :NEW.OUT_TIME,
                   :NEW.IN_BY,
                   :NEW.OUT_BY,
                   :NEW.YYMMDD,
                   :NEW.PACKAGES_TYPE,
                   :NEW.YY,
                   :NEW.IN_YN,
                   :NEW.OUT_YN,
                   :NEW.IN_OUT_STATUS,
                   :NEW.IN_CHARGER_PK,
                   :NEW.OUT_CHARGER_PK,
                   :NEW.IN_LINE_PK,
                   :NEW.OUT_LINE_PK,
                   :NEW.BC_SEQ,
                   :NEW.BC_YN,
                   :NEW.YYMM,
                   :NEW.WH_LOC_ID,
                   :NEW.TLG_PA_PACK_WI_M_PK,
                   :NEW.PRINT_DATE,
                   :NEW.YYYYMMDD,
                   :NEW.DATA,
                   :NEW.TABLET_BC_YN,
                   :NEW.BC_SEQ_TEMP,
                   :NEW.PO_PO_D_PK,
                   :NEW.TLG_IN_WAREHOUSE_PK,
                   :NEW.REMARK,
                      :NEW.CREATE_PACK_TYPE,
                      :NEW.CREATE_LOT_NO,
                      :NEW.CREATE_WH_PK,
                      :NEW.CREATE_ITEM_PK,
                      :NEW.TLG_SA_SALEORDER_D_PK,
                      :NEW.TLG_IT_ITEM_PK,
                      :NEW.QTY,
                      :NEW.ROLL_NO,
                      :NEW.ITEM_CODE,
                      :NEW.ITEM_NAME,
                      :NEW.TCO_BUSPARTNER_PK,
                      :NEW.LEAF_YN,
                      :NEW.LOT_NO);
   ELSE
      INSERT INTO TLG_PA_PACKAGES_HIS (PK,
                                       DEL_IF,
                                       CRT_BY,
                                       CRT_DT,
                                       MOD_BY,
                                       MOD_DT,
                                       DESCRIPTION,
                                       PACK_TYPE,
                                       TLG_PA_PACKAGES_TYPE_PK,
                                       TLG_PA_PACKING_TYPE_PK,
                                       ITEM_BC,
                                       PACKAGE_SEQ,
                                       TLG_SA_SALEORDER_M_PK,
                                       TLG_PA_PACKAGES_PROCESS_PK,
                                       TLG_PA_PACKING_WI_PK,
                                       REF_PO_NO,
                                       ATT01,
                                       ATT02,
                                       CLOSE_YN,
                                       STYLE_SPEC,
                                       CHARGER_PK,
                                       TLG_IN_WHLOC_PK,
                                       SOD_NO,
                                       PRINT_YN,
                                       PRINT_TIMES,
                                       PARENT_PK,
                                       PA_GROSS_WEIGHT,
                                       PA_VOLUME,
                                       PA_NET_WEIGHT,
                                       IN_TIME,
                                       OUT_TIME,
                                       IN_BY,
                                       OUT_BY,
                                       YYMMDD,
                                       PACKAGES_TYPE,
                                       YY,
                                       IN_YN,
                                       OUT_YN,
                                       IN_OUT_STATUS,
                                       IN_CHARGER_PK,
                                       OUT_CHARGER_PK,
                                       IN_LINE_PK,
                                       OUT_LINE_PK,
                                       BC_SEQ,
                                       BC_YN,
                                       YYMM,
                                       WH_LOC_ID,
                                       TLG_PA_PACK_WI_M_PK,
                                       PRINT_DATE,
                                       YYYYMMDD,
                                       DATA,
                                       TABLET_BC_YN,
                                       BC_SEQ_TEMP,
                                       PO_PO_D_PK,
                                       TLG_IN_WAREHOUSE_PK,
                                       REMARK,
                                      CREATE_PACK_TYPE,
                                      CREATE_LOT_NO,
                                      CREATE_WH_PK,
                                      CREATE_ITEM_PK,
                                      TLG_SA_SALEORDER_D_PK,
                                      TLG_IT_ITEM_PK,
                                      QTY,
                                      ROLL_NO,
                                      ITEM_CODE,
                                      ITEM_NAME,
                                      TCO_BUSPARTNER_PK,
                                      LEAF_YN,
                                      LOT_NO)
           VALUES (TLG_PA_PACKAGES_HIS_SEQ.NEXTVAL,
                   :OLD.DEL_IF,
                   :OLD.CRT_BY,
                   :OLD.CRT_DT,
                   :OLD.MOD_BY,
                   :OLD.MOD_DT,
                   :OLD.DESCRIPTION,
                   :OLD.PACK_TYPE,
                   :OLD.TLG_PA_PACKAGES_TYPE_PK,
                   :OLD.TLG_PA_PACKING_TYPE_PK,
                   :OLD.ITEM_BC,
                   :OLD.PACKAGE_SEQ,
                   :OLD.TLG_SA_SALEORDER_M_PK,
                   :OLD.TLG_PA_PACKAGES_PROCESS_PK,
                   :OLD.TLG_PA_PACKING_WI_PK,
                   :OLD.REF_PO_NO,
                   :OLD.ATT01,
                   :OLD.ATT02,
                   :OLD.CLOSE_YN,
                   :OLD.STYLE_SPEC,
                   :OLD.CHARGER_PK,
                   :OLD.TLG_IN_WHLOC_PK,
                   :OLD.SOD_NO,
                   :OLD.PRINT_YN,
                   :OLD.PRINT_TIMES,
                   :OLD.PARENT_PK,
                   :OLD.PA_GROSS_WEIGHT,
                   :OLD.PA_VOLUME,
                   :OLD.PA_NET_WEIGHT,
                   :OLD.IN_TIME,
                   :OLD.OUT_TIME,
                   :OLD.IN_BY,
                   :OLD.OUT_BY,
                   :OLD.YYMMDD,
                   :OLD.PACKAGES_TYPE,
                   :OLD.YY,
                   :OLD.IN_YN,
                   :OLD.OUT_YN,
                   :OLD.IN_OUT_STATUS,
                   :OLD.IN_CHARGER_PK,
                   :OLD.OUT_CHARGER_PK,
                   :OLD.IN_LINE_PK,
                   :OLD.OUT_LINE_PK,
                   :OLD.BC_SEQ,
                   :OLD.BC_YN,
                   :OLD.YYMM,
                   :OLD.WH_LOC_ID,
                   :OLD.TLG_PA_PACK_WI_M_PK,
                   :OLD.PRINT_DATE,
                   :OLD.YYYYMMDD,
                   :OLD.DATA,
                   :OLD.TABLET_BC_YN,
                   :OLD.BC_SEQ_TEMP,
                   :OLD.PO_PO_D_PK,
                   :OLD.TLG_IN_WAREHOUSE_PK,
                   :OLD.REMARK,
                      :OLD.CREATE_PACK_TYPE,
                      :OLD.CREATE_LOT_NO,
                      :OLD.CREATE_WH_PK,
                      :OLD.CREATE_ITEM_PK,
                      :OLD.TLG_SA_SALEORDER_D_PK,
                      :OLD.TLG_IT_ITEM_PK,
                      :OLD.QTY,
                      :OLD.ROLL_NO,
                      :OLD.ITEM_CODE,
                      :OLD.ITEM_NAME,
                      :OLD.TCO_BUSPARTNER_PK,
                      :OLD.LEAF_YN,
                      :OLD.LOT_NO);
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END TLG_PA_PACKAGES_HIS;
/


DROP TRIGGER HPDQ.TRG_SPECIAL_SERVICE_USED_UPD;

CREATE OR REPLACE TRIGGER HPDQ.TRG_SPECIAL_SERVICE_USED_UPD 
BEFORE DELETE OR UPDATE
ON HPDQ.THT_SPECIAL_SERVICE_USED
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
declare

/******************************************************************************
   NAME:       
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/21/2012      Nguyen Van Thai       1. Created this trigger.

  
******************************************************************************/
begin
   if :old.payed_yn <> :new.payed_yn or :old.tht_room_allocate_pk <> :new.tht_room_allocate_pk then
     return;
   end if;
   
    if to_char (:old.crt_dt,'yyyymmdd') < to_char (sysdate, 'yyyymmdd')
      then
         raise_application_error (
            -20001,
            'You can not change the past data. Only can change today data.');
    end if;
end ;
/


DROP TRIGGER HPDQ.TRG_TCO_ORG_LOG;

CREATE OR REPLACE TRIGGER HPDQ.TRG_TCO_ORG_LOG 
after delete or update
ON HPDQ.TCO_ORG
referencing new as new old as old
for each row
declare
   
/******************************************************************************

******************************************************************************/
begin
   insert into tco_org_his(pk,
                                org_id,
                                org_type,
                                org_nm,
                                org_lnm,
                                org_fnm,
                                p_pk,
                                st_date,
                                end_date,
                                description,
                                del_if,
                                crt_by,
                                crt_dt,
                                mod_by,
                                mod_dt,
                                tco_org_pk,
                                tco_company_pk,
                                seq,
                                manager_pk)
        values (tco_org_his_seq.nextval,
                :old.org_id,
                :old.org_type,
                :old.org_nm,
                :old.org_lnm,
                :old.org_fnm,
                :old.p_pk,
                :old.st_date,
                :old.end_date,
                :old.description,
                :old.del_if,
                :old.crt_by,
                :old.crt_dt,
                :old.mod_by,
                :old.mod_dt,
                :old.pk,
                :old.tco_company_pk,
                :old.seq,
                :old.manager_pk);
end trg_tco_org_log;
/


DROP TRIGGER HPDQ.TRG_THR_MEAL_TIME_HOAPHAT;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THR_MEAL_TIME_HOAPHAT
AFTER DELETE OR INSERT OR UPDATE
ON HPDQ.THR_MEAL_TIME_HOAPHAT REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE

l_plan_pk number;
l_line_pk number;
l_daily_act_pk  NUMBER;
l_canteen_type  varchar2(10);
l_line_type     varchar2(10);
p_canteen_type  varchar2(10);
p_line_type     varchar2(10);
l_shift_type    varchar2(10);
BEGIN
   IF INSERTING THEN
            
       select max(A.CANTEEN_TYPE), max(a.line_type) into p_canteen_type, p_line_type
        from thr_meal_canteen_line a
        where a.del_if=0
        and A.ID_MACHINE = :NEW.ID_MACHINE ;
   
   -- KIEM TRA TINH HOP LE CUA DU LIEU QUET THE
      SELECT max(A.PK), max(A.CANTIN_CODE), MAX(A.SHIFT_TYPE)
      INTO l_plan_pk, l_canteen_type, l_shift_type
      FROM THR_MEAL_DAILY_PLAN A
      WHERE A.DEL_IF=0
      AND TO_NUMBER(A.ID_NUM) = TO_NUMBER(:NEW.ID)
      AND :NEW.WORK_DT BETWEEN A.START_DT AND A.END_DT
      AND  TO_DATE(:NEW.WORK_DT||:NEW.TIME, 'YYYYMMDDHH24:MI') BETWEEN TO_DATE(A.START_DT||START_TIME, 'YYYYMMDDHH24:MI')
                    AND TO_DATE(A.END_DT||END_TIME, 'YYYYMMDDHH24:MI');

      IF l_plan_pk IS NOT NULL THEN-- CO DU LIEU CA BEN PLAN
      
      -- KIEM TRA TIEP THEO CO DUNG DU LIEU CUA NHA AN HAY KO
        select max(a.pk), max(a.line_type) into l_line_pk, l_line_type
        from thr_meal_canteen_line a
        where a.del_if=0
        and A.CANTEEN_TYPE = l_canteen_type
        and A.ID_MACHINE = :NEW.ID_MACHINE ;
        
        IF l_line_pk IS NOT NULL THEN -- DU LIEU HOP LE
        
           SELECT MAX(A.PK) INTO l_daily_act_pk
           FROM THR_MEAL_DAILY_ACT A
           WHERE A.DEL_IF=0
           AND A.ID_NUM = :NEW.ID
           AND A.CANTIN_CODE = l_canteen_type
           AND A.SHIFT_TYPE = l_shift_type
           AND A.MEAL_DT = :NEW.WORK_DT;
        
           IF l_daily_act_pk IS NULL THEN
           
                INSERT INTO THR_MEAL_DAILY_ACT (PK, THR_EMP_PK, WORK_DT, TIME_IN, MEAL_DT, MEAL_TIME, DEL_IF, CRT_BY, CRT_DT,
                                            MOD_BY_HAND, TCO_ORG_PK, SHIFT_TYPE, FULL_NAME, EMP_ID
                                           , CANTIN_CODE, CONTRACTOR_CODE, ID_NUM, MEAL_NUM, WORK_DT_OF_SHIFT,TERMIAL_ID
                                           , LINE_TYPE, THR_WS_PK, STATUS, POSITION_NAME, ORG_NAME
                                           , START_DT, START_TIME, END_DT, END_TIME)
               SELECT  THR_MEAL_DAILY_ACT_SEQ.NEXTVAL, A.THR_EMP_PK, A.WORK_DT, A.TIME_IN, :NEW.WORK_DT, :NEW.TIME, 0, 'TRIGGER', SYSDATE
                                           , 'N', A.TCO_ORG_PK, A.SHIFT_TYPE, A.FULL_NAME, A.EMP_ID
                                           , A.CANTIN_CODE, A.CONTRACTOR_CODE, A.ID_NUM, A.MEAL_NUM, A.WORK_DT, :NEW.ID_MACHINE
                                           , l_line_type, A.THR_WS_PK, 1, POSITION_NAME, ORG_NAME
                                           , A.START_DT, A.START_TIME, A.END_DT, A.END_TIME
               FROM THR_MEAL_DAILY_PLAN A
               WHERE A.DEL_IF=0
               AND A.PK = l_plan_pk;
           
           ELSE 
                
                 INSERT INTO THR_MEAL_DAILY_ACT (PK, THR_EMP_PK, WORK_DT, TIME_IN, MEAL_DT, MEAL_TIME, DEL_IF, CRT_BY, CRT_DT,
                                            MOD_BY_HAND, TCO_ORG_PK, SHIFT_TYPE, FULL_NAME, EMP_ID
                                           , CANTIN_CODE, CONTRACTOR_CODE, ID_NUM, MEAL_NUM, WORK_DT_OF_SHIFT,TERMIAL_ID
                                           , LINE_TYPE, THR_WS_PK, STATUS, POSITION_NAME, ORG_NAME
                                           , START_DT, START_TIME, END_DT, END_TIME)
               SELECT  THR_MEAL_DAILY_ACT_SEQ.NEXTVAL, A.THR_EMP_PK, A.WORK_DT, A.TIME_IN, :NEW.WORK_DT, :NEW.TIME, 0, 'TRIGGER', SYSDATE
                                           , 'N', A.TCO_ORG_PK, A.SHIFT_TYPE, A.FULL_NAME, A.EMP_ID
                                           , A.CANTIN_CODE, A.CONTRACTOR_CODE, A.ID_NUM, A.MEAL_NUM, A.WORK_DT, :NEW.ID_MACHINE
                                           , l_line_type, A.THR_WS_PK, 4, POSITION_NAME, ORG_NAME
                                           , A.START_DT, A.START_TIME, A.END_DT, A.END_TIME
               FROM THR_MEAL_DAILY_PLAN A
               WHERE A.DEL_IF=0
               AND A.PK = l_plan_pk;
                
           
           END IF;
        
           
        
        ELSE  --2 SAI NHA AN
        
            INSERT INTO THR_MEAL_DAILY_ACT (PK, THR_EMP_PK, WORK_DT, TIME_IN, MEAL_DT, MEAL_TIME, DEL_IF, CRT_BY, CRT_DT,
                                            MOD_BY_HAND, TCO_ORG_PK, SHIFT_TYPE, FULL_NAME, EMP_ID
                                           , CANTIN_CODE, CONTRACTOR_CODE, ID_NUM, MEAL_NUM, WORK_DT_OF_SHIFT,TERMIAL_ID
                                           , LINE_TYPE, THR_WS_PK, STATUS, POSITION_NAME, ORG_NAME)
           SELECT  THR_MEAL_DAILY_ACT_SEQ.NEXTVAL, A.THR_EMP_PK, A.WORK_DT, A.TIME_IN, :NEW.WORK_DT, :NEW.TIME, 0, 'TRIGGER', SYSDATE
                                       , 'N', A.TCO_ORG_PK, A.SHIFT_TYPE, A.FULL_NAME, A.EMP_ID
                                       , p_canteen_type, A.CONTRACTOR_CODE, A.ID_NUM, A.MEAL_NUM, A.WORK_DT, :NEW.ID_MACHINE
                                       , p_line_type, A.THR_WS_PK, 2, POSITION_NAME, ORG_NAME
           FROM THR_MEAL_DAILY_PLAN A
           WHERE A.DEL_IF=0
           AND A.PK = l_plan_pk;
           
        
        END IF;
      
      ELSE -- 3 SAI CA AN (HOAC CHUA DANG KY)
      
        INSERT INTO THR_MEAL_DAILY_ACT (PK, THR_EMP_PK, WORK_DT, TIME_IN, MEAL_DT, MEAL_TIME, DEL_IF, CRT_BY, CRT_DT,
                                            MOD_BY_HAND, TCO_ORG_PK, SHIFT_TYPE, FULL_NAME, EMP_ID
                                           , CANTIN_CODE, CONTRACTOR_CODE, ID_NUM, MEAL_NUM, WORK_DT_OF_SHIFT,TERMIAL_ID
                                           , LINE_TYPE, THR_WS_PK, STATUS, POSITION_NAME, ORG_NAME)
         SELECT THR_MEAL_DAILY_ACT_SEQ.NEXTVAL, A.PK, :NEW.WORK_DT, :NEW.TIME, :NEW.WORK_DT, :NEW.TIME, 0, 'TRIGGER' , SYSDATE
                                    , 'N', A.TCO_ORG_PK, NULL, A.FULL_NAME, A.EMP_ID
                                    , p_canteen_type, NULL, A.ID_NUM, 0, :NEW.WORK_DT, :NEW.ID_MACHINE
                                    , p_line_type, NULL, 3, (SELECT V.CODE_NM FROM VHR_HR_CODE V WHERE V.ID ='HR0008' AND V.CODE = A.POS_TYPE)
                                    , C.ORG_NM
         FROM THR_EMPLOYEE A, TCO_ORG C
         WHERE A.DEL_IF=0 AND C.DEL_IF=0
         AND A.TCO_ORG_PK = C.PK
         AND A.ID_NUM = :NEW.ID;
         
      END IF;
   END IF;



   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END TRG_THR_MEAL_TIME_HOAPHAT;
/


DROP TRIGGER HPDQ.TRG_THT_BOOKINGD_CHECK;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_BOOKINGD_CHECK 
before delete or update
ON HPDQ.THT_BOOKINGD 
referencing new as new old as old
for each row
declare
   /******************************************************************************
        REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/12/2010      Nguyen Van Thai       1. Created this trigger.
   ******************************************************************************/
   l_cnt   number;
begin
  
    

      select count(*)
        into l_cnt
        from tht_room_allocate
       where tht_bookingd_pk = :old.pk and del_if = 0;

      if l_cnt > 0
      then
         raise_application_error(-20001, 'You can change this data. It was check-in.');
      end if;
  



      select count(*)
        into l_cnt
        from tht_guest_advance
       where tht_bookingd_pk = :old.pk and del_if = 0;

      if l_cnt > 0 and :new.del_if > 0
      then
         raise_application_error(-20001, 'This guest have deposit data. So you cannot delete it.');
      end if;

   insert into tht_bookingd_log(pk,
                                tht_booking_pk,
                                tht_room_price_pk,
                                available_room,
                                book_qty,
                                description,
                                del_if,
                                crt_by,
                                crt_dt,
                                mod_by,
                                mod_dt,
                                adult,
                                childrens,
                                total_amt,
                                tht_room_pk,
                                last_name,
                                rate_plan_pk,
                                first_name,
                                room_type,
                                checkout_time,
                                status,
                                arrival_date,
                                departure_date,
                                guest2_name,
                                guest3_name,
                                guest4_name,
                                vip_type,
                                package_amt,
                                tht_bookingd_pk
                                )
        values (tht_bookingd_log_seq.nextval,
                :old.tht_booking_pk,
                :old.tht_room_price_pk,
                :old.available_room,
                :old.book_qty,
                :old.description,
                :old.del_if,
                :old.crt_by,
                :old.crt_dt,
                :old.mod_by,
                :old.mod_dt,
                :old.adult,
                :old.childrens,
                :old.total_amt,
                :old.tht_room_pk,
                :old.last_name,
                :old.rate_plan_pk,
                :old.first_name,
                :old.room_type,
                :old.checkout_time,
                :old.status,
                :old.arrival_date,
                :old.departure_date,
                :old.guest2_name,
                :old.guest3_name,
                :old.guest4_name,
                :old.vip_type,
                :old.package_amt,
                :old.pk
                );
end trg_tht_bookingd_check;
/


DROP TRIGGER HPDQ.TRG_THT_BOOKING_UPDATE;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_BOOKING_UPDATE 
   before update
   ON HPDQ.THT_BOOKING
   referencing new as new old as old
   for each row
declare
   l_cnt   number;
begin
   select count (*)
     into l_cnt
     from tht_room_allocate
    where     tht_bookingd_pk in (select pk
                                    from tht_bookingd
                                   where tht_booking_pk = :old.pk and del_if = 0)
          and room_type = 'DMY';

   if l_cnt > 0
   then
      if :old.dummy_roomfee_yn <> :new.dummy_roomfee_yn
      then
         raise_application_error (-20001, 'Dummy room already checkin. You cannot change dummy room fee yn anymore.');
      end if;
   end if;

   if (   :old.tco_buspartner_pk <> :new.tco_buspartner_pk
       or :old.customer_type <> :new.customer_type
       or :old.from_date <> :new.from_date
       or :old.date_to <> :new.date_to
       or :old.arrival_time <> :new.arrival_time
       or :old.guarantee_type <> :new.guarantee_type
       or :old.first_name <> :new.first_name
       or :old.last_name <> :new.last_name
       or :old.status <> :new.status
       or :old.exp_date <> :new.exp_date
       or :old.nation <> :new.nation
       or :old.phone <> :new.phone
       or :old.email <> :new.email
       or :old.release_date <> :new.release_date
       or :old.booking_source <> :new.booking_source
       or :old.del_if <> :new.del_if
       or :old.tht_room_pk <> :new.tht_room_pk
       or :old.dummy_roomfee_yn <> :new.dummy_roomfee_yn)
   then
      insert into tht_booking_log (pk,
                                   slip_no,
                                   tco_buspartner_pk,
                                   contact_person,
                                   phone,
                                   email,
                                   address,
                                   fax,
                                   customer_type,
                                   from_date,
                                   date_to,
                                   send_booking_yn,
                                   payment_method,
                                   price_type,
                                   nation,
                                   city,
                                   night_days_stay,
                                   tot_customer,
                                   ccy,
                                   adjust_desc,
                                   request_desc,
                                   description,
                                   condit_cancel_desc,
                                   transport_method,
                                   transport_fee,
                                   status,
                                   last_name,
                                   del_if,
                                   crt_by,
                                   crt_dt,
                                   mod_by,
                                   mod_dt,
                                   customer_id,
                                   confirm_yn,
                                   payment,
                                   arrival_time,
                                   departure_time,
                                   tht_guest_profile_pk,
                                   deposit_amt,
                                   credit_card_owner,
                                   credit_type,
                                   credit_no,
                                   credit_expire_date,
                                   credit_ccv,
                                   guarantee_type,
                                   cash_amt,
                                   first_name,
                                   doc_date,
                                   exp_date,
                                   tht_booking_pk,
                                   release_date,
                                   booking_source,
                                   tht_room_pk,
                                   dummy_roomfee_yn)
           values (tht_booking_log_seq.nextval,
                   :old.slip_no,
                   :old.tco_buspartner_pk,
                   :old.contact_person,
                   :old.phone,
                   :old.email,
                   :old.address,
                   :old.fax,
                   :old.customer_type,
                   :old.from_date,
                   :old.date_to,
                   :old.send_booking_yn,
                   :old.payment_method,
                   :old.price_type,
                   :old.nation,
                   :old.city,
                   :old.night_days_stay,
                   :old.tot_customer,
                   :old.ccy,
                   :old.adjust_desc,
                   :old.request_desc,
                   :old.description,
                   :old.condit_cancel_desc,
                   :old.transport_method,
                   :old.transport_fee,
                   :old.status,
                   :old.last_name,
                   :old.del_if,
                   :old.crt_by,
                   :old.crt_dt,
                   :old.mod_by,
                   :old.mod_dt,
                   :old.customer_id,
                   :old.confirm_yn,
                   :old.payment,
                   :old.arrival_time,
                   :old.departure_time,
                   :old.tht_guest_profile_pk,
                   :old.deposit_amt,
                   :old.credit_card_owner,
                   :old.credit_type,
                   :old.credit_no,
                   :old.credit_expire_date,
                   :old.credit_ccv,
                   :old.guarantee_type,
                   :old.cash_amt,
                   :old.first_name,
                   :old.doc_date,
                   :old.exp_date,
                   :old.pk,
                   :old.release_date,
                   :old.booking_source,
                   :old.tht_room_pk,
                   :old.dummy_roomfee_yn);
   end if;
end trg_tht_booking_update;
/


DROP TRIGGER HPDQ.TRG_THT_MENUD_LOG;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_MENUD_LOG 
   before update
   ON HPDQ.THT_MENUD
   referencing new as new old as old
   for each row
declare
begin
   if    
         :old.unit              <> :new.unit
      or :old.quantity          <> :new.quantity
      or :old.price             <> :new.price
      or :old.description       <> :new.description
      or :old.free_yn           <> :new.free_yn
      or :old.active_yn         <> :new.active_yn
      or :old.crt_by            <> :new.crt_by
      or :old.crt_dt            <> :new.crt_dt
      or :old.mod_by            <> :new.mod_by
      or :old.mod_dt            <> :new.mod_dt
   then
      insert into tht_menud_log(
                pk,
                tht_menud_pk,
                tht_menu_pk,
                tco_item_pk,
                unit,
                quantity,
                price,
                description,
                free_yn,
                active_yn,
                crt_by,
                crt_dt,
                mod_by,
                mod_dt)
        select  tht_menud_log_seq.nextval,
                :old.pk,
                :old.tht_menu_pk,
                :old.tco_item_pk,
                :old.unit,
                :old.quantity,
                :old.price,
                :old.description,
                :old.free_yn,
                :old.active_yn,
                :old.crt_by,
                :old.crt_dt,
                :old.mod_by,
                :old.mod_dt
        from dual;
   end if;
end;
/


DROP TRIGGER HPDQ.TRG_THT_MENU_LOG;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_MENU_LOG 
   before update
   ON HPDQ.THT_MENU
   referencing new as new old as old
   for each row
declare
begin
   if    
         :old.menu_id           <> :new.menu_id
      or :old.menu_name         <> :new.menu_name
      or :old.menu_lname        <> :new.menu_lname
      or :old.menu_fname        <> :new.menu_fname
      or :old.menu_price        <> :new.menu_price
      or :old.valid_from        <> :new.valid_from
      or :old.valid_to          <> :new.valid_to
      or :old.use_yn            <> :new.use_yn
      or :old.menu_type         <> :new.menu_type
      or :old.crt_by            <> :new.crt_by
      or :old.crt_dt            <> :new.crt_dt
      or :old.mod_by            <> :new.mod_by
      or :old.mod_dt            <> :new.mod_dt
   then
      insert into tht_menu_log(
                pk,
                tht_menu_pk,
                menu_id,
                menu_name,
                menu_lname,
                menu_fname,
                menu_price,
                valid_from,
                valid_to,
                use_yn,
                menu_type,
                crt_by,
                crt_dt,
                mod_by,
                mod_dt)
        select  tht_menu_log_seq.nextval,
                :old.pk,
                :old.menu_id,
                :old.menu_name,
                :old.menu_lname,
                :old.menu_fname,
                :old.menu_price,
                :old.valid_from,
                :old.valid_to,
                :old.use_yn,
                :old.menu_type,
                :old.crt_by,
                :old.crt_dt,
                :old.mod_by,
                :old.mod_dt
        from dual;
   end if;
end;
/


DROP TRIGGER HPDQ.TRG_THT_NIGHTAUDIT_UPDATE;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_NIGHTAUDIT_UPDATE 
   BEFORE DELETE
   ON HPDQ.THT_NIGHTAUDIT
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
/******************************************************************************
     REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/25/2010      Nguyen Van Thai       1. Created this trigger.
******************************************************************************/

BEGIN
   raise_application_error (-20001, 'You can not delete this data.');
END trg_tht_nightaudit_update;
/


DROP TRIGGER HPDQ.TRG_THT_OTHER_FEES_CHECK;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_OTHER_FEES_CHECK 
   before delete or update
   ON HPDQ.THT_OTHER_FEES
   referencing new as new old as old
   for each row
declare
   /******************************************************************************
        REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/26/2010      Nguyen Van Thai       1. Created this trigger.
   ******************************************************************************/
   l_cnt   number;
begin

   if :old.PAYED_YN <> :new.PAYED_YN or :old.THT_ROOM_ALLOCATE_PK <> :new.THT_ROOM_ALLOCATE_PK then
     return;
   end if;
   
    if to_char (:old.crt_dt,'yyyymmdd') < to_char (sysdate, 'yyyymmdd')
      then
         raise_application_error (
            -20001,
            'You can not change the past data. Only can change today data.');
    end if;
      
   select count (*)
     into l_cnt
     from tht_room_allocate
    where pk = :old.tht_room_allocate_pk and (checkout_date is not null or printed_yn = 'Y');

   if l_cnt > 0
   then
      raise_application_error (-20001,
                               'This guest was check out or printed bill. You can not change or delete data.');
   end if;

   
end trg_tht_other_fees_check;
/


DROP TRIGGER HPDQ.TRG_THT_RATE_PLANS_CHECK;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_RATE_PLANS_CHECK 
BEFORE DELETE OR UPDATE
ON HPDQ.THT_RATE_PLANS 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE

/******************************************************************************
     REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/13/2011      Nguyen Van Thai       1. Created this trigger.
******************************************************************************/
l_cnt number;
BEGIN
  if :old.del_if <> :new.del_if and :new.del_if > 0 then
    select count(*) into l_cnt  from tht_room_allocate where tht_rate_plans_pk=:old.pk and del_if=0;
    if l_cnt > 0 then
        raise_application_error(-20001,'This data was using by system. You can not delete it.');
    end if;
  end if; 

END trg_THT_RATE_PLANS_check;
/


DROP TRIGGER HPDQ.TRG_THT_ROOMFEE_ADJUST_UPDATE;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_ROOMFEE_ADJUST_UPDATE 
before delete or update
ON HPDQ.THT_ROOMFEE_ADJUST
referencing new as new old as old
for each row
declare

/******************************************************************************
   NAME:       trg_THT_ROOMFEE_ADJUST_update
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/14/2012      Nguyen Van Thai       1. Created this trigger.

******************************************************************************/
begin
   if to_char (:old.crt_dt,'yyyymmdd') < to_char (sysdate, 'yyyymmdd')
      then
         raise_application_error (
            -20001,
            'You can not change the past data. Only can change today data.');
      end if;
end trg_tht_roomfee_adjust_update;
/


DROP TRIGGER HPDQ.TRG_THT_ROOM_ALLOCATE_DELETE;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_ROOM_ALLOCATE_DELETE 
   before delete
   ON HPDQ.THT_ROOM_ALLOCATE
   referencing new as new old as old
   for each row
declare
   /******************************************************************************
        REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/17/2010      Nguyen Van Thai       1. Created this trigger.
   ******************************************************************************/
   l_cnt   number;
begin
   if (:old.checkout_date is not null or :old.tht_room_pk < 0)
   then
      raise_application_error (-20001, 'These data was using. You can not delete.');
   end if;

   if :old.pk > 0
   then
      select count (*)
        into l_cnt
        from tcm_invoice
       where tht_room_allocate_pk = :old.pk and del_if = 0 and close_yn = 'Y';

      if l_cnt > 0
      then
         raise_application_error (-20001, 'This room has used some service. So you cannot delete it.');
      end if;

      select count (*)
        into l_cnt
        from tht_guest_advance
       where tht_room_allocate_pk = :old.pk and del_if = 0;

      if l_cnt > 0
      then
         raise_application_error (-20001, 'This room has deposit amount. So you cannot delete it.');
      end if;
   end if;


   select count (*)
     into l_cnt
     from tht_nightaudit
    where audit_date = :old.checkin_date and del_if = 0;

   if l_cnt > 0
   then
      raise_application_error (-20001, 'These data was using by night audit.So you can not delete it.');
   end if;
end trg_tht_room_allocate_delete;
/


DROP TRIGGER HPDQ.TRG_THT_ROOM_ALLOCATE_INSERT;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_ROOM_ALLOCATE_INSERT 
BEFORE INSERT
ON HPDQ.THT_ROOM_ALLOCATE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
declare

/******************************************************************************
     REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/23/2010      Nguyen Van Thai       1. Created this trigger.
******************************************************************************/
l_audit_date varchar2(8);
begin
  select max(audit_date) into l_audit_date from tht_nightaudit where audit_date >= :new.checkin_date and del_if=0 and tht_adv_room_fee_pk is null;
  
  if l_audit_date is not null then
    raise_application_error(-20001,'This date was closed. So you can not checkin for this date '||:new.checkin_date||'.');
  end if;
  
  update tht_room
  set room_status='OC',
   update_by = 'system',
   last_update = sysdate
  where pk=:new.tht_room_pk;

end trg_tht_room_allocate_insert;
/


DROP TRIGGER HPDQ.TRG_THT_ROOM_ALLOCATE_LOG;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_ROOM_ALLOCATE_LOG 
   BEFORE UPDATE
   ON HPDQ.THT_ROOM_ALLOCATE
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
   /******************************************************************************
      PURPOSE: log change data

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/4/2010      Nguyen Van Thai       1. Created this trigger.

   ******************************************************************************/
   l_audit_date   VARCHAR2 (8);
   l_cnt          NUMBER;
BEGIN
   IF :OLD.checkin_date IS NULL
   THEN
      RETURN;
   END IF;

   IF (:OLD.del_if <> :NEW.del_if) AND :NEW.del_if > 0
   THEN
      SELECT COUNT (*)
        INTO l_cnt
        FROM THT_NIGHTAUDIT
       WHERE audit_date = :OLD.checkin_date AND del_if = 0 AND tht_room_allocate_pk = :OLD.pk;

      IF l_cnt > 0
      THEN
         RAISE_APPLICATION_ERROR (-20001,
                                  'You can not delete this guest. Because it was using by night audit data.');
      END IF;
   END IF;


   IF     (:OLD.invoice_no IS NOT NULL OR :OLD.checkout_date IS NOT NULL)
      AND (:OLD.del_if <> :NEW.del_if AND :NEW.del_if > 0)
   THEN
      RAISE_APPLICATION_ERROR (-20001, 'This guest was check out or printed bill. So you can not delete it.');
   END IF;

   IF :NEW.checkin_date <> :OLD.checkin_date
   THEN
      SELECT MAX (audit_date)
        INTO l_audit_date
        FROM THT_NIGHTAUDIT
       WHERE audit_date >= :NEW.checkin_date AND del_if = 0;

      IF l_audit_date IS NOT NULL
      THEN
         RAISE_APPLICATION_ERROR (
            -20001,
            'This date was closed. So you can not change checkin date to date ' || :NEW.checkin_date || '.');
      END IF;
   END IF;

   ---------------
   IF :NEW.checkout_date <> :OLD.checkout_date
   THEN
      SELECT MAX (audit_date)
        INTO l_audit_date
        FROM THT_NIGHTAUDIT
       WHERE audit_date >= :NEW.checkout_date AND del_if = 0;

      IF l_audit_date IS NOT NULL
      THEN
         RAISE_APPLICATION_ERROR (
            -20001,
            'This date was closed. So you can not change checkout date to date ' || :NEW.checkout_date || '.');
      END IF;

      UPDATE THT_ROOM
         SET room_status = 'VD', update_by = 'system', last_update = SYSDATE
       WHERE pk = :OLD.tht_room_pk;
   END IF;

   ---------------chnage room, old room will be VD, new room will be OC----------------------------------------------
   IF :NEW.tht_room_pk <> :OLD.tht_room_pk
   THEN
      UPDATE THT_ROOM
         SET room_status = 'VD', update_by = 'system', last_update = SYSDATE
       WHERE pk = :OLD.tht_room_pk;

      UPDATE THT_ROOM
         SET room_status = 'OC', update_by = 'system', last_update = SYSDATE
       WHERE pk = :NEW.tht_room_pk;
   END IF;


   IF    :OLD.tht_room_pk <> :NEW.tht_room_pk
      OR :OLD.room_type <> :NEW.room_type
      OR :OLD.description <> :NEW.description
      OR :OLD.last_name <> :NEW.last_name
      OR :OLD.first_name <> :NEW.first_name
      OR :OLD.gender <> :NEW.gender
      OR :OLD.nation <> :NEW.nation
      OR :OLD.checkin_date <> :NEW.checkin_date
      OR :OLD.checkout_date <> :NEW.checkout_date
      OR :OLD.visa_no <> :NEW.visa_no
      OR :OLD.passport_no <> :NEW.passport_no
      OR :OLD.price_type <> :NEW.price_type
      OR :OLD.tht_room_price_pk <> :NEW.tht_room_price_pk
      OR :OLD.total_adult <> :NEW.total_adult
      OR :OLD.total_child <> :NEW.total_child
      OR :OLD.total_amt <> :NEW.total_amt
      OR :OLD.tht_rate_plans_pk <> :NEW.tht_rate_plans_pk
      OR :OLD.tax_code <> :NEW.tax_code
      OR :OLD.customer_name <> :NEW.customer_name
      OR :OLD.customer_address <> :NEW.customer_address
      OR :OLD.serial_no <> :NEW.serial_no
      OR :OLD.cashier_pk <> :NEW.cashier_pk
      OR :OLD.pay_method <> :NEW.pay_method
      OR :OLD.cash_vnd <> :NEW.cash_vnd
      OR :OLD.cash_usd <> :NEW.cash_usd
      OR :OLD.discount_amt <> :NEW.discount_amt
      OR :OLD.total_adult_female <> :NEW.total_adult_female
      OR :OLD.total_child_female <> :NEW.total_child_female
      OR :OLD.deposit_amt_vnd <> :NEW.deposit_amt_vnd
      OR :OLD.customer_type <> :NEW.customer_type
      OR :OLD.total_due <> :NEW.total_due
      OR :OLD.tco_buspartner_pk <> :NEW.tco_buspartner_pk
      OR :OLD.guest2_name <> :NEW.guest2_name
      OR :OLD.guest3_name <> :NEW.guest3_name
      OR :OLD.guest4_name <> :NEW.guest4_name
      OR :OLD.contact_name <> :NEW.contact_name
      OR :OLD.contact_phone <> :NEW.contact_phone
      OR :OLD.contact_email <> :NEW.contact_email
      OR :OLD.guest_request <> :NEW.guest_request
   THEN
      INSERT INTO THT_ROOM_ALLOCATE_LOG (pk,
                                         tht_bookingd_pk,
                                         tht_room_pk,
                                         room_type,
                                         description,
                                         del_if,
                                         crt_dt,
                                         crt_by,
                                         mod_by,
                                         mod_dt,
                                         last_name,
                                         first_name,
                                         gender,
                                         nation,
                                         checkin_date,
                                         checkout_date,
                                         visa_no,
                                         expire_date,
                                         birthday,
                                         passport_no,
                                         price_type,
                                         printed_yn,
                                         tht_room_price_pk,
                                         total_adult,
                                         total_child,
                                         total_amt,
                                         date_to,
                                         tht_rate_plans_pk,
                                         tax_code,
                                         customer_name,
                                         customer_address,
                                         serial_no,
                                         cashier_pk,
                                         tmp_date_to,
                                         pay_method,
                                         cash_vnd,
                                         cash_usd,
                                         remain_vnd,
                                         remain_usd,
                                         guest_rtn_vnd,
                                         guest_rtn_usd,
                                         other_pl_amt,
                                         acc_get_yn,
                                         tac_hgtrh_pk,
                                         expire_date_pa_id,
                                         invoice_no,
                                         print_dt,
                                         discount_amt,
                                         total_adult_female,
                                         total_child_female,
                                         deposit_amt_vnd,
                                         tht_room_allocate_pk,
                                         tht_room_allocate2_pk,
                                         customer_type,
                                         total_due,
                                         tco_buspartner_pk,
                                         guest2_name,
                                         guest3_name,
                                         guest4_name,
                                         contact_name,
                                         contact_phone,
                                         contact_email,
                                         guest_request)
         SELECT tht_room_allocate_log_seq.NEXTVAL,
                :OLD.tht_bookingd_pk,
                :OLD.tht_room_pk,
                :OLD.room_type,
                :OLD.description,
                :OLD.del_if,
                :OLD.crt_dt,
                :OLD.crt_by,
                :OLD.mod_by,
                :OLD.mod_dt,
                :OLD.last_name,
                :OLD.first_name,
                :OLD.gender,
                :OLD.nation,
                :OLD.checkin_date,
                :OLD.checkout_date,
                :OLD.visa_no,
                :OLD.expire_date,
                :OLD.birthday,
                :OLD.passport_no,
                :OLD.price_type,
                :OLD.printed_yn,
                :OLD.tht_room_price_pk,
                :OLD.total_adult,
                :OLD.total_child,
                :OLD.total_amt,
                :OLD.date_to,
                :OLD.tht_rate_plans_pk,
                :OLD.tax_code,
                :OLD.customer_name,
                :OLD.customer_address,
                :OLD.serial_no,
                :OLD.cashier_pk,
                :OLD.tmp_date_to,
                :OLD.pay_method,
                :OLD.cash_vnd,
                :OLD.cash_usd,
                :OLD.remain_vnd,
                :OLD.remain_usd,
                :OLD.guest_rtn_vnd,
                :OLD.guest_rtn_usd,
                :OLD.other_pl_amt,
                :OLD.acc_get_yn,
                :OLD.tac_hgtrh_pk,
                :OLD.expire_date_pa_id,
                :OLD.invoice_no,
                :OLD.print_dt,
                :OLD.discount_amt,
                :OLD.total_adult_female,
                :OLD.total_child_female,
                :OLD.deposit_amt_vnd,
                :OLD.pk,
                :OLD.tht_room_allocate2_pk,
                :OLD.customer_type,
                :OLD.total_due,
                :OLD.tco_buspartner_pk,
                :OLD.guest2_name,
                :OLD.guest3_name,
                :OLD.guest4_name,
                :OLD.contact_name,
                :OLD.contact_phone,
                :OLD.contact_email,
                :OLD.guest_request
           FROM dual;
   END IF;
END;
/


DROP TRIGGER HPDQ.TRG_THT_ROOM_STATUS_LOG;

CREATE OR REPLACE TRIGGER HPDQ.TRG_THT_ROOM_STATUS_LOG 
before delete or insert or update
ON HPDQ.THT_ROOM_STATUS
referencing new as new old as old
for each row
declare
/******************************************************************************
   NAME:
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/23/2012      Nguyen Van Thai       1. Created this trigger.

 ******************************************************************************/
begin
   insert into tht_room_status_log (tht_room_status_pk,
                                    tht_room_pk,
                                    status,
                                    date_update,
                                    time_update,
                                    charger_pk,
                                    description,
                                    del_if,
                                    crt_by,
                                    crt_dt,
                                    mod_by,
                                    mod_dt,
                                    out_of_order_fr,
                                    out_of_order_to)
        values (:old.pk,
                :old.tht_room_pk,
                :old.status,
                :old.date_update,
                :old.time_update,
                :old.charger_pk,
                :old.description,
                :old.del_if,
                :old.crt_by,
                :old.crt_dt,
                :old.mod_by,
                :old.mod_dt,
                :old.out_of_order_fr,
                :old.out_of_order_to);
end;
/


DROP TRIGGER HPDQ.TRG_TIC_BUSLINE_PLAN_UPDATE;

CREATE OR REPLACE TRIGGER HPDQ.TRG_TIC_BUSLINE_PLAN_UPDATE 
   BEFORE UPDATE
   ON HPDQ.TIC_BUSLINE_PLAN
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
BEGIN
   IF (   :OLD.TIC_DRIVER1_PK <> :NEW.TIC_DRIVER1_PK
       OR :OLD.TIC_DRIVER2_PK <> :NEW.TIC_DRIVER2_PK
       OR :OLD.TIC_DRIVER3_PK <> :NEW.TIC_DRIVER3_PK
       OR :OLD.TIC_SUBDRIVER1_PK <> :NEW.TIC_SUBDRIVER1_PK
       OR :OLD.MAP_TYPE <> :NEW.MAP_TYPE
       OR :OLD.MAP_TYPE_2 <> :NEW.MAP_TYPE_2)
   THEN
      INSERT INTO TIC_BUSLINE_PLAN_LOG (PK,
                                        PLAN_DATE,
                                        TIC_RIDE_PK,
                                        MAP_TYPE,
                                        TIC_DRIVER1_PK,
                                        TIC_DRIVER2_PK,
                                        TIC_DRIVER3_PK,
                                        DESCRIPTION,
                                        DEL_IF,
                                        CRT_BY,
                                        CRT_DT,
                                        MOD_BY,
                                        MOD_DT,
                                        TIC_SUBDRIVER1_PK,
                                        TIC_CAR_PK,
                                        TIC_ROUTING_PK,
                                        TIC_BRANCH_PK,
                                        MAP_TYPE_2,
                                        TIC_BUSLINE_PLAN_PK)
           VALUES (tic_busline_plan_log_seq.NEXTVAL, 
                   :OLD.PLAN_DATE,
                   :OLD.TIC_RIDE_PK,
                   :OLD.MAP_TYPE,
                   :OLD.TIC_DRIVER1_PK,
                   :OLD.TIC_DRIVER2_PK,
                   :OLD.TIC_DRIVER3_PK,
                   :OLD.DESCRIPTION,
                   :OLD.DEL_IF,
                   :OLD.CRT_BY,
                   :OLD.CRT_DT,
                   :OLD.MOD_BY,
                   :OLD.MOD_DT,
                   :OLD.TIC_SUBDRIVER1_PK,
                   :OLD.TIC_CAR_PK,
                   :OLD.TIC_ROUTING_PK,
                   :OLD.TIC_BRANCH_PK,
                   :OLD.MAP_TYPE_2,
                   :OLD.pk);
   --change ride,departure,
   END IF;
END TRG_TIC_BUSLINE_PLAN_UPDATE;
/


DROP TRIGGER HPDQ.TRG_TIC_TICKET_SEAT_UPDATE;

CREATE OR REPLACE TRIGGER HPDQ.TRG_TIC_TICKET_SEAT_UPDATE 
   BEFORE UPDATE
   ON HPDQ.TIC_TICKET_SEAT
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
BEGIN
   IF (:OLD.DESCRIPTION <> :NEW.DESCRIPTION OR :OLD.DIEMTRAKHACHD <> :NEW.DIEMTRAKHACHD)
   THEN
      INSERT INTO tic_ticket_seat_log (PK,
                                       TIC_TICKET_PK,
                                       TIC_RIDE_PK,
                                       TIC_SEAT_MAP_PK,
                                       TIC_TICKET_PRICE_PK,
                                       TICKET_SERIAL,
                                       SEAT_PRICE,
                                       DESCRIPTION,
                                       DEL_IF,
                                       CRT_BY,
                                       CRT_DT,
                                       MOD_DT,
                                       USE_YN,
                                       COLLECTED_AMT,
                                       SEAT_TYPE,
                                       TICKET_TYPE,
                                       PICKUP_LOCATION_D,
                                       ARRIVAL_LOCATION_D,
                                       SO_XE,
                                       LOAI_XE,
                                       CHK_RUA_XE,
                                       CHK_SUA_XE,
                                       CHK_DONG_PHUC,
                                       CHK_DAN_TEM_HANH_LY,
                                       CHK_MANG_VAC_HANH_LY,
                                       CHK_LAI_XE_NGHE_DIEN_THOAI,
                                       CHK_SU_DUNG_KHAN_NUOC,
                                       QUA_TOC_DO,
                                       LAI_XE_AN_TOAN,
                                       NGUOI_KIEM_TRA,
                                       GIO_KIEM_TRA,
                                       SOAT_VE_REMARK,
                                       CKH_KHACH_LEN_XE,
                                       DIEMDONKHACHD,
                                       DIEMTRAKHACHD,
                                       LOAI_KHU_HOI_D,
                                       BOOK_NO,
                                       CKH_KHACH_GPS_LEN_XE,
                                       SOAT_VE_GPS_REMARK,
                                       NGUOI_KIEM_TRA_GPS,
                                       GIO_KIEM_TRA_GPS,
                                       STATUS,
                                       STT_GHE,
                                       TIC_TICKET_SEAT_PK)
           VALUES (tic_ticket_seat_log_seq.NEXTVAL,
                   :OLD.TIC_TICKET_PK,
                   :OLD.TIC_RIDE_PK,
                   :OLD.TIC_SEAT_MAP_PK,
                   :OLD.TIC_TICKET_PRICE_PK,
                   :OLD.TICKET_SERIAL,
                   :OLD.SEAT_PRICE,
                   :OLD.DESCRIPTION,
                   :OLD.DEL_IF,
                   :OLD.CRT_BY,
                   :OLD.CRT_DT,
                   :OLD.MOD_DT,
                   :OLD.USE_YN,
                   :OLD.COLLECTED_AMT,
                   :OLD.SEAT_TYPE,
                   :OLD.TICKET_TYPE,
                   :OLD.PICKUP_LOCATION_D,
                   :OLD.ARRIVAL_LOCATION_D,
                   :OLD.SO_XE,
                   :OLD.LOAI_XE,
                   :OLD.CHK_RUA_XE,
                   :OLD.CHK_SUA_XE,
                   :OLD.CHK_DONG_PHUC,
                   :OLD.CHK_DAN_TEM_HANH_LY,
                   :OLD.CHK_MANG_VAC_HANH_LY,
                   :OLD.CHK_LAI_XE_NGHE_DIEN_THOAI,
                   :OLD.CHK_SU_DUNG_KHAN_NUOC,
                   :OLD.QUA_TOC_DO,
                   :OLD.LAI_XE_AN_TOAN,
                   :OLD.NGUOI_KIEM_TRA,
                   :OLD.GIO_KIEM_TRA,
                   :OLD.SOAT_VE_REMARK,
                   :OLD.CKH_KHACH_LEN_XE,
                   :OLD.DIEMDONKHACHD,
                   :OLD.DIEMTRAKHACHD,
                   :OLD.LOAI_KHU_HOI_D,
                   :OLD.BOOK_NO,
                   :OLD.CKH_KHACH_GPS_LEN_XE,
                   :OLD.SOAT_VE_GPS_REMARK,
                   :OLD.NGUOI_KIEM_TRA_GPS,
                   :OLD.GIO_KIEM_TRA_GPS,
                   :OLD.STATUS,
                   :OLD.STT_GHE,
                   :OLD.PK);
   END IF;
END TRG_TIC_TICKET_SEAT_UPDATE;
/


DROP TRIGGER HPDQ.TRG_TIC_TICKET_UPDATE;

CREATE OR REPLACE TRIGGER HPDQ.TRG_TIC_TICKET_UPDATE 
   BEFORE UPDATE
   ON HPDQ.TIC_TICKET
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DECLARE
BEGIN
   IF (   :OLD.TICKET_QTY <> :NEW.TICKET_QTY
       OR :OLD.STATUS <> :NEW.STATUS
       OR :OLD.PAYMENT_METHOD <> :NEW.PAYMENT_METHOD
       OR :OLD.CUSTOMER_NAME <> :NEW.CUSTOMER_NAME
       OR :OLD.CUSTOMER_PHONE <> :NEW.CUSTOMER_PHONE
       OR :OLD.MAP_TYPE <> :NEW.MAP_TYPE
       OR :OLD.DIEMDONKHACH <> :NEW.DIEMDONKHACH)
   THEN
      INSERT INTO tic_ticket_log (PK,
                                  TIC_RIDE_PK,
                                  DEPARTURE_DATE,
                                  TICKET_QTY,
                                  TOTAL_AMT,
                                  PAID_AMT,
                                  PAID_CCY,
                                  EX_RATE,
                                  PICKUP_LOCATION,
                                  ARRIVAL_LOCATION,
                                  STATUS,
                                  PAYMENT_METHOD,
                                  CUSTOMER_NAME,
                                  CUSTOMER_PHONE,
                                  CUSTOMER_EMAIL,
                                  CUSTOMER_ADDR,
                                  CUSTOMER_REMARK,
                                  PAYMENT_INFO,
                                  DEL_IF,
                                  CRT_BY,
                                  CRT_DT,
                                  MOD_BY,
                                  MOD_DT,
                                  MAP_TYPE,
                                  GUEST_TYPE,
                                  DEPARTURE_HH,
                                  DEPARTURE_MI,
                                  REMAIN_AMT,
                                  TIC_AGENT_PK,
                                  NOI_DON,
                                  DIEMDONKHACH,
                                  DIEMTRAKHACH,
                                  LOAI_KHU_HOI,
                                  TIC_BRANCH_PK,
                                  TIC_ROUTING_PK,
                                  TIC_BRANCH_KHUHOI_PK,
                                  SERI_FROM,
                                  SERI_TO,
                                  TIC_TICKET_PK,
                                  STATUS_LOG)
           VALUES (tic_ticket_log_seq.NEXTVAL,
                   :OLD.TIC_RIDE_PK,
                   :OLD.DEPARTURE_DATE,
                   :OLD.TICKET_QTY,
                   :OLD.TOTAL_AMT,
                   :OLD.PAID_AMT,
                   :OLD.PAID_CCY,
                   :OLD.EX_RATE,
                   :OLD.PICKUP_LOCATION,
                   :OLD.ARRIVAL_LOCATION,
                   :OLD.STATUS,
                   :OLD.PAYMENT_METHOD,
                   :OLD.CUSTOMER_NAME,
                   :OLD.CUSTOMER_PHONE,
                   :OLD.CUSTOMER_EMAIL,
                   :OLD.CUSTOMER_ADDR,
                   :OLD.CUSTOMER_REMARK,
                   :OLD.PAYMENT_INFO,
                   :OLD.DEL_IF,
                   :OLD.CRT_BY,
                   :OLD.CRT_DT,
                   :OLD.MOD_BY,
                   :OLD.MOD_DT,
                   :OLD.MAP_TYPE,
                   :OLD.GUEST_TYPE,
                   :OLD.DEPARTURE_HH,
                   :OLD.DEPARTURE_MI,
                   :OLD.REMAIN_AMT,
                   :OLD.TIC_AGENT_PK,
                   :OLD.NOI_DON,
                   :OLD.DIEMDONKHACH,
                   :OLD.DIEMTRAKHACH,
                   :OLD.LOAI_KHU_HOI,
                   :OLD.TIC_BRANCH_PK,
                   :OLD.TIC_ROUTING_PK,
                   :OLD.TIC_BRANCH_KHUHOI_PK,
                   :OLD.SERI_FROM,
                   :OLD.SERI_TO,
                   :OLD.PK,
                   'DATA_CHANGE_LOG');
   ELSIF (:OLD.TIC_RIDE_PK <> :NEW.TIC_RIDE_PK OR :OLD.DEPARTURE_DATE <> :NEW.DEPARTURE_DATE)
   THEN
      INSERT INTO tic_ticket_log (PK,
                                  TIC_RIDE_PK,
                                  DEPARTURE_DATE,
                                  TICKET_QTY,
                                  TOTAL_AMT,
                                  PAID_AMT,
                                  PAID_CCY,
                                  EX_RATE,
                                  PICKUP_LOCATION,
                                  ARRIVAL_LOCATION,
                                  STATUS,
                                  PAYMENT_METHOD,
                                  CUSTOMER_NAME,
                                  CUSTOMER_PHONE,
                                  CUSTOMER_EMAIL,
                                  CUSTOMER_ADDR,
                                  CUSTOMER_REMARK,
                                  PAYMENT_INFO,
                                  DEL_IF,
                                  CRT_BY,
                                  CRT_DT,
                                  MOD_BY,
                                  MOD_DT,
                                  MAP_TYPE,
                                  GUEST_TYPE,
                                  DEPARTURE_HH,
                                  DEPARTURE_MI,
                                  REMAIN_AMT,
                                  TIC_AGENT_PK,
                                  NOI_DON,
                                  DIEMDONKHACH,
                                  DIEMTRAKHACH,
                                  LOAI_KHU_HOI,
                                  TIC_BRANCH_PK,
                                  TIC_ROUTING_PK,
                                  TIC_BRANCH_KHUHOI_PK,
                                  SERI_FROM,
                                  SERI_TO,
                                  TIC_TICKET_PK,
                                  STATUS_LOG)
           VALUES (tic_ticket_log_seq.NEXTVAL,
                   :OLD.TIC_RIDE_PK,
                   :OLD.DEPARTURE_DATE,
                   :OLD.TICKET_QTY,
                   :OLD.TOTAL_AMT,
                   :OLD.PAID_AMT,
                   :OLD.PAID_CCY,
                   :OLD.EX_RATE,
                   :OLD.PICKUP_LOCATION,
                   :OLD.ARRIVAL_LOCATION,
                   :OLD.STATUS,
                   :OLD.PAYMENT_METHOD,
                   :OLD.CUSTOMER_NAME,
                   :OLD.CUSTOMER_PHONE,
                   :OLD.CUSTOMER_EMAIL,
                   :OLD.CUSTOMER_ADDR,
                   :OLD.CUSTOMER_REMARK,
                   :OLD.PAYMENT_INFO,
                   :OLD.DEL_IF,
                   :OLD.CRT_BY,
                   :OLD.CRT_DT,
                   :OLD.MOD_BY,
                   :OLD.MOD_DT,
                   :OLD.MAP_TYPE,
                   :OLD.GUEST_TYPE,
                   :OLD.DEPARTURE_HH,
                   :OLD.DEPARTURE_MI,
                   :OLD.REMAIN_AMT,
                   :OLD.TIC_AGENT_PK,
                   :OLD.NOI_DON,
                   :OLD.DIEMDONKHACH,
                   :OLD.DIEMTRAKHACH,
                   :OLD.LOAI_KHU_HOI,
                   :OLD.TIC_BRANCH_PK,
                   :OLD.TIC_ROUTING_PK,
                   :OLD.TIC_BRANCH_KHUHOI_PK,
                   :OLD.SERI_FROM,
                   :OLD.SERI_TO,
                   :OLD.PK,
                   'TICKET_CHANGE_LOG');                                                        --change ride,departure,
   END IF;
END TRG_TIC_TICKET_UPDATE;
/


DROP TRIGGER HPDQ.TRG_TLG_IT_ITEM_LOG;

CREATE OR REPLACE TRIGGER HPDQ.TRG_TLG_IT_ITEM_LOG 
   BEFORE DELETE OR UPDATE
   ON HPDQ.TLG_IT_ITEM
   REFERENCING NEW AS NEW OLD AS OLD
   FOR EACH ROW
DISABLE
DECLARE
   /******************************************************************************

   ******************************************************************************/
   l_cur                    sys_refcursor;
   l_count   NUMBER;
   l_validate_char   VARCHAR (1000);
   l_validate_num   NUMBER;
BEGIN

    --KIEM TRA XOA HOAC DOI ITEM CODE, ITEM NAME
    IF DELETING OR :NEW.DEL_IF<>0 OR :NEW.UOM<>:OLD.UOM OR :NEW.ITEM_CODE<>:OLD.ITEM_CODE OR :NEW.ITEM_NAME<>:OLD.ITEM_NAME THEN
    
        --1: KIEM TRA TAC CA CAC TABLE QUAN TRONG CO SU DUNG ITEM
        open l_cur for
                SELECT a.pk FROM TLG_IN_STOCKTR a
                where a.del_if=0 and a.tlg_it_item_pk=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in stock(TLG_IN_STOCKTR).pk='||l_validate_num);
                 end if;
                 close l_cur; 
                 
        ---2 cac bang transaction, po, s/o
        open l_cur for
                SELECT a.pk FROM  TLG_SA_SALEORDER_D a
                where a.del_if=0 and a.tlg_it_item_pk=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in sale order(TLG_SA_SALEORDER_D).pk='||l_validate_num);
                 end if;
                 close l_cur; 
                 
        open l_cur for
                SELECT a.pk FROM  TLG_PO_PO_D a
                where a.del_if=0 and a.PO_ITEM_PK=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in po(TLG_PO_PO_D).pk='||l_validate_num);
                 end if;
                 close l_cur;   
         
        open l_cur for
                SELECT a.pk FROM  tlg_gd_outgo_d a
                where a.del_if=0 and a.OUT_ITEM_PK=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in po(tlg_gd_outgo_d).pk='||l_validate_num);
                 end if;
                 close l_cur;     
        
        open l_cur for
                SELECT a.pk FROM  tlg_st_income_d a
                where a.del_if=0 and a.INCOME_ITEM_PK=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in stock in(tlg_st_income_d).pk='||l_validate_num);
                 end if;
                 close l_cur; 
        
        open l_cur for
                SELECT a.pk FROM  tlg_st_outgo_d a
                where a.del_if=0 and a.OUTGO_ITEM_PK=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in stock out(tlg_st_outgo_d).pk='||l_validate_num);
                 end if;
                 close l_cur;  
        
        
        open l_cur for
                SELECT a.pk FROM  TLG_PR_PROD_INCOME_D a
                where a.del_if=0 and a.ITEM_PK=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in product income(TLG_PR_PROD_INCOME_D).pk='||l_validate_num);
                 end if;
                 close l_cur;   
        
        open l_cur for
                SELECT a.pk FROM  tlg_st_outgo_return_d a
                where a.del_if=0 and a.RETURN_ITEM_PK=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in good return income(tlg_st_outgo_return_d).pk='||l_validate_num);
                 end if;
                 close l_cur;  
        
        open l_cur for
                SELECT a.pk FROM  TLG_SA_STOCK_CLOSING_D a
                where a.del_if=0 and a.TLG_IT_ITEM_PK=:new.pk
                and rownum=1;
                
                 fetch l_cur  INTO l_validate_num;
                 
                 if l_cur%found=TRUE then   
                     raise_application_error (-20999,'Already found in w/h closing(tlg_st_outgo_return_d).pk='||l_validate_num);
                 end if;
                 close l_cur;           
                                        
                 
    -- chi kiem tra nhung transaction quan trong, neu can them cho viec kiem tra thi them vao            
            
    
    --LUU DU LIEU HISOTY
        IF UPDATING THEN
            INSERT INTO TLG_IT_ITEM_HIS 
            (PK, TLG_IT_ITEM_PK, TCO_COMPANY_PK, TLG_IT_ITEMGRP_PK, ITEM_CODE, ITEM_NAME, ITEM_LNAME, ITEM_FNAME, UOM
            , UOM_WT, UOM_VOL, UOM_DIM, UOM_SUR, UOM_LOT, SET_YN, PICT_YN, BOM_YN, BOM_ITEM_TYPE, COST_YN, INVENTORY_YN
            , LOT_START_NUMBER, HSCODE_PK, TAC_ABACCTCODE_PK, TCO_BUSPARTNER_PK, PUR_TYPE, TLG_IN_WAREHOUSE_PK
            , TLG_IT_ITEMPHOTO_PK, TLG_IT_STITEM_PK, WEIGHT, SURFACE, ITEM_LENGTH, ITEM_WIDTH, ITEM_HEIGHT, UNIT_PRICE
            , LOT_QTY, LOT_WEIGHT, CURRENCY, LIST_PRICE, STANDARD_PRICE, PRICE_LIMIT, MARKET_PRICE, DESCRIPTION, USE_YN
            , ST_DATE, END_DATE, DEL_IF, CRT_BY, CRT_DT, MOD_BY, MOD_DT, MIN_ORD_QTY, PUR_YN, CONT_TYPE, VOLUME, AUTO_YN
            , ITEM_SEQ, UOM_PACKING, TAC_ABACCTCODE_PK_EXPENSE, TAC_ABACCTCODE_PK_REVENUE, UOM_WIDTH, SPEC01_PK, SPEC02_PK
            , SPEC03_PK, SPEC04_PK, SPEC05_PK, SPEC06_PK, SPEC07_PK, SPEC08_PK, SPEC09_PK, SPEC10_PK, SPEC, PUR_PRICE, PROD_PRICE
            , CCY, CRT_PRICE_BY, CRT_PRICE_DT, TCO_HSCODE_PK, VIRTUAL_CODE, SPEC01_NM, SPEC02_NM, SPEC03_NM, SPEC04_NM
            , SPEC05_NM, TLG_CO_COST_CENTER_PK, UOM_NM, UOM_CODE, REF_UOM, TLG_IE_ITEM_PK, ATT01, ATT02, ATT03, ATT04, ATT05
            , ATT06, LOT_NO_TYPE, VIRTUAL_NAME, COEFFICIENT_RATE, VAT_RATE, SERVICE_CHARGE_RATE, BOM_STATUS, VAL01, VAL02
            , VAL03, VAL04, VAL05, SPEC06_NM, ATT07, HS_CODE, STORE_QTY, MIN_QTY, ECUST_ITEM_CODE, MIN_DAYS, MAX_DAYS, QTY_PER_DAY
            , MAX_QTY, ATTACH_YN, APPROVED_YN) 
            VALUES
            (TLG_IT_ITEM_HIS_SEQ.NEXTVAL, :NEW.PK, :NEW.TCO_COMPANY_PK, :NEW.TLG_IT_ITEMGRP_PK, :NEW.ITEM_CODE, :NEW.ITEM_NAME, :NEW.ITEM_LNAME, :NEW.ITEM_FNAME, :NEW.UOM
            , :NEW.UOM_WT, :NEW.UOM_VOL, :NEW.UOM_DIM, :NEW.UOM_SUR, :NEW.UOM_LOT, :NEW.SET_YN, :NEW.PICT_YN, :NEW.BOM_YN, :NEW.BOM_ITEM_TYPE, :NEW.COST_YN, :NEW.INVENTORY_YN
            , :NEW.LOT_START_NUMBER, :NEW.HSCODE_PK, :NEW.TAC_ABACCTCODE_PK, :NEW.TCO_BUSPARTNER_PK, :NEW.PUR_TYPE, :NEW.TLG_IN_WAREHOUSE_PK
            , :NEW.TLG_IT_ITEMPHOTO_PK, :NEW.TLG_IT_STITEM_PK, :NEW.WEIGHT, :NEW.SURFACE, :NEW.ITEM_LENGTH, :NEW.ITEM_WIDTH, :NEW.ITEM_HEIGHT, :NEW.UNIT_PRICE
            , :NEW.LOT_QTY, :NEW.LOT_WEIGHT, :NEW.CURRENCY, :NEW.LIST_PRICE, :NEW.STANDARD_PRICE, :NEW.PRICE_LIMIT, :NEW.MARKET_PRICE, :NEW.DESCRIPTION, :NEW.USE_YN
            , :NEW.ST_DATE, :NEW.END_DATE, :NEW.DEL_IF, :NEW.CRT_BY, SYSDATE, :NEW.MOD_BY, :NEW.MOD_DT, :NEW.MIN_ORD_QTY, :NEW.PUR_YN, :NEW.CONT_TYPE, :NEW.VOLUME, :NEW.AUTO_YN
            , :NEW.ITEM_SEQ, :NEW.UOM_PACKING, :NEW.TAC_ABACCTCODE_PK_EXPENSE, :NEW.TAC_ABACCTCODE_PK_REVENUE, :NEW.UOM_WIDTH, :NEW.SPEC01_PK, :NEW.SPEC02_PK
            , :NEW.SPEC03_PK, :NEW.SPEC04_PK, :NEW.SPEC05_PK, :NEW.SPEC06_PK, :NEW.SPEC07_PK, :NEW.SPEC08_PK, :NEW.SPEC09_PK, :NEW.SPEC10_PK, :NEW.SPEC, :NEW.PUR_PRICE, :NEW.PROD_PRICE
            , :NEW.CCY, :NEW.CRT_PRICE_BY, :NEW.CRT_PRICE_DT, :NEW.TCO_HSCODE_PK, :NEW.VIRTUAL_CODE, :NEW.SPEC01_NM, :NEW.SPEC02_NM, :NEW.SPEC03_NM, :NEW.SPEC04_NM
            , :NEW.SPEC05_NM, :NEW.TLG_CO_COST_CENTER_PK, :NEW.UOM_NM, :NEW.UOM_CODE, :NEW.REF_UOM, :NEW.TLG_IE_ITEM_PK, :NEW.ATT01, :NEW.ATT02, :NEW.ATT03, :NEW.ATT04, :NEW.ATT05
            , :NEW.ATT06, :NEW.LOT_NO_TYPE, :NEW.VIRTUAL_NAME, :NEW.COEFFICIENT_RATE, :NEW.VAT_RATE, :NEW.SERVICE_CHARGE_RATE, :NEW.BOM_STATUS, :NEW.VAL01, :NEW.VAL02
            , :NEW.VAL03, :NEW.VAL04, :NEW.VAL05, :NEW.SPEC06_NM, :NEW.ATT07, :NEW.HS_CODE, :NEW.STORE_QTY, :NEW.MIN_QTY, :NEW.ECUST_ITEM_CODE, :NEW.MIN_DAYS, :NEW.MAX_DAYS, :NEW.QTY_PER_DAY
            , :NEW.MAX_QTY, NULL, NULL);
        
        ELSE --XOA THUC SU
        
          INSERT INTO TLG_IT_ITEM_HIS 
        (PK, TLG_IT_ITEM_PK, TCO_COMPANY_PK, TLG_IT_ITEMGRP_PK, ITEM_CODE, ITEM_NAME, ITEM_LNAME, ITEM_FNAME, UOM
        , UOM_WT, UOM_VOL, UOM_DIM, UOM_SUR, UOM_LOT, SET_YN, PICT_YN, BOM_YN, BOM_ITEM_TYPE, COST_YN, INVENTORY_YN
        , LOT_START_NUMBER, HSCODE_PK, TAC_ABACCTCODE_PK, TCO_BUSPARTNER_PK, PUR_TYPE, TLG_IN_WAREHOUSE_PK
        , TLG_IT_ITEMPHOTO_PK, TLG_IT_STITEM_PK, WEIGHT, SURFACE, ITEM_LENGTH, ITEM_WIDTH, ITEM_HEIGHT, UNIT_PRICE
        , LOT_QTY, LOT_WEIGHT, CURRENCY, LIST_PRICE, STANDARD_PRICE, PRICE_LIMIT, MARKET_PRICE, DESCRIPTION, USE_YN
        , ST_DATE, END_DATE, DEL_IF, CRT_BY, CRT_DT, MOD_BY, MOD_DT, MIN_ORD_QTY, PUR_YN, CONT_TYPE, VOLUME, AUTO_YN
        , ITEM_SEQ, UOM_PACKING, TAC_ABACCTCODE_PK_EXPENSE, TAC_ABACCTCODE_PK_REVENUE, UOM_WIDTH, SPEC01_PK, SPEC02_PK
        , SPEC03_PK, SPEC04_PK, SPEC05_PK, SPEC06_PK, SPEC07_PK, SPEC08_PK, SPEC09_PK, SPEC10_PK, SPEC, PUR_PRICE, PROD_PRICE
        , CCY, CRT_PRICE_BY, CRT_PRICE_DT, TCO_HSCODE_PK, VIRTUAL_CODE, SPEC01_NM, SPEC02_NM, SPEC03_NM, SPEC04_NM
        , SPEC05_NM, TLG_CO_COST_CENTER_PK, UOM_NM, UOM_CODE, REF_UOM, TLG_IE_ITEM_PK, ATT01, ATT02, ATT03, ATT04, ATT05
        , ATT06, LOT_NO_TYPE, VIRTUAL_NAME, COEFFICIENT_RATE, VAT_RATE, SERVICE_CHARGE_RATE, BOM_STATUS, VAL01, VAL02
        , VAL03, VAL04, VAL05, SPEC06_NM, ATT07, HS_CODE, STORE_QTY, MIN_QTY, ECUST_ITEM_CODE, MIN_DAYS, MAX_DAYS, QTY_PER_DAY
        , MAX_QTY, ATTACH_YN, APPROVED_YN) 
        VALUES
        (TLG_IT_ITEM_HIS_SEQ.NEXTVAL, :OLD.PK, :OLD.TCO_COMPANY_PK, :OLD.TLG_IT_ITEMGRP_PK, :OLD.ITEM_CODE, :OLD.ITEM_NAME, :OLD.ITEM_LNAME, :OLD.ITEM_FNAME, :OLD.UOM
        , :OLD.UOM_WT, :OLD.UOM_VOL, :OLD.UOM_DIM, :OLD.UOM_SUR, :OLD.UOM_LOT, :OLD.SET_YN, :OLD.PICT_YN, :OLD.BOM_YN, :OLD.BOM_ITEM_TYPE, :OLD.COST_YN, :OLD.INVENTORY_YN
        , :OLD.LOT_START_NUMBER, :OLD.HSCODE_PK, :OLD.TAC_ABACCTCODE_PK, :OLD.TCO_BUSPARTNER_PK, :OLD.PUR_TYPE, :OLD.TLG_IN_WAREHOUSE_PK
        , :OLD.TLG_IT_ITEMPHOTO_PK, :OLD.TLG_IT_STITEM_PK, :OLD.WEIGHT, :OLD.SURFACE, :OLD.ITEM_LENGTH, :OLD.ITEM_WIDTH, :OLD.ITEM_HEIGHT, :OLD.UNIT_PRICE
        , :OLD.LOT_QTY, :OLD.LOT_WEIGHT, :OLD.CURRENCY, :OLD.LIST_PRICE, :OLD.STANDARD_PRICE, :OLD.PRICE_LIMIT, :OLD.MARKET_PRICE, :OLD.DESCRIPTION, :OLD.USE_YN
        , :OLD.ST_DATE, :OLD.END_DATE, :OLD.DEL_IF, :OLD.CRT_BY, SYSDATE, :OLD.MOD_BY, :OLD.MOD_DT, :OLD.MIN_ORD_QTY, :OLD.PUR_YN, :OLD.CONT_TYPE, :OLD.VOLUME, :OLD.AUTO_YN
        , :OLD.ITEM_SEQ, :OLD.UOM_PACKING, :OLD.TAC_ABACCTCODE_PK_EXPENSE, :OLD.TAC_ABACCTCODE_PK_REVENUE, :OLD.UOM_WIDTH, :OLD.SPEC01_PK, :OLD.SPEC02_PK
        , :OLD.SPEC03_PK, :OLD.SPEC04_PK, :OLD.SPEC05_PK, :OLD.SPEC06_PK, :OLD.SPEC07_PK, :OLD.SPEC08_PK, :OLD.SPEC09_PK, :OLD.SPEC10_PK, :OLD.SPEC, :OLD.PUR_PRICE, :OLD.PROD_PRICE
        , :OLD.CCY, :OLD.CRT_PRICE_BY, :OLD.CRT_PRICE_DT, :OLD.TCO_HSCODE_PK, :OLD.VIRTUAL_CODE, :OLD.SPEC01_NM, :OLD.SPEC02_NM, :OLD.SPEC03_NM, :OLD.SPEC04_NM
        , :OLD.SPEC05_NM, :OLD.TLG_CO_COST_CENTER_PK, :OLD.UOM_NM, :OLD.UOM_CODE, :OLD.REF_UOM, :OLD.TLG_IE_ITEM_PK, :OLD.ATT01, :OLD.ATT02, :OLD.ATT03, :OLD.ATT04, :OLD.ATT05
        , :OLD.ATT06, :OLD.LOT_NO_TYPE, :OLD.VIRTUAL_NAME, :OLD.COEFFICIENT_RATE, :OLD.VAT_RATE, :OLD.SERVICE_CHARGE_RATE, :OLD.BOM_STATUS, :OLD.VAL01, :OLD.VAL02
        , :OLD.VAL03, :OLD.VAL04, :OLD.VAL05, :OLD.SPEC06_NM, :OLD.ATT07, :OLD.HS_CODE, :OLD.STORE_QTY, :OLD.MIN_QTY, :OLD.ECUST_ITEM_CODE, :OLD.MIN_DAYS, :OLD.MAX_DAYS, :OLD.QTY_PER_DAY
        , :OLD.MAX_QTY, NULL, NULL);
        END IF;
    
    ELSE
        INSERT INTO TLG_IT_ITEM_HIS 
        (PK, TLG_IT_ITEM_PK, TCO_COMPANY_PK, TLG_IT_ITEMGRP_PK, ITEM_CODE, ITEM_NAME, ITEM_LNAME, ITEM_FNAME, UOM
        , UOM_WT, UOM_VOL, UOM_DIM, UOM_SUR, UOM_LOT, SET_YN, PICT_YN, BOM_YN, BOM_ITEM_TYPE, COST_YN, INVENTORY_YN
        , LOT_START_NUMBER, HSCODE_PK, TAC_ABACCTCODE_PK, TCO_BUSPARTNER_PK, PUR_TYPE, TLG_IN_WAREHOUSE_PK
        , TLG_IT_ITEMPHOTO_PK, TLG_IT_STITEM_PK, WEIGHT, SURFACE, ITEM_LENGTH, ITEM_WIDTH, ITEM_HEIGHT, UNIT_PRICE
        , LOT_QTY, LOT_WEIGHT, CURRENCY, LIST_PRICE, STANDARD_PRICE, PRICE_LIMIT, MARKET_PRICE, DESCRIPTION, USE_YN
        , ST_DATE, END_DATE, DEL_IF, CRT_BY, CRT_DT, MOD_BY, MOD_DT, MIN_ORD_QTY, PUR_YN, CONT_TYPE, VOLUME, AUTO_YN
        , ITEM_SEQ, UOM_PACKING, TAC_ABACCTCODE_PK_EXPENSE, TAC_ABACCTCODE_PK_REVENUE, UOM_WIDTH, SPEC01_PK, SPEC02_PK
        , SPEC03_PK, SPEC04_PK, SPEC05_PK, SPEC06_PK, SPEC07_PK, SPEC08_PK, SPEC09_PK, SPEC10_PK, SPEC, PUR_PRICE, PROD_PRICE
        , CCY, CRT_PRICE_BY, CRT_PRICE_DT, TCO_HSCODE_PK, VIRTUAL_CODE, SPEC01_NM, SPEC02_NM, SPEC03_NM, SPEC04_NM
        , SPEC05_NM, TLG_CO_COST_CENTER_PK, UOM_NM, UOM_CODE, REF_UOM, TLG_IE_ITEM_PK, ATT01, ATT02, ATT03, ATT04, ATT05
        , ATT06, LOT_NO_TYPE, VIRTUAL_NAME, COEFFICIENT_RATE, VAT_RATE, SERVICE_CHARGE_RATE, BOM_STATUS, VAL01, VAL02
        , VAL03, VAL04, VAL05, SPEC06_NM, ATT07, HS_CODE, STORE_QTY, MIN_QTY, ECUST_ITEM_CODE, MIN_DAYS, MAX_DAYS, QTY_PER_DAY
        , MAX_QTY, ATTACH_YN, APPROVED_YN) 
        VALUES
        (TLG_IT_ITEM_HIS_SEQ.NEXTVAL, :NEW.PK, :NEW.TCO_COMPANY_PK, :NEW.TLG_IT_ITEMGRP_PK, :NEW.ITEM_CODE, :NEW.ITEM_NAME, :NEW.ITEM_LNAME, :NEW.ITEM_FNAME, :NEW.UOM
        , :NEW.UOM_WT, :NEW.UOM_VOL, :NEW.UOM_DIM, :NEW.UOM_SUR, :NEW.UOM_LOT, :NEW.SET_YN, :NEW.PICT_YN, :NEW.BOM_YN, :NEW.BOM_ITEM_TYPE, :NEW.COST_YN, :NEW.INVENTORY_YN
        , :NEW.LOT_START_NUMBER, :NEW.HSCODE_PK, :NEW.TAC_ABACCTCODE_PK, :NEW.TCO_BUSPARTNER_PK, :NEW.PUR_TYPE, :NEW.TLG_IN_WAREHOUSE_PK
        , :NEW.TLG_IT_ITEMPHOTO_PK, :NEW.TLG_IT_STITEM_PK, :NEW.WEIGHT, :NEW.SURFACE, :NEW.ITEM_LENGTH, :NEW.ITEM_WIDTH, :NEW.ITEM_HEIGHT, :NEW.UNIT_PRICE
        , :NEW.LOT_QTY, :NEW.LOT_WEIGHT, :NEW.CURRENCY, :NEW.LIST_PRICE, :NEW.STANDARD_PRICE, :NEW.PRICE_LIMIT, :NEW.MARKET_PRICE, :NEW.DESCRIPTION, :NEW.USE_YN
        , :NEW.ST_DATE, :NEW.END_DATE, :NEW.DEL_IF, :NEW.CRT_BY, SYSDATE, :NEW.MOD_BY, :NEW.MOD_DT, :NEW.MIN_ORD_QTY, :NEW.PUR_YN, :NEW.CONT_TYPE, :NEW.VOLUME, :NEW.AUTO_YN
        , :NEW.ITEM_SEQ, :NEW.UOM_PACKING, :NEW.TAC_ABACCTCODE_PK_EXPENSE, :NEW.TAC_ABACCTCODE_PK_REVENUE, :NEW.UOM_WIDTH, :NEW.SPEC01_PK, :NEW.SPEC02_PK
        , :NEW.SPEC03_PK, :NEW.SPEC04_PK, :NEW.SPEC05_PK, :NEW.SPEC06_PK, :NEW.SPEC07_PK, :NEW.SPEC08_PK, :NEW.SPEC09_PK, :NEW.SPEC10_PK, :NEW.SPEC, :NEW.PUR_PRICE, :NEW.PROD_PRICE
        , :NEW.CCY, :NEW.CRT_PRICE_BY, :NEW.CRT_PRICE_DT, :NEW.TCO_HSCODE_PK, :NEW.VIRTUAL_CODE, :NEW.SPEC01_NM, :NEW.SPEC02_NM, :NEW.SPEC03_NM, :NEW.SPEC04_NM
        , :NEW.SPEC05_NM, :NEW.TLG_CO_COST_CENTER_PK, :NEW.UOM_NM, :NEW.UOM_CODE, :NEW.REF_UOM, :NEW.TLG_IE_ITEM_PK, :NEW.ATT01, :NEW.ATT02, :NEW.ATT03, :NEW.ATT04, :NEW.ATT05
        , :NEW.ATT06, :NEW.LOT_NO_TYPE, :NEW.VIRTUAL_NAME, :NEW.COEFFICIENT_RATE, :NEW.VAT_RATE, :NEW.SERVICE_CHARGE_RATE, :NEW.BOM_STATUS, :NEW.VAL01, :NEW.VAL02
        , :NEW.VAL03, :NEW.VAL04, :NEW.VAL05, :NEW.SPEC06_NM, :NEW.ATT07, :NEW.HS_CODE, :NEW.STORE_QTY, :NEW.MIN_QTY, :NEW.ECUST_ITEM_CODE, :NEW.MIN_DAYS, :NEW.MAX_DAYS, :NEW.QTY_PER_DAY
        , :NEW.MAX_QTY, NULL, NULL);
        
    END IF;
    
    
   
END TRG_TLG_IT_ITEM_LOG;
/


DROP TRIGGER HPDQ.TR_UPD_TFN_EPPAYTRH;

CREATE OR REPLACE TRIGGER HPDQ.TR_UPD_TFN_EPPAYTRH 
BEFORE UPDATE ON HPDQ.TFN_EPPAYTRH REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
    -- LOCAL VARIABLES HERE
    v_trhpk            NUMBER;
    v_temp             NUMBER;
    
BEGIN
    IF (:NEW.TR_STATUS = 2) AND :NEW.TR_STATUS <> :OLD.TR_STATUS  THEN         -- Confirm --
        
        -- Trans data from TFN_EPPAYTRH to TAC_HGTRH --
        ac_upd_CONFIRM_TFN_EPPAYTRH(:OLD.PK,
                                    :OLD.TCO_COMPANY_PK,
                                    :NEW.VOUCHERNO, 
                                    :NEW.VOUCHER_TYPE,
                                    :NEW.TR_SEQ,
                                    :NEW.AUTO_YN,
                                    :OLD.TR_DATE,
                                    :OLD.TAC_ABTRTYPE_PK,
                                    :OLD.TCO_DEPT_PK,
                                    :OLD.TOT_AMT,
                                    :OLD.REMARK,
                                    :OLD.REMARK2,
                                    :OLD.TCO_BUSPARTNER_PK,
                                    :NEW.MOD_BY
                                   );
    ELSIF (:NEW.TR_STATUS = 3) AND :NEW.TR_STATUS <> :OLD.TR_STATUS  THEN      -- Cancel --
        BEGIN
            SELECT PK INTO V_TRHPK
              FROM TAC_HGTRH
             WHERE TR_TABLE_PK = :OLD.PK
               AND TR_TABLENM = 'TFN_EPPAYTRH'
               AND TCO_COMPANY_PK = :OLD.TCO_COMPANY_PK;
            -- Delete from TAC_HGTRH --   
            ac_pro_CTL_MST_CONFIRM_CANCEL(v_trhpk, :OLD.TCO_COMPANY_PK, '', 'TFN_EPPAYTRH', :NEW.MOD_BY,  v_temp);
            update tfn_eppaytr
            set tfn_eppaytrh_pk = null,
            mod_dt = sysdate,
            mod_by = :new.mod_by
            where tfn_eppaytrh_pk = :OLD.PK
            and del_if = 0;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_TRHPK := NULL ;
            update tfn_eppaytr
            set tfn_eppaytrh_pk = null,
            mod_dt = sysdate,
            mod_by = :new.mod_by
            where tfn_eppaytrh_pk = :OLD.PK
            and del_if = 0;
                   
        END ;                        
    END IF;
END;
/


DROP TRIGGER HPDQ.TR_UPD_TPS_WKBUDGET_D;

CREATE OR REPLACE TRIGGER HPDQ.TR_UPD_TPS_WKBUDGET_D 
   AFTER INSERT OR UPDATE
   ON HPDQ.TPS_WKBUDGET_D
   REFERENCING NEW AS new OLD AS old
   FOR EACH ROW
DECLARE
   tmpvar           NUMBER;
   l_tr_rate        NUMBER;
   l_bk_ccy         VARCHAR2 (3);
   l_bk_rate        NUMBER;
   l_budget_ccy     VARCHAR2 (3);
   l_direct_amt     NUMBER;
   l_direct_famt    NUMBER;
   l_status         NUMBER;
   l_levelcode_pk   NUMBER;
   l_parent_amt     NUMBER;
/******************************************************************************
   NAME:       tr_upd_TPS_WKBUDGET_D
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/14/2012      Administrator       1. Created this trigger.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     tr_upd_TPS_WKBUDGET_D
      Sysdate:         7/14/2012
      Date and Time:   7/14/2012, 10:24:02 AM, and 7/14/2012 10:24:02 AM
      Username:        Administrator (set in TOAD Options, Proc Templates)
      Table Name:       (set in the "New PL/SQL Object" dialog)
      Trigger Options:  (set in the "New PL/SQL Object" dialog)
******************************************************************************/
BEGIN
   --   if new.changeamt <> old.changeamt then
   --     null;
   --   end if;

   /* select parent_pk
    into  l_levelcode_pk
    from  TPS_WKBUDGET_D
    where tecps_item_pk = :new.tecps_item_pk;*/

   -- select sum()



   IF INSERTING 
   THEN
      -- into l_parent_amt
      SELECT NVL (a.budget_exrate, 1),
             a.book_ccy,
             NVL (book_exrate, 1),
             budget_ccy,
             budget_amt,
             budget_famt,
             NVL (status, 1)
        INTO l_tr_rate,
             l_bk_ccy,
             l_bk_rate,
             l_budget_ccy,
             l_direct_amt,
             l_direct_famt,
             l_status
        FROM TPS_WKBUDGET_M a
       WHERE     a.del_if = 0
             AND a.tps_project_pk = :new.tps_project_pk
             AND a.pk = :new.TPS_WKBUDGET_M_pk;

      IF l_bk_rate = 0
      THEN
         l_bk_rate := 1;
      END IF;

      ----- Level code dd balance------------------------------------------------------------------------------------------------
      INSERT INTO TPS_WKBUDGET_DD (pk,
                                      tps_project_pk,
                                      TPS_LEVELCODE_PK,
                                      ccy,
                                      qty,
                                      material_amt,
                                      material_famt,
                                      labor_amt,
                                      labor_famt,
                                      equiment_amt,
                                      equiment_famt,
                                      del_if,
                                      crt_by,
                                      TPS_WKBUDGET_m_PK,
                                      TPS_WKBUDGET_D_pk,
                                      tps_item_pk,
                                      grd_amt,
                                      grd_famt,
                                      leaf_yn,
                                      TPS_ORDERWORK_PK,
                                      tps_st_budget_pk,
                                      material_up,
                                      labor_up,
                                      equipment_up,
                                      NET_QTY,
                                      LOSS_RATE)
           VALUES (TPS_WKBUDGET_DD_SEQ.NEXTVAL,
                   :new.tps_project_pk,
                   :new.TPS_LEVELCODE_PK,
                   :new.CCY,
                   :new.QTY,
                   ROUND (:new.MATERIAL_FAMT * l_tr_rate / l_bk_rate, 2),
                   :new.MATERIAL_FAMT,
                   ROUND (:new.LABOR_FAMT * l_tr_rate / l_bk_rate, 2),
                   :new.LABOR_FAMT,
                   ROUND (:new.EXPENSE_FAMT * l_tr_rate / l_bk_rate, 2),
                   :new.EXPENSE_FAMT,
                   0,
                   :new.crt_by,
                   :new.TPS_WKBUDGET_M_PK,
                   :new.pk,
                   :new.tecps_item_pk,
                   ROUND (:new.GRD_FAMT * l_tr_rate / l_bk_rate, 2),
                   :new.GRD_FAMT,
                   'Y',
                   :new.TPS_ORDERWORK_PK,
                   :new.TPS_ST_BUDGET_PK,
                   :new.MATERIAL_UP,
                   :new.LABOR_UP,
                   :new.EXPENSE_UP,
                   :new.NET_QTY,
                   :new.LOSS_RATE);

      FOR c21 IN (    SELECT pk TPS_LEVELCODE_PK
                        FROM TPS_LEVELCODE
                       WHERE del_if = 0 AND leaf_yn = 'F' AND pk != 0
                  CONNECT BY pk = PRIOR parent_pk
                  START WITH pk = :new.parent_pk AND del_if = 0
                    ORDER BY LEVEL_ DESC)
      LOOP
         INSERT INTO TPS_WKBUDGET_DD (pk,
                                         TPS_PROJECT_PK,
                                         TPS_LEVELCODE_PK,
                                         ccy,
                                         qty,
                                         material_amt,
                                         material_famt,
                                         labor_amt,
                                         labor_famt,
                                         equiment_amt,
                                         equiment_famt,
                                         del_if,
                                         crt_by,
                                         TPS_WKBUDGET_M_PK,
                                         TPS_WKBUDGET_D_pk,
                                         TPS_ITEM_PK,
                                         grd_amt,
                                         grd_famt,
                                         leaf_yn,
                                         TPS_ORDERWORK_PK,
                                         TPS_ST_BUDGET_PK,
                                         material_up,
                                         labor_up,
                                         equipment_up,
                                         NET_QTY,
                                         LOSS_RATE)
              VALUES (
                        TPS_WKBUDGET_DD_seq.NEXTVAL,
                        :new.TPS_PROJECT_PK,
                        c21.TPS_LEVELCODE_PK,
                        :new.CCY,
                        :new.QTY,
                        ROUND (
                           :new.MATERIAL_FAMT * l_tr_rate / l_bk_rate,
                           2),
                        :new.MATERIAL_FAMT,
                        ROUND (:new.LABOR_FAMT * l_tr_rate / l_bk_rate,
                               2),
                        :new.LABOR_FAMT,
                        ROUND (:new.EXPENSE_FAMT * l_tr_rate / l_bk_rate, 2),
                        :new.EXPENSE_FAMT,
                        0,
                        :new.crt_by,
                        :new.TPS_WKBUDGET_M_PK,
                        :new.pk,
                        :new.TPS_ITEM_PK,
                        ROUND (:new.GRD_FAMT * l_tr_rate / l_bk_rate, 2),
                        :new.GRD_FAMT,
                        'N',
                        :new.TPS_ORDERWORK_PK,
                        :new.TPS_ST_BUDGET_PK,
                        :new.MATERIAL_UP,
                        :new.LABOR_UP,
                        :new.EXPENSE_UP,
                        :new.NET_QTY,
                        :new.LOSS_RATE);
      END LOOP;
   END IF;

   IF UPDATING
   THEN
      IF :NEW.DEL_IF <> 0
      THEN
         DELETE TPS_WKBUDGET_DD
          WHERE TPS_WKBUDGET_D_PK = :new.pk;
      elsif :new.GRD_FAMT <> :old.GRD_FAMT or :new.qty <> :old.qty
            or :new.MATERIAL_UP <> :old.MATERIAL_UP
            or :new.LABOR_UP <> :old.LABOR_UP
            or :new.EXPENSE_UP <> :old.EXPENSE_UP
            then
         -- into l_parent_amt
         SELECT NVL (a.budget_exrate, 1),
                a.book_ccy,
                NVL (book_exrate, 1),
                budget_ccy,
                budget_amt,
                budget_famt,
                NVL (status, 1)
           INTO l_tr_rate,
                l_bk_ccy,
                l_bk_rate,
                l_budget_ccy,
                l_direct_amt,
                l_direct_famt,
                l_status
           FROM TPS_WKBUDGET_M a
          WHERE     a.del_if = 0
                AND a.TPS_PROJECT_PK = :new.TPS_PROJECT_PK
                AND a.pk = :new.TPS_WKBUDGET_M_PK;

         IF l_bk_rate = 0
         THEN
            l_bk_rate := 1;
         END IF;

         DELETE tecps_levelcode_dd
          WHERE TPS_WKBUDGET_D_PK = :new.pk;

         INSERT INTO TPS_WKBUDGET_DD (pk,
                                         tps_project_pk,
                                         TPS_LEVELCODE_PK,
                                         ccy,
                                         qty,
                                         material_amt,
                                         material_famt,
                                         labor_amt,
                                         labor_famt,
                                         equiment_amt,
                                         equiment_famt,
                                         del_if,
                                         crt_by,
                                         TPS_WKBUDGET_M_PK,
                                         TPS_WKBUDGET_D_pk,
                                         TPS_ITEM_PK,
                                         grd_amt,
                                         grd_famt,
                                         leaf_yn,
                                         TPS_ORDERWORK_PK,
                                         TPS_ST_BUDGET_PK,
                                         material_up,
                                         labor_up,
                                         equipment_up,
                                         NET_QTY,
                                         LOSS_RATE)
              VALUES (
                        TPS_WKBUDGET_DD_seq.NEXTVAL,
                        :new.TPS_PROJECT_PK,
                        :new.TPS_LEVELCODE_PK,
                        :new.ccy,
                        :new.qty,
                        ROUND (
                           :new.MATERIAL_FAMT * l_tr_rate / l_bk_rate,
                           2),
                        :new.MATERIAL_FAMT,
                        ROUND (:new.LABOR_FAMT * l_tr_rate / l_bk_rate,
                               2),
                        :new.LABOR_FAMT,
                        ROUND (:new.EXPENSE_FAMT * l_tr_rate / l_bk_rate, 2),
                        :new.EXPENSE_FAMT,
                        0,
                        :new.crt_by,
                        :new.TPS_WKBUDGET_M_PK,
                        :new.pk,
                        :new.tecps_item_pk,
                        ROUND (:new.GRD_FAMT * l_tr_rate / l_bk_rate, 2),
                        :new.GRD_FAMT,
                        'Y',
                        :new.TPS_WKBUDGET_M_PK,
                        :new.TPS_ST_BUDGET_PK,
                        :new.MATERIAL_UP,
                        :new.LABOR_UP,
                        :new.EXPENSE_UP,
                        :new.NET_QTY,
                        :new.LOSS_RATE);

         FOR c21 IN (    SELECT pk TPS_LEVELCODE_PK
                           FROM TPS_LEVELCODE
                          WHERE del_if = 0 AND leaf_yn = 'F' AND pk != 0
                     CONNECT BY pk = PRIOR parent_pk
                     START WITH pk = :new.parent_pk AND del_if = 0
                       ORDER BY LEVEL_ DESC)
         LOOP
            INSERT INTO TPS_WKBUDGET_DD (pk,
                                            tps_project_pk,
                                            TPS_LEVELCODE_PK,
                                            ccy,
                                            qty,
                                            material_amt,
                                            material_famt,
                                            labor_amt,
                                            labor_famt,
                                            equiment_amt,
                                            equiment_famt,
                                            del_if,
                                            crt_by,
                                            TPS_WKBUDGET_M_PK,
                                            TPS_WKBUDGET_D_pk,
                                            TPS_ITEM_PK,
                                            grd_amt,
                                            grd_famt,
                                            leaf_yn,
                                            TPS_ORDERWORK_PK,
                                            TPS_ST_BUDGET_PK,
                                            material_up,
                                            labor_up,
                                            equipment_up,
                                            NET_QTY,
                                            LOSS_RATE)
                 VALUES (
                           TPS_WKBUDGET_dd_seq.NEXTVAL,
                           :new.TPS_PROJECT_PK,
                           c21.TPS_LEVELCODE_PK,
                           :new.ccy,
                           :new.qty,
                           ROUND (
                              :new.MATERIAL_FAMT * l_tr_rate / l_bk_rate,
                              2),
                           :new.MATERIAL_FAMT,
                           ROUND (
                              :new.LABOR_FAMT * l_tr_rate / l_bk_rate,
                              2),
                           :new.LABOR_FAMT,
                           ROUND (:new.EXPENSE_FAMT * l_tr_rate / l_bk_rate,
                                  2),
                           :new.EXPENSE_FAMT,
                           0,
                           :new.crt_by,
                           :new.TPS_WKBUDGET_M_PK,
                           :new.pk,
                           :new.TPS_ITEM_PK,
                           ROUND (:new.GRD_FAMT * l_tr_rate / l_bk_rate, 2),
                           :new.GRD_FAMT,
                           'N',
                           :new.TPS_ORDERWORK_PK,
                           :new.TPS_ST_BUDGET_PK,
                           :new.MATERIAL_UP,
                           :new.LABOR_UP,
                           :new.EXPENSE_UP,
                           :new.NET_QTY,
                           :new.LOSS_RATE);
         END LOOP;
      
      END IF;
   END IF;
END tr_upd_TPS_WKBUDGET_D;
/
