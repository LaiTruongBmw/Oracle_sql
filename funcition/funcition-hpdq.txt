DROP FUNCTION HPDQ.AC_A_GETITEM_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_a_getitem_pk (p_TCO_COMPANY_PK varchar2, p_item_cd VARCHAR2)
   RETURN VARCHAR2
IS
   l_item_pk   VARCHAR2 (30);
BEGIN
   select A.PK into l_item_pk 
   from tco_item a 
   where a.del_if = 0 
   and A.ITEM_CODE = replace(replace(trim(p_item_cd),chr(10),''),chr(13),'') 
   and (A.TCO_COMPANY_PK = replace(replace(trim(p_TCO_COMPANY_PK),chr(10),''),chr(13),'') or TCO_COMPANY_PK is null) ;
   RETURN l_item_pk;
   fdsdfsdfs
   
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_A_GET_BOOKCCY;

CREATE OR REPLACE FUNCTION HPDQ.ac_a_get_bookccy
                                (
                                    p_compk        varchar2
                                )
return varchar2 
is
  l_rtn_value       varchar2(10);
begin

  l_rtn_value := '';
  
  select code into l_rtn_value
  from tco_abcode a, tco_abcodegrp b
 where a.tco_abcodegrp_pk = b.pk
   and b.id = 'ACBG0040'
   and a.use_if = 1
   and a.del_if = 0
   and b.del_if = 0
   and a.def_yn = 'Y';

  return l_rtn_value;
---------
exception
---------
  when others then raise;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_A_GET_COMMONCODE;

CREATE OR REPLACE FUNCTION HPDQ.ac_a_get_commoncode
(
    p_grp       varchar2
)
return varchar2
is
    
    v_code          varchar2(20);
    v_name          varchar2(100);
    v_rpt_code      varchar2(3000);
    
    cursor c1 is
        select code, b.code_nm
          from tac_commcode_master a, tac_commcode_detail b
         where a.pk     = b.tac_commcode_master_pk
           and a.id     = p_grp
           and a.del_if = 0
           and b.del_if = 0
           and b.use_yn ='Y'
         order by code, b.code_nm;
         
begin

    open c1;
    loop
      fetch c1 into v_code, v_name;
      exit when c1%notfound;
          v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
    end loop;

    return v_rpt_code;

exception
    when others then return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_A_GET_COMMONCODE_COL;

CREATE OR REPLACE FUNCTION HPDQ.ac_A_GET_COMMONCODE_COL
                                    (
                                        p_grp       VARCHAR2,
                                        p_col       VARCHAR2,
                                        p_col2      VARCHAR2
                                    )
RETURN VARCHAR2
IS
    v_code          VARCHAR2(20);
    v_name          VARCHAR2(20);
    v_rpt_code      VARCHAR2(1000);
    v_sql           VARCHAR2(1000);
    C1              SYS_REFCURSOR;
    
BEGIN

    v_sql := 'SELECT ' || p_col || ',' || p_col2 || ' FROM TAC_COMMCODE_MASTER A, TAC_COMMCODE_DETAIL B';
    v_sql := v_sql || ' WHERE A.PK = B.TAC_COMMCODE_MASTER_PK AND A.ID = ' || CHR(39) || p_grp || CHR(39);
    v_sql := v_sql || ' AND A.DEL_IF = 0 AND B.DEL_IF = 0 ORDER BY CODE, B.CODE_NM';
    
    
    OPEN C1 FOR v_sql;
    LOOP
        FETCH C1 INTO v_code, v_name;
        EXIT WHEN C1%NOTFOUND;
          v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
    END LOOP;

    RETURN v_rpt_code;

EXCEPTION
    WHEN OTHERS THEN RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_A_GET_DEFAULT;

CREATE OR REPLACE FUNCTION HPDQ.ac_a_get_default (p_grp VARCHAR2)
   RETURN VARCHAR2
IS
   v_rpt_code   VARCHAR2 (10);
BEGIN
   SELECT   code
       INTO v_rpt_code
       FROM tac_commcode_master a, tac_commcode_detail b
      WHERE a.pk = b.tac_commcode_master_pk
        AND a.ID = p_grp
        AND a.del_if = 0
        AND b.del_if = 0
        AND def_yn = 'Y'
   ORDER BY code, b.code_nm;

   RETURN v_rpt_code;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_FORMULAR_EXECUTE;

CREATE OR REPLACE FUNCTION HPDQ.ac_formular_execute (p_formular in varchar, p_date_type varchar, p_column_type varchar)
   return number
is
/******************************************************************************
   NAME:       SF_CAL_POLYNOMINAL
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/11/2008   Phan Huy Quoc My       1. Created this function.
******************************************************************************/
   l_tmp         varchar (5000) := trim (p_formular);
   l_len         number         := 0;
   l_cnt         number         := 0;
   l_formular    varchar (1000) := '';
   l_ac_cd       varchar (1000) := '';
   l_value       varchar (1000)   := '';
   l_buf         varchar (1)    := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   select length (l_tmp)
     into l_len
     from dual;

   l_tmp := '(' || l_tmp || ')';
   l_len := l_len + 2;

   if (l_len < 8)
   then
      /* Toi thieu co 6 ky tu cua tai khoan */
      l_formular := 'ERROR';
   end if;

   for i in 1 .. l_len
   loop
      l_buf := substr (l_tmp, i, 1);

      select instr ('0123456789', l_buf)
        into l_cnt
        from dual;

      if (l_cnt = 0)
      then                                                                                    /*  Khong phai la ky so */
         l_formular := l_formular || l_value;
         l_formular := l_formular || l_buf;
         l_value := '';
      else
         l_ac_cd := l_ac_cd || l_buf;

         if (length (l_ac_cd) = 6)
         then
            if p_date_type = 'M'
            then
               if p_column_type = 'THIS'
               then
                  select sum (m_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (m_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC'
               then
                  select sum (m_acc)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC1'
               then
                  select sum (m_acc1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL'
               then
                  select sum (m_bal)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL1'
               then
                  select sum (m_bal1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            elsif p_date_type = 'Q'
            then
               if p_column_type = 'THIS'
               then
                  select sum (q_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (q_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC'
               then
                  select sum (q_acc)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC1'
               then
                  select sum (q_acc1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            elsif p_date_type = 'Y'
            then
               if p_column_type = 'THIS'
               then
                  select sum (y_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (y_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL'
               then
                  select sum (y_bal)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL1'
               then
                  select sum (y_bal1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            end if;

            if (l_value is null or l_value = '')
            then
               l_value := 0;
            end if;

            l_ac_cd := '';
         end if;
      end if;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
                into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ac_formular_execute;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_F_COMMONCODE;

CREATE OR REPLACE FUNCTION HPDQ.ac_f_commoncode (v_grp    IN VARCHAR2, -- Group Code
                                                    v_case   IN VARCHAR2, -- sql case
                                                    v_par    IN VARCHAR2 -- parameter
                                                                        )
   RETURN VARCHAR2
IS
   /*====================================================
   FUNCTION NM : F_COMMONCODE
   REMARK      : Read Common Code
   PARAMETER   :
   RETURN      :   common code
   MODULE:
   CREATED DT  : 2003/10/10
   CREATED BY  : Kim, Kyung Sik
   =====================================================*/
   TYPE cur_typ IS REF CURSOR;

   d_cur       cur_typ;
   lscode      VARCHAR2 (10) := NULL;
   lscdname    VARCHAR2 (100) := NULL;
   lsvsql      VARCHAR2 (4001) := NULL;
   lsvreturn   VARCHAR2 (5000) := NULL;
   strsql      VARCHAR2 (4000) := NULL;
   cnt         NUMBER;
   i           NUMBER (2) := 1;
   i2          NUMBER (2) := 1;
   i3          NUMBER (2) := 0;
   j           NUMBER := 1;

   TYPE vararray IS TABLE OF VARCHAR2 (10)
                       INDEX BY BINARY_INTEGER;

   a           vararray;
--------
BEGIN
   --------
   -- sql case without parameter
   IF v_case IS NULL
   THEN
      lsvsql :=
         'SELECT CODE, CODE_NM  FROM TCO_ABCODE A, TCO_ABCODEGRP B WHERE A.TCO_ABCODEGRP_PK =
b.pk and b.id ='''
         || v_grp
         || ''' and a.use_if = 1 and a.del_if = 0 and b.del_if = 0 order by a.DEF_YN desc , ord  ';
   ELSIF v_par IS NULL
   THEN
      -- sql case without parameter
      SELECT b.sql_text
        INTO lsvsql
        FROM tco_abcodegrp a, tco_abcodesql b
       WHERE     a.pk = b.tco_abcodegrp_pk
             AND a.id = v_grp
             AND b.sql_case = v_case
             AND a.del_if = 0
             AND b.del_if = 0;
   ELSE
      SELECT b.sql_text
        INTO lsvsql
        FROM tco_abcodegrp a, tco_abcodesql b
       WHERE     a.pk = b.tco_abcodegrp_pk
             AND a.id = v_grp
             AND b.sql_case = v_case
             AND a.del_if = 0
             AND b.del_if = 0;

      -- sql case with parameter
      cnt := LENGTH (v_par);

      FOR i IN 1 .. cnt
      LOOP
         i2 := i;

         IF SUBSTR (v_par, i2, 1) = ';'
         THEN
            a (j) := SUBSTR (v_par, i3 + 1, i2 - i3 - 1);
            lsvsql := REPLACE (lsvsql, '$' || j, '''' || a (j) || '''');
            i3 := i2;
            j := j + 1;
         END IF;
      END LOOP;
   END IF;

   -- execute sql text
   strsql := lsvsql;

   OPEN d_cur FOR strsql;

   LOOP
      FETCH d_cur
      INTO lscode, lscdname;

      EXIT WHEN d_cur%NOTFOUND;
      -- process row here
      lsvreturn := lsvreturn || '' || lscode || '|' || lscdname || '|';
   END LOOP;

   CLOSE d_cur;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_F_COMMONCODE_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_f_commoncode_1 (
   v_grp    in   varchar2,                                                                            -- Group Code
   v_case   in   varchar2,                                                                              -- sql case
   v_par    in   varchar2                                                                              -- parameter
)
   return varchar2
is
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
   type cur_typ is ref cursor;

   d_cur       cur_typ;
   lscode      varchar2 (10)   := null;
   lscdname    varchar2 (100)  := null;
   lsvsql      varchar2 (4001) := null;
   lsvreturn   varchar2 (5000) := null;
   strsql      varchar2 (4000) := null;
   cnt         number;
   i           number (2)      := 1;
   i2          number (2)      := 1;
   i3          number (2)      := 0;
   j           number          := 1;

   type vararray is table of varchar2 (10)
      index by binary_integer;

   a           vararray;
--------
begin
--------
-- sql case without parameter
   if v_case is null
   then
      lsvsql :=
            'SELECT CODE, CODE_NM  FROM TCO_ABCODE A, TCO_ABCODEGRP B WHERE A.TCO_ABCODEGRP_PK =
b.pk and b.id ='''
         || v_grp
         || ''' and a.use_if = 1 and a.del_if = 0 and b.del_if = 0 order by a.CODE_NM ';
   elsif v_par is null
   then
-- sql case without parameter
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;
   else
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;

-- sql case with parameter
      cnt := length (v_par);

      for i in 1 .. cnt
      loop
         i2 := i;

         if substr (v_par, i2, 1) = ';'
         then
            a (j) := substr (v_par, i3 + 1, i2 - i3 - 1);
            lsvsql := replace (lsvsql, '$' || j, '''' || a (j) || '''');
            i3 := i2;
            j := j + 1;
         end if;
      end loop;
   end if;

-- execute sql text
   strsql := lsvsql;

   open d_cur for strsql;

   loop
      fetch d_cur
       into lscode, lscdname;

      exit when d_cur%notfound;
      -- process row here
      lsvreturn := lsvreturn || '' || lscode || '|' || lscdname || '|';
   end loop;

   close d_cur;

   return lsvreturn;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_F_GET_ACPK;

CREATE OR REPLACE FUNCTION HPDQ.AC_F_GET_ACPK(p_acc_code   VARCHAR2)
RETURN  VARCHAR2
IS
l_acc_pk       NUMBER(10);
BEGIN
   SELECT PK INTO l_acc_pk
     FROM TAC_ABACCTCODE
    WHERE AC_CD  = p_acc_code
      AND DEL_IF = 0;

   RETURN  l_acc_pk;

EXCEPTION
   WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_60090200_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_60090200_seq (
   p_tac_crdad_other_pk   in number                                  -- Trd_Pk
                                   )
   return varchar2
is
   /**=================================================================================
   * Function     SF_A_GET_AGTRITEM
   * Description
   * Return
   * Writer        Tuyen
   * Create Date   2003-11-17
   =================================================================================*/

   l_seq   varchar2 (20) := null;
begin
   select
    (select h.pk from tac_hgtrh h where h.tr_table_pk = e.pk and h.tr_tablenm = 'TAC_CRDA' and tr_status in (0,2)) 
     into l_seq
     from (
     select max(d.pk) pk
     from tac_crdad dad, tac_crda d
    where     dad.del_if = 0
          and dad.tac_crdad_other_pk = p_tac_crdad_other_pk
          and d.del_if = 0
          and d.pk = dad.tac_crda_pk
          and tr_status in (0,2)) e;

   return l_seq;
exception
   when others
   then
      return '';
end;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_60180150_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_get_60180150_1(
   p_tac_kafinanceform_local_pk   VARCHAR
 , p_date_type                    VARCHAR
 , p_column_type                  VARCHAR
 , p_balance_type                 VARCHAR)
   RETURN NUMBER
IS
/******************************************************************************
   NAME:       SF_GFRV00050_1
   PURPOSE:

   REVISIONS:
   Ver        Date         Author           Description
   ---------  ----------   ---------------  ------------------------------------
   1.0        16-Jan-2010   TTAL       1. Created this function.
******************************************************************************/
   l_formular VARCHAR2(32767) := '';
   l_value VARCHAR2(2000) := '';
   l_rtn_value NUMBER;
   l_status VARCHAR2(300);
BEGIN
   FOR c1 IN (SELECT *
                FROM tac_kafinanceformd1_local
               WHERE del_if = 0
                     AND tac_kafinanceform_local_pk =
                                                 p_tac_kafinanceform_local_pk)
   LOOP
      CASE
         WHEN p_column_type = 'CLOSING'
         THEN
            BEGIN
               SELECT DECODE(p_balance_type, 'L', dr_op, 'R', cr_op)
                 INTO l_value
                 FROM tac_tmptrialbal_vas
                WHERE ac_cd = c1.ac_cd;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
         WHEN p_column_type = 'OPENNING'
         THEN
            BEGIN
               SELECT DECODE(p_balance_type, 'L', dr_bl, 'R', cr_bl)
                 INTO l_value
                 FROM tac_tmptrialbal_vas
                WHERE ac_cd = c1.ac_cd;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
      END CASE;

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL(c1.operator_, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
                INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACCD;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_ACCD
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK             = p_pk
     --AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACCDLOCAL_BY_ACPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_accdlocal_by_acpk(
   p_tac_abacctcode_pk   VARCHAR2
 , p_compk               VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value VARCHAR2(50);
BEGIN
   l_rtn_value := '';

   SELECT ac_cd
     INTO l_rtn_value
     FROM tac_localcode
    WHERE pk =
             (SELECT tac_localcode_pk
                FROM tac_abacctcode
               WHERE del_if = 0 AND pk = p_tac_abacctcode_pk
                     AND tco_company_pk = p_compk);

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACCD_LOCAL;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_ACCD_LOCAL
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT nvl(AC_CD_FORMULAR,ac_cd)
    INTO l_rtn_value
    FROM TAC_LOCALCODE
   WHERE PK             = p_pk
     AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACCOUNT_PK_GROUP_DEFINE;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_account_pk_group_define (p_group_code varchar, p_code varchar)
   return number
is
   /******************************************************************************
      NAME:       ac_get_account_pk_group_define
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        10/31/2012   Nguyen Van Thai       1. Created this function.


   ******************************************************************************/
   l_tac_abacctcode_pk   number;
begin
   select max (d.tac_abacctcode_pk)
     into l_tac_abacctcode_pk
     from tac_abtracgrp p, tac_abtracgrpd d
    where     p.ac_grp = p_group_code
          and p.del_if = 0
          and p.app_grp = 'Y'
          and p.pk = d.tac_abtracgrp_pk
          and d.del_if = 0
          and d.ac_code = p_code;

   return l_tac_abacctcode_pk;
end ac_get_account_pk_group_define;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACNM;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_ACNM(
                                            p_pk        VARCHAR2,
                                            p_compk     VARCHAR2,
                                            p_lang    VARCHAR2
                                        ) 
RETURN VARCHAR2
IS
  l_rtn_value VARCHAR2(255);
BEGIN

  l_rtn_value := '';

  SELECT decode(p_lang,'ENG',AC_NM,'VIE',ac_lnm,'KOR',ac_knm)
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK              = p_pk
     --AND TCO_COMPANY_PK  = p_compk
     AND DEL_IF          = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACNMLOCAL_BYIFRSPK;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_ACNMlocal_byifrspk(
                                            p_pk        VARCHAR2,
                                            p_compk     VARCHAR2
                                        ) 
RETURN VARCHAR2
IS
  l_rtn_value VARCHAR2(255);
BEGIN

  l_rtn_value := '';
  
  select a.ac_cd
  into l_rtn_value
  from  TAC_LOCALCODE a,TAC_ABACCTCODE b
  where a.del_if=0 and b.del_if=0
  and a.pk = b.TAC_LOCALCODE_pk 
  and b.pk = p_pk
   AND a.TCO_COMPANY_PK  = p_compk;

--  SELECT DECODE(p_lang, 'ENG', AC_NM, 'VIE', AC_LNM, 'KOR', AC_KNM)
--    INTO l_rtn_value
--    FROM TAC_ABACCTCODE a, TAC_LOCALCODE b
--
--   WHERE PK              = p_pk
--     AND TCO_COMPANY_PK  = p_compk
--     AND DEL_IF          = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACNM_KOREAN;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_acnm_korean (p_pk IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
   l_rtn_value := '';

   SELECT ac_knm
     INTO l_rtn_value
     FROM tac_abacctcode
    WHERE pk = p_pk AND del_if = 0;

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACNM_LOCAL;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_acnm_local (p_pk IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
   l_rtn_value := '';

   SELECT ac_lnm
     INTO l_rtn_value
     FROM tac_abacctcode
    WHERE pk = p_pk AND del_if = 0;

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACPK_COMPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_Get_Acpk_compk(p_acc_code   VARCHAR2,COM_PK   IN  STRING)
RETURN  VARCHAR2
IS
l_acc_pk       NUMBER(10);
BEGIN
   SELECT PK INTO l_acc_pk
     FROM TAC_ABACCTCODE
    WHERE AC_CD  = p_acc_code
      AND TCO_COMPANY_PK = COM_PK
      AND DEL_IF = 0;

   RETURN  l_acc_pk;

EXCEPTION
   WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACTUAL_DATE;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_actual_date(       
        p_actual_date   varchar2,
        p_tac_abplcenter_pk     varchar2        
    ) 
RETURN 
VARCHAR2 IS

/******************************************************************************
   NAME:       ac_get_actual_date
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        19/12/2013   Van Le       1. Created this function.

   NOTES:


******************************************************************************/
    v_month varchar2(6);
    v_trans_date varchar2(8);   
BEGIN
    
    
    begin
        select a.month_close
        into v_month
        from tac_close a
        where p_actual_date between a.from_dt and a.to_dt
        and a.tac_abpl_pk = p_tac_abplcenter_pk
        and a.close_yn = 'N'
        and a.del_if = 0 ;        
        
        if v_month = substr(p_actual_date, 1, 6) then
            v_trans_date := p_actual_date ;
        else
            v_trans_date := v_month || '01';             
        end if ;
        
    exception 
    when no_data_found then
        v_trans_date := '19000101';
    end ;
    return v_trans_date ;

END ac_get_actual_date;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_AGTRITEM;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_AGTRITEM
  (
   v_trdpk        in       NUMBER      -- Trd_Pk
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
       SELECT '[' || CCY || ',' || DECODE(CCY,'VND',TO_CHAR(TR_AMT,'999,999,999,999,999'),TO_CHAR(TR_AMT,'999,999,999,999,990.99')) ||']' AS DATA1
     FROM TAC_HGTRD
         WHERE PK= v_trdpk
        AND CCY != 'KRW'
    UNION ALL
       SELECT '[' || B.PARTNER_NAME ||']' AS DATA1
         FROM TAC_HGTRD A, TCO_BUSPARTNER B
        WHERE A.PK= v_trdpk
            AND A.TCO_BUSPARTNER_PK = B.PK
    

            
    UNION ALL
    SELECT '[' || A.ITEM || ']'AS DATA1
      FROM TAC_HGTRDITEM a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_HGTRD_PK = v_trdpk
       AND B.TAC_ABITEM_ALIAS  = 'EMPLOYEE NAME'
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 
    UNION ALL   
    SELECT '[Project : ' ||B.PLC_CD || ' ' || B.PLC_NM || ']' AS DATA1
     FROM TAC_HGTRD A, TAC_ABCENTER B
    WHERE A.PK= v_trdpk
        AND A.TAC_ABPLCENTER_PK  = B.PK;
      
   /* UNION ALL
    SELECT '[' || b.TAC_ABITEM_ALIAS ||' : ' || DECODE(A.ITEM_NM,NULL,A.ITEM,A.ITEM_NM) || ']'AS DATA1
      FROM tac_bgtrditem a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_BGTRD_PK = v_trdpk
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 ;
       
           UNION ALL
       SELECT '[' || B.BG_DEPTNM ||']' AS DATA1
         FROM TAC_HGTRD A, TAC_EBDEPT B
        WHERE A.PK= v_trdpk
             AND A.TAC_ABBUDGET_PK = B.PK
             
       
       */


BEGIN


FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_AGTRITEM1;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_agtritem1
  (
   v_trdpk        in       number      -- Trd_Pk
  )


return  varchar2
is
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvitem       varchar2(1000) := null;
cursor item_cus is
     /* Formatted on 8/26/2013 9:17:54 AM (QP5 v5.227.12220.39724) */
        select    '['
               || ccy
               || ','
               || decode (ccy,
                          'VND', trim (to_char (tr_amt, '999,999,999,999,999')),
                          trim (to_char (tr_amt, '999,999,999,999,990.99')))
               || ',Ex.Rate: '
               || trim (to_char (tr_rate, '999,999'))
               || ']'
                  as data1
          from tac_hgtrd
         where pk = v_trdpk and ccy != 'KRW'
      union all
         select '[' || b.partner_name || ']' as data1
          from tac_hgtrd a, tco_buspartner b
         where a.pk = v_trdpk and a.tco_buspartner_pk = b.pk
     
    union all
    select    '['
           || decode (
                 b.tac_abitem_alias,
                 'INVOICE DATE',    substr (a.item, 7, 2)
                                 || '/'
                                 || substr (a.item, 5, 2)
                                 || '/'
                                 || substr (a.item, 1, 4),
                 'USE DATE',    substr (a.item, 7, 2)
                             || '/'
                             || substr (a.item, 5, 2)
                             || '/'
                             || substr (a.item, 1, 4),
                 'DEPOSIT ACCOUNT NO', a.item_nm || '-' || a.item,
                 a.item)
           || ' '
           || ']'
              as data1
      from tac_hgtrditem a, tac_abacctitem b
     where     tac_abacctitem_pk = b.pk
           and tac_hgtrd_pk = v_trdpk
           and b.tac_abitem_alias not in ('NET AMOUNT', 'TAX CODE', 'VAT NOTE')
           and b.prn_chk = 'Y'
           and a.del_if = 0
           and b.del_if = 0
    union all   
    /* Formatted on 8/26/2013 9:41:37 AM (QP5 v5.227.12220.39724) */
    select '[CC : ' || c.pl_cd || ' ' || c.pl_nm || ']' as data1
      from tac_hgtrd a, tac_abplcenter b, tac_abpl c
     where a.pk = v_trdpk and a.tac_abplcenter_pk = b.pk
     and c.del_if = 0
     and b.tac_abpl_pk = c.pk
    union all
   /* Formatted on 8/26/2013 9:41:26 AM (QP5 v5.227.12220.39724) */
    select    '[Net Amt: '
           || decode (d.ccy,
                      'VND', trim (to_char (a.item, '999,999,999,999,999')),
                      trim (to_char (a.item, '999,999,999,999,990.99')))
           || ']'
              as data1
      from tac_hgtrditem a,
           tac_abacctitem b,
           tac_abitem c,
           tac_hgtrd d
     where     a.tac_abacctitem_pk(+) = b.pk
           and b.tac_abitem_pk = c.pk
           and a.tac_hgtrd_pk = d.pk
           and a.tac_hgtrd_pk(+) = v_trdpk
           --           AND b.tac_abacctcode_pk = 2368
           --           AND b.drcr_type IN ('A', 'C')
           and a.del_if(+) = 0
           and b.del_if = 0
           and c.del_if = 0
           and d.del_if = 0
           and b.tac_abitem_alias = 'NET AMOUNT'
           and b.prn_chk = 'Y';
       

begin


for rec in item_cus loop
    lsvitem := lsvitem || rec.data1;
end loop;



return  lsvitem;

exception
   when others then
        return '';
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_AGTRITEM2;

CREATE OR REPLACE FUNCTION HPDQ.Ac_GET_AGTRITEM2
  (
   v_trdpk        in       NUMBER      -- Trd_Pk
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
      
       SELECT  B.PARTNER_ID||' - '|| B.PARTNER_NAME  AS DATA1
         FROM TAC_HGTRD A, TCO_BUSPARTNER B
        WHERE A.PK= v_trdpk
            AND A.TCO_BUSPARTNER_PK = B.PK;
    
BEGIN


FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ASSET_ACC_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_asset_acc_PK
(
            p_ac_cd varchar2,
            p_company_pk varchar2
          
)
RETURN number 
IS
  l_rtn_value       number;
  p_gr_cd_pk number;
BEGIN

  l_rtn_value := '';
  SELECT a.PK 
into  p_gr_cd_pk
        FROM TAC_ABTRACGRP A 
       WHERE a.DEL_IF             = 0 
         --AND A.TCO_COMPANY_PK     = p_company_pk
         AND a.APP_GRP            = 'A'
         AND a.AC_GRP  = 'AF001'
       ORDER BY AC_GRP;

  SELECT D.TAC_ABACCTCODE_PK
  into l_rtn_value
        FROM TAC_ABTRACGRPD D, TAC_ABTRACGRP H
       WHERE D.DEL_IF           = 0 
         AND H.DEL_IF           = 0
    
         AND D.TAC_ABTRACGRP_PK = H.PK
       
         AND TAC_ABTRACGRP_PK   = p_gr_cd_pk
        and upper(AC_CODE) = upper(trim(p_ac_cd))
       ORDER BY AC_CODE;
       RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BOOKCCY;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_bookccy (p_compk varchar2)
   return varchar2
is
   l_rtn_value   varchar2 (10);
begin
   l_rtn_value := '';

   select max (upper (code))
     into l_rtn_value
     from tco_abcode a, tco_abcodegrp b
    where     a.tco_abcodegrp_pk = b.pk
          and b.id = 'ACBG0040'
          and a.use_if = 1
          and a.del_if = 0
          and b.del_if = 0
          and a.def_yn = 'Y';

   return l_rtn_value;
---------
exception
   ---------
   when others
   then
      raise;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BOOKCCY_ACNT;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_bookccy_acnt
                                (
                                    p_code        varchar2
                                )
return varchar2 
is
  l_rtn_value       varchar2(3);
begin

  l_rtn_value := '';
  
  select code into l_rtn_value
  from tac_commcode_master b, tac_commcode_detail a
 where a.tac_commcode_master_pk = b.pk
   and b.id = p_code
   and a.DEF_YN = 'Y'
   and a.del_if = 0
   and b.del_if = 0
   and a.def_yn = 'Y';

  return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BOOKFORMAT;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_bookformat (p_grp varchar2)
   return varchar2
is
   
   v_rpt_code   varchar2 (50);
begin
   select   b.code_nm
       into v_rpt_code
       from tac_commcode_master a, tac_commcode_detail b
      where a.pk = b.tac_commcode_master_pk and a.id = p_grp and a.del_if = 0 and b.del_if = 0
      AND def_yn='Y'
   order by code, b.code_nm;

   return v_rpt_code;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BUSPARTNER_ID;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_buspartner_id(
                 p_tco_buspartner_pk varchar
) 
RETURN 
                 VARCHAR2 
IS
        l_partner_id varchar2(50);
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select partner_id into  l_partner_id from tco_buspartner where del_if = 0 and pk = p_tco_buspartner_pk ;
             return l_partner_id ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
END ac_get_buspartner_id;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BUSPARTNER_INFO;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_buspartner_info(
                 p_tco_buspartner_pk varchar
) 
RETURN 
                 VARCHAR2 
IS
        l_partner_id varchar2(200);
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select partner_id || '-'  || PARTNER_NAME into  l_partner_id from tco_buspartner where del_if = 0 and pk = p_tco_buspartner_pk ;
             return l_partner_id ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
END ac_get_buspartner_info;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BUSPARTNER_NM;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_buspartner_nm(
                 p_tco_buspartner_pk varchar
) 
RETURN 
                 VARCHAR2 
IS
        l_partner_nm varchar2(200);
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select partner_name into  l_partner_nm from tco_buspartner where del_if = 0 and pk = p_tco_buspartner_pk ;
             return l_partner_nm ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
END ac_get_buspartner_nm;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BUSPARTNER_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_buspartner_pk(
                 p_tco_buspartner_id varchar
) 
RETURN 
                 number 
IS
        l_partner_pk number;
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select pk into  l_partner_pk from tco_buspartner where del_if = 0 and partner_id = p_tco_buspartner_id ;
             return l_partner_pk ;
  
END ;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BUSPARTNER_PK1;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_buspartner_pk1 (
   p_tco_buspartner_id    VARCHAR,
   p_tco_buspartner_nm    VARCHAR)
   RETURN NUMBER
IS
   l_partner_pk   NUMBER;
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
   SELECT pk
     INTO l_partner_pk
     FROM tco_buspartner
    WHERE     del_if = 0
          AND UPPER (partner_id) = UPPER (p_tco_buspartner_id)
          AND UPPER (PARTNER_NAME) = UPPER (p_tco_buspartner_nm);

   RETURN l_partner_pk;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_COMMONCODE;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_COMMONCODE
                                    (
                                        p_grp       VARCHAR2
                                    )
RETURN VARCHAR2
IS
    
    v_code          VARCHAR2(20);
    v_name          VARCHAR2(100);
    v_rpt_code      VARCHAR2(3000);
    
    CURSOR C1 IS
        SELECT CODE, B.CODE_NM
          FROM TAC_COMMCODE_MASTER A, TAC_COMMCODE_DETAIL B
         WHERE A.PK     = B.TAC_COMMCODE_MASTER_PK
           AND A.ID     = p_grp
           AND A.DEL_IF = 0
           AND B.DEL_IF = 0
           AND B.USE_YN ='Y'
         ORDER BY CODE, B.CODE_NM;
         
BEGIN

    OPEN C1;
    LOOP
      FETCH C1 INTO v_code, v_name;
      EXIT WHEN C1%NOTFOUND;
          v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
    END LOOP;

    RETURN v_rpt_code;

EXCEPTION
    WHEN OTHERS THEN RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_COMMONCODE_2;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_COMMONCODE_2
                                    (
                                        p_grp       VARCHAR2
                                    )
RETURN VARCHAR2
IS
    
    v_code          VARCHAR2(20);
    v_name          VARCHAR2(100);
    v_rpt_code      VARCHAR2(3000);
    
    CURSOR C1 IS
        SELECT CODE, B.CODE_NM
          FROM TAC_COMMCODE_MASTER A, TAC_COMMCODE_DETAIL B
         WHERE A.PK     = B.TAC_COMMCODE_MASTER_PK
           AND A.ID     = p_grp
           AND A.DEL_IF = 0
           AND B.DEL_IF = 0
           AND B.USE_YN ='Y'
           and a.tco_company_pk=7480
         ORDER BY CODE, B.CODE_NM;
         
BEGIN

    OPEN C1;
    LOOP
      FETCH C1 INTO v_code, v_name;
      EXIT WHEN C1%NOTFOUND;
          v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
    END LOOP;

    RETURN v_rpt_code;

EXCEPTION
    WHEN OTHERS THEN RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_COMMON_BYCODE;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_common_bycode(
   p_grp    VARCHAR2
 , p_code   VARCHAR)
   RETURN VARCHAR2
IS
   v_code VARCHAR2(20);
   v_name VARCHAR2(100);
   v_rpt_code VARCHAR2(3000);
BEGIN
   SELECT   b.num_1
       INTO v_rpt_code
       FROM tac_commcode_master a, tac_commcode_detail b
      WHERE a.pk = b.tac_commcode_master_pk AND a.ID = p_grp AND a.del_if = 0
            AND b.del_if = 0 AND b.use_yn = 'Y' AND b.code = p_code
   ORDER BY code, b.code_nm;

   RETURN v_rpt_code;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_COMPANY;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_company (p_grp VARCHAR2)
   RETURN VARCHAR2
IS
   v_code       VARCHAR2 (20);
   v_name       VARCHAR2 (100);
   v_rpt_code   VARCHAR2 (3000);

   CURSOR c1
   IS
      SELECT pk, partner_name
        FROM tco_company
       WHERE del_if = 0;
BEGIN
   OPEN c1;

   LOOP
      FETCH c1
      INTO v_code, v_name;

      EXIT WHEN c1%NOTFOUND;
      v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
   END LOOP;

   RETURN v_rpt_code;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_CUSTIDBYPK;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_CUSTIDBYPK
                                (    
                                    p_custpk        VARCHAR2,
                                    p_compk         VARCHAR2
                                )
RETURN  VARCHAR2

IS 
    l_return    VARCHAR2(40);
    v_count    NUMBER;
    
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM TCO_BUSPARTNER T
     WHERE PK             = p_custpk
       --AND tco_company_pk = p_compk
       AND del_if         = 0;
    IF v_count = 0 THEN
        l_return := '';
    ELSE   
      SELECT T.PARTNER_ID INTO l_return
        FROM TCO_BUSPARTNER T
       WHERE PK             = p_custpk
         --AND tco_company_pk = p_compk
         AND del_if         = 0;
    END IF;
    RETURN    l_return;

  EXCEPTION
   WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_DEFAULT;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_default (p_grp varchar2)
   return varchar2
is
   
   v_rpt_code   varchar2 (10);
begin
   select   code
       into v_rpt_code
       from tac_commcode_master a, tac_commcode_detail b
      where a.pk = b.tac_commcode_master_pk and a.id = p_grp and a.del_if = 0 and b.del_if = 0
      AND def_yn='Y'
   order by code, b.code_nm;

   return v_rpt_code;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_DEPARTMENT_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_DEPARTMENT_PK
                                (
                                    p_dept_nm          VARCHAR2
                              --      p_compk        VARCHAR2
                                )
RETURN number 
IS
  l_rtn_value       number;
BEGIN

  l_rtn_value := '';
  
  SELECT pk
    INTO l_rtn_value
    FROM TCO_ORG
   WHERE     org_id  =  p_dept_nm
 --    AND tco_company_pk = p_compk
     AND DEL_IF         = 0;
  RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_DEPR_ACC_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_depr_acc_PK
(
            p_ac_cd varchar2,
            p_company_pk varchar2
         
)
RETURN number 
IS
  l_rtn_value       number;
  p_gr_cd_pk number;
BEGIN

  l_rtn_value := '';
  SELECT a.PK 
into  p_gr_cd_pk
        FROM TAC_ABTRACGRP A 
       WHERE a.DEL_IF             = 0 
         --AND A.TCO_COMPANY_PK     = p_company_pk
         AND a.APP_GRP            = 'A'
         AND a.AC_GRP  = 'AD001'
       ORDER BY AC_GRP;
  
  SELECT D.TAC_ABACCTCODE_PK
  into l_rtn_value
        FROM TAC_ABTRACGRPD D, TAC_ABTRACGRP H
       WHERE D.DEL_IF           = 0 
         AND H.DEL_IF           = 0
         AND D.TAC_ABTRACGRP_PK = H.PK
         AND TAC_ABTRACGRP_PK   = p_gr_cd_pk
        and upper(AC_CODE) = upper(trim(p_ac_cd))
       ORDER BY AC_CODE;
       RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_DRCRNUM;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_DRCRNUM
    (
        p_comp          VARCHAR2,
        p_acc_pk        VARCHAR2
    ) 
    return  number
is
  lsvreturn   number := 1;
begin
  SELECT DECODE(UPPER(DRCR_TYPE),'C',-1,1)
      INTO lsvreturn
      FROM tac_abacctcode
     WHERE del_if = 0 
--       AND tco_company_pk = p_comp
       AND pk = p_acc_pk;
  return(lsvreturn);
end ac_GET_DRCRNUM;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_DRCRTYPE;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_DRCRTYPE
    (
        p_comp          VARCHAR2,
        p_acc_pk        VARCHAR2
    ) 
    return  Varchar2
is
  lsvreturn   VARCHAR2 (1) := NULL;
begin
  SELECT drcr_type
      INTO lsvreturn
      FROM tac_abacctcode
     WHERE del_if = 0 
      -- AND tco_company_pk = p_comp
       AND pk = p_acc_pk;
  return(lsvreturn);
end ac_GET_DRCRTYPE;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_EMPIDBYPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_empidbypk (
   p_emppk   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_return   VARCHAR2 (250);
   v_count    NUMBER;
BEGIN
   SELECT COUNT (*)
     INTO v_count
     FROM thr_employee t
    WHERE pk = p_emppk AND del_if = 0;

   IF v_count = 0
   THEN
      l_return := '';
   ELSE
      SELECT t.EMP_ID
        INTO l_return
        FROM tac_employee_adv t
       WHERE THR_EMPLOYEE_PK = p_emppk AND  del_if = 0;
   END IF;

   RETURN l_return;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END ac_get_empidbypk;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_EMPID_BYTRDPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_empid_bytrdpk (p_tac_hgtrd_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
/**=================================================================================
* Function     SF_GET_CONTROLITEM
* Description
* Return
* Writer        Kiet
* Create Date   2008-06-13
=================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;

BEGIN
   l_rtn_value :='';
      SELECT  a.item
      into l_rtn_value
          FROM tac_hgtrditem a, tac_abacctitem b, tac_abitem c
         WHERE a.tac_abacctitem_pk = b.pk
           AND b.tac_abitem_pk = c.pk
           AND a.tac_hgtrd_pk = p_tac_hgtrd_pk
             and b.TAC_ABITEM_ALIAS ='EMPLOYEE NAME'
           AND a.del_if = 0
           AND b.del_if = 0
           AND c.del_if = 0;
       
   RETURN  l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_EMPNAMEBYPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_empnamebypk (
   p_emppk   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_return   VARCHAR2 (250);
   v_count    NUMBER;
BEGIN
   SELECT COUNT (*)
     INTO v_count
     FROM thr_employee t
    WHERE pk = p_emppk AND del_if = 0;

   IF v_count = 0
   THEN
      l_return := '';
   ELSE
      SELECT t.FULL_NAME
        INTO l_return
        FROM tac_employee_adv t
       WHERE THR_EMPLOYEE_PK = p_emppk AND  del_if = 0;
   END IF;

   RETURN l_return;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END ac_get_empnamebypk;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_EMPNM_BYTRDPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_empnm_bytrdpk (p_tac_hgtrd_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
/**=================================================================================
* Function     SF_GET_CONTROLITEM
* Description
* Return
* Writer        Kiet
* Create Date   2008-06-13
=================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;

BEGIN
   l_rtn_value :='';
      SELECT  a.ITEM_NM
      into l_rtn_value
          FROM tac_hgtrditem a, tac_abacctitem b, tac_abitem c
         WHERE a.tac_abacctitem_pk = b.pk
           AND b.tac_abitem_pk = c.pk
           AND a.tac_hgtrd_pk = p_tac_hgtrd_pk
             and b.TAC_ABITEM_ALIAS ='EMPLOYEE NAME'
           AND a.del_if = 0
           AND b.del_if = 0
           AND c.del_if = 0;
       
   RETURN  l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_EXPE_ACC_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_expe_acc_PK
(
            p_ac_cd varchar2,
            p_company_pk varchar2
          
)
RETURN number 
IS
  l_rtn_value       number;
  p_gr_cd_pk number;
BEGIN

  l_rtn_value := '';
  SELECT a.PK 
into  p_gr_cd_pk
        FROM TAC_ABTRACGRP A 
       WHERE a.DEL_IF             = 0 
         --AND A.TCO_COMPANY_PK     = p_company_pk
         AND a.APP_GRP            = 'A'
         AND a.AC_GRP  = 'AE002'
       ORDER BY AC_GRP;

  SELECT D.TAC_ABACCTCODE_PK
  into l_rtn_value
        FROM TAC_ABTRACGRPD D, TAC_ABTRACGRP H
       WHERE D.DEL_IF           = 0 
         AND H.DEL_IF           = 0
         AND D.TAC_ABTRACGRP_PK = H.PK
         AND TAC_ABTRACGRP_PK   = p_gr_cd_pk
        and upper(AC_CODE) = upper(trim(p_ac_cd))
       ORDER BY AC_CODE;
       RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_FORMAT;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_FORMAT
(
    v_grp_code                IN      VARCHAR2  --ACBG0040

)
RETURN  VARCHAR2
  IS
/*=================================================================================
* Function      SF_GET_FORMAT
* Description   get format to string number
* Return        CODE, TEXT
* Create Date   2004/06/10
* Writer        Tuyen
=================================================================================*/
w_string            VARCHAR2(20);

BEGIN

      SELECT A.CODE_NM
        INTO w_string
        FROM TCO_ABCODE A, TCO_ABCODEGRP B
       WHERE A.DEL_IF = 0
         AND B.DEL_IF = 0
         AND A.TCO_ABCODEGRP_PK = B.PK
         AND B.ID = v_grp_code
         AND A.USE_IF = 1
         AND DEF_YN = 'Y';


RETURN    w_string;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_GFKA00340_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_gfka00340_1(
   p_tac_kafinanceform_pk      in   varchar
 , p_plcd         varchar
 , p_accpk  varchar
 , p_kind               varchar)
   return number
is
/******************************************************************************
   NAME:       SF_GFKA00210_2
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28-Oct-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar2(32767) := '';
   l_value varchar2(2000) := '';
   l_rtn_value number;
   l_status varchar(300);
   
begin
        for c1 in (
                    select DISTINCT a.end_bl,a.tac_abacctcode_pk, b.operator_
                      from tac_tmpplbal a, tac_kafinanceformd1 b
                     where b.del_if = 0 and a.ac_cd = b.ac_cd
                          
                          and b.tac_abacctcode_pk is not null
                          and a.pl_cd=  p_plcd
                           and b.pk in
                                  (    select pk
                                         from tac_kafinanceformd1 a
                                        where a.del_if = 0
                                      start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk
                                      and del_if = 0
                                      connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk
                                      and del_if = 0
                                   )
              )
   loop          

           begin
                select max(end_bl)
                 into l_value
                 from tac_tmpplbal
            where tac_abacctcode_pk = c1.tac_abacctcode_pk and pl_cd=  p_plcd ;
            exception
            when no_data_found
            then
              l_value := 0;
            end;
         if (l_value is null or l_value = '')
                    then
                        l_value := 0;
                    else
                        l_value := nvl(c1.operator_, '+') || '(' || l_value || ')';
                    end if;

                    l_formular := l_formular || l_value;
           end loop;

           execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
                        into l_rtn_value;

           return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_GFKA00340_2;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_gfka00340_2(
   p_tac_kafinanceform_pk      in   varchar
 , p_plcd         varchar
 , p_accpk  varchar
 , p_kind               varchar
 , p_month_fr varchar
  , p_month_to varchar
 )
   return number
is
/******************************************************************************
   name:       sf_gfka00210_2
   purpose:

   revisions:
   ver        date        author           description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28-oct-09   ttal       1. created this function.
******************************************************************************/
   l_formular varchar2(32767) := '';
   l_value varchar2(2000) := '';
   l_rtn_value number;
   l_status varchar(300);
begin
         for c1 in (
                    select DISTINCT b.*
                      from tac_kafinanceformd1 b
                     where b.del_if = 0 
                          
                        
                           and b.pk in
                                  (    select pk
                                         from tac_kafinanceformd1 a
                                        where a.del_if = 0
                                      start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk
                                      and del_if = 0
                                      connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk
                                      and del_if = 0
                                   )
              )
   loop          
           begin
                select  sum(nvl(amount_per,0))
                 into l_value
                 from tac_allexpd1 a,
                 --tac_abplcenter  b, 
                 tac_abpl c
            where a.del_if =0
                    -- and b.del_if =0
                     and c.del_if =0
                     and a.tac_abpl_pk   = c.pk
                    --and b.tac_abpl_pk = c.pk
                     and a.tac_abacctcode_pk = c1.tac_abacctcode_pk and c.pl_cd=  p_plcd 
                     and a.std_ym between p_month_fr and p_month_to ;
            exception
            when no_data_found
            then
              l_value := 0;
            end;

    if (l_value is null or l_value = '')
                    then
                        l_value := 0;
                    else
                        l_value := nvl(c1.operator_, '+') || '(' || l_value || ')';
                    end if;

                    l_formular := nvl(l_formular,'')  || l_value;
           end loop;
           if length(l_formular) > 0 then
                 execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
                 into l_rtn_value;
            end if;            

           return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_GFKA00340_3;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_gfka00340_3(
   p_month    in   varchar
 , p_plcd         varchar
 , p_accpk  varchar
 ,p_tco_company_pk varchar
)
   return number
is
/******************************************************************************
   NAME:       SF_GFKA00210_2
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28-Oct-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar2(32767) := '';
   l_value varchar2(2000) := '';
   l_rtn_value number;
   l_status varchar(300);
   l_date_fr varchar(10) := p_month||'01';
  l_date_to varchar(8) := '';
begin
         select  to_char(last_day(to_date(p_month||'01','yyyymmdd')),'yyyymmdd')
       into l_date_to
       from dual;
           ac_sel_gfka00340_2(p_tco_company_pk,l_date_fr,l_date_to,null,null,null,2,null,l_rtn_value);
            COMMIT;            

           begin
                select end_bl
                 into l_value
                 from tac_tmpplbal
            where tac_abacctcode_pk = p_accpk and pl_cd=  p_plcd ;
            exception
            when no_data_found
            then
              l_value := 0;
            end;

   
   return l_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_LASTCLOSEMM;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_lastclosemm (v_yymmdd varchar2, v_company varchar2)
   return varchar2
is
   v_ym   varchar2 (9);
   v_mm   varchar2 (9);
begin
   select to_char (add_months (to_date (substr (v_yymmdd, 1, 6) || '01', 'YYYYMMDD'), -1), 'YYYYMMDD')
     into v_ym
     from dual;

   select max (std_ym)
     into v_mm
     from tac_icmmclose
    where     decode (v_company, 0, 2, tco_company_pk) = decode (v_company, 0, 2, v_company)
          and close_yn = 'Y'
          and del_if = 0;

   if v_mm is null
   then
      return v_ym;
   else
      v_mm := v_mm || '01';
   end if;

   if (v_mm <= v_ym)
   then
      v_ym := v_mm;
   end if;

   return v_ym;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_LASTCLOSEMM2;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_LASTCLOSEMM2(p_yyyymmdd varchar, p_TCO_COMPANY_PK varchar)
   return varchar
is
   l_STD_YMd   varchar(8);
begin
   select max(STD_YM)
     into l_STD_YMd
     from TAC_ICMMCLOSE
    where decode( p_TCO_COMPANY_PK,0,2,TCO_COMPANY_PK )=  decode(p_TCO_COMPANY_PK,0,2,p_TCO_COMPANY_PK)
      and CLOSE_YN = 'Y'
      and DEL_IF = 0;

   if l_STD_YMd is null
   then
      l_STD_YMd := '19000131';
   else
      l_STD_YMd := l_STD_YMd || '01';
   end if;

   select to_char(last_day(to_date(l_STD_YMd, 'yyyymmdd') ), 'yyyymmdd')
     into l_STD_YMd
     from dual;

   return l_STD_YMd;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_MONTHLY_UP;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_monthly_up (p_std_ym varchar2, p_tco_item_pk varchar2, p_tco_company_pk number,
    p_tin_warehouse_pk number)
   return number
is
   l_rtn_amt   number;
   l_std_ym    varchar2 (6);
/******************************************************************************
   NAME:       sf_get_monthly_UP
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/28/2008  Linh Truong       1. Created this function.

  ******************************************************************************/
begin
   l_rtn_amt := 0;
   if p_tin_warehouse_pk is not null then
            begin
              select takeout_up
                into l_rtn_amt
                from tac_crcost_up
               where del_if = 0 and tco_item_pk = p_tco_item_pk 
               and std_ym = p_std_ym 
               and tco_company_pk = p_tco_company_pk
               and tin_warehouse_pk = p_tin_warehouse_pk ;
            exception
                when no_data_found then
               select to_char (add_months (to_date (p_std_ym || '01', 'yyyymmdd'), -1), 'yyyymm')
                 into l_std_ym
                 from dual;

               begin
                  select takeout_up
                    into l_rtn_amt
                    from tac_crcost_up
                   where del_if = 0 and tco_item_pk = p_tco_item_pk and std_ym = l_std_ym 
                   and tco_company_pk = p_tco_company_pk
                   and tin_warehouse_pk = p_tin_warehouse_pk ;
               exception
                  when no_data_found
                  then
                     l_rtn_amt := 0;
               end;
                               
            end ;
    else
            begin
              select takeout_up
                into l_rtn_amt
                from tac_crcost_up
               where del_if = 0 and tco_item_pk = p_tco_item_pk 
               and std_ym = p_std_ym 
               and tco_company_pk = p_tco_company_pk ;
--               and tin_warehouse_pk = p_tin_warehouse_pk ;
            exception
                when no_data_found then
               select to_char (add_months (to_date (p_std_ym || '01', 'yyyymmdd'), -1), 'yyyymm')
                 into l_std_ym
                 from dual;

               begin
                  select takeout_up
                    into l_rtn_amt
                    from tac_crcost_up
                   where del_if = 0 and tco_item_pk = p_tco_item_pk and std_ym = l_std_ym 
                   and tco_company_pk = p_tco_company_pk ;
--                   and tin_warehouse_pk = p_tin_warehouse_pk ;
               exception
                  when no_data_found
                  then
                     l_rtn_amt := 0;
               end;
                               
            end ;
    
    
    end if ;

   return l_rtn_amt;
exception
   when others
   then
      -- Consider logging the error and then re-raise
      raise;
end ac_get_monthly_up;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_PLCENTER_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_plcenter_pk
                                (
                                    p_plcenter_cd           varchar2,
                                    p_compk        varchar2
                                )
return number 
is
  l_rtn_value       number;
begin

  l_rtn_value := '';
  
  select b.pk
  into l_rtn_value
  from tac_abpl d,
       tac_abplcenter e,
       (    select pk, plc_cd, plc_nm
              from tac_abcenter
             where del_if = 0 and tco_company_pk = p_compk 
             and connect_by_isleaf = 1
        connect by prior pk = p_pk
        start with p_pk is null) b
 where     d.del_if = 0
       and e.del_if = 0
       and e.tac_abpl_pk = d.pk
       and e.tac_abcenter_pk = b.pk
       and d.pl_cd = p_plcenter_cd
       and d.use_yn = 'Y';
  return l_rtn_value;

end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_PLID_FROM_PLCENTER;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_PLID_FROM_PLCENTER (v_plcenter_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
/**=================================================================================
* Function     SF_GET_CONTROLITEM
* Description
* Return
* Writer        Kiet
* Create Date   2008-06-13
=================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;

BEGIN
   l_rtn_value :='';
    SELECT PL_cd  INTO   l_rtn_value
      FROM TAC_ABPL a, tac_abplcenter b
     WHERE a.PK     = b.tac_abpl_pk
       AND a.DEL_IF = 0
       and b.pk = v_plcenter_pk;
       
   RETURN  l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_PLUNIT_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_PLUNIT_PK
                                (
                                    p_pl_cd           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN number 
IS
  l_rtn_value       number;
BEGIN

  l_rtn_value := '';
  
  SELECT E.PK
  INTO l_rtn_value
  FROM TAC_ABPL D,
       TAC_ABPLCENTER E,
       (    SELECT PK, plc_cd, plc_nm
              FROM TAC_ABCENTER
             WHERE DEL_IF = 0 AND TCO_COMPANY_PK = p_compk 
             AND CONNECT_BY_ISLEAF = 1
        CONNECT BY PRIOR PK = P_PK
        START WITH P_PK IS NULL) B
 WHERE     D.DEL_IF = 0
       AND E.DEL_IF = 0
       AND E.TAC_ABPL_PK = D.PK
       AND E.TAC_ABCENTER_PK = B.PK
       AND D.PL_CD = p_pl_cd
       AND D.USE_YN = 'Y';
  RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_PL_ACC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_pl_acc_code(
    p_actual_date   varchar2,
    p_tac_abplcenter_pk         varchar2    
) 
RETURN NUMBER IS

/******************************************************************************
   NAME:       ac_get_wh_acc_code
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        20/12/2013   Van Le       1. Created this function.

   NOTES:

******************************************************************************/
    v_tac_abacctcode_pk number;
BEGIN
    begin
        select a.tac_abacctcode_pk
        into v_tac_abacctcode_pk
        from tac_close a
        where p_actual_date between a.from_dt and a.to_dt
        and a.tac_abpl_pk = p_tac_abplcenter_pk
        and a.close_yn = 'N'
        and a.del_if = 0 ;        
        
        
    exception 
    when no_data_found then
        v_tac_abacctcode_pk := null ;
    end ;
    
    return v_tac_abacctcode_pk ;
    
END ac_get_pl_acc_code;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_PL_FROM_PLCENTER;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_PL_FROM_PLCENTER (v_plcenter_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
/**=================================================================================
* Function     SF_GET_CONTROLITEM
* Description
* Return
* Writer        Kiet
* Create Date   2008-06-13
=================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;

BEGIN
   l_rtn_value :='';
    SELECT PL_NM INTO   l_rtn_value
      FROM TAC_ABPL a, tac_abplcenter b
     WHERE a.PK     = b.tac_abpl_pk
       AND a.DEL_IF = 0
       and b.pk = v_plcenter_pk;
       
   RETURN  l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_PL_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_pl_openbal (
   p_compk      in   varchar2,
   p_acc_pk     in   varchar2,
   p_abpl    in   varchar2,
   p_plunit      in      varchar2,
   p_ymd        in   varchar2,
   p_ccy        in   varchar2,
   p_status     in   varchar2,         
   p_type       in   varchar2 --TRANS OR BOOKS                             
)
   return number
is
  p_rtn_value       number :=0;
  l_row_count       number;
  l_total_amt       number;
  l_mm_bal          number;
  l_dd_bal          number;
  l_cd_dr_num       number;
--------
begin
--------
    l_row_count := 0;
    l_total_amt := 0;
    l_mm_bal := 0;
    l_dd_bal := 0;
    l_cd_dr_num:=1;
    
    select to_number(decode(ac_get_drcrtype(p_compk,p_acc_pk),'C','-1','1'))  into l_cd_dr_num
        from dual;
    
       select nvl((sum(decode(p_type,'TRANS',nvl(m.this_drfamt,0),nvl(m.this_dramt,0))) -
                sum(decode(p_type,'TRANS',nvl(m.this_crfamt,0),nvl(m.this_cramt,0))) )*l_cd_dr_num,0)
                into l_mm_bal
            from tac_hgplmmbal m, tac_abplcenter n
            where m.del_if =0
        and n.del_if = 0
        and m.tac_abpl_pk = n.pk
        and m.tco_company_pk like decode (p_compk, 0, '%', p_compk)
        and m.tr_status = p_status
        and ((p_ccy is null) or (m.ccy = p_ccy))
        and m.tac_abacctcode_pk like decode(p_acc_pk,'','%',p_acc_pk)
        and m.std_ym = substr(ac_get_lastclosemm (p_ymd,p_compk),1,6)
        and m.tac_abpl_pk like decode(p_abpl,'','%',p_abpl)
        and n.tac_abpl_pk like decode(p_plunit,'','%',p_plunit);
        
        select nvl((sum(decode(p_type,'TRANS',nvl(d.ymd_drtrans,0),nvl(d.ymd_drbooks,0))) -
                sum(decode(p_type,'TRANS',nvl(d.ymd_crtrans,0),nvl(d.ymd_crbooks,0))) )*l_cd_dr_num,0)
            into l_dd_bal
            from tac_hgplddbal d, tac_abplcenter n
            where d.del_if =0
            and n.del_if  = 0
            and d.tac_abpl_pk = n.pk
            and d.tco_company_pk like decode (p_compk, 0, '%', p_compk)
            and d.tr_status = p_status
            and ((p_ccy is null) or (d.ccy = p_ccy))
            and d.tac_abacctcode_pk like decode(p_acc_pk,'','%',p_acc_pk)
            and d.tac_abpl_pk like decode(p_abpl,'','%',p_abpl)
            and n.tac_abpl_pk like decode(p_plunit,'','%',p_plunit)
            and d.std_ymd >= to_char(add_months(to_date(ac_get_lastclosemm (p_ymd,p_compk),'YYYYMMDD'),+1),'YYYYMMDD')
            and d.std_ymd < p_ymd;
        
       l_total_amt := nvl(l_mm_bal,0) + nvl(l_dd_bal,0); 
        
    
    p_rtn_value := l_total_amt;

    
    return p_rtn_value;
exception
   when others
   then
      raise;
end;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_PRIORITY;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_PRIORITY(p_chr VARCHAR2)
RETURN NUMBER
IS
BEGIN
    IF (p_chr = '(') THEN
        RETURN -1;
    ELSIF (p_chr = ')') THEN
        RETURN 0;
    ELSIF (p_chr IN ('+', '-')) THEN    
        RETURN 1;
    ELSIF (p_chr IN ('*', '/')) THEN
        RETURN 2;
    END IF;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_SEQ_PRINT_CONTROLITEM;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_SEQ_PRINT_CONTROLITEM
  (
   v_trhpk        in       NUMBER
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_GET_SEQ_PRINT_CONTROLITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
       
    SELECT '[' || A.ITEM ||' ' || A.ITEM_nm ||  ']'AS DATA1
      FROM TAC_HGTRDITEM a, TAC_ABACCTITEM b, TAC_HGTRD c
     where a.TAC_ABACCTITEM_PK = b.PK
       AND a.TAC_HGTRD_PK = c.PK
       AND c.TAC_HGTRH_PK = v_trhpk
       AND UPPER(B.PRN_CHK) ='Y'
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0
       AND c.DEL_IF = 0;
    
BEGIN

FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_TAC_CRDA_AMT_AP;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_tac_crda_amt_ap(
                 p_tac_crda_pk varchar2
) 
RETURN NUMBER 
IS

/******************************************************************************
   NAME:       sf_get_tac_crda_amt_ap
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/2/2009          1. Created this function.

   NOTES:

******************************************************************************/
    l_amt number;
            l_ap_tramt number;  
            l_imp_amt number ;  
            l_exc_amt number ;  
            l_impvat_amt    number ;
            l_clr_imptax_yn varchar2(1);
            l_clr_exctax_yn varchar2(1);
            l_clr_vattax_yn varchar2(1);
BEGIN
             l_amt := 0;
             select a.code into l_clr_imptax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK022' and a.def_yn = 'Y';

             select a.code into l_clr_exctax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK023' and a.def_yn = 'Y';

             select a.code into l_clr_vattax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK024' and a.def_yn = 'Y';
             
             BEGIN
                         select sum(d.ap_tramt) ap_tramt, 
                                         sum(decode(l_clr_imptax_yn, 'Y', d.imp_amt, 0)) imp_amt,
                                        sum(decode(l_clr_exctax_yn, 'Y', d.exc_amt, 0)) exc_amt,
                                        sum(decode(l_clr_vattax_yn, 'Y', d.impvat_amt, 0)) impvat_amt
                                        into l_ap_tramt, l_imp_amt, l_exc_amt, 
                                        l_impvat_amt                                        
                         from tac_crdad d                             
                         where d.del_if = 0 and d.tac_crda_pk = p_tac_crda_pk ;    
                         l_amt := nvl(l_ap_tramt, 0) + nvl(l_imp_amt, 0) + nvl(l_exc_amt, 0) + nvl(l_impvat_amt, 0) ;                     
                   EXCEPTION
                     WHEN NO_DATA_FOUND THEN
                         l_amt := 0;                          
             END;
             return l_amt ;             
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ac_get_tac_crda_amt_ap;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_TAC_CRDA_FAMT_AP;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_tac_crda_famt_ap(
                 p_tac_crda_pk varchar2
) 
RETURN NUMBER 
IS

/******************************************************************************
   NAME:       sf_get_tac_crda_amt_ap
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/2/2009          1. Created this function.

   NOTES:

******************************************************************************/
    l_amt number;
            l_ap_trfamt number; 
            l_imp_famt number; 
            l_exc_famt number ; 
            l_impvat_famt number ; 
            l_clr_imptax_yn varchar2(1);
            l_clr_exctax_yn varchar2(1);
            l_clr_vattax_yn varchar2(1);
BEGIN
             l_amt := 0;
             select a.code into l_clr_imptax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK022' and a.def_yn = 'Y';

             select a.code into l_clr_exctax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK023' and a.def_yn = 'Y';

             select a.code into l_clr_vattax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK024' and a.def_yn = 'Y';
             
             BEGIN
                         select sum(d.ap_trfamt) ap_trfamt, sum(decode(l_clr_imptax_yn, 'Y', d.imp_famt, 0)) imp_famt,
                                        sum(decode(l_clr_exctax_yn, 'Y', d.exc_famt, 0)) exc_famt, 
                                        sum(decode(l_clr_vattax_yn, 'Y', d.impvat_famt, 0)) impvat_famt
                                        into l_ap_trfamt, l_imp_famt, l_exc_famt, 
                                        l_impvat_famt                                        
                         from tac_crdad d                             
                         where d.del_if = 0 and d.tac_crda_pk = p_tac_crda_pk ;    
                         l_amt := nvl(l_ap_trfamt, 0) + nvl(l_imp_famt, 0) + nvl(l_exc_famt, 0) + nvl(l_impvat_famt, 0) ;                     
                   EXCEPTION
                     WHEN NO_DATA_FOUND THEN
                         l_amt := 0;                          
             END;
             return l_amt ;             
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ac_get_tac_crda_famt_ap;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_WAREHOUSE_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_warehouse_pk (
   p_wh_id   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_wh_pk   tlg_in_warehouse.pk%TYPE   := '';
BEGIN
   SELECT a.wh_id
     INTO l_wh_pk
     FROM tlg_in_warehouse a
    WHERE a.wh_id = p_wh_id 
    and a.del_if = 0 ;

   RETURN l_wh_pk;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END ac_get_warehouse_pk;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GFKA000250_21;

CREATE OR REPLACE FUNCTION HPDQ.ac_gfka000250_21 (p_tac_kafinanceform_pk in varchar, p_column_type varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        18-Aug-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (8000) := '';
   l_value       varchar2 (8000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1 in (select distinct a.*, b.operator_
                from tac_fsqd15 a, tac_kafinanceformd1 b
               where     b.del_if = 0
                     and a.ac_cd = b.ac_cd
                     and b.tac_abacctcode_pk is not null
                     and b.pk in (    select pk
                                        from tac_kafinanceformd1 a
                                       where a.del_if = 0
                                  start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0
                                  connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk and del_if = 0))
   loop
      if p_column_type = 'THIS'
      then
         begin
            select sum (m_ps)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'LAST'
      then
         begin
            select sum (m_ps1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'ACC'
      then
         begin
            select sum (m_acc)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'ACC1'
      then
         begin
            select sum (m_acc1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'BAL'
      then
         begin
            select sum (m_bal)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'BAL1'
      then
         begin
            select sum (m_bal1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      end if;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GFKA00080_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_gfka00080_1 (
   p_kind             VARCHAR2,
   p_status           VARCHAR,
   p_tco_company_pk   VARCHAR,
   p_date_fr          VARCHAR,
   p_date_to          VARCHAR,
   p_header           VARCHAR
)
   RETURN NUMBER
IS
/******************************************************************************
   NAME:      sf_gfka00080_1
   PURPOSE:

   REVISIONS:
   Ver        Date          Author           Description
   ---------  ----------   ---------------  ------------------------------------
   1.0        27-May-2009   TTAL       1. Created this function.
******************************************************************************/
   l_len         NUMBER         := 0;
   l_cnt         NUMBER         := 0;
   l_formular    VARCHAR (1000) := '';
   l_ac_cd       VARCHAR (1000) := '';
   l_value       VARCHAR (20)   := '';
   l_buf         VARCHAR (1)    := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
   SELECT NVL (b.total_bookamt, 0)*b.CF_OPERATOR total_bookamt
     INTO l_rtn_value
     FROM (SELECT a.code, a.prn_acnm, a.prn_lacnm, a.prn_kacnm, a.prn_seq,
                  a.font_stype, a.header, a.prn_color, a.form_type
             FROM tac_kafinanceform a
            WHERE a.del_if = 0
              AND a.form_type = 24
             -- AND a.tco_company_pk = p_tco_company_pk
              ) a,
          (SELECT   r.cf_code, SUM (r.tr_bookamt) total_bookamt,max(CF_OPERATOR) CF_OPERATOR
               FROM tac_hgtrh h, tac_hgtrd_ref r
              WHERE h.del_if = 0
                AND r.del_if = 0
                AND h.pk = r.tac_hgtrh_pk
                AND r.drcr_type = 'D'
                 AND decode(p_tco_company_pk,0,2, tco_company_pk) = decode( p_tco_company_pk,0,2, p_tco_company_pk)
                AND TO_CHAR (h.tr_date, 'YYYYMMDD') BETWEEN p_date_fr
                                                        AND p_date_to
                AND h.tr_status IN
                       (DECODE (p_status, 2, 2, p_status),
                        DECODE (p_status, 2, 0, p_status),
                        DECODE (p_status, 2, 4, p_status)
                       )
           GROUP BY cf_code) b,
          tac_kafinanceform c
    WHERE a.code = b.cf_code(+)
      AND a.code IS NOT NULL
      AND a.header > '20'
      AND c.form_type = p_kind
      AND a.header = c.header
      AND a.header = p_header;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END ac_gfka00080_1;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GFOS00250_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_gfos00250_1(
   p_tac_kafinanceform_pk      in   varchar
 , p_column_type        varchar
 , p_kind               varchar)
   return number
is
/******************************************************************************
   NAME:       SF_GFKA00210_2
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28-Oct-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar2(32767) := '';
   l_value varchar2(2000) := '';
   l_rtn_value number;
   l_status varchar(300);
begin
   for c1  in (   select a.*, b.operator_
                      from tac_tmptrialbal a, tac_kafinanceformd1 b
                     where b.del_if = 0 and a.ac_cd = b.ac_cd
                          and b.tac_abacctcode_pk is not null
                           and b.pk in
                                  (    select pk
                                         from tac_kafinanceformd1 a
                                        where a.del_if = 0
                                      start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk
                                      and del_if = 0
                                      connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk
                                       and del_if = 0
                                   )
                 )
   loop
      case
         when p_column_type = 'Closing'
         then

            begin
                select decode (drcr_type, 1, nvl (dr_op, 0), nvl (cr_op, 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
            when no_data_found
            then
              l_value := 0;
            end;

         when p_column_type = 'Openning'
         then
         begin
               select  decode(drcr_type, 1, nvl(dr_bl , 0),  nvl(cr_bl , 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;

      end case;

            if (l_value is null or l_value = '')
            then
l_value := 0;
            else
l_value := nvl(c1.operator_, '+') || '(' || l_value || ')';
            end if;

l_formular := l_formular || l_value;
   end loop;

execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GFOS_CUST_YN;

CREATE OR REPLACE FUNCTION HPDQ.ac_gfos_cust_yn(
                 p_tac_abacctcoder_pk varchar
) 
RETURN 
                 VARCHAR2 
IS
        l_partner_id varchar2(200);
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select nvl(cust_yn,'N') into  l_partner_id from tac_abacctcode where del_if = 0 and pk = p_tac_abacctcoder_pk ;
             return l_partner_id ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
END ac_gfos_cust_yn;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_MEASURE_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.ac_measure_convert (
   p_tco_item_pk   IN   NUMBER,
   p_uom_code      IN   VARCHAR2
)
   RETURN NUMBER
IS
   l_tran_rate   NUMBER;
BEGIN
   SELECT MAX (b.tran_rate)
     INTO l_tran_rate
     FROM tco_uom a,
          tco_measure b,
          tco_itemmeasure c,
          tco_item d
    WHERE a.del_if = 0
      AND a.uom_code = p_uom_code
      AND b.del_if = 0
      AND a.pk = b.tco_uom_pk
      AND c.del_if = 0
      AND b.pk = c.tco_measure_pk
      AND d.del_if = 0
      AND c.tco_item_pk = d.pk
      AND b.tranuom_code = d.uom
      AND d.pk = p_tco_item_pk;

   IF (l_tran_rate = 0 OR l_tran_rate IS NULL)
   THEN
      SELECT MAX (b.tran_rate)
        INTO l_tran_rate
        FROM tco_uom a,
             tco_measure b,
             tco_itemmeasure c,
             tco_item d
       WHERE a.del_if = 0
         AND a.uom_code = p_uom_code
         AND b.del_if = 0
         AND a.pk = b.tco_uom_pk
         AND c.del_if = 0
         AND b.pk = c.tco_measure_pk
         AND d.del_if = 0
         AND c.tco_stitem_pk = d.tco_stitem_pk
         AND b.tranuom_code = d.uom
         AND d.pk = p_tco_item_pk;

      IF (l_tran_rate = 0 OR l_tran_rate IS NULL)
      THEN
         SELECT MAX (b.tran_rate)
           INTO l_tran_rate
           FROM tco_uom a, tco_measure b, tco_item d
          WHERE a.del_if = 0
            AND a.uom_code = p_uom_code
            AND b.del_if = 0
            AND a.pk = b.tco_uom_pk
            AND d.del_if = 0
            AND b.tranuom_code = d.uom
            AND d.pk = p_tco_item_pk
            AND b.default_yn = 'Y';

         IF (l_tran_rate = 0 OR l_tran_rate IS NULL)
         THEN
            l_tran_rate := 1;
         END IF;
      END IF;
   END IF;

   RETURN l_tran_rate;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_MONTH_EX_RATE;

CREATE OR REPLACE FUNCTION HPDQ.ac_month_ex_rate (p_comp_pk varchar, p_month varchar, p_ccy varchar)
   return number
is
   l_rtn_value   number;
--------

begin
   select max (ttm_rate)
     into l_rtn_value
     from tac_abexrates
    where     del_if = 0
          and ccy = p_ccy
          and tco_company_pk = p_comp_pk
          and std_ymd in (select max (std_ymd)
                            from tac_abexrates
                           where     del_if = 0
                                 and tco_company_pk = p_comp_pk
                                 and std_ymd like p_month || '%'
                                 and ccy = p_ccy);

   return l_rtn_value;
end ac_month_ex_rate;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_PRO_60080090_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_pro_60080090_1(
   p_tac_kafinanceform_pk      in   varchar
 , p_column_type        varchar
 , p_kind               varchar)
   return number
is
/******************************************************************************
   NAME:       SF_GFKA00210_2
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28-Oct-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar2(32767) := '';
   l_value varchar2(2000) := '';
   l_rtn_value number;
   l_status varchar(300);
begin
   for c1  in (   select a.*, b.operator_
                      from tac_tmptrialbal a, tac_kafinanceformd1 b
                     where b.del_if = 0 and a.ac_cd = b.ac_cd
                          and b.tac_abacctcode_pk is not null
                           and b.pk in
                                  (    select pk
                                         from tac_kafinanceformd1 a
                                        where a.del_if = 0
                                      start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk
                                      and del_if = 0
                                      connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk
                                       and del_if = 0
                                   )
                 )
   loop
      case
         when p_column_type = 'Closing'
         then

            begin
                select decode (drcr_type, 1, nvl (dr_op, 0), nvl (cr_op, 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
            when no_data_found
            then
              l_value := 0;
            end;

         when p_column_type = 'Openning'
         then
         begin
               select  decode(drcr_type, 1, nvl(dr_bl , 0),  nvl(cr_bl , 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;

      end case;

            if (l_value is null or l_value = '')
            then
l_value := 0;
            else
l_value := nvl(c1.operator_, '+') || '(' || l_value || ')';
            end if;

l_formular := l_formular || l_value;
   end loop;

execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_PRO_COMMONCODE_ORD;

CREATE OR REPLACE FUNCTION HPDQ.ac_pro_commoncode_ord (
   v_grp    in   varchar2,                                                                            -- Group Code
   v_case   in   varchar2,                                                                              -- sql case
   v_par    in   varchar2                                                                              -- parameter
)
   return varchar2
is
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
   type cur_typ is ref cursor;

   d_cur       cur_typ;
   lscode      varchar2 (10)   := null;
   lscdname    varchar2 (100)  := null;
   lsvsql      varchar2 (4001) := null;
   lsvreturn   varchar2 (5000) := null;
   strsql      varchar2 (4000) := null;
   cnt         number;
   i           number (2)      := 1;
   i2          number (2)      := 1;
   i3          number (2)      := 0;
   j           number          := 1;

   type vararray is table of varchar2 (10)
      index by binary_integer;

   a           vararray;
--------
begin
--------
    
   

lsvsql :=
            'SELECT   d.CODE_NM FROM tac_commcode_master m, tac_commcode_detail d WHERE m.del_if = 0 AND d.del_if = 0 AND m.pk = tac_commcode_master_pk
 AND m.ID ='''
         || v_grp
         || ''' AND d.use_yn = ''Y'' ORDER BY d.NUM_1';
         
   strsql := lsvsql;

   open d_cur for strsql;

   loop
      fetch d_cur
       into lscode;

      exit when d_cur%notfound;
      -- process row here
      lsvreturn := lsvreturn || '' || lscode || ',' --|| lscdname || '|'
      ;
   end loop;

   close d_cur;

   return lsvreturn;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_PRO_GET_PAYMENT_OVERDUE;

CREATE OR REPLACE FUNCTION HPDQ.ac_pro_get_payment_overdue(
    p_due_date      varchar2,
    p_to_date              varchar2
) 
RETURN NUMBER IS

/******************************************************************************
   NAME:       ac_pro_get_payment_overdue
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/28/2013   Administrator       1. Created this function.

   NOTES:


******************************************************************************/
-- 0: not over due date
-- 1: 0 < over due date <= 30: 
-- 2: 31 <= over due date <= 60
-- 3: 61 <= over due date <= 90
-- 4:  over due date > 90

tmpVar      number ;
l_over_due   number;
BEGIN
    select trunc(to_date(p_to_date, 'YYYYMMDD') - to_date( p_due_date , 'YYYYMMDD'))
        into l_over_due 
    from dual ;
    tmpVar := 0 ;
    if l_over_due > 0 and l_over_due <= 30 then
        tmpVar := 1;
    elsif l_over_due >= 31 and l_over_due <= 60 then
        tmpVar := 2;    
    elsif l_over_due >= 61 and l_over_due <= 90 then
        tmpVar := 3;    
    elsif l_over_due > 90 then
        tmpVar := 4;
    end if ;
    
   RETURN tmpVar;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ac_pro_get_payment_overdue;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SEL_60080240_BAL_SHEET_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_sel_60080240_bal_sheet_1(
   p_tac_kafinanceform_pk      in   varchar
 , p_column_type        varchar
 , p_kind               varchar)
   return number
is
/******************************************************************************
   NAME:       SF_GFKA00210_2
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28-Oct-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar2(32767) := '';
   l_value varchar2(2000) := '';
   l_rtn_value number;
   l_status varchar(300);
begin
   for c1  in (   select a.*, b.operator_
                      from tac_tmptrialbal a, tac_kafinanceformd1 b
                     where b.del_if = 0 and a.ac_cd = b.ac_cd
                          and b.tac_abacctcode_pk is not null
                           and b.pk in
                                  (    select pk
                                         from tac_kafinanceformd1 a
                                        where a.del_if = 0
                                      start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk
                                      and del_if = 0
                                      connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk
                                       and del_if = 0
                                   )
                 )
   loop
      case
         when p_column_type = 'Closing'
         then

            begin
                select decode (drcr_type, 1, nvl (dr_op, 0), nvl (cr_op, 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
            when no_data_found
            then
              l_value := 0;
            end;

         when p_column_type = 'Openning'
         then
         begin
               select  decode(drcr_type, 1, nvl(dr_bl , 0),  nvl(cr_bl , 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;

      end case;

            if (l_value is null or l_value = '')
            then
l_value := 0;
            else
l_value := nvl(c1.operator_, '+') || '(' || l_value || ')';
            end if;

l_formular := l_formular || l_value;
   end loop;

execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SEQUENCE;

CREATE OR REPLACE FUNCTION HPDQ.ac_sequence (v_user in varchar2)
   return varchar2
is
   pragma autonomous_transaction;
/******************************************************************************
   NAME:       f_sequence
   PURPOSE: reset sequence number to maximun pk of table 
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/09/2006   Nguyen Van Thai       1. Created this procedure. 
******************************************************************************/
   l_sql   varchar2 (4000) := null;
   l_cnt   number          := 0;
--------
begin
--------
   for c1 in (select table_name
                from all_all_tables
               where owner = upper (v_user) and table_name like 'TAC%')
   loop
      select count (*)
        into l_cnt
        from all_objects
       where owner = upper (v_user)
         and object_type = 'SEQUENCE'
         and object_name = upper (c1.table_name) || '_SEQ'; 
      if l_cnt > 0
      then
         begin
            l_sql := 'DROP SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ'; 
            execute immediate l_sql; 
            l_sql := 'SELECT nvl(MAX(PK),0)+1 from ' || c1.table_name; 
            execute immediate l_sql
                         into l_cnt; 
            l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ start with ' || l_cnt; 
            execute immediate l_sql;
         exception
            when others
            then
               null;
         end;
      else
         l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ'; 
         execute immediate l_sql;
      end if;
   end loop; 
   return 'reset sequence is successful';
exception
   when others
   then
      return l_sql || sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60020030;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_60020030 (
   p_contract_no    IN VARCHAR2,
   p_contract_ccy   IN VARCHAR2,
   p_company_pk IN varchar)
   RETURN VARCHAR2
IS
   l_return   VARCHAR2 (100);
/******************************************************************************
   NAME:       SF_gfqc00030
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
     SELECT TO_CHAR (
               DECODE (p_contract_ccy,
                       'USD', SUM (NVL (adv_amt, 0)),
                       SUM (NVL (adv_famt, 0))),
               DECODE (tr_ccy,
                       'USD', '999,999,999,999,999,999',
                       '999,999,999,990.99'))
               adv_famt
       INTO l_return
       --             TO_CHAR(DECODE(:P_CONTRACT_CCY,'USD',SUM(DEDUCT_AMT),SUM(DEDUCT_FAMT)),DECODE(TR_CCY,'USD','999,999,999,999,999,999','999,999,999,990.99')) DEDUCT_AMT,
       --             DECODE(:P_CONTRACT_CCY,'USD',NVL(SUM(ADV_AMT),0),NVL(SUM(ADV_FAMT),0)) ADV,
       --             DECODE(:P_CONTRACT_CCY,'USD',NVL(SUM(DEDUCT_AMT),0),NVL(SUM(DEDUCT_FAMT),0)) DEDUCT
       FROM (-------Get Advance transaction amount ----------------------------
             SELECT --  H.PK APSEQ,
                    --    TO_CHAR (H.TR_DATE, 'YYYYMMDD') SIGN_DATE,
                    --    H.REMARK TR_REMARK,
                    r.tr_amt adv_famt, r.tr_bookamt adv_amt, --     0 DEDUCT_FAMT,
                                                             --     0 DEDUCT_AMT,
                                                             d.ccy tr_ccy
               FROM tac_hgtrh h,
                    tac_hgtrd d,
                    tac_hgtrd_ref r,
                    tac_hgtrditem i
              WHERE     --h.tco_company_pk = 1
                        h.pk = d.tac_hgtrh_pk
                    --             AND TO_CHAR (h.tr_date, 'YYYYMMDD') > p_from
                    --             AND TO_CHAR (h.tr_date, 'YYYYMMDD') <=
                    --                                                 TO_CHAR (SYSDATE, 'YYYYMMDD')
                    AND (i.item LIKE TRIM (UPPER (p_contract_no)))
                    AND h.tr_status IN (0, 2)
                    AND d.pk = r.tac_hgtrd_pk
                    AND d.pk = i.tac_hgtrd_pk
                    AND r.drcr_type = 'D'
                    AND (r.tac_abacctcode_pk_dr IN
                            (SELECT tac_abacctcode_pk
                               FROM tac_abtracgrpd
                              WHERE del_if = 0
                                    AND tac_abtracgrp_pk =
                                           (SELECT pk
                                              FROM tac_abtracgrp
                                             WHERE del_if = 0
                                                   AND ac_grp = 'ATVIFRS_DR' and tco_company_pk = p_company_pk)))
                    AND (r.tac_abacctcode_pk_cr IN
                            (SELECT tac_abacctcode_pk
                               FROM tac_abtracgrpd
                              WHERE del_if = 0
                                    AND tac_abtracgrp_pk =
                                           (SELECT pk
                                              FROM tac_abtracgrp
                                             WHERE del_if = 0
                                                   AND ac_grp = 'ATVIFRS_CR' and tco_company_pk = p_company_pk)))
                    AND h.del_if = 0
                    AND d.del_if = 0
                    AND r.del_if = 0
                    AND i.del_if = 0)
   GROUP BY tr_ccy;

   RETURN l_return;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60020030_PAY;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_60020030_pay 
(
    p_contract_no IN VARCHAR2
)
RETURN NUMBER 
IS
l_pay varchar2(50);

/******************************************************************************
   NAME:       sf_gfqc00030_pay
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
   SELECT 
--APSEQ,
--          SIGN_DATE,
--          TR_REMARK,
--          DECODE('USD','USD',NVL(SUM(NVL(ADV_AMT,0)),0),NVL(SUM(NVL(ADV_FAMT,0)),0)) ADV,
         sum(DECODE('USD','USD',NVL(SUM(NVL(PAY_AMT,0)),0),NVL(SUM(NVL(PAY_FAMT,0)),0))) PAY
      into l_pay
   FROM(    SELECT H.PK APSEQ, 
                 TO_CHAR(H.TR_DATE, 'YYYYMMDD') SIGN_DATE, 
                 H.REMARK TR_REMARK, 
                 R.TR_AMT ADV_FAMT, 
                 R.TR_BOOKAMT ADV_AMT,
                 0 PAY_FAMT, 
                 0 PAY_AMT,
                 D.CCY TR_CCY 
            FROM TAC_hGTRH H, 
                 TAC_hGTRD D, 
                 TAC_hGTRD_REF R, 
                 TAC_hGTRDITEM I 
           WHERE H.PK = D.TAC_hGTRH_PK 
            
             AND (I.ITEM = P_CONTRACT_NO or P_CONTRACT_NO is null)
              AND H.TR_STATUS IN (0, 2) 
             AND D.PK = R.TAC_hGTRD_PK 
             AND D.PK = I.TAC_hGTRD_PK 
             AND D.DRCR_TYPE = 'C' 
        
             
              AND D.TAC_ABACCTCODE_PK IN
               (SELECT TAC_ABACCTCODE_PK
                  FROM TAC_ABTRACGRPD
                 WHERE DEL_IF = 0
                       AND TAC_ABTRACGRP_PK =
                              (SELECT PK
                                 FROM TAC_ABTRACGRP
                                WHERE DEL_IF = 0 AND AC_GRP = 'WITHOLD_DR'))
                                
                                 
             AND H.DEL_IF = 0 
             AND D.DEL_IF = 0 
             AND R.DEL_IF = 0 
             AND I.DEL_IF = 0
          UNION ALL  
          SELECT H.PK APSEQ, 
                 TO_CHAR(H.TR_DATE, 'YYYYMMDD') SIGN_DATE, 
                 H.REMARK TR_REMARK, 
                 0 ADV_FAMT, 
                 0 ADV_AMT,
                 R.TR_AMT PAY_FAMT, 
                 R.TR_BOOKAMT PAY_AMT,
                 D.CCY TR_CCY 
            FROM TAC_hGTRH H, 
                 TAC_hGTRD D, 
                 TAC_hGTRD_REF R, 
                 TAC_hGTRDITEM I 
           WHERE  
              H.PK = D.TAC_hGTRH_PK 
              
             AND (I.ITEM = P_CONTRACT_NO or P_CONTRACT_NO is null)
      
             AND H.TR_STATUS IN (0, 2) 
             AND D.PK = R.TAC_hGTRD_PK 
             AND D.PK = I.TAC_hGTRD_PK 
             AND D.DRCR_TYPE = 'C' 
--             AND R.TAC_ABACCTCODE_PK IN (120) 
--             AND D.TAC_ABACCTCODE_PK IN (1005, 1006)

   AND r.TAC_ABACCTCODE_PK_DR IN
               (SELECT TAC_ABACCTCODE_PK
                  FROM TAC_ABTRACGRPD
                 WHERE DEL_IF = 0
                       AND TAC_ABTRACGRP_PK =
                              (SELECT PK
                                 FROM TAC_ABTRACGRP
                                WHERE DEL_IF = 0 AND AC_GRP = 'WITHOLD_DR'))
                                 
      AND D.TAC_ABACCTCODE_PK IN
               (SELECT TAC_ABACCTCODE_PK
                  FROM TAC_ABTRACGRPD
                 WHERE DEL_IF = 0
                       AND TAC_ABTRACGRP_PK =
                              (SELECT PK
                                 FROM TAC_ABTRACGRP
                                WHERE DEL_IF = 0 AND AC_GRP = 'WITHOLD_CR'))
             AND H.DEL_IF = 0 
             AND D.DEL_IF = 0 
             AND R.DEL_IF = 0 
             AND I.DEL_IF = 0       
           ) GROUP BY APSEQ,SIGN_DATE,TR_REMARK,TR_CCY;
      return l_pay;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60020030_PAYABLE;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_60020030_payable (p_contract_no IN VARCHAR2)
   RETURN NUMBER
IS
 
   l_ap_amt varchar2(50);
 
/******************************************************************************
   NAME:       sf_gfqc00030_payable
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
   SELECT 
   --a.apseq,
        --  a.tr_date,
       --   a.tr_remark,
          SUM (a.tr_famt) ap_amt
         -- SUM (b.pay_famt) pay_amt
       --   (TO_CHAR (TO_DATE (b.pay_date, 'YYYYMMDD'), 'DD/MM/YYYY')
        --  ) pay_date
     INTO l_ap_amt
     FROM (SELECT t.pk appk, h.pk apseq, 
     t.tr_date, h.sign_date appr_date,
                  d.remark tr_remark, 
                  NVL (t.tr_famt, 0) tr_famt,
                  NVL (t.tr_amt, 0) tr_amt
             FROM tfn_eppay t, tac_hgtrh h, tac_hgtrd d, tac_hgtrditem i
            WHERE d.tac_hgtrh_pk = h.pk
              AND t.tac_hgtrd_pk = d.pk
              AND t.del_if = 0
              AND h.del_if = 0
              AND d.del_if = 0
              AND i.del_if = 0
              AND d.pk = i.tac_hgtrd_pk
              AND (i.item = p_contract_no OR p_contract_no IS NULL)) a,
          (SELECT h.pk, NVL (t.tr_famt, 0), NVL (t.tr_amt, 0),
                  NVL (e.pay_famt, 0) pay_famt, NVL (e.pay_amt, 0) pay_amt,
                  t.pay_date, t.pk paypk
             FROM tfn_eppay t,
                  tac_hgtrh h,
                  tac_hgtrd d,
                  tfn_eppaytr e,
                  tac_hgtrditem i
            WHERE d.tac_hgtrh_pk = h.pk
              AND t.tac_hgtrd_pk = d.pk
              AND t.pk = e.tfn_eppay_pk(+)
              AND t.del_if = 0
              AND h.del_if = 0
              AND d.del_if = 0
              AND e.del_if(+) = 0
              AND i.del_if = 0
              AND d.pk = i.tac_hgtrd_pk
              AND (i.item = p_contract_no OR p_contract_no IS NULL)) b
    WHERE a.appk = b.paypk(+);

  RETURN l_ap_amt;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60020030_PAYMENT;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_60020030_Payment 
(
    p_contract_no IN VARCHAR2
)
RETURN NUMBER 
IS
l_pay_amt varchar2(50);
/******************************************************************************
   NAME:       sf_gfqc00030_Payment
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
   SELECT 
   --a.apseq,
        --  a.tr_date,
       --   a.tr_remark,
--          SUM (a.tr_famt) ap_amt
          SUM (b.pay_famt) pay_amt
       --   (TO_CHAR (TO_DATE (b.pay_date, 'YYYYMMDD'), 'DD/MM/YYYY')
        --  ) pay_date
     INTO l_pay_amt
     FROM (SELECT t.pk appk, h.pk apseq, 
     t.tr_date, h.sign_date appr_date,
                  d.remark tr_remark, 
                  NVL (t.tr_famt, 0) tr_famt,
                  NVL (t.tr_amt, 0) tr_amt
             FROM tfn_eppay t, tac_hgtrh h, tac_hgtrd d, tac_hgtrditem i
            WHERE d.tac_hgtrh_pk = h.pk
              AND t.tac_hgtrd_pk = d.pk
              AND t.del_if = 0
              AND h.del_if = 0
              AND d.del_if = 0
              AND i.del_if = 0
              AND d.pk = i.tac_hgtrd_pk
              AND (i.item = p_contract_no OR p_contract_no IS NULL)) a,
          (SELECT h.pk, NVL (t.tr_famt, 0), NVL (t.tr_amt, 0),
                  NVL (e.pay_famt, 0) pay_famt, NVL (e.pay_amt, 0) pay_amt,
                  t.pay_date, t.pk paypk
             FROM tfn_eppay t,
                  tac_hgtrh h,
                  tac_hgtrd d,
                  tfn_eppaytr e,
                  tac_hgtrditem i
            WHERE d.tac_hgtrh_pk = h.pk
              AND t.tac_hgtrd_pk = d.pk
              AND t.pk = e.tfn_eppay_pk(+)
              AND t.del_if = 0
              AND h.del_if = 0
              AND d.del_if = 0
              AND e.del_if(+) = 0
              AND i.del_if = 0
              AND d.pk = i.tac_hgtrd_pk
              AND (i.item = p_contract_no OR p_contract_no IS NULL)) b
    WHERE a.appk = b.paypk(+);

  RETURN l_pay_amt;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60020080_PAY;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60020080_pay (p_contract_no IN VARCHAR2)
   RETURN NUMBER
IS
   l_pay   VARCHAR2 (50);
/******************************************************************************
   NAME:       sf_gfqc00030_pay
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
     SELECT                                                           --APSEQ,
                                                        --          SIGN_DATE,
                                                        --          TR_REMARK,
 --          DECODE('USD','USD',NVL(SUM(NVL(ADV_AMT,0)),0),NVL(SUM(NVL(ADV_FAMT,0)),0)) ADV,
            SUM (
               DECODE ('USD',
                       'USD', NVL (SUM (NVL (pay_amt, 0)), 0),
                       NVL (SUM (NVL (pay_famt, 0)), 0)))
               pay
       INTO l_pay
       FROM (SELECT h.pk apseq,
                    TO_CHAR (h.tr_date, 'YYYYMMDD') sign_date,
                    h.remark tr_remark,
                    r.tr_amt adv_famt,
                    r.tr_bookamt adv_amt,
                    0 pay_famt,
                    0 pay_amt,
                    d.ccy tr_ccy
               FROM tac_hgtrh h,
                    tac_hgtrd d,
                    tac_hgtrd_ref r,
                    tac_hgtrditem i
              WHERE     h.pk = d.tac_hgtrh_pk
                    AND (i.item = p_contract_no OR p_contract_no IS NULL)
                    AND h.tr_status IN (0, 2)
                    AND d.pk = r.tac_hgtrd_pk
                    AND d.pk = i.tac_hgtrd_pk
                    AND d.drcr_type = 'C'
                    AND d.tac_abacctcode_pk IN
                           (SELECT tac_abacctcode_pk
                              FROM tac_abtracgrpd
                             WHERE del_if = 0
                                   AND tac_abtracgrp_pk =
                                          (SELECT pk
                                             FROM tac_abtracgrp
                                            WHERE del_if = 0
                                                  AND ac_grp = 'WITHOLD_DR'))
                    AND h.del_if = 0
                    AND d.del_if = 0
                    AND r.del_if = 0
                    AND i.del_if = 0
             UNION ALL
             SELECT h.pk apseq,
                    TO_CHAR (h.tr_date, 'YYYYMMDD') sign_date,
                    h.remark tr_remark,
                    0 adv_famt,
                    0 adv_amt,
                    r.tr_amt pay_famt,
                    r.tr_bookamt pay_amt,
                    d.ccy tr_ccy
               FROM tac_hgtrh h,
                    tac_hgtrd d,
                    tac_hgtrd_ref r,
                    tac_hgtrditem i
              WHERE     h.pk = d.tac_hgtrh_pk
                    AND (i.item = p_contract_no OR p_contract_no IS NULL)
                    AND h.tr_status IN (0, 2)
                    AND d.pk = r.tac_hgtrd_pk
                    AND d.pk = i.tac_hgtrd_pk
                    AND d.drcr_type = 'C'
                    --             AND R.TAC_ABACCTCODE_PK IN (120)
                    --             AND D.TAC_ABACCTCODE_PK IN (1005, 1006)

                    AND r.tac_abacctcode_pk_dr IN
                           (SELECT tac_abacctcode_pk
                              FROM tac_abtracgrpd
                             WHERE del_if = 0
                                   AND tac_abtracgrp_pk =
                                          (SELECT pk
                                             FROM tac_abtracgrp
                                            WHERE del_if = 0
                                                  AND ac_grp = 'WITHOLD_DR'))
                    AND d.tac_abacctcode_pk IN
                           (SELECT tac_abacctcode_pk
                              FROM tac_abtracgrpd
                             WHERE del_if = 0
                                   AND tac_abtracgrp_pk =
                                          (SELECT pk
                                             FROM tac_abtracgrp
                                            WHERE del_if = 0
                                                  AND ac_grp = 'WITHOLD_CR'))
                    AND h.del_if = 0
                    AND d.del_if = 0
                    AND r.del_if = 0
                    AND i.del_if = 0)
   GROUP BY apseq,
            sign_date,
            tr_remark,
            tr_ccy;

   RETURN l_pay;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60020080_PAYMENT;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60020080_payment (p_contract_no IN VARCHAR2)
   RETURN NUMBER
IS
   l_pay_amt   VARCHAR2 (50);
/******************************************************************************
   NAME:       sf_gfqc00030_Payment
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
   SELECT                                                           --a.apseq,
                                                                --  a.tr_date,
                                                             --   a.tr_remark,
                                            --          SUM (a.tr_famt) ap_amt
          SUM (b.pay_famt) pay_amt
     --   (TO_CHAR (TO_DATE (b.pay_date, 'YYYYMMDD'), 'DD/MM/YYYY')
     --  ) pay_date
     INTO l_pay_amt
     FROM (SELECT t.pk appk,
                  h.pk apseq,
                  t.tr_date,
                  h.sign_date appr_date,
                  d.remark tr_remark,
                  NVL (t.tr_famt, 0) tr_famt,
                  NVL (t.tr_amt, 0) tr_amt
             FROM tfn_eppay t,
                  tac_hgtrh h,
                  tac_hgtrd d,
                  tac_hgtrditem i
            WHERE     d.tac_hgtrh_pk = h.pk
                  AND t.tac_hgtrd_pk = d.pk
                  AND t.del_if = 0
                  AND h.del_if = 0
                  AND d.del_if = 0
                  AND i.del_if = 0
                  AND d.pk = i.tac_hgtrd_pk
                  AND (i.item = p_contract_no OR p_contract_no IS NULL)) a,
          (SELECT h.pk,
                  NVL (t.tr_famt, 0),
                  NVL (t.tr_amt, 0),
                  NVL (e.pay_famt, 0) pay_famt,
                  NVL (e.pay_amt, 0) pay_amt,
                  t.pay_date,
                  t.pk paypk
             FROM tfn_eppay t,
                  tac_hgtrh h,
                  tac_hgtrd d,
                  tfn_eppaytr e,
                  tac_hgtrditem i
            WHERE     d.tac_hgtrh_pk = h.pk
                  AND t.tac_hgtrd_pk = d.pk
                  AND t.pk = e.tfn_eppay_pk(+)
                  AND t.del_if = 0
                  AND h.del_if = 0
                  AND d.del_if = 0
                  AND e.del_if(+) = 0
                  AND i.del_if = 0
                  AND d.pk = i.tac_hgtrd_pk
                  AND (i.item = p_contract_no OR p_contract_no IS NULL)) b
    WHERE a.appk = b.paypk(+);

   RETURN l_pay_amt;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080220_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60080220_1 (
   p_tac_kafinanceform_pk   IN VARCHAR,
   p_plcd                      VARCHAR,
   p_accpk                     VARCHAR,
   p_kind                      VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        28-Oct-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    VARCHAR2 (32767) := '';
   l_value       VARCHAR2 (2000) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
   FOR c1
      IN (SELECT DISTINCT a.end_bl, a.tac_abacctcode_pk, b.operator_
            FROM tac_tmpplbal a, tac_kafinanceformd1 b
           WHERE     b.del_if = 0
                 AND a.ac_cd = b.ac_cd
                 AND b.tac_abacctcode_pk IS NOT NULL
                 AND a.pl_cd = p_plcd
                 AND b.pk IN
                        (    SELECT pk
                               FROM tac_kafinanceformd1 a
                              WHERE a.del_if = 0
                         START WITH a.tac_kafinanceform_pk =
                                       p_tac_kafinanceform_pk
                                    AND del_if = 0
                         CONNECT BY PRIOR tac_kafinanceform_sum_pk =
                                       tac_kafinanceform_pk
                                    AND del_if = 0))
   LOOP
      BEGIN
         SELECT MAX (end_bl)
           INTO l_value
           FROM tac_tmpplbal
          WHERE tac_abacctcode_pk = c1.tac_abacctcode_pk AND pl_cd = p_plcd;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_value := 0;
      END;

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL (c1.operator_, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
      INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080220_2;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60080220_2 (
   p_tac_kafinanceform_pk   IN VARCHAR,
   p_plcd                      VARCHAR,
   p_accpk                     VARCHAR,
   p_kind                      VARCHAR,
   p_month_fr                  VARCHAR,
   p_month_to                  VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      name:       sf_gfka00210_2
      purpose:

      revisions:
      ver        date        author           description
      ---------  ----------  ---------------  ------------------------------------
      1.0        28-oct-09   ttal       1. created this function.
   ******************************************************************************/
   l_formular    VARCHAR2 (32767) := '';
   l_value       VARCHAR2 (2000) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
   FOR c1
      IN (SELECT DISTINCT b.*
            FROM tac_kafinanceformd1 b
           WHERE b.del_if = 0
                 AND b.pk IN
                        (    SELECT pk
                               FROM tac_kafinanceformd1 a
                              WHERE a.del_if = 0
                         START WITH a.tac_kafinanceform_pk =
                                       p_tac_kafinanceform_pk
                                    AND del_if = 0
                         CONNECT BY PRIOR tac_kafinanceform_sum_pk =
                                       tac_kafinanceform_pk
                                    AND del_if = 0))
   LOOP
      BEGIN
         SELECT SUM (NVL (amount_per, 0))
           INTO l_value
           FROM tac_allexpd1 a,
           -- tac_abplcenter b,
             tac_abpl c
          WHERE     a.del_if = 0
               -- AND b.del_if = 0
                AND c.del_if = 0
                --AND a.tac_abplcenter_pk = b.pk
                AND a.tac_abpl_pk = c.pk
               -- AND b.tac_abpl_pk = c.pk
                AND a.tac_abacctcode_pk = c1.tac_abacctcode_pk
                AND c.pl_cd = p_plcd
                AND a.std_ym BETWEEN p_month_fr AND p_month_to;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_value := 0;
      END;

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL (c1.operator_, '+') || '(' || l_value || ')';
      END IF;

      l_formular := NVL (l_formular, '') || l_value;
   END LOOP;

   IF LENGTH (l_formular) > 0
   THEN
      EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
         INTO l_rtn_value;
   END IF;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080220_3;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60080220_3 (
   p_month            IN VARCHAR,
   p_plcd                VARCHAR,
   p_accpk               VARCHAR,
   p_tco_company_pk      VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        28-Oct-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    VARCHAR2 (32767) := '';
   l_value       VARCHAR2 (2000) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
   l_date_fr     VARCHAR (10) := p_month || '01';
   l_date_to     VARCHAR (8) := '';
BEGIN
   SELECT TO_CHAR (LAST_DAY (TO_DATE (p_month || '01', 'yyyymmdd')),
                   'yyyymmdd')
     INTO l_date_to
     FROM DUAL;

   AC_sel_60080220_2 (p_tco_company_pk,
                       l_date_fr,
                       l_date_to,
                       NULL,
                       NULL,
                       NULL,
                       2,
                       NULL,
                       l_rtn_value);
   COMMIT;

   BEGIN
      SELECT end_bl
        INTO l_value
        FROM tac_tmpplbal
       WHERE tac_abacctcode_pk = p_accpk AND pl_cd = p_plcd;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         l_value := 0;
   END;


   RETURN l_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080240_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_60080240_1 (
   p_kind             VARCHAR2,
   p_status           VARCHAR,
   p_tco_company_pk   VARCHAR,
   p_date_fr          VARCHAR,
   p_date_to          VARCHAR,
   p_header           VARCHAR
)
   RETURN NUMBER
IS
/******************************************************************************
   NAME:      sf_gfka00080_1
   PURPOSE:

   REVISIONS:
   Ver        Date          Author           Description
   ---------  ----------   ---------------  ------------------------------------
   1.0        27-May-2009   TTAL       1. Created this function.
******************************************************************************/
   l_len         NUMBER         := 0;
   l_cnt         NUMBER         := 0;
   l_formular    VARCHAR (1000) := '';
   l_ac_cd       VARCHAR (1000) := '';
   l_value       VARCHAR (20)   := '';
   l_buf         VARCHAR (1)    := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
   SELECT NVL (b.total_bookamt, 0)*b.CF_OPERATOR total_bookamt
     INTO l_rtn_value
     FROM (SELECT a.code, a.prn_acnm, a.prn_lacnm, a.prn_kacnm, a.prn_seq,
                  a.font_stype, a.header, a.prn_color, a.form_type
             FROM tac_kafinanceform a
            WHERE a.del_if = 0
              AND a.form_type = 24
             -- AND a.tco_company_pk = p_tco_company_pk
              ) a,
          (SELECT   r.cf_code, SUM (r.tr_bookamt) total_bookamt,max(CF_OPERATOR) CF_OPERATOR
               FROM tac_hgtrh h, tac_hgtrd_ref r
              WHERE h.del_if = 0
                AND r.del_if = 0
                AND h.pk = r.tac_hgtrh_pk
                AND r.drcr_type = 'D'
                 AND decode(p_tco_company_pk,0,2, tco_company_pk) = decode( p_tco_company_pk,0,2, p_tco_company_pk)
                AND TO_CHAR (h.tr_date, 'YYYYMMDD') BETWEEN p_date_fr
                                                        AND p_date_to
                AND h.tr_status IN
                       (DECODE (p_status, 2, 2, p_status),
                        DECODE (p_status, 2, 0, p_status),
                        DECODE (p_status, 2, 4, p_status)
                       )
           GROUP BY cf_code) b,
          tac_kafinanceform c
    WHERE a.code = b.cf_code(+)
      AND a.code IS NOT NULL
      AND a.header > '20'
      AND c.form_type = p_kind
      AND a.header = c.header
      AND a.header = p_header;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080240_2;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60080240_2 (
   p_tac_kafinanceform_pk   IN VARCHAR,
   p_column_type               VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        18-Aug-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular    VARCHAR2 (8000) := '';
   l_value       VARCHAR2 (8000) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
   FOR c1
      IN (SELECT DISTINCT a.*, b.operator_
            FROM tac_fsqd15 a, tac_kafinanceformd1 b
           WHERE     b.del_if = 0
                 AND a.ac_cd = b.ac_cd
                 AND tac_abacctcode_pk IS NOT NULL
                 AND b.pk IN
                        (    SELECT pk
                               FROM tac_kafinanceformd1 a
                              WHERE a.del_if = 0
                         START WITH a.tac_kafinanceform_pk =
                                       p_tac_kafinanceform_pk
                                    AND del_if = 0
                         CONNECT BY PRIOR tac_kafinanceform_sum_pk =
                                       tac_kafinanceform_pk
                                    AND del_if = 0))
   LOOP
      IF p_column_type = 'THIS'
      THEN
         BEGIN
            SELECT SUM (m_ps)
              INTO l_value
              FROM tac_fsqd15
             WHERE ac_cd = c1.ac_cd;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_value := 0;
         END;
      ELSIF p_column_type = 'LAST'
      THEN
         BEGIN
            SELECT SUM (m_ps1)
              INTO l_value
              FROM tac_fsqd15
             WHERE ac_cd = c1.ac_cd;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_value := 0;
         END;
      ELSIF p_column_type = 'ACC'
      THEN
         BEGIN
            SELECT SUM (m_acc)
              INTO l_value
              FROM tac_fsqd15
             WHERE ac_cd = c1.ac_cd;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_value := 0;
         END;
      ELSIF p_column_type = 'ACC1'
      THEN
         BEGIN
            SELECT SUM (m_acc1)
              INTO l_value
              FROM tac_fsqd15
             WHERE ac_cd = c1.ac_cd;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_value := 0;
         END;
      ELSIF p_column_type = 'BAL'
      THEN
         BEGIN
            SELECT SUM (m_bal)
              INTO l_value
              FROM tac_fsqd15
             WHERE ac_cd = c1.ac_cd;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_value := 0;
         END;
      ELSIF p_column_type = 'BAL1'
      THEN
         BEGIN
            SELECT SUM (m_bal1)
              INTO l_value
              FROM tac_fsqd15
             WHERE ac_cd = c1.ac_cd;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               l_value := 0;
         END;
      END IF;

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL (c1.operator_, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
      INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080240_EXECUTE_21_36;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_60080240_execute_21_36(
   p_formular      in   varchar
 , p_date_type          varchar
 , p_column_type        varchar
 , p_balabce            varchar
 , p_header             varchar)
   return number
is
/******************************************************************************
   NAME:       SF_CAL_POLYNOMINAL
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        09-Jun-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar(4000) := '';
   l_value varchar(4000) := '';
   l_rtn_value number;
   l_status varchar(300);
begin
--    for c1 in (select substr(column_value, 0, 1) col1
--                   , substr(column_value, 2, length(column_value) - 1)  ac_cd
--                from table(split(p_formular, ',') )
--               where column_value is not null)
--    loop
--       case
--               when p_column_type = 'THIS'
--               then
--                  case
--                     when p_balabce = 'L' or p_balabce = 'R'
--                          or p_balabce = 'B'
--                     then
--                        select   decode(p_balabce
--                                      , 'L', sum(dr_ps)
--                                      , 'R', sum(cr_ps)
--                                      , decode(dc
--                                             , 1, sum(nvl(dr_bl, 0) )
--                                                - sum(nvl(dr_op, 0) )
--                                             , sum(nvl(cr_bl, 0) )
--                                               - sum(nvl(cr_op, 0) ) ) )
--                            into l_value
--                            from tac_cf_indirect
--                           where ac_cd = c1.ac_cd
--                        group by dc;
--                     when p_balabce = 'C'
--                     then
--                       select 0 
--                       into l_value
--                            from tac_cf_indirect
--                           where ac_cd = c1.ac_cd;
--                  end case;
--               when p_column_type = 'LAST'
--               then
--                  select   decode(p_balabce
--                                , 'L', sum(dr_ps1)
--                                , 'R', sum(cr_ps1)
--                                , decode(dc
--                                       , 1, sum(nvl(dr_bl1, 0) )
--                                          - sum(nvl(dr_op1, 0) )
--                                       , sum(nvl(cr_bl1, 0) )
--                                         - sum(nvl(cr_op1, 0) ) ) )
--                      into l_value
--                      from tac_cf_indirect
--                     where ac_cd = c1.ac_cd
--                  group by dc;
--               when p_column_type = 'ACC'
--               then
--                  select decode(p_balabce, 'L', sum(dr_ps), sum(cr_ps) )
--                    into l_value
--                    from tac_cf_indirect
--                   where ac_cd = c1.ac_cd;
--            end case;
--             l_value := nvl(c1.col1, '+') || '(' || l_value || ')';
--      
--
--      l_formular := l_formular || l_value;
--    end loop;           


   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
                into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080240_FORM_EX;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60080240_form_ex (p_formular in varchar, p_date_type varchar, p_column_type varchar)
   return number
is
/******************************************************************************
   NAME:       SF_CAL_POLYNOMINAL
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/11/2008   Phan Huy Quoc My       1. Created this function.
******************************************************************************/
   l_tmp         varchar (5000) := trim (p_formular);
   l_len         number         := 0;
   l_cnt         number         := 0;
   l_formular    varchar (1000) := '';
   l_ac_cd       varchar (1000) := '';
   l_value       varchar (1000)   := '';
   l_buf         varchar (1)    := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   select length (l_tmp)
     into l_len
     from dual;

   l_tmp := '(' || l_tmp || ')';
   l_len := l_len + 2;

   if (l_len < 8)
   then
      /* Toi thieu co 6 ky tu cua tai khoan */
      l_formular := 'ERROR';
   end if;

   for i in 1 .. l_len
   loop
      l_buf := substr (l_tmp, i, 1);

      select instr ('0123456789', l_buf)
        into l_cnt
        from dual;

      if (l_cnt = 0)
      then                                                                                    /*  Khong phai la ky so */
         l_formular := l_formular || l_value;
         l_formular := l_formular || l_buf;
         l_value := '';
      else
         l_ac_cd := l_ac_cd || l_buf;

         if (length (l_ac_cd) = 6)
         then
            if p_date_type = 'M'
            then
               if p_column_type = 'THIS'
               then
                  select sum (m_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (m_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC'
               then
                  select sum (m_acc)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC1'
               then
                  select sum (m_acc1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL'
               then
                  select sum (m_bal)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL1'
               then
                  select sum (m_bal1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            elsif p_date_type = 'Q'
            then
               if p_column_type = 'THIS'
               then
                  select sum (q_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (q_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC'
               then
                  select sum (q_acc)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC1'
               then
                  select sum (q_acc1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            elsif p_date_type = 'Y'
            then
               if p_column_type = 'THIS'
               then
                  select sum (y_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (y_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL'
               then
                  select sum (y_bal)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL1'
               then
                  select sum (y_bal1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            end if;

            if (l_value is null or l_value = '')
            then
               l_value := 0;
            end if;

            l_ac_cd := '';
         end if;
      end if;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
                into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080250_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_60080250_1(
   p_formular      IN   VARCHAR
 , p_date_type          VARCHAR
 , p_column_type        VARCHAR
 , p_kind               VARCHAR)
   RETURN NUMBER
IS
/******************************************************************************
   NAME:       SF_GFKA00250_1
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        30-Jun-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular VARCHAR2(32767) := '';
   l_value VARCHAR2(2000) := '';
   l_rtn_value NUMBER;
   l_status VARCHAR2(300);
BEGIN
--   FOR c1 IN (SELECT SUBSTR(COLUMN_VALUE, 0, 1) col1
--                   , SUBSTR(COLUMN_VALUE, 2, LENGTH(COLUMN_VALUE) - 1) col2
--                FROM TABLE(SPLIT(p_formular, ',') )
--               WHERE COLUMN_VALUE IS NOT NULL)
--   LOOP
--      CASE
--         WHEN p_column_type = 'THIS'
--         THEN
--            BEGIN
--               SELECT SUM(NVL(m_ps, 0) )
--                 INTO l_value
--                 FROM tac_kafinanceform
--                WHERE header = c1.col2 AND form_type = p_kind;
--            EXCEPTION
--               WHEN NO_DATA_FOUND
--               THEN
--                  l_value := 0;
--            END;
--         WHEN p_column_type = 'LAST'
--         THEN
--            BEGIN
--               SELECT SUM(NVL(m_ps1, 0) )
--                 INTO l_value
--                 FROM tac_kafinanceform
--                WHERE header = c1.col2 AND form_type = p_kind;
--            EXCEPTION
--               WHEN NO_DATA_FOUND
--               THEN
--                  l_value := 0;
--            END;
--         WHEN p_column_type = 'ACC'
--         THEN
--            BEGIN
--               SELECT SUM(NVL(m_acc, 0) )
--                 INTO l_value
--                 FROM tac_kafinanceform
--                WHERE header = c1.col2 AND form_type = p_kind;
--            EXCEPTION
--               WHEN NO_DATA_FOUND
--               THEN
--                  l_value := 0;
--            END;
--         WHEN p_column_type = 'ACC1'
--         THEN
--            BEGIN
--               SELECT SUM(NVL(m_acc1, 0) )
--                 INTO l_value
--                 FROM tac_kafinanceform
--                WHERE header = c1.col2 AND form_type = p_kind;
--            EXCEPTION
--               WHEN NO_DATA_FOUND
--               THEN
--                  l_value := 0;
--            END;
--      END CASE;
--
--      IF (l_value IS NULL OR l_value = '')
--      THEN
--         l_value := 0;
--      ELSE
--         l_value := NVL(c1.col1, '+') || '(' || l_value || ')';
--      END IF;
--
--      l_formular := l_formular || l_value;
--   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
                INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080250_21;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60080250_21 (p_tac_kafinanceform_pk in varchar, p_column_type varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        18-Aug-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (8000) := '';
   l_value       varchar2 (8000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1 in (select distinct a.*, b.operator_
                from tac_fsqd15 a, tac_kafinanceformd1 b
               where     b.del_if = 0
                     and a.tac_abacctcode_pk = b.tac_abacctcode_pk
                     and b.pk in (    select pk
                                        from tac_kafinanceformd1 a
                                       where a.del_if = 0
                                  start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0
                                  connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk and del_if = 0))
   loop
      if p_column_type = 'THIS'
      then
         begin
            select sum (m_ps)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'LAST'
      then
         begin
            select sum (m_ps1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'ACC'
      then
         begin
            select sum (m_acc)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'ACC1'
      then
         begin
            select sum (m_acc1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'BAL'
      then
         begin
            select sum (m_bal)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'BAL1'
      then
         begin
            select sum (m_bal1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      end if;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60180150_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_60180150_1(
   p_tac_kafinanceform_local_pk   VARCHAR
 , p_date_type                    VARCHAR
 , p_column_type                  VARCHAR
 , p_balance_type                 VARCHAR)
   RETURN NUMBER
IS
/******************************************************************************
   NAME:       SF_GFRV00050_1
   PURPOSE:

   REVISIONS:
   Ver        Date         Author           Description
   ---------  ----------   ---------------  ------------------------------------
   1.0        16-Jan-2010   TTAL       1. Created this function.
******************************************************************************/
   l_formular VARCHAR2(32767) := '';
   l_value VARCHAR2(2000) := '';
   l_rtn_value NUMBER;
   l_status VARCHAR2(300);
BEGIN
   FOR c1 IN (SELECT *
                FROM tac_kafinanceformd1_local
               WHERE del_if = 0
                     AND tac_kafinanceform_local_pk =
                                                 p_tac_kafinanceform_local_pk)
   LOOP
      CASE
         WHEN p_column_type = 'CLOSING'
         THEN
            BEGIN
               SELECT DECODE(p_balance_type, 'L', dr_op, 'R', cr_op)
                 INTO l_value
                 FROM tac_tmptrialbal_vas
                WHERE ac_cd = c1.ac_cd;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
         WHEN p_column_type = 'OPENNING'
         THEN
            BEGIN
               SELECT DECODE(p_balance_type, 'L', dr_bl, 'R', cr_bl)
                 INTO l_value
                 FROM tac_tmptrialbal_vas
                WHERE ac_cd = c1.ac_cd;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
      END CASE;

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL(c1.operator_, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
                INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_60130140_01_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_a_get_60130140_01_1(
   p_tac_gffa_mst_pk   VARCHAR
 , p_from              VARCHAR2
 , p_to                VARCHAR)
   RETURN VARCHAR2
IS
   l_rtn_value VARCHAR2(255);
  /******************************************************************************
 NAME:       SF_A_GET_UPPER_DEPTNM
 PURPOSE:

 REVISIONS:
 Ver        Date         Author              Description
 ---------  ----------   ---------------     ------------------------------------
 1.0        21-Jul-2009  TTAL                1. Created this procedure.

******************************************************************************/
BEGIN
   SELECT CASE
             WHEN fa_depr_date <=
                    TO_CHAR(LAST_DAY(TO_DATE(p_to || '01', 'yyyymmdd') )
                          , 'yyyymmdd')
                THEN 'DEPRECIATED'
             ELSE 'NOT DEPRECIATED'
          END CASE
     INTO l_rtn_value
     FROM tac_gffa_mst a
    WHERE a.del_if = 0 AND pk = p_tac_gffa_mst_pk;

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACCD;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_A_GET_ACCD
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK             = p_pk
     --AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACCD1;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_A_GET_ACCD1
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT nvl(AC_CD_FORMULAR,ac_cd)
    INTO l_rtn_value
    FROM TAC_localcode
   WHERE PK             = p_pk
     AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACCD2;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_A_GET_ACCD2
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_localcode
   WHERE PK             = p_pk
     AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACCD_COMPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_a_get_accd_compk (p_pk     IN STRING,
                                                   com_pk   IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (10);
/******************************************************************************
   NAME:       sf_a_get_acnm
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/

BEGIN
   l_rtn_value := '';

   SELECT ac_cd
     INTO l_rtn_value
     FROM tac_abacctcode
    WHERE pk = p_pk AND tco_company_pk = com_pk AND del_if = 0;

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACNM;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_A_GET_ACNM(
                                            p_pk        VARCHAR2,
                                            p_compk     VARCHAR2,
                                            p_lang    VARCHAR2
                                        ) 
RETURN VARCHAR2
IS
  l_rtn_value VARCHAR2(255);
BEGIN

  l_rtn_value := '';

  SELECT decode(p_lang,'ENG',AC_NM,'VIE',ac_lnm,'KOR',ac_knm)
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK              = p_pk
     --AND TCO_COMPANY_PK  = p_compk
     AND DEL_IF          = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACNMLOCAL_BYIFRSPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_a_get_acnmlocal_byifrspk(
    p_pk        varchar2,
    p_compk     varchar2
) 
return varchar2
is
  l_rtn_value varchar2(255);
begin

  l_rtn_value := '';
  
  select a.ac_cd
  into l_rtn_value
  from  tac_localcode a,tac_abacctcode b
  where a.del_if=0 and b.del_if=0
  and a.pk = b.tac_localcode_pk 
  and b.pk = p_pk
   and a.tco_company_pk  = p_compk;

--  SELECT DECODE(p_lang, 'ENG', AC_NM, 'VIE', AC_LNM, 'KOR', AC_KNM)
--    INTO l_rtn_value
--    FROM TAC_ABACCTCODE a, TAC_LOCALCODE b
--
--   WHERE PK              = p_pk
--     AND TCO_COMPANY_PK  = p_compk
--     AND DEL_IF          = 0;

  return l_rtn_value;
---------
exception
---------
  when others then raise;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACNM_KOREAN;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_a_get_acnm_korean (p_pk IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
   l_rtn_value := '';

   SELECT ac_knm
     INTO l_rtn_value
     FROM tac_abacctcode
    WHERE pk = p_pk AND del_if = 0;

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ACNM_LOCAL;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_A_GET_ACNM_LOCAL(P_PK IN STRING) 
RETURN VARCHAR2 
IS
l_rtn_value VARCHAR2(255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
    l_rtn_value :='';

   SELECT AC_LNM INTO   l_rtn_value
     FROM TAC_ABACCTCODE
    WHERE PK     =  p_Pk
      AND DEL_IF = 0;
      
RETURN  l_rtn_value;
---------
EXCEPTION
---------
     WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_AGTRITEM;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_a_get_agtritem (v_trdpk IN NUMBER   -- Trd_Pk
                                                                  )
   RETURN VARCHAR2
IS
   /**=================================================================================
   * Function     SF_A_GET_AGTRITEM
   * Description
   * Return
   * Writer        Tuyen
   * Create Date   2003-11-17
   =================================================================================*/

   lsvitem   VARCHAR2 (1000) := NULL;

   CURSOR item_cus
   IS
      SELECT '[' || ccy || ','
             || DECODE (ccy,
                        'VND', TO_CHAR (tr_amt, '999,999,999,999,999'),
                        TO_CHAR (tr_amt, '999,999,999,999,990.99'))
             || ']'
                AS data1
        FROM tac_hgtrd
       WHERE pk = v_trdpk AND ccy != 'KRW'
      UNION ALL
      SELECT '[' || b.partner_name || ']' AS data1
        FROM tac_hgtrd a, tco_buspartner b
       WHERE a.pk = v_trdpk AND a.tco_buspartner_pk = b.pk
      UNION ALL
      SELECT '[' || a.item || ']' AS data1
        FROM tac_hgtrditem a, tac_abacctitem b
       WHERE     tac_abacctitem_pk = b.pk
             AND tac_hgtrd_pk = v_trdpk
             AND b.tac_abitem_alias = 'EMPLOYEE NAME'
             AND a.del_if = 0
             AND b.del_if = 0
      UNION ALL
      SELECT '[Project : ' || b.plc_cd || ' ' || b.plc_nm || ']' AS data1
        FROM tac_hgtrd a, tac_abcenter b
       WHERE a.pk = v_trdpk AND a.tac_abpl_pk = b.pk;
/* UNION ALL
 SELECT '[' || b.TAC_ABITEM_ALIAS ||' : ' || DECODE(A.ITEM_NM,NULL,A.ITEM,A.ITEM_NM) || ']'AS DATA1
   FROM tac_bgtrditem a, TAC_ABACCTITEM b
  where TAC_ABACCTITEM_PK = b.PK
    AND TAC_BGTRD_PK = v_trdpk
    AND a.DEL_IF = 0
    AND b.DEL_IF = 0 ;

        UNION ALL
    SELECT '[' || B.BG_DEPTNM ||']' AS DATA1
      FROM TAC_HGTRD A, TAC_EBDEPT B
     WHERE A.PK= v_trdpk
          AND A.TAC_ABBUDGET_PK = B.PK


    */


BEGIN
   FOR rec IN item_cus
   LOOP
      lsvitem := lsvitem || rec.data1;
   END LOOP;



   RETURN lsvitem;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_ASSET_ACC_PK;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_A_GET_asset_acc_PK
(
            p_ac_cd varchar2,
            p_company_pk varchar2
          
)
RETURN number 
IS
  l_rtn_value       number;
  p_gr_cd_pk number;
BEGIN

  l_rtn_value := '';
  SELECT a.PK 
into  p_gr_cd_pk
        FROM TAC_ABTRACGRP A 
       WHERE a.DEL_IF             = 0 
         AND A.TCO_COMPANY_PK     = p_company_pk
         AND a.APP_GRP            = 'A'
         AND a.AC_GRP  = 'AF001'
       ORDER BY AC_GRP;

  SELECT D.TAC_ABACCTCODE_PK
  into l_rtn_value
        FROM TAC_ABTRACGRPD D, TAC_ABTRACGRP H
       WHERE D.DEL_IF           = 0 
         AND H.DEL_IF           = 0
    
         AND D.TAC_ABTRACGRP_PK = H.PK
       
         AND TAC_ABTRACGRP_PK   = p_gr_cd_pk
        and upper(AC_CODE) = upper(trim(p_ac_cd))
       ORDER BY AC_CODE;
       RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_DEPR_ACC_PK;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_A_GET_depr_acc_PK
(
            p_ac_cd varchar2,
            p_company_pk varchar2
         
)
RETURN number 
IS
  l_rtn_value       number;
  p_gr_cd_pk number;
BEGIN

  l_rtn_value := '';
  SELECT a.PK 
into  p_gr_cd_pk
        FROM TAC_ABTRACGRP A 
       WHERE a.DEL_IF             = 0 
         AND A.TCO_COMPANY_PK     = p_company_pk
         AND a.APP_GRP            = 'A'
         AND a.AC_GRP  = 'AD001'
       ORDER BY AC_GRP;
  
  SELECT D.TAC_ABACCTCODE_PK
  into l_rtn_value
        FROM TAC_ABTRACGRPD D, TAC_ABTRACGRP H
       WHERE D.DEL_IF           = 0 
         AND H.DEL_IF           = 0
         AND D.TAC_ABTRACGRP_PK = H.PK
         AND TAC_ABTRACGRP_PK   = p_gr_cd_pk
        and upper(AC_CODE) = upper(trim(p_ac_cd))
       ORDER BY AC_CODE;
       RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_EXPE_ACC_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_SF_A_GET_expe_acc_PK
(
            p_ac_cd varchar2,
            p_company_pk varchar2
          
)
RETURN number 
IS
  l_rtn_value       number;
  p_gr_cd_pk number;
BEGIN

  l_rtn_value := '';
  SELECT a.PK 
into  p_gr_cd_pk
        FROM TAC_ABTRACGRP A 
       WHERE a.DEL_IF             = 0 
         AND A.TCO_COMPANY_PK     = p_company_pk
         AND a.APP_GRP            = 'A'
         AND a.AC_GRP  = 'AE002'
       ORDER BY AC_GRP;

  SELECT D.TAC_ABACCTCODE_PK
  into l_rtn_value
        FROM TAC_ABTRACGRPD D, TAC_ABTRACGRP H
       WHERE D.DEL_IF           = 0 
         AND H.DEL_IF           = 0
         AND D.TAC_ABTRACGRP_PK = H.PK
         AND TAC_ABTRACGRP_PK   = p_gr_cd_pk
        and upper(AC_CODE) = upper(trim(p_ac_cd))
       ORDER BY AC_CODE;
       RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_PLCENTER_PK;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_a_get_plcenter_pk (
   p_plcenter_cd    VARCHAR2,
   p_compk          VARCHAR2)
   RETURN NUMBER
IS
   l_rtn_value   NUMBER;
BEGIN
   l_rtn_value := '';

   SELECT b.pk
     INTO l_rtn_value
     FROM tac_abpl d,
          tac_abplcenter e,
          (    SELECT pk, plc_cd, plc_nm
                 FROM tac_abcenter
                WHERE     del_if = 0
                      AND tco_company_pk = p_compk
                      AND CONNECT_BY_ISLEAF = 1
           CONNECT BY PRIOR pk = p_pk
           START WITH p_pk IS NULL) b
    WHERE     d.del_if = 0
          AND e.del_if = 0
          AND e.tac_abpl_pk = d.pk
          AND e.tac_abcenter_pk = b.pk
          AND d.pl_cd = p_plcenter_cd
          AND d.use_yn = 'Y';

   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_A_GET_UPPER_DEPTNM;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_a_get_upper_deptnm (p_tco_org_pk VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
  /******************************************************************************
 NAME:       SF_A_GET_UPPER_DEPTNM
 PURPOSE:

 REVISIONS:
 Ver        Date         Author              Description
 ---------  ----------   ---------------     ------------------------------------
 1.0        21-Jul-2009  TTAL                1. Created this procedure.

******************************************************************************/
BEGIN
   SELECT org_id || '--' || org_nm
     INTO l_rtn_value
     FROM tco_org
    WHERE del_if = 0
          AND pk = (SELECT p_pk
                      FROM tco_org
                     WHERE del_if = 0 AND pk = p_tco_org_pk);

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_FORMULAR_CALCULATE;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_formular_calculate (
   p_tac_kafinanceform_pk   in varchar,
   p_tac_abpl_pk         varchar)
   return number
is
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (32767) := '';
   l_rtn_value   number;
begin
   for c1
      in (select distinct a.end_bl, a.tac_abacctcode_pk, b.operator_
            from tac_tmpplbal a, tac_kafinanceformd1 b
           where     b.del_if = 0
                 and a.tac_abacctcode_pk = b.tac_abacctcode_pk
                 and b.tac_abacctcode_pk is not null
                 and a.tac_abpl_pk = p_tac_abpl_pk
                 and tac_kafinanceform_pk = p_tac_kafinanceform_pk)
   loop
      begin
         select max (end_bl)
           into l_value
           from tac_tmpplbal
          where     tac_abacctcode_pk = c1.tac_abacctcode_pk
                and tac_abpl_pk = p_tac_abpl_pk;
      exception
         when no_data_found
         then
            l_value := 0;
      end;

      if (l_value is null)
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   if l_formular is not null
   then
      if length (trim (l_formular)) > 1
      then
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
            into l_rtn_value;
      end if;
   end if;

   return nvl (l_rtn_value, 0);
exception
   when others
   then
      raise_application_error (-20001, l_formular || sqlerrm);
end ac_sf_formular_calculate;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_FORMULAR_EXECUTE;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_formular_execute (
   p_formular      IN VARCHAR,
   p_date_type        VARCHAR,
   p_column_type      VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/11/2008   Phan Huy Quoc My       1. Created this function.
   ******************************************************************************/
   l_tmp         VARCHAR (5000) := TRIM (p_formular);
   l_len         NUMBER := 0;
   l_cnt         NUMBER := 0;
   l_formular    VARCHAR (1000) := '';
   l_ac_cd       VARCHAR (1000) := '';
   l_value       VARCHAR (1000) := '';
   l_buf         VARCHAR (1) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
   SELECT LENGTH (l_tmp) INTO l_len FROM DUAL;

   l_tmp := '(' || l_tmp || ')';
   l_len := l_len + 2;

   IF (l_len < 8)
   THEN
      /* Toi thieu co 6 ky tu cua tai khoan */
      l_formular := 'ERROR';
   END IF;

   FOR i IN 1 .. l_len
   LOOP
      l_buf := SUBSTR (l_tmp, i, 1);

      SELECT INSTR ('0123456789', l_buf) INTO l_cnt FROM DUAL;

      IF (l_cnt = 0)
      THEN                                          /*  Khong phai la ky so */
         l_formular := l_formular || l_value;
         l_formular := l_formular || l_buf;
         l_value := '';
      ELSE
         l_ac_cd := l_ac_cd || l_buf;

         IF (LENGTH (l_ac_cd) = 6)
         THEN
            IF p_date_type = 'M'
            THEN
               IF p_column_type = 'THIS'
               THEN
                  SELECT SUM (m_ps)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'LAST'
               THEN
                  SELECT SUM (m_ps1)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'ACC'
               THEN
                  SELECT SUM (m_acc)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'ACC1'
               THEN
                  SELECT SUM (m_acc1)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'BAL'
               THEN
                  SELECT SUM (m_bal)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'BAL1'
               THEN
                  SELECT SUM (m_bal1)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               END IF;
            ELSIF p_date_type = 'Q'
            THEN
               IF p_column_type = 'THIS'
               THEN
                  SELECT SUM (q_ps)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'LAST'
               THEN
                  SELECT SUM (q_ps1)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'ACC'
               THEN
                  SELECT SUM (q_acc)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'ACC1'
               THEN
                  SELECT SUM (q_acc1)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               END IF;
            ELSIF p_date_type = 'Y'
            THEN
               IF p_column_type = 'THIS'
               THEN
                  SELECT SUM (y_ps)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'LAST'
               THEN
                  SELECT SUM (y_ps1)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'BAL'
               THEN
                  SELECT SUM (y_bal)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               ELSIF p_column_type = 'BAL1'
               THEN
                  SELECT SUM (y_bal1)
                    INTO l_value
                    FROM tac_fsqd15
                   WHERE ac_cd = l_ac_cd;
               END IF;
            END IF;

            IF (l_value IS NULL OR l_value = '')
            THEN
               l_value := 0;
            END IF;

            l_ac_cd := '';
         END IF;
      END IF;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
      INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_FORMULAR_EXECUTE_21_36;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_formular_execute_21_36 (
   p_formular       VARCHAR,
   p_date_type      VARCHAR,
   p_column_type    VARCHAR,
   p_balabce        VARCHAR,
   p_header         VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        09-Jun-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    VARCHAR (4000) := '';
   l_value       VARCHAR (4000) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
--   FOR c1
--      IN (SELECT SUBSTR (COLUMN_VALUE, 0, 1) col1,
--                 SUBSTR (COLUMN_VALUE, 2, LENGTH (COLUMN_VALUE) - 1) ac_cd
--            FROM TABLE (split (p_formular, ','))
--           WHERE COLUMN_VALUE IS NOT NULL)
--   LOOP
--      CASE
--         WHEN p_column_type = 'THIS'
--         THEN
--            CASE
--               WHEN p_balabce = 'L' OR p_balabce = 'R' OR p_balabce = 'B'
--               THEN
--                    SELECT DECODE (
--                              p_balabce,
--                              'L', SUM (dr_ps),
--                              'R', SUM (cr_ps),
--                              DECODE (
--                                 dc,
--                                 1, SUM (NVL (dr_bl, 0)) - SUM (NVL (dr_op, 0)),
--                                 SUM (NVL (cr_bl, 0)) - SUM (NVL (cr_op, 0))))
--                      INTO l_value
--                      FROM tac_cf_indirect
--                     WHERE ac_cd = c1.ac_cd
--                  GROUP BY dc;
--               WHEN p_balabce = 'C'
--               THEN
--                  SELECT 0
--                    INTO l_value
--                    FROM tac_cf_indirect
--                   WHERE ac_cd = c1.ac_cd;
--            END CASE;
--         WHEN p_column_type = 'LAST'
--         THEN
--              SELECT DECODE (
--                        p_balabce,
--                        'L', SUM (dr_ps1),
--                        'R', SUM (cr_ps1),
--                        DECODE (
--                           dc,
--                           1, SUM (NVL (dr_bl1, 0)) - SUM (NVL (dr_op1, 0)),
--                           SUM (NVL (cr_bl1, 0)) - SUM (NVL (cr_op1, 0))))
--                INTO l_value
--                FROM tac_cf_indirect
--               WHERE ac_cd = c1.ac_cd
--            GROUP BY dc;
--         WHEN p_column_type = 'ACC'
--         THEN
--            SELECT DECODE (p_balabce, 'L', SUM (dr_ps), SUM (cr_ps))
--              INTO l_value
--              FROM tac_cf_indirect
--             WHERE ac_cd = c1.ac_cd;
--      END CASE;
--
--      l_value := NVL (c1.col1, '+') || '(' || l_value || ')';
--
--
--      l_formular := l_formular || l_value;
--   END LOOP;


   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
      INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_ACCD;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_ACCD
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK             = p_pk
     --AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_ACCDLOCAL_BY_ACPK;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_get_accdlocal_by_acpk (
   p_tac_abacctcode_pk    VARCHAR2,
   p_compk                VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (50);
BEGIN
   l_rtn_value := '';

   SELECT ac_cd
     INTO l_rtn_value
     FROM tac_localcode
    WHERE pk =
             (SELECT tac_localcode_pk
                FROM tac_abacctcode
               WHERE     del_if = 0
                     AND pk = p_tac_abacctcode_pk
                    );

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_ACCD_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_ACCD_1
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK             = p_pk
     --AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_ACNM;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_ACNM(
                                            p_pk        VARCHAR2,
                                            p_compk     VARCHAR2,
                                            p_lang    VARCHAR2
                                        ) 
RETURN VARCHAR2
IS
  l_rtn_value VARCHAR2(255);
BEGIN

  l_rtn_value := '';

  SELECT decode(p_lang,'ENG',AC_NM,'VIE',ac_lnm,'KOR',ac_knm)
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK              = p_pk
     --AND TCO_COMPANY_PK  = p_compk
     AND DEL_IF          = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_AGTRITEM;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_AGTRITEM
  (
   v_trdpk        in       NUMBER      -- Trd_Pk
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
       SELECT '[' || CCY || ',' || DECODE(CCY,'VND',TO_CHAR(TR_AMT,'999,999,999,999,999'),TO_CHAR(TR_AMT,'999,999,999,999,990.99')) ||']' AS DATA1
     FROM TAC_HGTRD
         WHERE PK= v_trdpk
        AND CCY != 'KRW'
    UNION ALL
       SELECT '[' || B.PARTNER_NAME ||']' AS DATA1
         FROM TAC_HGTRD A,  TCO_BUSPARTNER B
        WHERE A.PK= v_trdpk
            AND A.TCO_BUSPARTNER_PK = B.PK
    

            
    UNION ALL
    SELECT '[' || A.ITEM || ']'AS DATA1
      FROM TAC_HGTRDITEM a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_HGTRD_PK = v_trdpk
       AND B.TAC_ABITEM_ALIAS  = 'EMPLOYEE NAME'
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 
    UNION ALL   
    SELECT '[Project : ' ||B.PLC_CD || ' ' || B.PLC_NM || ']' AS DATA1
     FROM TAC_HGTRD A, TAC_ABCENTER B
    WHERE A.PK= v_trdpk
        AND A.TAC_ABPLCENTER_PK  = B.PK;
      
   /* UNION ALL
    SELECT '[' || b.TAC_ABITEM_ALIAS ||' : ' || DECODE(A.ITEM_NM,NULL,A.ITEM,A.ITEM_NM) || ']'AS DATA1
      FROM tac_bgtrditem a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_BGTRD_PK = v_trdpk
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 ;
       
           UNION ALL
       SELECT '[' || B.BG_DEPTNM ||']' AS DATA1
         FROM TAC_HGTRD A, TAC_EBDEPT B
        WHERE A.PK= v_trdpk
             AND A.TAC_ABBUDGET_PK = B.PK
             
       
       */


BEGIN


FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_AGTRITEM1;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_get_agtritem1 (v_trdpk IN NUMBER    -- Trd_Pk
                                                                 )
   RETURN VARCHAR2
IS
   /**=================================================================================
   * Function     SF_A_GET_AGTRITEM
   * Description
   * Return
   * Writer        Tuyen
   * Create Date   2003-11-17
   =================================================================================*/

   lsvitem   VARCHAR2 (1000) := NULL;

   CURSOR item_cus
   IS
      SELECT '[' || ccy || ','
             || DECODE (ccy,
                        'VND', TO_CHAR (tr_amt, '999,999,999,999,999'),
                        TO_CHAR (tr_amt, '999,999,999,999,990.99'))
             || CHR (10)
             || CHR (13)
             || ',Ex.Rate: '
             || TO_CHAR (tr_rate, '999,999')
             || ']'
                AS data1
        FROM tac_hgtrd
       WHERE pk = v_trdpk AND ccy != 'KRW'
      UNION ALL
      SELECT '[' || b.partner_name || ']' AS data1
        FROM tac_hgtrd a, tco_buspartner b
       WHERE a.pk = v_trdpk AND a.tco_buspartner_pk = b.pk
      UNION ALL
      SELECT '[' || a.item || ' ' || a.item_nm || ']' AS data1
        FROM tac_hgtrditem a, tac_abacctitem b
       WHERE     tac_abacctitem_pk = b.pk
             AND tac_hgtrd_pk = v_trdpk --   AND B.TAC_ABITEM_ALIAS  = 'EMPLOYEE NAME'
             AND b.prn_chk = 'Y'
             AND a.del_if = 0
             AND b.del_if = 0
      UNION ALL
      SELECT '[Project : ' || b.plc_cd || ' ' || b.plc_nm || ']' AS data1
        FROM tac_hgtrd a, tac_abcenter b
       WHERE a.pk = v_trdpk AND a.tac_abpl_pk = b.pk;
/* UNION ALL
 SELECT '[' || b.TAC_ABITEM_ALIAS ||' : ' || DECODE(A.ITEM_NM,NULL,A.ITEM,A.ITEM_NM) || ']'AS DATA1
   FROM tac_bgtrditem a, TAC_ABACCTITEM b
  where TAC_ABACCTITEM_PK = b.PK
    AND TAC_BGTRD_PK = v_trdpk
    AND a.DEL_IF = 0
    AND b.DEL_IF = 0 ;

        UNION ALL
    SELECT '[' || B.BG_DEPTNM ||']' AS DATA1
      FROM TAC_HGTRD A, TAC_EBDEPT B
     WHERE A.PK= v_trdpk
          AND A.TAC_ABBUDGET_PK = B.PK


    */


BEGIN
   FOR rec IN item_cus
   LOOP
      lsvitem := lsvitem || rec.data1;
   END LOOP;



   RETURN lsvitem;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_BOOKFORMAT;

CREATE OR REPLACE FUNCTION HPDQ.AC_sf_get_bookformat (p_grp varchar2)
   return varchar2
is
   
   v_rpt_code   varchar2 (50);
begin
   select   b.code_nm
       into v_rpt_code
       from tac_commcode_master a, tac_commcode_detail b
      where a.pk = b.tac_commcode_master_pk and a.id = p_grp and a.del_if = 0 and b.del_if = 0
      AND def_yn='Y'
   order by code, b.code_nm;

   return v_rpt_code;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_COLORNAME;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_get_colorname (p_codecolor VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (20);
BEGIN
   l_rtn_value := '';

     SELECT a.code_nm
       INTO l_rtn_value
       FROM tco_abcode a, tco_abcodegrp b
      WHERE     a.del_if = 0
            AND b.del_if = 0
            AND a.tco_abcodegrp_pk = b.pk
            AND b.id = 'ACAB0240'
            AND a.use_if = 1
            AND a.code = p_codecolor
   ORDER BY a.code_nm;

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_COMMCODE_NM;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_get_commcode_nm (v_group   IN VARCHAR2,
                                                  v_code    IN VARCHAR2)
   RETURN VARCHAR2
IS
   /*=================================================================================
   * Function      SF_GET_COMMCODE_NM
   * Description   Get Account Code depend on group and code
   * Return        CODE, TEXT
   * Create Date   03 Oct 2005

   =================================================================================*/
   w_string   VARCHAR2 (1000);
BEGIN
   SELECT RTRIM (a.code_nm) AS code
     INTO w_string
     FROM tco_abcode a, tco_abcodegrp b
    WHERE     a.del_if = 0
          AND b.del_if = 0
          AND a.tco_abcodegrp_pk = b.pk
          AND b.id = v_group
          AND a.code = v_code
          AND a.use_if = 1;

   RETURN w_string;
EXCEPTION
   WHEN OTHERS
   THEN
      --RETURN '';
      raise_application_error (-20001, SQLERRM);
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_COMMONCODE_ORD;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_COMMONCODE_ord
                                    (
                                        p_grp       VARCHAR2
                                    )
RETURN VARCHAR2
IS
    
    v_code          VARCHAR2(20);
    v_name          VARCHAR2(100);
    v_rpt_code      VARCHAR2(3000);
    
    CURSOR C1 IS
        SELECT CODE, B.CODE_NM
          FROM TAC_COMMCODE_MASTER A, TAC_COMMCODE_DETAIL B
         WHERE A.PK     = B.TAC_COMMCODE_MASTER_PK
           AND A.ID     = p_grp
           AND A.DEL_IF = 0
           AND B.DEL_IF = 0
         ORDER BY ord;
         
BEGIN

    OPEN C1;
    LOOP
      FETCH C1 INTO v_code, v_name;
      EXIT WHEN C1%NOTFOUND;
          v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
    END LOOP;

    RETURN v_rpt_code;

EXCEPTION
    WHEN OTHERS THEN RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_DRCRNUM;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_DRCRNUM
    (
        p_comp          VARCHAR2,
        p_acc_pk        VARCHAR2
    ) 
    return  number
is
  lsvreturn   number := 1;
begin
  SELECT DECODE(UPPER(DRCR_TYPE),'C',-1,1)
      INTO lsvreturn
      FROM tac_abacctcode
     WHERE del_if = 0 
       AND tco_company_pk = p_comp
       AND pk = p_acc_pk;
  return(lsvreturn);
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_DRCRTYPE;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_DRCRTYPE
    (
        p_comp          VARCHAR2,
        p_acc_pk        VARCHAR2
    ) 
    return  Varchar2
is
  lsvreturn   VARCHAR2 (1) := NULL;
begin
  SELECT drcr_type
      INTO lsvreturn
      FROM tac_abacctcode
     WHERE del_if = 0 
       AND tco_company_pk = p_comp
       AND pk = p_acc_pk;
  return(lsvreturn);
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_FONT_STYPE;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_get_font_stype (p_codefont VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (10);
BEGIN
   l_rtn_value := '';

   SELECT a.code_nm
     INTO l_rtn_value
     FROM tco_abcode a, tco_abcodegrp b
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tco_abcodegrp_pk = b.pk
      AND b.ID = 'ACAB0270'
      AND a.use_if = 1
      AND a.code = p_codefont;

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_FORMAT;

CREATE OR REPLACE FUNCTION HPDQ.ac_SF_GET_FORMAT
(
    v_grp_code                IN      VARCHAR2  --ACBG0040

)
RETURN  VARCHAR2
  IS
/*=================================================================================
* Function      SF_GET_FORMAT
* Description   get format to string number
* Return        CODE, TEXT
* Create Date   2004/06/10
* Writer        Tuyen
=================================================================================*/
w_string            VARCHAR2(100);

BEGIN

      SELECT A.CODE_NM
        INTO w_string
        FROM  TCO_ABCODE A, TCO_ABCODEGRP B
       WHERE A.DEL_IF = 0
         AND B.DEL_IF = 0
         AND A.TCO_ABCODEGRP_PK = B.PK
         AND B.ID = v_grp_code
         AND A.USE_IF = 1
         AND DEF_YN = 'Y';


RETURN    w_string;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_GROUPNAME;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_get_groupname (p_groupcode VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (15);
BEGIN
   l_rtn_value := '';

   SELECT a.code_nm
     INTO l_rtn_value
     FROM tco_abcode a, tco_abcodegrp b
    WHERE     a.del_if = 0
          AND b.del_if = 0
          AND a.tco_abcodegrp_pk = b.pk
          AND b.id = 'ACAB0250'
          AND a.use_if = 1
          AND a.code = p_groupcode;

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_LASTCLOSEMM2;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_get_lastclosemm2 (
   p_yyyymmdd          VARCHAR,
   p_tco_company_pk    VARCHAR)
   RETURN VARCHAR
IS
   l_std_ymd   VARCHAR (8);
BEGIN
   SELECT MAX (std_ym)
     INTO l_std_ymd
     FROM tac_icmmclose
    WHERE DECODE (p_tco_company_pk, 0, 2, tco_company_pk) =
             DECODE (p_tco_company_pk, 0, 2, p_tco_company_pk)
          AND close_yn = 'Y'
          AND del_if = 0;

   IF l_std_ymd IS NULL
   THEN
      l_std_ymd := '19000131';
   ELSE
      l_std_ymd := l_std_ymd || '01';
   END IF;

   SELECT TO_CHAR (LAST_DAY (TO_DATE (l_std_ymd, 'yyyymmdd')), 'yyyymmdd')
     INTO l_std_ymd
     FROM DUAL;

   RETURN l_std_ymd;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_LEFTRIGHT;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_get_leftright (p_codeleftright VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (30);
BEGIN
   l_rtn_value := '';

   SELECT a.code_nm
     INTO l_rtn_value
     FROM tco_abcode a,tco_abcodegrp b
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tco_abcodegrp_pk = b.pk
      AND b.ID = 'ACBG0030'
      AND a.use_if = 1
      AND a.code = p_codeleftright;

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_LEVELNAME;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_LEVELNAME (p_levelcode VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (10);
BEGIN
   l_rtn_value := '';

   SELECT a.code_nm
     INTO l_rtn_value
     FROM tco_abcode a, tco_abcodegrp b
    WHERE     a.del_if = 0
          AND b.del_if = 0
          AND a.tco_abcodegrp_pk = b.pk
          AND b.ID = 'ACAB0020'
          AND a.use_if = 1
          AND a.code = p_levelcode;

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_PLCENTER;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_PLCENTER (v_plcenter_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
/**=================================================================================
* Function     SF_GET_CONTROLITEM
* Description
* Return
* Writer        Kiet
* Create Date   2008-06-13
=================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;

BEGIN
   l_rtn_value :='';
    SELECT PL_NM INTO   l_rtn_value
      FROM TAC_ABPL a, tac_abplcenter b
     WHERE a.PK     = b.tac_abpl_pk
       AND a.DEL_IF = 0
       and b.pk = v_plcenter_pk;
       
   RETURN  l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_PL_FROM_PLCD;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_get_pl_from_plcd (v_plcenter_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
   /**=================================================================================
   * Function     SF_GET_CONTROLITEM
   * Description
   * Return
   * Writer        Kiet
   * Create Date   2008-06-13
   =================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;
BEGIN
   l_rtn_value := '';

   SELECT pl_cd
     INTO l_rtn_value
     FROM tac_abpl a, tac_abplcenter b
    WHERE a.pk = b.tac_abpl_pk AND a.del_if = 0 AND b.pk = v_plcenter_pk;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_PL_FROM_PLCENTER;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_get_pl_from_plcenter (
   v_plcenter_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
   /**=================================================================================
   * Function     SF_GET_CONTROLITEM
   * Description
   * Return
   * Writer        Kiet
   * Create Date   2008-06-13
   =================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;
BEGIN
   l_rtn_value := '';

   SELECT pl_nm
     INTO l_rtn_value
     FROM tac_abpl a, tac_abplcenter b
    WHERE a.pk = b.tac_abpl_pk AND a.del_if = 0 AND b.pk = v_plcenter_pk;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GET_PRIORITY;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GET_PRIORITY(p_chr VARCHAR2)
RETURN NUMBER
IS
BEGIN
    IF (p_chr = '(') THEN
        RETURN -1;
    ELSIF (p_chr = ')') THEN
        RETURN 0;
    ELSIF (p_chr IN ('+', '-')) THEN    
        RETURN 1;
    ELSIF (p_chr IN ('*', '/')) THEN
        RETURN 2;
    END IF;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GFOS00250_1;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_gfos00250_1(
   p_tac_kafinanceform_pk      in   varchar
 , p_column_type        varchar
 , p_kind               varchar)
   return number
is
/******************************************************************************
   NAME:       SF_GFKA00210_2
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        28-Oct-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar2(32767) := '';
   l_value varchar2(2000) := '';
   l_rtn_value number;
   l_status varchar(300);
begin
   for c1  in (   select a.*, b.operator_
                      from tac_tmptrialbal a, tac_kafinanceformd1 b
                     where b.del_if = 0 and a.ac_cd = b.ac_cd
                          and b.tac_abacctcode_pk is not null
                           and b.pk in
                                  (    select pk
                                         from tac_kafinanceformd1 a
                                        where a.del_if = 0
                                      start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk
                                      and del_if = 0
                                      connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk
                                       and del_if = 0
                                   )
                 )
   loop
      case
         when p_column_type = 'Closing'
         then

            begin
                select decode (drcr_type, 1, nvl (dr_op, 0), nvl (cr_op, 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
            when no_data_found
            then
              l_value := 0;
            end;

         when p_column_type = 'Openning'
         then
         begin
               select  decode(drcr_type, 1, nvl(dr_bl , 0),  nvl(cr_bl , 0))
                 into l_value
                 from tac_tmptrialbal
            where ac_cd = c1.ac_cd;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;

      end case;

            if (l_value is null or l_value = '')
            then
l_value := 0;
            else
l_value := nvl(c1.operator_, '+') || '(' || l_value || ')';
            end if;

l_formular := l_formular || l_value;
   end loop;

execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GFQC00030;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_gfqc00030 (p_contract_no    IN VARCHAR2,
                                            p_contract_ccy   IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_return   VARCHAR2 (100);
/******************************************************************************
   NAME:       SF_gfqc00030
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
     SELECT TO_CHAR (
               DECODE (p_contract_ccy,
                       'USD', SUM (NVL (adv_amt, 0)),
                       SUM (NVL (adv_famt, 0))),
               DECODE (tr_ccy,
                       'USD', '999,999,999,999,999,999',
                       '999,999,999,990.99'))
               adv_famt
       INTO l_return
       --             TO_CHAR(DECODE(:P_CONTRACT_CCY,'USD',SUM(DEDUCT_AMT),SUM(DEDUCT_FAMT)),DECODE(TR_CCY,'USD','999,999,999,999,999,999','999,999,999,990.99')) DEDUCT_AMT,
       --             DECODE(:P_CONTRACT_CCY,'USD',NVL(SUM(ADV_AMT),0),NVL(SUM(ADV_FAMT),0)) ADV,
       --             DECODE(:P_CONTRACT_CCY,'USD',NVL(SUM(DEDUCT_AMT),0),NVL(SUM(DEDUCT_FAMT),0)) DEDUCT
       FROM ( -------Get Advance transaction amount ----------------------------
             SELECT                                            --  H.PK APSEQ,
                     --    TO_CHAR (H.TR_DATE, 'YYYYMMDD') SIGN_DATE,
                     --    H.REMARK TR_REMARK,
                     r.tr_amt adv_famt, r.tr_bookamt adv_amt, --     0 DEDUCT_FAMT,
                                                              --     0 DEDUCT_AMT,
                                                              d.ccy tr_ccy
                FROM tac_hgtrh h,
                     tac_hgtrd d,
                     tac_hgtrd_ref r,
                     tac_hgtrditem i
               WHERE                                    --h.tco_company_pk = 1
                    h    .pk = d.tac_hgtrh_pk
                     --             AND TO_CHAR (h.tr_date, 'YYYYMMDD') > p_from
                     --             AND TO_CHAR (h.tr_date, 'YYYYMMDD') <=
                     --                                                 TO_CHAR (SYSDATE, 'YYYYMMDD')
                     AND (i.item LIKE TRIM (UPPER (p_contract_no)))
                     AND h.tr_status IN (0, 2)
                     AND d.pk = r.tac_hgtrd_pk
                     AND d.pk = i.tac_hgtrd_pk
                     AND r.drcr_type = 'D'
                     AND (r.tac_abacctcode_pk_dr IN
                             (SELECT tac_abacctcode_pk
                                FROM tac_abtracgrpd
                               WHERE del_if = 0
                                     AND tac_abtracgrp_pk =
                                            (SELECT pk
                                               FROM tac_abtracgrp
                                              WHERE del_if = 0
                                                    AND ac_grp = 'ATVIFRS_DR')))
                     AND (r.tac_abacctcode_pk_cr IN
                             (SELECT tac_abacctcode_pk
                                FROM tac_abtracgrpd
                               WHERE del_if = 0
                                     AND tac_abtracgrp_pk =
                                            (SELECT pk
                                               FROM tac_abtracgrp
                                              WHERE del_if = 0
                                                    AND ac_grp = 'ATVIFRS_CR')))
                     AND h.del_if = 0
                     AND d.del_if = 0
                     AND r.del_if = 0
                     AND i.del_if = 0)
   GROUP BY tr_ccy;

   RETURN l_return;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_GFQC00030_PAYABLE;

CREATE OR REPLACE FUNCTION HPDQ.AC_SF_GFQC00030_PAYABLE (
   p_contract_no IN VARCHAR2)
   RETURN NUMBER
IS
   l_ap_amt   VARCHAR2 (50);
/******************************************************************************
   NAME:       sf_gfqc00030_payable
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/24/2010   Vo Hoang Long       1. Created this function.
******************************************************************************/
BEGIN
   SELECT                                                           --a.apseq,
                                                                --  a.tr_date,
                                                             --   a.tr_remark,
          SUM (a.tr_famt) ap_amt
     -- SUM (b.pay_famt) pay_amt
     --   (TO_CHAR (TO_DATE (b.pay_date, 'YYYYMMDD'), 'DD/MM/YYYY')
     --  ) pay_date
     INTO l_ap_amt
     FROM (SELECT t.pk appk,
                  h.pk apseq,
                  t.tr_date,
                  h.sign_date appr_date,
                  d.remark tr_remark,
                  NVL (t.tr_famt, 0) tr_famt,
                  NVL (t.tr_amt, 0) tr_amt
             FROM tfn_eppay t,
                  tac_hgtrh h,
                  tac_hgtrd d,
                  tac_hgtrditem i
            WHERE     d.tac_hgtrh_pk = h.pk
                  AND t.tac_hgtrd_pk = d.pk
                  AND t.del_if = 0
                  AND h.del_if = 0
                  AND d.del_if = 0
                  AND i.del_if = 0
                  AND d.pk = i.tac_hgtrd_pk
                  AND (i.item = p_contract_no OR p_contract_no IS NULL)) a,
          (SELECT h.pk,
                  NVL (t.tr_famt, 0),
                  NVL (t.tr_amt, 0),
                  NVL (e.pay_famt, 0) pay_famt,
                  NVL (e.pay_amt, 0) pay_amt,
                  t.pay_date,
                  t.pk paypk
             FROM tfn_eppay t,
                  tac_hgtrh h,
                  tac_hgtrd d,
                  tfn_eppaytr e,
                  tac_hgtrditem i
            WHERE     d.tac_hgtrh_pk = h.pk
                  AND t.tac_hgtrd_pk = d.pk
                  AND t.pk = e.tfn_eppay_pk(+)
                  AND t.del_if = 0
                  AND h.del_if = 0
                  AND d.del_if = 0
                  AND e.del_if(+) = 0
                  AND i.del_if = 0
                  AND d.pk = i.tac_hgtrd_pk
                  AND (i.item = p_contract_no OR p_contract_no IS NULL)) b
    WHERE a.appk = b.paypk(+);

   RETURN l_ap_amt;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SPLIT;

CREATE OR REPLACE FUNCTION HPDQ.ac_split
(
    p_list varchar2,
    p_del varchar2 := ','
) return SPLIT_TBL pipelined
is
    l_idx    pls_integer;
    l_list    varchar2(32767) := p_list;

    l_value    varchar2(32767):='';
begin
    loop
        l_idx := instr(l_list,p_del);
        if l_idx > 0 then
            pipe row(substr(l_list,1,l_idx-1));
            l_list := substr(l_list,l_idx+length(p_del));

        else
            pipe row(l_list);
            exit;
        end if;
    end loop;
    return;
end ac_split;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SUM_FROM_POLISH;

CREATE OR REPLACE FUNCTION HPDQ.AC_SUM_FROM_POLISH(v_formular VARCHAR2)
RETURN VARCHAR2
IS
    v_tmp       VARCHAR2(2000);
    last_str    VARCHAR2(2000);
    v_one       VARCHAR2(1);
    v_next      VARCHAR2(1);
    
    v_num       NUMBER := 1;
    v_stack     VARCHAR2(2000) := '';
    v_vt        NUMBER;
    v_pt1       VARCHAR2(200);
    v_pt2       VARCHAR2(200);
    v_pt3       VARCHAR2(100);
BEGIN
    v_tmp := v_formular || ';';
    WHILE (v_num <= length(v_formular)) LOOP
        
        SELECT SUBSTR(v_tmp, 1, 1) INTO v_one
          FROM DUAL;
        
        SELECT SUBSTR(v_tmp, 2, 1) INTO v_next
          FROM DUAL;
        
        IF v_one IN ('+', '-', '*', '/') AND (v_next = ';') THEN
            SELECT INSTR(v_stack, ';', -2) INTO v_vt
              FROM DUAL;
              
            SELECT SUBSTR(v_stack, v_vt + 1 , length(v_stack) - (v_vt + 1)) INTO v_pt1
              FROM DUAL;
            
            SELECT SUBSTR(v_stack, 1, v_vt) INTO v_stack
              FROM DUAL;
            
            SELECT INSTR(v_stack, ';', -2) INTO v_vt
              FROM DUAL;
            
            SELECT SUBSTR(v_stack, v_vt + 1, length(v_stack) - (v_vt + 1)) INTO v_pt2
              FROM DUAL;
            
            SELECT SUBSTR(v_stack, 1, v_vt) INTO v_stack
              FROM DUAL;
            
            IF (v_one = '+') THEN
                SELECT TO_CHAR(NVL(TO_NUMBER(v_pt2), 0) + NVL(TO_NUMBER(v_pt1), 0)) INTO v_pt3
                  FROM DUAL;
            ELSIF (v_one = '-') THEN
                SELECT TO_CHAR(NVL(TO_NUMBER(v_pt2), 0) - NVL(TO_NUMBER(v_pt1), 0)) INTO v_pt3
                  FROM DUAL;        
            ELSIF (v_one = '*') THEN
                SELECT TO_CHAR(NVL(TO_NUMBER(v_pt2), 0) * NVL(TO_NUMBER(v_pt1), 0)) INTO v_pt3
                  FROM DUAL;        
            ELSIF (v_one = '/') THEN
                SELECT TO_CHAR(NVL(TO_NUMBER(v_pt2), 0) / NVL(TO_NUMBER(v_pt1), 0)) INTO v_pt3
                  FROM DUAL;
            END IF;
            v_stack := v_stack || v_pt3;
            
        ELSE
            v_stack  := v_stack || v_one;
        END IF;
        v_num    := v_num + 1;
        last_str := SUBSTR(v_formular || ';', v_num, Length(v_formular)+1);
        v_tmp    := last_str;
    END LOOP;
    
    RETURN v_stack;      
       
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.CHECK_VALUE_EXIST;

CREATE OR REPLACE FUNCTION HPDQ.CHECK_VALUE_EXIST
(
    P_TABLE_NM      VARCHAR2
    , P_FIELD_NM    VARCHAR2
    , P_VALUE       VARCHAR2
    , ADV_FILTER    VARCHAR2
)
RETURN NUMBER IS
L_RES NUMBER;
L_TMP STRING(1000);
/******************************************************************************
   NAME:       CHECK_VALUE_EXIST
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/26/2008          1. Created this function.

******************************************************************************/
BEGIN
   L_RES := 0;

   L_TMP := 'SELECT COUNT(*) FROM ' || P_TABLE_NM || ' WHERE DEL_IF = 0 AND ' || P_FIELD_NM || ' = ' || '''' || P_VALUE || '''';

   IF (ADV_FILTER IS NOT NULL ) THEN
        L_TMP := L_TMP || ' ' || ADV_FILTER;
   END IF;

   EXECUTE IMMEDIATE L_TMP  INTO L_RES;

   RETURN L_RES;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN 10;
     WHEN OTHERS THEN
        RAISE;
       RETURN 11;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.FN_CONVERT_TO_VN;

CREATE OR REPLACE FUNCTION HPDQ.FN_CONVERT_TO_VN
/*
   Creator:
   Date:
   Des: function chuyển đổi kí tự có dấu thành không dấu
*/
( 
     STRINPUT IN NVARCHAR2
)
RETURN NVARCHAR2
IS STRCONVERT NVARCHAR2(32527);

BEGIN
STRCONVERT := TRANSLATE(
                           STRINPUT,
                           'áàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ',
                           'aaaaaaaaaaaaaaaaadeeeeeeeeeeeiiiiiooooooooooooooooouuuuuuuuuuuyyyyyAAAAAAAAAAAAAAAAADEEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOOOUUUUUUUUUUUYYYYY'
                         );
RETURN STRCONVERT;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.FN_SALARY_GROUP_NAME;

CREATE OR REPLACE FUNCTION HPDQ.fn_salary_group_name(l_pk varchar) return varchar2
  is
 temp sys_refcursor;
 name1 varchar2(10) :='';
 kq varchar2(100):='';
 n number:=0; 
 begin
      open temp for 
         select a.KIND_NM from  thr_table_salary_posli  a
        connect by prior a.p_pk=a.pk
        start with a.pk =l_pk
         ORDER  BY A.PK;
    loop 
     fetch temp into name1;
     exit when temp%notfound=true;
     if n=0 then
     n:=n+1;
     kq:=name1;
     else
     kq:=kq||'-'||name1;
     end if;
    end loop;         
 
    close temp;
    return kq;
 end fn_salary_group_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_BLOB_TO_CLOB;

CREATE OR REPLACE FUNCTION HPDQ.F_BLOB_to_CLOB(B BLOB) 
return clob is 
  c clob;
  n number;
begin 
  if (b is null) then 
    return null;
  end if;
  if (length(b)=0) then
    return empty_clob(); 
  end if;
  dbms_lob.createtemporary(c,true);
  n:=1;
  while (n+32767<=length(b)) loop
    dbms_lob.writeappend(c,32767,utl_raw.cast_to_varchar2(dbms_lob.substr(b,32767,n)));
    n:=n+32767;
  end loop;
  dbms_lob.writeappend(c,length(b)-n+1,utl_raw.cast_to_varchar2(dbms_lob.substr(b,length(b)-n+1,n)));
  return c;
end;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_BO_DAU;

CREATE OR REPLACE FUNCTION HPDQ.F_BO_DAU(
P_STR IN VARCHAR2

)RETURN VARCHAR IS
tmp  varchar(1000):='';
k1 NUMBER;
k2 NUMBER;
tmp2  varchar(1000):='';
tmp3  varchar(1000):='';
n number(10):=1;
flag number(1):=0;
TYPE Char_Array IS TABLE OF VARCHAR2(200) INDEX BY BINARY_INTEGER;
c1 Char_Array;
c2 Char_Array;
--s1 varchar2(1000):='A´A`A¿A~A¿ÂÂ¿Â´Â`Â¿Â~AA´A`A¿A~A¿E´E¿E~E¿E`ÊÊ´Ê`Ê¿Ê~ÊI´I`I¿I~I¿¿O´O`O¿O~O¿ÔÔ´Ô`Ô¿Ô~Ô¿OO`O¿O~O¿UU´U`U¿U~U¿U´U`U¿U~U¿Y´Y`Y¿Y~Y¿Ð';
--s2 varchar2(1000):='AAAAAAAAAAAAAAAAAEEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOOOUUUUUUUUUUUYYYYYD';
l_flag_exist boolean:=FALSE;
    l_cur_rec number;
    l_cur sys_refcursor;


BEGIN


 OPEN l_cur FOR
                SELECT A.MA_ACCII,A.MA_ACCII2
                FROM THR_ASCII_CONVERT A;
                
 LOOP
                FETCH l_cur INTO c1(n),c2(n);
                EXIT WHEN l_cur%NOTFOUND; 
                n:=n+1;          
END LOOP;          
CLOSE l_cur;                     


tmp2:=upper(P_STR);


 FOR i IN 1..length(tmp2) LOOP
            tmp3:=substr(tmp2,i,1);
             k2:=ascii(substr(tmp2,i,1));
             FOR k IN 1..n-1 LOOP
                    IF k2=c1(k) then
                            tmp:=tmp||chr(c2(k)); 
                            flag:=1;
                    END IF;       
             END LOOP;
             IF  flag=1 THEN
                    flag:=0;
             ELSE
                   tmp:=tmp||substr(tmp2,i,1);                
             END IF;
             
 END LOOP;    
 
 return tmp;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_BO_DAU;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_CDECODEPWD;

CREATE OR REPLACE FUNCTION HPDQ.F_CDecodePwd
(
    vsEncPwd    IN    STRING    -- >OH#H-5H :q9P9xH#
)
RETURN VARCHAR2 IS vsDecPwd VARCHAR2(100);

/*-----------------------------------------------------------

@[<:@Z : @L;sHF
8q@{   : :q9P9xH# decodeGT<v
;}<:@O : 20033b 3?y 5@O
>K0m8.5k: Croquis?! 18Gv5G>n @V4B DECODE C++GT<v8 Fucntion@87N @|H/

<vA$@Z4B <vA$@G 8q@{@; 1b@TGO=C?@

<vA$@Z :
<vA$@O :


----------------------------------------------------------*/


    TYPE NumArray IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    A            NumArray;
    li            NUMBER;
    liLen        NUMBER;        -- :q9P9xH# 1f@L
    liTmp        NUMBER;
    lsVar       STRING(32); ---@S=C:/<v
    lsTmp        STRING(32);    -- >OH#H- @S=C :/<v

-----
BEGIN
-----
    A(1) :=  88; A(5) :=  23; A(9)  :=  19; A(13) :=  23; A(17)  :=  29;
    A(2) :=  64; A(6) :=  82; A(10) := 105; A(14) :=  87; A(18)  :=  67;
    A(3) :=  77; A(7) :=  66; A(11) :=  76; A(15) :=  15; A(19)  :=  95;
    A(4) :=  11; A(8) :=  38; A(12) :=  34; A(16) :=  99; A(20)  := 114;

    lsTmp := '';

    liLen := LENGTH(vsEncPwd);
    li := 1;

    liLen := liLen + 1;

    WHILE li < liLen  LOOP

       lsVar := SUBSTR(vsEncPwd,li,1);

       IF li >= 21 OR ASCII(lsVar) < 32 OR ASCII(lsVar) > 127 THEN

           lsTmp := lsTmp || lsVar;

           GOTO continue;

       END IF;

       liTmp := ASCII(SUBSTR(vsEncPwd, li, 1)) - 32;

       IF li = 1 THEN

               liTmp := liTmp - A(li);

       ELSE

            liTmp := liTmp - ( A(li) + ASCII(SUBSTR(lsTmp, li - 1 , 1)));

       END IF;

       WHILE liTmp <= 32 LOOP

           liTmp := liTmp + 95;

       END LOOP;

       lsTmp := lsTmp || CHR(liTmp);


       <<continue>>

       li := li + 1;

    END LOOP;

    vsDecPwd := lsTmp;

    RETURN vsDecPwd ;


END F_CDecodePwd;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_CHECK_DATE;

CREATE OR REPLACE FUNCTION HPDQ.F_CHECK_DATE(
  P_DATE   IN  VARCHAR2
  ) RETURN NUMBER IS
  L_RESULT NUMBER;
  L_EXP VARCHAR2(12);
BEGIN
    SELECT TO_CHAR (TO_DATE (P_DATE, 'YYYYMMDD'), 'YYYYMMDD') INTO L_EXP FROM DUAL;
    RETURN 1;
   EXCEPTION
     WHEN OTHERS THEN
           RETURN 0;
END;
/

DROP FUNCTION HPDQ.F_CHECK_ID_IN_LIST;

CREATE OR REPLACE FUNCTION HPDQ.F_check_ID_in_LIst (p_list varchar2, p_id VARCHAR2)
   RETURN Number
IS
   l_id   VARCHAR2 (30);
   l_list   VARCHAR2 (4000);
   l_num number;
BEGIN
 l_num:=0;
l_list:=p_list;
    
    if p_list=p_id then
    return 1;
    end if;

    loop
    exit when l_list is null;
    l_id:=substr(l_list,1, instr(l_list,',',1)-1);
    l_list:= replace(l_list,l_id||',','');
    
   exit when l_id is null;
    if l_id=p_id then
    l_num:=l_num+1;
    end if;
        
    end loop;
  
    return l_num;
  
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_CHECK_TIME;

CREATE OR REPLACE FUNCTION HPDQ.F_CHECK_TIME(
  P_DATE   IN  VARCHAR2
  ) RETURN NUMBER IS
  L_RESULT NUMBER;
  L_EXP VARCHAR2(12);
BEGIN
    SELECT TO_CHAR (TO_DATE (P_DATE, 'HH24MISS'), 'HH24:MI') INTO L_EXP FROM DUAL;
    RETURN 1;
   EXCEPTION
     WHEN OTHERS THEN
           RETURN 0;
END;
/

DROP FUNCTION HPDQ.F_COMMONCODE;

CREATE OR REPLACE FUNCTION HPDQ.f_commoncode (
   v_grp    in   varchar2,                                                                            -- Group Code
   v_case   in   varchar2,                                                                              -- sql case
   v_par    in   varchar2                                                                              -- parameter
)
   return varchar2
is
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
   type cur_typ is ref cursor;

   d_cur       cur_typ;
   lscode      varchar2 (10)   := null;
   lscdname    varchar2 (100)  := null;
   lsvsql      varchar2 (4001) := null;
   lsvreturn   varchar2 (5000) := null;
   strsql      varchar2 (4000) := null;
   cnt         number;
   i           number (2)      := 1;
   i2          number (2)      := 1;
   i3          number (2)      := 0;
   j           number          := 1;

   type vararray is table of varchar2 (10)
      index by binary_integer;

   a           vararray;
--------
begin
--------
-- sql case without parameter
   if v_case is null
   then
      lsvsql :=
            'SELECT CODE, CODE_NM  FROM TCO_ABCODE A, TCO_ABCODEGRP B WHERE A.TCO_ABCODEGRP_PK =
b.pk and b.id ='''
         || v_grp
         || ''' and a.use_if = 1 and a.del_if = 0 and b.del_if = 0 order by a.DEF_YN desc , ord  ';
   elsif v_par is null
   then
-- sql case without parameter
-- raise_application_error(-20001, 'aaa');
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;
   else
  
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;

-- sql case with parameter
      cnt := length (v_par);

      for i in 1 .. cnt
      loop
         i2 := i;

         if substr (v_par, i2, 1) = ';'
         then
            a (j) := substr (v_par, i3 + 1, i2 - i3 - 1);
            lsvsql := replace (lsvsql, '$' || j, '''' || a (j) || '''');
            i3 := i2;
            j := j + 1;
         end if;
      end loop;
   end if;

-- execute sql text
   strsql := lsvsql;
   
 

   open d_cur for strsql;

   loop
      fetch d_cur
       into lscode, lscdname;

      exit when d_cur%notfound;
      -- process row here
      lsvreturn := lsvreturn || '' || lscode || '|' || lscdname || '|';
   end loop;

   close d_cur;

   return lsvreturn;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_COMMONCODE1;

CREATE OR REPLACE FUNCTION HPDQ.f_commoncode1 (
   v_grp    in   varchar2,                                                                            -- Group Code
   v_case   in   varchar2,                                                                              -- sql case
   v_par    in   varchar2                                                                              -- parameter
)
   return varchar2
is
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
   type cur_typ is ref cursor;

   d_cur       cur_typ;
   lscode      varchar2 (10)   := null;
   lscdname    varchar2 (100)  := null;
   lsvsql      varchar2 (4001) := null;
   lsvreturn   varchar2 (5000) := null;
   strsql      varchar2 (4000) := null;
   cnt         number;
   i           number (2)      := 1;
   i2          number (2)      := 1;
   i3          number (2)      := 0;
   j           number          := 1;

   type vararray is table of varchar2 (10)
      index by binary_integer;

   a           vararray;
--------
begin
--------
-- sql case without parameter
   if v_case is null
   then
      lsvsql :=
            'SELECT   code, code_nm
    FROM tco_abcode a, tco_abcodegrp b
   WHERE a.del_if = 0 AND b.del_if = 0 AND b.ID ='''
         || v_grp
         || ''' and a.use_if = 1   and a.TCO_ABCODEGRP_PK =b.pk
ORDER BY NUM_VALUE1 ';
   elsif v_par is null
   then
-- sql case without parameter
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;
   else
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;

-- sql case with parameter
      cnt := length (v_par);

      for i in 1 .. cnt
      loop
         i2 := i;

         if substr (v_par, i2, 1) = ';'
         then
            a (j) := substr (v_par, i3 + 1, i2 - i3 - 1);
            lsvsql := replace (lsvsql, '$' || j, '''' || a (j) || '''');
            i3 := i2;
            j := j + 1;
         end if;
      end loop;
   end if;

-- execute sql text
   strsql := lsvsql;

   open d_cur for strsql;

   loop
      fetch d_cur
       into lscode, lscdname;

      exit when d_cur%notfound;
      -- process row here
      lsvreturn := lsvreturn || '' || lscode || '|' || lscdname || '|';
   end loop;

   close d_cur;

   return lsvreturn;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_COMMONCODE2;

CREATE OR REPLACE FUNCTION HPDQ.F_COMMONCODE2
  (
   v_grp        IN       VARCHAR2,         -- Group Code
   v_case       IN       VARCHAR2,         -- sql case
   v_par        IN       VARCHAR2          -- parameter
  )
RETURN  VARCHAR2
IS
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
TYPE cur_typ IS REF CURSOR;
d_cur        cur_typ;
lsCode       VARCHAR2(10)    := NULL;
lsCdName     VARCHAR2(100)   := NULL;


lsvSql        VARCHAR2(4001) := NULL;
lsvReturn     VARCHAR2(5000) := NULL;
StrSql        VARCHAR2(4000) := NULL;

cnt           NUMBER;
i             NUMBER(2) := 1;
i2            NUMBER(2) := 1;
i3            NUMBER(2) := 0;
j             NUMBER    := 1;

TYPE VarArray IS TABLE OF VARCHAR2(5) INDEX BY BINARY_INTEGER;
A VarArray;

--------
BEGIN
--------
-- sql case without parameter
IF v_case is null THEN
 lsvSql := 'SELECT CODE, CODE_NM  FROM TCO_ABCODE A, TCO_ABCODEGRP B WHERE A.TCO_ABCODEGRP_PK =
            B.PK AND B.ID =''' || v_grp || ''' AND A.DEL_IF = 0 AND B.DEL_IF = 0 
           AND a.ORD IN(10,20,30,40,50,110) AND a.code IN (10,20,30,40,50,110)         
           ORDER BY CODE_NM  ';
ELSIF v_par is null THEN
-- sql case without parameter
 SELECT B.SQL_TEXT
   INTO lsvSql
   FROM TCO_ABCODEGRP A,TCO_ABCODESQL B
  WHERE A.PK = B.TCO_ABCODEGRP_PK
    AND A.ID = v_grp
    AND B.SQL_CASE = v_case
    AND A.DEL_IF = 0
    AND B.DEL_IF = 0;
ELSE
 SELECT B.SQL_TEXT
   INTO lsvSql
   FROM TCO_ABCODEGRP A,TCO_ABCODESQL B
  WHERE A.PK = B.TCO_ABCODEGRP_PK
    AND A.ID = v_grp
    AND B.SQL_CASE = v_case
    AND A.DEL_IF = 0
    AND B.DEL_IF = 0;

-- sql case with parameter
 cnt := length(v_par);

 FOR i IN 1..cnt LOOP
     i2 := i;
  IF substr(v_par,i2,1) = ';' THEN
      A(j) := substr(v_par,i3+1,i2-i3-1) ;
         lsvSql := replace(lsvSql,'$' || j , ''''||A(j)||'''');
   i3 := i2;
            j := j+1 ;
  END IF;
 END LOOP;

END IF;

-- execute sql text
StrSql := lsvSql;

OPEN d_cur FOR StrSql;
LOOP
    FETCH d_cur INTO lsCode, lsCdName;
    EXIT WHEN d_cur%NOTFOUND;
    -- process row here
     lsvReturn := lsvReturn || '' || lsCode || '|' || lsCdName || '|' ;

END LOOP;
CLOSE d_cur;


RETURN  lsvReturn;

EXCEPTION
WHEN  OTHERS  THEN
 ROllBACK WORK;
 RETURN RTRIM(SUBSTR(SQLERRM,10,90)) || '[' || TO_CHAR(SQLCODE) || ']';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_COMMONCODE3;

CREATE OR REPLACE FUNCTION HPDQ.F_COMMONCODE3
  (
   v_grp        IN       VARCHAR2,         -- Group Code
   v_case       IN       VARCHAR2,         -- sql case
   v_par        IN       VARCHAR2          -- parameter
  )
RETURN  VARCHAR2
IS
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
TYPE cur_typ IS REF CURSOR;
d_cur        cur_typ;
lsCode       VARCHAR2(10)    := NULL;
lsCdName     VARCHAR2(100)   := NULL;


lsvSql        VARCHAR2(4001) := NULL;
lsvReturn     VARCHAR2(5000) := NULL;
StrSql        VARCHAR2(4000) := NULL;

cnt           NUMBER;
i             NUMBER(2) := 1;
i2            NUMBER(2) := 1;
i3            NUMBER(2) := 0;
j             NUMBER    := 1;

TYPE VarArray IS TABLE OF VARCHAR2(5) INDEX BY BINARY_INTEGER;
A VarArray;

--------
BEGIN
--------
-- sql case without parameter
IF v_case is null THEN
 lsvSql := 'SELECT CODE, CODE_NM  FROM TCO_ABCODE A, TCO_ABCODEGRP B WHERE A.TCO_ABCODEGRP_PK =
            B.PK AND B.ID =''' || v_grp || ''' AND A.DEL_IF = 0 AND B.DEL_IF = 0 
           AND a.ORD IN(60,70,80,90,100) AND a.code IN (60,70,80,90,100)         
           ORDER BY CODE_NM  ';
ELSIF v_par is null THEN
-- sql case without parameter
 SELECT B.SQL_TEXT
   INTO lsvSql
   FROM TCO_ABCODEGRP A,TCO_ABCODESQL B
  WHERE A.PK = B.TCO_ABCODEGRP_PK
    AND A.ID = v_grp
    AND B.SQL_CASE = v_case
    AND A.DEL_IF = 0
    AND B.DEL_IF = 0;
ELSE
 SELECT B.SQL_TEXT
   INTO lsvSql
   FROM TCO_ABCODEGRP A,TCO_ABCODESQL B
  WHERE A.PK = B.TCO_ABCODEGRP_PK
    AND A.ID = v_grp
    AND B.SQL_CASE = v_case
    AND A.DEL_IF = 0
    AND B.DEL_IF = 0;

-- sql case with parameter
 cnt := length(v_par);

 FOR i IN 1..cnt LOOP
     i2 := i;
  IF substr(v_par,i2,1) = ';' THEN
      A(j) := substr(v_par,i3+1,i2-i3-1) ;
         lsvSql := replace(lsvSql,'$' || j , ''''||A(j)||'''');
   i3 := i2;
            j := j+1 ;
  END IF;
 END LOOP;

END IF;

-- execute sql text
StrSql := lsvSql;

OPEN d_cur FOR StrSql;
LOOP
    FETCH d_cur INTO lsCode, lsCdName;
    EXIT WHEN d_cur%NOTFOUND;
    -- process row here
     lsvReturn := lsvReturn || '' || lsCode || '|' || lsCdName || '|' ;

END LOOP;
CLOSE d_cur;


RETURN  lsvReturn;

EXCEPTION
WHEN  OTHERS  THEN
 ROllBACK WORK;
 RETURN RTRIM(SUBSTR(SQLERRM,10,90)) || '[' || TO_CHAR(SQLCODE) || ']';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_COMMONCODE_ORD;

CREATE OR REPLACE FUNCTION HPDQ.f_commoncode_ord (
   v_grp    in   varchar2,                                                                            -- Group Code
   v_case   in   varchar2,                                                                              -- sql case
   v_par    in   varchar2                                                                              -- parameter
)
   return varchar2
is
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
   type cur_typ is ref cursor;

   d_cur       cur_typ;
   lscode      varchar2 (10)   := null;
   lscdname    varchar2 (100)  := null;
   lsvsql      varchar2 (4001) := null;
   lsvreturn   varchar2 (5000) := null;
   strsql      varchar2 (4000) := null;
   cnt         number;
   i           number (2)      := 1;
   i2          number (2)      := 1;
   i3          number (2)      := 0;
   j           number          := 1;

   type vararray is table of varchar2 (10)
      index by binary_integer;

   a           vararray;
--------
begin
--------
    
   

lsvsql :=
            'SELECT   d.CODE_NM FROM tac_commcode_master m, tac_commcode_detail d WHERE m.del_if = 0 AND d.del_if = 0 AND m.pk = tac_commcode_master_pk
 AND m.ID ='''
         || v_grp
         || ''' AND d.use_yn = ''Y'' ORDER BY d.NUM_1';
         
   strsql := lsvsql;

   open d_cur for strsql;

   loop
      fetch d_cur
       into lscode;

      exit when d_cur%notfound;
      -- process row here
      lsvreturn := lsvreturn || '' || lscode || ',' --|| lscdname || '|'
      ;
   end loop;

   close d_cur;

   return lsvreturn;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_COMPARE_DT;

CREATE OR REPLACE FUNCTION HPDQ.F_COMPARE_DT(P_DATE1 VARCHAR2
                                        ,P_DATE2 VARCHAR2)
  RETURN NUMBER IS
  
  
  L_RETURN    NUMBER;
  
  
BEGIN
   SELECT CASE WHEN P_DATE1>P_DATE2 THEN 1 ELSE 0 END INTO L_RETURN FROM DUAL;
   RETURN L_RETURN;  
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_FIND_HR_CODE_VALUE;

CREATE OR REPLACE FUNCTION HPDQ.F_FIND_HR_CODE_VALUE(
    in_id IN VARCHAR2, --hr code id 
    p_code   IN VARCHAR2,
    p_return_column varchar2, --'C1' = char_1, 'N1'= num_1 
    p_org_pk varchar2
    )
RETURN VARCHAR2 IS
p_return varchar2(100);
l_flag_exist boolean:=FALSE;
   l_string varchar2(2000):='';
   l_pro varchar2(200):='';
    l_cur_rec number;
    l_cur sys_refcursor;
/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    OPEN l_cur FOR
    SELECT (CASE WHEN  UPPER(p_return_column)='C1' THEN A.CHAR_1 
                        WHEN  UPPER(p_return_column)='C2' THEN A.CHAR_2
                        WHEN  UPPER(p_return_column)='C3' THEN A.CHAR_3
                        WHEN  UPPER(p_return_column)='C4' THEN A.CHAR_4
                        WHEN  UPPER(p_return_column)='C5' THEN A.CHAR_5
                        WHEN  UPPER(p_return_column)='N1' THEN TO_CHAR(A.NUM_1)
                        WHEN  UPPER(p_return_column)='N2' THEN TO_CHAR(A.NUM_2)
                        WHEN  UPPER(p_return_column)='N3' THEN TO_CHAR(A.NUM_3)
                        WHEN  UPPER(p_return_column)='N4' THEN TO_CHAR(A.NUM_4)
                        WHEN  UPPER(p_return_column)='N5' THEN TO_CHAR(A.NUM_5)
                        ELSE A.CODE_NM END)
    FROM VHR_HR_CODE A
    WHERE A.ID=upper(in_id)
     AND( UPPER(A.code)=UPPER(p_code) or p_code='')
    AND (A.TCO_COMPANY_PK=(select max(b.tco_company_pk) from tco_org b where b.del_if=0 and decode(p_org_pk,'ALL','ALL',b.pk)=p_org_pk) --XAC DINH THEO COMPANY
            OR A.TCO_COMPANY_PK IS NULL
           ) 
    and rownum=1;

    FETCH l_cur INTO l_pro;
    l_flag_exist:=l_cur%FOUND;
    CLOSE l_cur;
    
    IF l_flag_exist=TRUE THEN
        p_return:=l_pro;
    ELSE 
            OPEN l_cur FOR
            SELECT  (CASE WHEN  UPPER(p_return_column)='C1' THEN A.CHAR_1 
                        WHEN  UPPER(p_return_column)='C2' THEN A.CHAR_2
                        WHEN  UPPER(p_return_column)='C3' THEN A.CHAR_3
                        WHEN  UPPER(p_return_column)='C4' THEN A.CHAR_4
                        WHEN  UPPER(p_return_column)='C5' THEN A.CHAR_5
                        WHEN  UPPER(p_return_column)='N1' THEN TO_CHAR(A.NUM_1)
                        WHEN  UPPER(p_return_column)='N2' THEN TO_CHAR(A.NUM_2)
                        WHEN  UPPER(p_return_column)='N3' THEN TO_CHAR(A.NUM_3)
                        WHEN  UPPER(p_return_column)='N4' THEN TO_CHAR(A.NUM_4)
                        WHEN  UPPER(p_return_column)='N5' THEN TO_CHAR(A.NUM_5)
                        ELSE A.CODE_NM END)
             FROM VHR_HR_CODE A            
            WHERE A.ID=upper(in_id)
            AND( UPPER(A.code)=UPPER(p_code) or p_code='')
            and rownum=1;

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;   
            
            IF l_flag_exist=TRUE THEN
                    p_return:=l_pro;
            ELSE
                    p_return:='';
            END IF;        
    END IF;                            

RETURN p_return;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_FIND_HR_CODE_VALUE;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_AGCI00100;

CREATE OR REPLACE FUNCTION HPDQ.f_get_agci00100 (
   p_tlg_it_itemgrp_pk   NUMBER,
   p_tlg_it_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_check            NUMBER;
--------------------------------
   l_itemseq_length   NUMBER;
   l_item_seq         NUMBER;
   l_item_code        VARCHAR2 (50);
--------------------------------
BEGIN
   SELECT MAX (itemseq_length)
     INTO l_itemseq_length
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tlg_it_itemgrp_pk;

   IF l_itemseq_length > 0
   THEN
      SELECT MAX (item_seq)
        INTO l_item_seq
        FROM tlg_it_item
       WHERE del_if = 0
         AND tlg_it_itemgrp_pk = p_tlg_it_itemgrp_pk
         AND tlg_it_stitem_pk = p_tlg_it_stitem_pk
         AND item_code LIKE UPPER (p_item_code) || '%';

      IF TO_NUMBER (l_item_seq) >=
                     TO_NUMBER (LPAD (' ', NVL (l_itemseq_length, 0) + 1, '9'))
      THEN
         raise_application_error (-20999,
                                  'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                                 );
      END IF;

      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                  UPPER (p_item_code)
                  || LPAD (l_item_seq, l_itemseq_length, 0);
   ELSE
      l_item_code := p_item_code;
   END IF;

   SELECT MAX (pk)
     INTO l_check
     FROM tlg_it_item
    WHERE del_if = 0 AND item_code = UPPER (l_item_code);

   WHILE (l_check > 0 AND NVL (l_item_seq, 0) < 10000)
   LOOP
      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                 UPPER (p_item_code)
                 || LPAD (l_item_seq, l_itemseq_length, 0);

      SELECT MAX (pk)
        INTO l_check
        FROM tlg_it_item
       WHERE del_if = 0 AND item_code = UPPER (l_item_code);
   END LOOP;

-------------------------------------
   RETURN l_item_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_AGCI00110;

CREATE OR REPLACE FUNCTION HPDQ.f_get_agci00110 (
   p_tco_itemgrp_pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),MAX (grp_cd)
     INTO l_stseq_length, l_grp_cd
     FROM comm.tco_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk
   ;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
                            
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM comm.tco_stitem a, comm.tco_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tco_itemgrp_pk = b.pk
         AND a.tco_itemgrp_pk = p_tco_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
             UPPER (nvl(p_item_code,l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM comm.tco_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_HIGHER_MANAGER;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_HIGHER_MANAGER(
    P_EMP_PK IN VARCHAR2,
    in_flag   IN VARCHAR2--PK,ID,NAME,EMAIL 
    )
RETURN VARCHAR2 IS
TMP         VARCHAR2(200):='';
TMP_ID    VARCHAR2(200);
TMP_PK    VARCHAR2(200);
TMP_NM    VARCHAR2(200);
TMP_EMAIL    VARCHAR2(200);
 l_cur sys_refcursor;
    l_cur_rec number;
    l_flag_exist boolean:= false;


/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    
    open l_cur for
    SELECT B.PK,B.EMP_ID,B.FULL_NAME,B.EMAIL
    FROM THR_EMPLOYEE A,THR_EMPLOYEE B
    WHERE A.DEL_IF=0 AND  B.DEL_IF=0
    AND A.PK=P_EMP_PK AND A.MANAGER_PK=B.PK
    AND A.MANAGER_PK IS NOT NULL;
    
    FETCH l_cur INTO TMP_PK,TMP_ID,TMP_NM,TMP_EMAIL;
        l_flag_exist:=l_cur%FOUND;
        IF l_flag_exist=TRUE THEN
            IF in_flag='ID' THEN
                TMP:=TMP_ID;
            ELSIF in_flag='PK' THEN
                 TMP:=TMP_PK;   
            ELSIF in_flag='NAME' THEN
                 TMP:=TMP_NM;
            ELSE
                TMP:=TMP_EMAIL;   
            END IF;
        ELSE
               TMP:='';               
        END IF;    
        CLOSE l_cur; 
   
RETURN TMP;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_GET_HIGHER_MANAGER;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_LOGISTIC_VALUE1;

CREATE OR REPLACE FUNCTION HPDQ.f_get_logistic_value1 (
   v_grpcode   IN   VARCHAR,
   v_code      IN   VARCHAR
)
   RETURN NUMBER
IS
   l_code_nm   NUMBER;
BEGIN
   SELECT a.num_value1
     INTO l_code_nm
     FROM sale.lg_code a, sale.lg_code_group g
    WHERE a.lg_code_group_pk = g.pk
      AND g.GROUP_ID = v_grpcode
      AND a.del_if = 0
      AND a.code = v_code;

   RETURN l_code_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN 0;
   WHEN OTHERS
   THEN
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_MANAGER;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_MANAGER(
    in_ORG_PK IN VARCHAR2,
    in_emp_id IN VARCHAR2,
    in_flag   IN VARCHAR2--MANAGER KIND,ID , NAME , PK
    )
RETURN VARCHAR2 IS
TMP_KIND    VARCHAR2(200);
TMP_ID      VARCHAR2(200);
TMP_NM      VARCHAR2(200);
TMP_PK      NUMBER;
TMP_ORG_NM VARCHAR(200);
TMP_COMPANY_PK  NUMBER;

/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

   SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
        INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
            FROM comm.tco_org t
            WHERE t.del_if = 0
            AND T.ORG_TYPE IN('06')
            START WITH t.pk=in_ORG_PK
            CONNECT BY PRIOR t.p_pk=t.pk;

   IF in_emp_id=TMP_ID THEN --GET PARENT ID
        SELECT B.MANAGER_KIND, B.MANAGER_ID, B.MANAGER_PK,B.ORG_NM,B.TCO_COMPANY_PK
             INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
        FROM COMM.tco_org A,COMM.tco_org B
        WHERE A.DEL_IF=0 AND B.DEL_IF=0
              AND A.P_PK=B.PK
              AND A.PK=in_ORG_PK;
   END IF;

   IF in_flag='KIND' THEN
        RETURN NVL(TMP_KIND,'01');
   ELSIF in_flag='ID' THEN
       RETURN TMP_ID;
   ELSIF in_flag='PK' THEN
       RETURN TO_CHAR(TMP_PK);
   ELSIF in_flag='ORG_NM' THEN
        RETURN TMP_ORG_NM;
   ELSIF in_flag='COMPANY_PK' THEN
        RETURN TO_CHAR(TMP_COMPANY_PK);
   ELSE
        SELECT A.FULL_NAME INTO TMP_NM
            FROM THR_EMPLOYEE A WHERE A.DEL_IF=0 AND A.EMP_ID=TMP_ID;
        RETURN TMP_NM;
   END IF;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_GET_MANAGER;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_MANAGER_ID;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_MANAGER_ID(
    in_ORG_PK IN VARCHAR2,
    in_emp_id IN VARCHAR2
    )
RETURN VARCHAR2 IS
TMP_TYPE    VARCHAR2(200);
TMP_ID      VARCHAR2(200);
TMP_NM      VARCHAR2(200);

/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

   SELECT   MAX(T.MANAGER_ID) INTO TMP_ID
            FROM comm.TCO_ORG t
            WHERE t.del_if = 0
            AND T.ORG_TYPE IN('06')
            START WITH t.pk=in_ORG_PK
            CONNECT BY PRIOR t.p_pk=t.pk;

   IF in_emp_id=TMP_ID THEN --GET PARENT ID
        SELECT B.MANAGER_ID INTO TMP_ID
        FROM COMM.TCO_ORG A,COMM.TCO_ORG B
        WHERE A.DEL_IF=0 AND B.DEL_IF=0
              AND A.P_PK=B.PK
              AND A.PK=in_ORG_PK;
   END IF;

   RETURN TMP_ID;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_GET_MANAGER_ID;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_MEAL_TIMES;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_MEAL_TIMES
(p_work_dt IN VARCHAR2
,p_time_in IN VARCHAR2)
   RETURN VARCHAR2
IS
   TYPE Array_var IS TABLE OF VARCHAR2(1000);
    TYPE Array_num IS TABLE OF NUMBER;
    P_CODE Array_var;--1
    P_START_TIME Array_var;--1
    P_END_TIME Array_var;
    l_result VARCHAR2(100);
    l_meal_time varchar2(50);
   
   
BEGIN

    if to_number(substr(p_time_in,1,2))<8 then
        select to_char(to_date(p_work_dt,'yyyymmdd')+1,'yyyymmdd')||p_time_in into l_meal_time from dual;
    else
        l_meal_time:=p_work_dt||p_time_in;
    end if;          
        
    
      SELECT c.code, to_char(to_date(p_work_dt,'yyyymmdd')+to_number(c.char_3),'yyyymmdd')||c.char_1
        ,to_char(to_date(p_work_dt,'yyyymmdd')+to_number(c.char_4),'yyyymmdd')||c.char_2  end_time
         BULK COLLECT INTO P_CODE,P_START_TIME,P_END_TIME
        FROM vhr_hr_code c
       WHERE id = 'HR0191';
    
      
   l_result:='0';
    
    FOR I IN P_START_TIME.FIRST..P_START_TIME.LAST --CHECK VALIDATE
             
    LOOP       
    
        IF l_meal_time BETWEEN P_START_TIME(I) AND P_END_TIME(I) THEN
            l_result:=P_CODE(I);
        END IF;    
            
    END LOOP;
    
    IF l_result='0' THEN -- KHONG LAY DUOC GIO THEO QUI DINH
        l_result:='05';
    END IF;
    
    
       
                /*   

                loop fetch l_cur into l_type,l_start_time,l_end_time;
                    exit when l_cur%notfound OR l_flag_exist=1;
                    
                    if l_start_time < l_end_time then     --cung 1 ngay 
                        l_start_time2 := p_work_dt || l_start_time;
                        l_end_time2 := p_work_dt || l_end_time;
                    ELSE        -- 2 ngay (ca dem)
                    
                        l_start_time2 := p_work_dt || l_start_time;
                        l_end_time2 := to_char(to_date(p_work_dt,'yyyymmdd')+1,'yyyymmdd') || l_end_time;
                        
                    END IF;
                
                    if l_work_dt || p_time_in between l_start_time2 and l_end_time2 then
                        
                            l_result := l_type;
                            l_flag_exist := 1;
                            
                        end if;
                
                end loop;*/


   RETURN l_result;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END;
 
/

DROP FUNCTION HPDQ.F_GET_ORG;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_ORG(
    in_ORG_PK IN VARCHAR2,
    in_RET_FLAG IN VARCHAR2) --ID OR NAME
RETURN VARCHAR2 IS
TMP_TYPE    VARCHAR2(200);
TMP_ID      VARCHAR2(200);
TMP_NM      VARCHAR2(200);

/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   SELECT A.ORG_TYPE,A.ORG_NM,A.ORG_ID INTO TMP_TYPE,TMP_NM,TMP_ID
    FROM COMM.TCO_ORG A
   WHERE A.DEL_IF=0 AND A.PK=in_ORG_PK;

   IF TO_NUMBER(TMP_TYPE)>=13 THEN -- NOT IN GROUP OR PART
        SELECT   MAX(T.ORG_ID),MAX(T.ORG_NM) INTO TMP_ID,TMP_NM
        FROM comm.TCO_ORG t
        WHERE t.del_if = 0
        AND T.ORG_TYPE IN('07','12')
        START WITH t.pk=in_ORG_PK
        CONNECT BY PRIOR t.p_pk=t.pk;
   END IF;

   IF in_RET_FLAG='ID' THEN
        RETURN SUBSTR(TMP_ID,1,5);
   ELSE
        RETURN TMP_NM;
   END IF;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_GET_ORG;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_ORG_3LEVEL;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_ORG_3LEVEL(
    in_ORG_PK IN VARCHAR2
    )
RETURN VARCHAR2 IS
p_return varchar2(1000);
p_1 varchar2(200);
p_2 varchar2(200);
p_3 varchar2(200);
/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

select MAX(g3.org_nm) into p_1 
from tco_org g1,tco_org g2,tco_org g3 
where g1.del_if=0 and g2.del_if=0 and g3.del_if=0
and g1.p_pk=g2.pk and g2.p_pk=g3.pk
and g1.pk=in_org_pk;  

select MAX(g2.org_nm) into p_2 
from tco_org g1,tco_org g2
where g1.del_if=0 and g2.del_if=0 
and g1.p_pk=g2.pk 
and g1.pk=in_org_pk;

select MAX(g1.org_nm) into p_3 
from tco_org g1
where g1.del_if=0 
and g1.pk=in_org_pk; 

if p_1 is null then
    p_return:=p_2||'->'||p_3;
elsif p_2 is null then
    p_return:=p_3;
else
    p_return:=p_1||'->'||p_2||'->'||p_3; 
end if;
          

 return p_return;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_GET_ORG_3LEVEL;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_ORG_LEVEL;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_ORG_LEVEL(
    in_ORG_PK IN VARCHAR2,
    in_level   IN VARCHAR2,--level 
    in_flag   IN VARCHAR2--pk,id,name
    )
RETURN VARCHAR2 IS
p_return varchar2(100);
/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    --in_flag=='01' ->PK
    --in_flag=='02' ->ID
    --in_flag=='03' ->Name
    if in_level ='00' then
        select MAX(decode(in_flag,'PK',to_char(g.PK),'ID',g.org_id,'NAME',g.org_nm)) into p_return from tco_org g where   
           g.del_if=0  and g.ORG_TYPE='01'
            start with g.pk=in_org_pk
            connect by prior g.p_pk=g.pk;
    elsif in_level ='01' then
        select MAX(decode(in_flag,'PK',to_char(g.PK),'ID',g.org_id,'NAME',g.org_nm)) into p_return from tco_org g where   
           g.del_if=0  and g.ORG_TYPE='03'
            start with g.pk=in_org_pk
            connect by prior g.p_pk=g.pk;
    elsif in_level='02' then
        select MAX(decode(in_flag,'PK',to_char(g.PK),'ID',g.org_id,'NAME',g.org_nm)) into p_return from tco_org g where   
           g.del_if=0  and g.ORG_TYPE='06'
            start with g.pk=in_org_pk
            connect by prior g.p_pk=g.pk;
    else 
        select MAX(decode(in_flag,'PK',to_char(g.PK),'ID',g.org_id,'NAME',g.org_nm)) into p_return from tco_org g where   
           g.del_if=0  and g.ORG_TYPE in ('07','08')
            start with g.pk=in_org_pk
            connect by prior g.p_pk=g.pk;
    end if;
 return p_return;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_GET_ORG_LEVEL;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GET_SALE_ORDER_NO;

CREATE OR REPLACE FUNCTION HPDQ.F_GET_SALE_ORDER_NO(
  P_FROM    IN VARCHAR2,
  P_TO     IN VARCHAR2,
  P_TCO_ITEM_PK     IN VARCHAR2,
  P_TCO_STITEM_PK   IN VARCHAR2
  ) RETURN VARCHAR2 IS
  L_STRING  VARCHAR2(30000);
  L_SALE_ORDER_NO VARCHAR2(500);
    CURSOR V_SALE_ORDER IS SELECT DISTINCT A.SALE_ORDER_NO
                    FROM PROD.VPROD_PRODUCTRESULT A
                    WHERE A.TCO_STITEM_PK=P_TCO_STITEM_PK
                    AND A.TCO_ITEM_PK=P_TCO_ITEM_PK
                    AND A.PROD_DATE BETWEEN P_FROM AND P_TO;

BEGIN

     L_STRING:='';

     OPEN V_SALE_ORDER ;
     LOOP
          FETCH V_SALE_ORDER INTO L_SALE_ORDER_NO;
          EXIT WHEN V_SALE_ORDER%NOTFOUND;
              L_STRING:=L_STRING || L_SALE_ORDER_NO || ',';

     END LOOP;
     CLOSE V_SALE_ORDER;
    IF L_STRING IS NOT NULL THEN
        L_STRING:=SUBSTR(L_STRING,1,LENGTH(L_STRING)-1);
    END IF;
    RETURN L_STRING;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GFBR00030_AMT;

CREATE OR REPLACE FUNCTION HPDQ.f_gfbr00030_amt (
   v_grp    in   number,                                                                            -- Group Code
   v_case   in   varchar2,                                                                           -- sql case
   v_ccy    in   varchar2                                                                              -- parameter
)
 RETURN VARCHAR2
IS
    
    v_amt          VARCHAR2(20);
    v_name          VARCHAR2(100);
    v_rpt_code      VARCHAR2(3000);
    
    CURSOR C1 IS
       SELECT  TRIM(TO_CHAR (SUM (d.TR_BOOKAMT), DECODE (v_ccy, 'VND', '9,999,999,999,999', '9,999,999,999,999.99'))) 
      into v_amt
    FROM tac_hgtrd d 
   WHERE d.del_if = 0 AND d.tac_hgtrh_pk = v_grp and d.drcr_type = v_case
 GROUP BY d.drcr_type, d.tac_abacctcode_pk 
 ORDER BY d.drcr_type DESC;
BEGIN

    OPEN C1;
    LOOP
      FETCH C1 INTO v_amt;
      EXIT WHEN C1%NOTFOUND;
          v_rpt_code := v_rpt_code || '' || v_amt || '-';
    END LOOP;
--    RETURN v_rpt_code;
    RETURN substr(v_rpt_code,1, length(v_rpt_code)-1);
EXCEPTION
    WHEN OTHERS THEN RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_HOUR_MINUS;

CREATE OR REPLACE FUNCTION HPDQ.F_HOUR_MINUS(
P_DT2 IN VARCHAR2,
P_TIME2 IN VARCHAR2,
P_DT1 IN VARCHAR2,
P_TIME1 IN VARCHAR2,
P_SHIFT IN VARCHAR2,
P_HOL_TYPE IN VARCHAR2
)RETURN NUMBER IS
AV_OT  NUMBER;
l_ref sys_refcursor;
l_cur_rec number;
l_cur sys_refcursor;
l_flag_exist boolean:=FALSE;

l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(2):='';
  l_temp_in        number;
  l_temp_out        number;
  l_flag_exit1    number(2):=0;
  l_flag_exit2    number(2):=0;
  l_time2      varchar(13):='';
  l_time1      varchar(13):='';
  l_st_meal  varchar(5):='';
  l_et_meal  varchar(5):='';
  l_m_interval  number(2):=0;

BEGIN
        
            SELECT NVL(S.MEAL1_INTERVAL,0),S.START_MEAL1,S.END_MEAL1 INTO l_m_interval,l_st_meal,l_et_meal
             FROM THR_WORK_SHIFT S
            WHERE S.DEL_IF=0 AND S.PK=P_SHIFT;

               --XU LY PHAN LAM TRON gio 1 
            OPEN l_cur FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
                WHERE ((C.ID='HR0027' AND P_HOL_TYPE IS NOT NULL) 
                                OR (C.ID='HR0026' AND P_HOL_TYPE IS NULL)
                                )
                ORDER BY C.SEQ;

           l_temp_in:=TO_NUMBER(substr(P_TIME2,-2));
            
            LOOP
                FETCH l_cur INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                 EXIT WHEN l_cur%NOTFOUND OR l_flag_exit1=1;
                           IF l_flag_exit1=0 AND  l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                                l_temp_in:=TO_NUMBER(substr(P_TIME2,1,2))+l_interval;
                                IF l_temp_in<=9 THEN
                                    l_time2:=P_DT2||'0'||l_temp_in||':'||l_minute_round;
                                ELSE
                                    l_time2:=P_DT2||l_temp_in||':'||l_minute_round; --YYYYMMDDHHMM
                                END IF;
                                IF l_temp_in=24 THEN
                                    l_time2:=TO_CHAR(TO_DATE(P_DT2,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                                END IF;

                                l_flag_exit1:=1;
                             END IF;
               
            END LOOP;
            
            CLOSE l_cur;

            IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
                l_time2:=P_DT2||P_TIME2;
            END IF;

               --XU LY PHAN LAM TRON gio 2 
            OPEN l_cur FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
               WHERE ((C.ID='HR0153' AND P_HOL_TYPE IS NOT NULL) 
                                OR (C.ID='HR0096' AND P_HOL_TYPE IS NULL)
                             )
                ORDER BY C.SEQ;

           l_temp_out:=TO_NUMBER(substr(P_TIME1,-2));
            
            LOOP
                FETCH l_cur INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                 EXIT WHEN l_cur%NOTFOUND OR l_flag_exit2=1;
                           IF l_flag_exit2=0 AND  l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                                l_temp_out:=TO_NUMBER(substr(P_TIME1,1,2))+l_interval;
                                IF l_temp_out<=9 THEN
                                    l_time1:=P_DT1||'0'||l_temp_out||':'||l_minute_round;
                                ELSE
                                    l_time1:=P_DT1||l_temp_out||':'||l_minute_round; --YYYYMMDDHHMM
                                END IF;
                                IF l_temp_out=24 THEN
                                    l_time1:=TO_CHAR(TO_DATE(P_DT1,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                                END IF;

                                l_flag_exit2:=1;
                             END IF;
               
            END LOOP;
            
            CLOSE l_cur;

            IF l_flag_exit2=0 THEN -- KO SU DUNG LAM TRON
                l_time1:=P_DT1||P_TIME1;
            END IF;

        IF l_m_interval>0 THEN
            IF l_time2>P_DT1||l_st_meal AND l_time2<P_DT1||l_et_meal then
                l_time2:=P_DT1||l_st_meal;
            END IF;
            
           IF l_time1>P_DT1||l_st_meal AND l_time2<P_DT1||l_et_meal then
                l_time1:=P_DT1||l_et_meal;
           END IF;
                 
        END IF;

           AV_OT:= ROUND((TO_DATE(l_time2,'YYYYMMDDHH24:MI')-TO_DATE(l_time1,'YYYYMMDDHH24:MI'))*24,2);
           
           IF l_m_interval>0 THEN
                IF l_time2>=P_DT1||l_et_meal AND l_time1<=P_DT1||l_st_meal  THEN
                      AV_OT:=AV_OT-l_m_interval;
                END IF;      
           END IF;
           
           IF AV_OT<0 THEN
                AV_OT:=0;
           END IF;     
           
           RETURN AV_OT; 
            
    


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_HOUR_MINUS;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_KILLCHAR;

CREATE OR REPLACE FUNCTION HPDQ.f_killchar (ab VARCHAR2)
   RETURN VARCHAR2
IS
   t         VARCHAR2 (2)     := ',';
   t1        VARCHAR2 (2)     := '''';
   t2        VARCHAR2 (32767);
   t_check   NUMBER (10);
   a         VARCHAR2 (32767);
BEGIN
   a := ab;
   -- dbms_output.put_line('The string passed is '||a);
   t_check := INSTR (a, ',');

   -- dbms_output.put_line('The instr value is '||t_check);
   IF t_check != 0
   THEN
      t2 := t1 || t || t1;
      a := REPLACE (a, ',', t2);
      a := '(' || '''' || a || '''' || ')';
   -- dbms_output.put_line(a);
   ELSE
      a := a;
      a := '(' || '''' || a || '''' || ')';
   END IF;

   RETURN a;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK WORK;
      RETURN RTRIM (SUBSTR (SQLERRM, 10, 90)) || '[' || TO_CHAR (SQLCODE)
             || ']';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_LATELY_REGULATION;

CREATE OR REPLACE FUNCTION HPDQ.F_LATELY_REGULATION(
P_DATE1 IN VARCHAR2,
P_DATE2 IN VARCHAR2,
P_DATE3 IN VARCHAR2,
P_HOURS      IN NUMBER
)RETURN NUMBER IS
AV_MINUTE  NUMBER;




BEGIN
    IF P_DATE2 IS NULL OR P_DATE3 IS NULL THEN
        RETURN 0;
    ELSIF P_DATE1>=P_DATE2 AND P_DATE1<=P_DATE3 THEN
        RETURN P_HOURS;
    ELSE
        RETURN 0;
    END IF;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_LATELY_REGULATION;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_LOGISTIC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.f_logistic_code (v_grp IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   code, (code || ' ' || code_nm) code_nm
                   FROM lg_code a, lg_code_group b
                  WHERE a.lg_code_group_pk = b.pk
                    AND b.GROUP_ID = v_grp
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY a.def_yn DESC, ord)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_LOGISTIC_CODE_NM;

CREATE OR REPLACE FUNCTION HPDQ.f_logistic_code_nm (v_grp IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
/* just want to show  code name */
   FOR cur IN (SELECT   code, code_nm code_nm
                   FROM sale.lg_code a, sale.lg_code_group b
                  WHERE a.lg_code_group_pk = b.pk
                    AND b.GROUP_ID = v_grp
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY a.def_yn DESC, ord)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_MEASURE_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.f_measure_convert (
   p_tco_item_pk     IN   NUMBER,
   p_tco_stitem_pk   IN   NUMBER,
   p_uom_code        IN   VARCHAR2,
   p_tranuom_code    IN   VARCHAR2
)
   RETURN NUMBER
IS
   l_tran_rate       NUMBER;
------------
   l_tco_stitem_pk   NUMBER;
BEGIN
-----------------------------------------------------------------------
   IF p_uom_code IS NULL OR p_tranuom_code IS NULL
   THEN
      RETURN -1;
   ELSIF p_tco_stitem_pk IS NULL AND p_tco_item_pk IS NULL
   THEN
      --------- NO NEED ITEM ------------
      SELECT MAX (a.tran_rate)
        INTO l_tran_rate
        FROM tlg_it_measure a
       WHERE a.del_if = 0
         AND a.uom_code LIKE UPPER (p_uom_code)
         AND a.tranuom_code LIKE UPPER (p_tranuom_code)
         -- AND a.map_to_item IS NULL;
         AND a.default_yn = 'Y';

      RETURN l_tran_rate;
   -------- RETURN ------------------
   ELSIF p_tco_stitem_pk IS NOT NULL
   THEN
      ----------SET --- ST_ITEM_PK ------------
      l_tco_stitem_pk := p_tco_stitem_pk;
   ELSIF p_tco_stitem_pk IS NULL
   THEN
      ----------SET --- ST_ITEM_PK ------------
      SELECT tlg_it_stitem_pk
        INTO l_tco_stitem_pk
        FROM tlg_it_item
       WHERE del_if = 0 AND pk = p_tco_item_pk;
   END IF;

---------------------------------------------------
   SELECT MAX (a.tran_rate)
     INTO l_tran_rate
     FROM tlg_it_measure a
    WHERE a.del_if = 0
      AND a.tlg_it_uom_pk LIKE UPPER (p_uom_code)
      AND a.tranuom_code LIKE UPPER (p_tranuom_code)
      --AND a.map_to_item IS NOT NULL
      --AND a.DEFAULT_YN = 'N'
      AND a.pk IN (
             SELECT DISTINCT tlg_it_measure_pk
                        FROM tlg_it_itemmeasure
                       WHERE del_if = 0
                         AND (   tlg_it_item_pk = p_tco_item_pk
                              OR tlg_it_item_pk IS NULL
                              OR p_tco_item_pk IS NULL
                             )
                         AND (   tlg_it_stitem_pk = l_tco_stitem_pk
                              OR tlg_it_stitem_pk IS NULL
                             )
                         AND NOT (    tlg_it_item_pk IS NULL
                                  AND tlg_it_item_pk IS NULL
                                 ));

---------------------------------------------------
   RETURN l_tran_rate;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN -1;
END f_measure_convert;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_MEASURE_CONVERT1;

CREATE OR REPLACE FUNCTION HPDQ.f_measure_convert1 (
   p_uom_code        IN   VARCHAR2,
   p_tran_to         IN   VARCHAR2
) 
return  number
is l_tran_rate  number;
begin
 SELECT MAX (a.tran_rate)
        INTO l_tran_rate
        FROM comm.tco_measure a
       WHERE a.del_if = 0
         AND a.UOM_CODE LIKE UPPER (p_uom_code)
         AND a.tranuom_code LIKE UPPER (p_tran_to)
        -- AND a.map_to_itemTRAN_RATE IS NULL;
        AND a.DEFAULT_YN = 'Y';
RETURN l_tran_rate;
EXCEPTION
   WHEN OTHERS
   THEN
    RETURN 1;     
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_MONTH_CLOSE_EC;

CREATE OR REPLACE FUNCTION HPDQ.f_month_close_ec(
P_JOIN_DT IN VARCHAR2,
P_MONTH   IN VARCHAR2
)RETURN VARCHAR2 IS

AV_MMMMDD  VARCHAR2(6);
p_yn    varchar(1);
p_from  varchar(8);
p_to  varchar(8);

BEGIN
    select
    (case when months_between(last_day(to_date(p_month,'yyyymm')),last_day(to_date(substr(P_JOIN_DT,1,6),'yyyymm')))>12
                                                            and substr(P_JOIN_DT,5,2) >= substr(p_month,5,2)
                                                            then substr(p_month,1,4)-1||substr(P_JOIN_DT,5,2)
                                                           when months_between(last_day(to_date(p_month,'yyyymm')),last_day(to_date(substr(P_JOIN_DT,1,6),'yyyymm')))>12
                                                            and substr(P_JOIN_DT,5,2)< substr(p_month,5,2)
                                                            then substr(p_month,1,4)||substr(P_JOIN_DT,5,2) 
                                                     else substr(to_char(add_months(to_date(P_JOIN_DT,'yyyymmdd'),-1),'yyyymmdd'),1,6)
                                                     end )
   INTO AV_MMMMDD FROM DUAL;
    
    RETURN AV_MMMMDD;
EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END f_month_close_ec;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_OT_02;

CREATE OR REPLACE FUNCTION HPDQ.F_OT_02(
P_DT2 IN VARCHAR2,
P_TIME2 IN VARCHAR2,
P_DT1 IN VARCHAR2,
P_TIME1 IN VARCHAR2
)RETURN NUMBER IS
AV_OT  NUMBER;
l_ref sys_refcursor;
l_cur_rec number;
l_cur sys_refcursor;
l_flag_exist boolean:=FALSE;

l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(2):='';
  l_temp_in        number;
  l_temp_out        number;
  l_flag_exit1    number(2):=0;
  l_flag_exit2    number(2):=0;
  l_time2      varchar(13):='';
  l_time1      varchar(13):='';

BEGIN
               --XU LY PHAN LAM TRON gio 1 
            OPEN l_cur FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0027'
                ORDER BY C.SEQ;

           l_temp_in:=TO_NUMBER(substr(P_TIME2,-2));
            
            LOOP
                FETCH l_cur INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                 EXIT WHEN l_cur%NOTFOUND OR l_flag_exit1=1;
                           IF l_flag_exit1=0 AND  l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                                l_temp_in:=TO_NUMBER(substr(P_TIME2,1,2))+l_interval;
                                IF l_temp_in<=9 THEN
                                    l_time2:=P_DT2||'0'||l_temp_in||':'||l_minute_round;
                                ELSE
                                    l_time2:=P_DT2||l_temp_in||':'||l_minute_round; --YYYYMMDDHHMM
                                END IF;
                                IF l_temp_in=24 THEN
                                    l_time2:=TO_CHAR(TO_DATE(P_DT2,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                                END IF;

                                l_flag_exit1:=1;
                             END IF;
               
            END LOOP;
            
            CLOSE l_cur;

            IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
                l_time2:=P_DT2||P_TIME2;
            END IF;

               --XU LY PHAN LAM TRON gio 2 
            OPEN l_cur FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0153'
                ORDER BY C.SEQ;

           l_temp_out:=TO_NUMBER(substr(P_TIME1,-2));
            
            LOOP
                FETCH l_cur INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                 EXIT WHEN l_cur%NOTFOUND OR l_flag_exit2=1;
                           IF l_flag_exit2=0 AND  l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                                l_temp_out:=TO_NUMBER(substr(P_TIME1,1,2))+l_interval;
                                IF l_temp_out<=9 THEN
                                    l_time1:=P_DT1||'0'||l_temp_out||':'||l_minute_round;
                                ELSE
                                    l_time1:=P_DT1||l_temp_out||':'||l_minute_round; --YYYYMMDDHHMM
                                END IF;
                                IF l_temp_out=24 THEN
                                    l_time1:=TO_CHAR(TO_DATE(P_DT1,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                                END IF;

                                l_flag_exit2:=1;
                             END IF;
               
            END LOOP;
            
            CLOSE l_cur;

            IF l_flag_exit2=0 THEN -- KO SU DUNG LAM TRON
                l_time1:=P_DT1||P_TIME1;
            END IF;

           AV_OT:= ROUND((TO_DATE(l_time2,'YYYYMMDDHH24:MI')-TO_DATE(l_time1,'YYYYMMDDHH24:MI'))*24,2);
           RETURN AV_OT; 
            
    


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END F_OT_02;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_REPLACE_CODE;

CREATE OR REPLACE FUNCTION HPDQ.F_REPLACE_CODE(P_STR VARCHAR2)
  RETURN VARCHAR2 IS
  L_POS_C     NUMBER;
  L_POS_END_C NUMBER;
  L_GET_CODE varchar2(1000);
  L_TRANS_CODE varchar2(1000);
  L_SQL  varchar2(4000);
  L_STR   varchar2(1000);
  L_CUR SYS_REFCURSOR;
BEGIN
    L_STR:=P_STR;
    WHILE INSTR(L_STR,'<c>')<>0 
    LOOP
        L_POS_C:=INSTR(L_STR,'<c>');
        L_POS_END_C:=INSTR(L_STR,'</c>');
        L_GET_CODE:=SUBSTR(L_STR,L_POS_C,L_POS_END_C-L_POS_C+4);
        L_TRANS_CODE:=SUBSTR(L_STR,L_POS_C+3,L_POS_END_C-L_POS_C-3);
        L_SQL:='SELECT ' || L_TRANS_CODE || ' FROM DUAL';
        OPEN L_CUR FOR L_SQL;
        FETCH L_CUR INTO L_TRANS_CODE;
        CLOSE L_CUR; 
        L_STR:=REPLACE(L_STR,L_GET_CODE,L_TRANS_CODE);
    END LOOP;
    RETURN L_STR;

   EXCEPTION
     WHEN OTHERS THEN
           return '';
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_ROUND1K;

CREATE OR REPLACE FUNCTION HPDQ.f_round1k (p_value varchar)
   return number
is
    /******************************************************************************
      NAME:       f_round1k
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        3/10/2012   Nguyen Van Thai       1. Created this function.
   ******************************************************************************/
   l_mod_val   number;
   l_div_val   number;
begin
   if p_value is not null
   then
      select mod (p_value, 1000), trunc (p_value / 1000)
        into l_mod_val, l_div_val
        from dual;

      if l_mod_val >= 500
      then
         l_div_val := l_div_val*1000 + 1000;
         return l_div_val;
      else
         return l_div_val*1000;
      end if;
   else
      return p_value;
   end if;
end f_round1k;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_SEPARATING_COMMA;

CREATE OR REPLACE FUNCTION HPDQ.f_Separating_comma(ab VARCHAR2)
   RETURN VARCHAR2
IS
   t         VARCHAR2 (2)     := ',';
   t1        VARCHAR2 (2)     := '''';
   t2        VARCHAR2 (32767);
   t_check   NUMBER (10);
   a         VARCHAR2 (32767);
BEGIN
   a := ab;
   -- dbms_output.put_line('The string passed is '||a);
   t_check := INSTR (a, ',');

   -- dbms_output.put_line('The instr value is '||t_check);
   IF t_check != 0
   THEN
      t2 := t1 || t || t1;
      a := REPLACE (a, ',', t2);
      a := '(' || '''' || a || '''' || ')';
   -- dbms_output.put_line(a);
   ELSE
      a := a;
      a := '(' || '''' || a || '''' || ')';
   END IF;

   RETURN a;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK WORK;
      RETURN RTRIM (SUBSTR (SQLERRM, 10, 90)) || '[' || TO_CHAR (SQLCODE)
             || ']';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_SEQUENCE;

CREATE OR REPLACE FUNCTION HPDQ.f_sequence (v_user in varchar2)
   return varchar2
is
   pragma autonomous_transaction;
/******************************************************************************
   NAME:       f_sequence
   PURPOSE: reset sequence number to maximun pk of table 
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/09/2006   Nguyen Van Thai       1. Created this procedure. 
******************************************************************************/
   l_sql   varchar2 (4000) := null;
   l_cnt   number          := 0;
   l_length number := 0;
--------
begin
--------
   for c1 in (select table_name
                from all_all_tables
               where owner = upper (v_user) and table_name like 'T%')
   loop
      select length(c1.table_name)
       into l_length
      from dual;
   
      select count (*)
        into l_cnt
        from all_objects
       where owner = upper (v_user)
         and object_type = 'SEQUENCE'
         and object_name = upper (c1.table_name) || '_SEQ'; 
      if l_length < 25
      then
      
          if l_cnt > 0
          then
             begin
                l_sql := 'DROP SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ'; 
                execute immediate l_sql; 
                l_sql := 'SELECT nvl(MAX(PK),0)+1 from ' || c1.table_name; 
                execute immediate l_sql
                             into l_cnt; 
                l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ start with ' || l_cnt; 
                execute immediate l_sql;
             exception
                when others
                then
                   null;
             end;
          else
             l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ'; 
             execute immediate l_sql;
          end if;
      end if;
   
   end loop; 
   return 'reset sequence is successful';
exception
   when others
   then
      return l_sql || sqlerrm;
end;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_SEQUENCE_TABLE;

CREATE OR REPLACE FUNCTION HPDQ.F_SEQUENCE_TABLE
  (v_TABLE       IN       VARCHAR2         -- TABLE OWNER
  )
RETURN  VARCHAR2
IS
PRAGMA AUTONOMOUS_TRANSACTION;

/*====================================================
FUNCTION NM :    F_SEQUENCE
REMARK      :    CREATE SEQUENCE
PARAMETER   :   TABLE OWNER
RETURN      :   TABLE QUANTITY
MODULE:
CREATED DT  :    2004/01/10
CREATED BY  :    SYJEON, GENUWIN
=====================================================*/

lsvSql        VARCHAR2(4000) := NULL;

lnvMaxPK          NUMBER := 0 ;

ddd varchar2 (100) := '0' ;

--------
BEGIN
--------


        lsvSql := 'select count (*) from  all_objects where ' || ''' object_type = ''SEQUENCE'' and object_name = ''' || UPPER(v_TABLE) || '_SEQ''';

        EXECUTE IMMEDIATE lsvSql INTO lnvMaxPK;

        if lnvMaxPK > 0 then
          lsvSql := 'DROP SEQUENCE '||UPPER(v_TABLE)||'_SEQ';
          EXECUTE IMMEDIATE lsvSql;
        end if;

        lsvSql := 'SELECT nvl(MAX(PK),0)+1 from '||UPPER(v_TABLE) ;

        EXECUTE IMMEDIATE lsvSql INTO lnvMaxPK;

        lsvSql := 'create SEQUENCE ' ||  UPPER(v_TABLE) || '_seq start with ' || lnvMaxPK  ;

        EXECUTE IMMEDIATE lsvSql;


        lnvMaxPK := 0 ;


RETURN '0';

EXCEPTION
WHEN  OTHERS  THEN
    RETURN ddd || RTRIM(SUBSTR(SQLERRM,10,90)) || '[' || TO_CHAR(SQLCODE) || ']';

END;
 
 
 
/

DROP FUNCTION HPDQ.F_TEST;

CREATE OR REPLACE FUNCTION HPDQ.f_test(
P_YEAR_MONTH IN VARCHAR2,
P_JOIN_DATE IN VARCHAR2,
P_ALE_YEAR  IN NUMBER

)RETURN NUMBER IS
AV_MONTH  NUMBER;
AV_MONTH2  NUMBER;
AV_ALE  NUMBER;
av_test number;
av_string varchar2(900);

BEGIN

    IF P_ALE_YEAR=0 THEN
        RETURN 0;
    END IF;

    SELECT MONTHS_BETWEEN(LAST_DAY(TO_DATE(P_YEAR_MONTH,'YYYYMM')),TO_DATE(P_JOIN_DATE,'YYYYMMDD'))
    ,MONTHS_BETWEEN(LAST_DAY(TO_DATE(P_YEAR_MONTH,'YYYYMM')),TO_DATE(SUBSTR(P_YEAR_MONTH,1,4)||'0101','YYYYMMDD'))
                        INTO AV_MONTH,AV_MONTH2 FROM DUAL;
    IF TO_NUMBER(SUBSTR(P_YEAR_MONTH,1,4))>TO_NUMBER(SUBSTR(P_JOIN_DATE,1,4)) THEN
        AV_ALE:=ROUND(AV_MONTH2);
    ELSE
        AV_ALE:=ROUND(AV_MONTH);
    END IF;

    av_string:='select :P_ALE_YEAR into l_test from dual ';
    execute immediate av_string;

     RETURN av_test;



   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END f_test;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_TIME_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.F_TIME_SEQ(
  P_DATE   IN  VARCHAR2,
  P_ID_NUM   IN  VARCHAR2,
  P_SEQ IN NUMBER
  ) RETURN VARCHAR IS
  L_RESULT VARCHAR2(25);
  L_EXP VARCHAR2(12);
BEGIN

--    select hr.location||' '||max(hr.time) into L_RESULT
--        from(
--        select a.time, a.location
--        from thr_time_temp a,thr_employee b
--        where a.work_dt=P_DATE 
--        and a.id=b.id_num and b.emp_id=P_ID_NUM
--        order by a.time) hr
--        where rownum<=P_SEQ
--        HAVING COUNT(*)>=P_SEQ;
      select max(c.location) ||' '|| max(d.time) into L_RESULT
        from thr_time_temp c,        
        (select max(hr.time) time,hr.work_dt,hr.id 
                from(
                select a.time, a.work_dt, a.id
                from thr_time_temp a,thr_employee b
                where a.work_dt=P_DATE 
                and a.id=b.id_num and b.ID_NUM=P_ID_NUM
                order by a.time) hr
                where rownum<=P_SEQ
                HAVING COUNT(*)>=P_SEQ
                group by hr.work_dt,hr.id) d
        where C.TIME = d.time        
        and c.work_dt = d.work_dt
        and c.id = d.id;      

RETURN L_RESULT;         
        
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
     WHEN OTHERS THEN
           RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_WORDS;

CREATE OR REPLACE FUNCTION HPDQ.f_words (p_amount IN Number) RETURN Varchar2 IS
/*****************************************************************************
--Author          :  Bhupinder Singh
--Creation Date   :  05/03/2007
--Purpose         :  This Function returns amount in words.
--Parameters      :
--1) p_amount     :  Only positive and negative values are allowed.
                     Precision can be entered upto 10 digits and only 2 scales 
                     are allowed e.g 9999999999.99
-------------------------    MODIFICATION HISTORY ----------------------------
WHO              WHEN(Date)    WHY
Bhupinder Singh  18/01/2007    Created.
-------"-------  05/03/2007    Added CASE statement for positive and negative 
                               numbers. 
******************************************************************************/
   -------------------------------------
   -- Index by Tables to store word list
   -------------------------------------
   TYPE typ_word_list IS TABLE OF Varchar2(200) INDEX BY BINARY_INTEGER;
   t_typ_word_list typ_word_list; 
   TYPE typ_word_gap IS TABLE OF Varchar2(200) INDEX BY BINARY_INTEGER;
   t_typ_word_gap typ_word_gap; 
   ------------------
   -- Local Variables
   ------------------
   v_amount        Number := p_amount;
   v_amount_length Number;
   v_words         Varchar2(10000);
   v_point_found   Varchar2(1) := 'N';
   v_point_value   Number;
BEGIN
   /*Getting value after point if found */
   v_point_value := SUBSTR(v_amount,(INSTR(v_amount,'.',1) + 1),2);

   /*Checking whether amount has any scale value also */
   v_point_found := CASE WHEN (INSTR(v_amount,'.',1)) = 0 THEN 'N'
                         WHEN (INSTR(v_amount,'.',1)) > 0 THEN 'Y'
                    END;
   /*Converting amount into pure numeric format */
   v_amount := FLOOR(ABS(v_amount));   

   --
   v_amount_length := LENGTH(v_amount);
   --
   t_typ_word_gap(2)  := 'and Paise';
   t_typ_word_gap(3)  := 'Hundred'; 
   t_typ_word_gap(4)  := 'Thousand'; 
   t_typ_word_gap(6)  := 'Lakh'; 
   t_typ_word_gap(8)  := 'Crore';
   t_typ_word_gap(10) := 'Arab';
   --
   FOR i IN 1..99
   LOOP
       t_typ_word_list(i)   :=  To_Char(To_Date(i,'J'),'Jsp');
   END LOOP;
   --
   IF v_amount_length <= 2 
   THEN
       /* Conversion 1 to 99 digits */
       v_words := t_typ_word_list(v_amount);
   ELSIF v_amount_length = 3
   THEN
       /* Conversion for 3 digits till 999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,1))||' '||t_typ_word_gap(3);
       v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,2,2));
   ELSIF v_amount_length = 4
   THEN
       /* Conversion for 4 digits till 9999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,1))||' '||t_typ_word_gap(4); 
       IF SUBSTR(v_amount,2,1) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,2,1))||' '||t_typ_word_gap(3);
       END IF;
       IF SUBSTR(v_amount,3,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,3,2));
       END IF;
   ELSIF v_amount_length = 5
   THEN
       /* Conversion for 5 digits till 99999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,2))||' '||t_typ_word_gap(4); 
       IF SUBSTR(v_amount,3,1) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,3,1))||' '||t_typ_word_gap(3);
       END IF;
       IF SUBSTR(v_amount,4,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,4,2));
       END IF;   

   ELSIF v_amount_length = 6
   THEN
       /* Conversion for 6 digits till 999999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,1))||' '||t_typ_word_gap(6); 
       IF SUBSTR(v_amount,2,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,2,2))||' '||t_typ_word_gap(4);
       END IF;
       IF SUBSTR(v_amount,4,1) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,4,1))||' '||t_typ_word_gap(3);
       END IF;   
       IF SUBSTR(v_amount,5,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,5,2));
       END IF;
   ELSIF v_amount_length = 7
   THEN
       /* Conversion for 7 digits till 9999999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,2))||' '||t_typ_word_gap(6); 
       IF SUBSTR(v_amount,3,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,3,2))||' '||t_typ_word_gap(4);
       END IF;
       IF SUBSTR(v_amount,5,1) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,5,1))||' '||t_typ_word_gap(3);
       END IF;   
       IF SUBSTR(v_amount,6,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,6,2));
       END IF;
   ELSIF v_amount_length = 8
   THEN
       /* Conversion for 8 digits till 99999999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,1))||' '||t_typ_word_gap(8); 
       IF SUBSTR(v_amount,2,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,2,2))||' '||t_typ_word_gap(6);
       END IF;
       IF SUBSTR(v_amount,4,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,4,2))||' '||t_typ_word_gap(4);
       END IF;   
       IF SUBSTR(v_amount,6,1) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,6,1))||' '||t_typ_word_gap(3);
       END IF;
       IF SUBSTR(v_amount,7,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,7,2));
       END IF;
   ELSIF v_amount_length = 9
   THEN
       /* Conversion for 9 digits till 999999999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,2))||' '||t_typ_word_gap(8); 
       IF SUBSTR(v_amount,3,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,3,2))||' '||t_typ_word_gap(6);
       END IF;
       IF SUBSTR(v_amount,5,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,5,2))||' '||t_typ_word_gap(4);
       END IF;   
       IF SUBSTR(v_amount,7,1) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,7,1))||' '||t_typ_word_gap(3);
       END IF;
       IF SUBSTR(v_amount,8,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,8,2));
       END IF;
   ELSIF v_amount_length = 10
   THEN
       /* Conversion for 10 digits till 9999999999 */
       v_words := t_typ_word_list(SUBSTR(v_amount,1,1))||' '||t_typ_word_gap(10); 
       IF SUBSTR(v_amount,2,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,2,2))||' '||t_typ_word_gap(8);
       END IF;
       IF SUBSTR(v_amount,4,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,4,2))||' '||t_typ_word_gap(6);
       END IF;   
       IF SUBSTR(v_amount,6,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,6,2))||' '||t_typ_word_gap(4);
       END IF;
       IF SUBSTR(v_amount,8,1) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,8,1))||' '||t_typ_word_gap(3);
       END IF;
       IF SUBSTR(v_amount,9,2) != 0
       THEN  
           v_words := v_words ||' '||t_typ_word_list(SUBSTR(v_amount,9,2));
       END IF;
   END IF;
   --
   IF v_point_found = 'Y'
   THEN
       IF v_point_value != 0
       THEN
           v_words := v_words||' '||t_typ_word_gap(2)||' '||t_typ_word_list(CASE WHEN LENGTH(SUBSTR(p_amount,(INSTR(p_amount,'.',1) + 1),2)) = 1 THEN SUBSTR(p_amount,(INSTR(p_amount,'.',1) + 1),2)||'0'
                                                                                 WHEN LENGTH(SUBSTR(p_amount,(INSTR(p_amount,'.',1) + 1),2)) = 2 THEN SUBSTR(p_amount,(INSTR(p_amount,'.',1) + 1),2)
                                                                            END);
       END IF;
   END IF;
   --
   IF p_amount < 0
   THEN
       v_words := 'Minus '||v_words;
   ELSIF p_amount = 0
   THEN
       v_words := 'Zero';
   END IF;
   IF LENGTH(v_amount) > 10
   THEN
       v_words := 'Value larger than specified precision allowed to convert into words. Maximum 10 digits allowed for precision.';
   END IF;
   RETURN (v_words);

END f_words;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.GET_DATE_POONGIN;

CREATE OR REPLACE FUNCTION HPDQ.get_date_poongin(p_date varchar ) RETURN varchar IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       get_date_pongin
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/19/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     get_date_pongin
      Sysdate:         10/19/2009
      Date and Time:   10/19/2009, 1:34:38 PM, and 10/19/2009 1:34:38 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
p_temp number:=0;
p_ref sys_refcursor;
p_rtn varchar(8):='';
BEGIN
   p_rtn:=p_date;
   loop
   p_temp:=0;
   p_rtn:=to_char(to_date(p_rtn,'YYYYMMDD')-1,'yyyymmdd');
   open p_ref for 
   select 1 from comm.tco_abcalendar m where m.DEL_IF=0 and m.CAR_DATE=p_rtn and m.HOL_TYPE is not null ;
    fetch p_ref into p_temp;
    exit when p_temp=0; 
   end loop;
   
   RETURN p_rtn;



   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HEX2DEC;

CREATE OR REPLACE FUNCTION HPDQ.hex2dec (hexnum varchar) RETURN NUMBER IS
  i                 NUMBER;
  digits            NUMBER;
  result            NUMBER := 0;
  current_digit     CHAR(1);
  current_digit_dec NUMBER;
BEGIN
  digits := LENGTH(hexnum);
  FOR i IN 1..digits LOOP
     current_digit := SUBSTR(hexnum, i, 1);
     IF current_digit IN ('A','B','C','D','E','F') THEN
        current_digit_dec := ASCII(current_digit) - ASCII('A') + 10;
     ELSE
        current_digit_dec := TO_NUMBER(current_digit);
     END IF;
     result := (result * 16) + current_digit_dec;
  END LOOP;
  RETURN result;
END hex2dec;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_CHECK_HOL_NB;

CREATE OR REPLACE FUNCTION HPDQ.HR_CHECK_HOL_NB(
  p_thr_emp_pk   IN  number,
  p_work_dt     VARCHAR
  ) RETURN number IS
  l_result number;
  l_cur_rec number;

l_cur sys_refcursor;
l_flag_exist boolean:=FALSE;

BEGIN

    OPEN l_cur FOR
            SELECT 1 FROM THR_ABSENCE_REG A
            WHERE A.DEL_IF=0 AND A.THR_EMP_PK=p_thr_emp_pk
            AND p_work_dt BETWEEN A.START_DT AND A.END_DT; 

            FETCH l_cur INTO l_cur_rec;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
       l_result:=0;
 else 
       l_result:=1; 
 end if;
    
    return l_result;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_CHECK_NUMBER;

CREATE OR REPLACE FUNCTION HPDQ.HR_check_number(
  p_number   IN  varchar2
  ) RETURN number IS
  l_result number;
  l_exp number;
BEGIN
    select to_number(p_number) into l_exp from dual;
    return 1;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_CLASSIFICATION_MONEY;

CREATE OR REPLACE FUNCTION HPDQ.HR_Classification_Money(p_salary  IN  NUMBER
  ) RETURN A_MONEY_TYPE IS
  l_money number;
  l_mod_number number;
  l_div_number number;
  l_money_type   A_MONEY_TYPE:=A_MONEY_TYPE();
  text varchar2(100);
  l_i number;
BEGIN
    l_mod_number:=p_salary;
    l_i:=1;
   for l_money in (select num_2 from vhr_hr_code where id='HR0045' order by num_1)
   loop
       l_div_number:=trunc(l_mod_number/l_money.num_2);
       l_mod_number:=mod(l_mod_number,l_money.num_2);
       l_money_type.EXTEND;

       l_money_type(l_i):=l_div_number;
       l_i:=l_i+1;
   end loop;
   return l_money_type;
   EXCEPTION
     WHEN OTHERS THEN
           Raise_application_error(-20001,'Loi: ' || SQLERRM);
       RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_CLASSIFICATION_MONEY_DETAIL;

CREATE OR REPLACE FUNCTION HPDQ.hr_Classification_Money_Detail(
  p_salary number,
  p_number number
  ) RETURN number IS
  l_money_type a_money_type:=a_money_type();
BEGIN
   l_money_type:=hr_Classification_Money(p_salary);
   return l_money_type(p_number);
   EXCEPTION
     WHEN OTHERS THEN
           Raise_application_error(-20001,'Loi: ' || SQLERRM);
       RAISE;
END;
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_BEGIN_OF_WEEK;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_BEGIN_OF_WEEK
(
    in_DATE IN VARCHAR2,
    in_tco_company_pk in varchar2
)
RETURN varchar2 
IS
WEEK_NO NUMBER;
WEEK NUMBER;
FROM_DATE VARCHAR2(10);
BEGIN_OF_WEEK varchar2(8);

BEGIN


    WEEK_NO := 0 ;

    SELECT MIN(CAR_DATE) INTO FROM_DATE FROM THR_CALENDAR
    WHERE DAY_TYPE=2 AND CAR_DATE BETWEEN SUBSTR(in_DATE,1,4)||'0101' AND SUBSTR(in_DATE,1,4)||'0107' ;


    SELECT COUNT(*) INTO WEEK FROM THR_CALENDAR
    WHERE CAR_DATE BETWEEN FROM_DATE AND in_DATE
    and del_if = 0
    and tco_company_pk = in_tco_company_pk   ;

    IF MOD(WEEK,7)>0 THEN
         WEEK_NO := TRUNC(WEEK/7,0) + 1 ;
    ELSE
         WEEK_NO := TRUNC(WEEK/7,0);
    END IF ;

    select to_char(to_date(FROM_DATE,'yyyymmdd') + (WEEK_NO-1)*7 ,'yyyymmdd')
    into  BEGIN_OF_WEEK
    from dual ;
    
    
   RETURN BEGIN_OF_WEEK;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_F_BEGIN_OF_WEEK;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_BO_DAU;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_BO_DAU(
P_STR IN VARCHAR2

)RETURN VARCHAR IS
tmp  varchar(1000):='';
k1 NUMBER;
k2 NUMBER;
tmp2  varchar(1000):='';
tmp3  varchar(1000):='';
n number(10):=1;
flag number(1):=0;
TYPE Char_Array IS TABLE OF VARCHAR2(200) INDEX BY BINARY_INTEGER;
c1 Char_Array;
c2 Char_Array;
--s1 varchar2(1000):='A´A`A?A~A?ÂÂ?Â´Â`Â?Â~AA´A`A?A~A?E´E?E~E?E`ÊÊ´Ê`Ê?Ê~ÊI´I`I?I~I??O´O`O?O~O?ÔÔ´Ô`Ô?Ô~Ô?OO`O?O~O?UU´U`U?U~U?U´U`U?U~U?Y´Y`Y?Y~Y?Ð';
--s2 varchar2(1000):='AAAAAAAAAAAAAAAAAEEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOOOUUUUUUUUUUUYYYYYD';
l_flag_exist boolean:=FALSE;
    l_cur_rec number;
    l_cur sys_refcursor;


BEGIN

    if p_str is null then
    
        return '';    
    
    end if;

 OPEN l_cur FOR
                SELECT A.MA_ACCII,A.MA_ACCII2
                FROM THR_ASCII_CONVERT A;
                
 LOOP
                FETCH l_cur INTO c1(n),c2(n);
                EXIT WHEN l_cur%NOTFOUND; 
                n:=n+1;          
END LOOP;          
CLOSE l_cur;                     


tmp2:=upper(P_STR);


 FOR i IN 1..length(tmp2) LOOP
            tmp3:=substr(tmp2,i,1);
             k2:=ascii(substr(tmp2,i,1));
             FOR k IN 1..n-1 LOOP
                    IF k2=c1(k) then
                            tmp:=tmp||chr(c2(k)); 
                            flag:=1;
                    END IF;       
             END LOOP;
             IF  flag=1 THEN
                    flag:=0;
             ELSE
                   tmp:=tmp||substr(tmp2,i,1);                
             END IF;
             
 END LOOP;    
 
 return tmp;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CAL_ALE;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_CAL_ALE(
P_YEAR_MONTH IN VARCHAR2,
P_JOIN_DATE IN VARCHAR2,
P_ALE_YEAR  IN NUMBER,
P_ALE_ADJUST  IN NUMBER,
p_emp_pk  IN NUMBER

)RETURN NUMBER IS
AV_MONTH  NUMBER;
AV_MONTH2  NUMBER;
AV_ALE  NUMBER;
l_ref sys_refcursor;
p_option varchar2(1):='1';
p_option_day number:=0;
ALE_STANDARD NUMBER;
av_result number(10,2);

l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
l_date varchar2(8);
l_join_dt varchar2(8);
l_company_pk number :=0;
L_ALE_ADJUST NUMBER;
l_join_num   number;
BEGIN
 
select tco_company_pk into l_company_pk from thr_employee e where e.del_if=0 and e.pk=p_emp_pk;

    OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_F_CAL_ALE') and nvl(tco_company_pk,l_company_pk )=l_company_pk  ;

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
        l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5) from dual' ;
        execute  immediate l_string  into av_result using in P_YEAR_MONTH,in P_JOIN_DATE,in P_ALE_YEAR,in P_ALE_ADJUST,in P_emp_pk;
 else 
    IF P_ALE_YEAR=0 THEN
        av_result:=0;
    ELSE    
    
         SELECT NVL(A.NUM_3,5)*12 INTO ALE_STANDARD 
             FROM VHR_HR_CODE A
            WHERE A.ID='HR0006' AND A.CODE='05';
            
        -- KIEM TRA LAM TRON NGAY VAO
         SELECT MAX(V.NUM_1) INTO l_join_num 
         FROM VHR_HR_CODE V
         WHERE V.ID ='HR0122'
         AND V.CODE = '05' ;
         
         IF l_join_num IS NOT NULL THEN  -- CO LAM TRON NGAY VAO
         
            if to_number(substr(P_JOIN_DATE,-2)) > l_join_num then 
                l_join_dt:=substr(to_char(add_months(to_date(P_JOIN_DATE,'yyyymmdd'),1),'yyyymmdd'),1,6)||'01';
            else  
                l_join_dt:=substr(P_JOIN_DATE,1,6)||'01';
            end if; 
         
         ELSE 
         
            l_join_dt:=P_JOIN_DATE;
            
         END IF;    
        
        
        
        open l_ref for  SELECT nvl(num_1,0) 
        FROM VHR_HR_CODE A
        WHERE A.ID='HR0122' AND A.CODE='06';
        fetch l_ref into p_option_day;
        
        if l_ref %notfound= true then
                p_option_day:= 0;
        end if;
        close l_ref; 
         
          SELECT (LAST_DAY(TO_DATE(P_YEAR_MONTH,'YYYYMM'))+1-TO_DATE(l_join_dt,'YYYYMMDD'))*12/365
            ,(LAST_DAY(TO_DATE(P_YEAR_MONTH,'YYYYMM'))+1-TO_DATE(SUBSTR(P_YEAR_MONTH,1,4)||'0101','YYYYMMDD'))*12/365
                                INTO AV_MONTH,AV_MONTH2 FROM DUAL;           
       
         IF TO_NUMBER(SUBSTR(P_YEAR_MONTH,1,4))>TO_NUMBER(SUBSTR(l_join_dt,1,4)) THEN
               AV_ALE:= round(AV_MONTH2,3);
        ELSE
            AV_ALE:=round(AV_MONTH,3);
        END IF;
        
        /* select lai du lieu ale adjsut vi function nay duoc goi tu nhieu nguon 15-12-2015
        de tranh sai sot 
            
         */
        SELECT nvl(sum(a.ALE_PAY),0) INTO L_ALE_ADJUST
        FROM THR_MONTHLY_ALE A WHERE A.DEL_IF=0 AND A.THR_EMP_PK=p_emp_pk
        AND SUBSTR(A.WORK_MON,1,4)=SUBSTR(P_YEAR_MONTH,1,4)
        AND A.WORK_MON<=P_YEAR_MONTH;

        av_result:= ROUND(((P_ALE_YEAR+ TRUNC(AV_MONTH/ALE_STANDARD))/12*AV_ALE), p_option_day)-NVL(L_ALE_ADJUST,0) ;
    END IF;
 end if;
 
 
 
  return av_result;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_F_CAL_ALE;
 
 
/

DROP FUNCTION HPDQ.HR_F_CAL_ALE_2;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_CAL_ALE_2(
P_DATE IN VARCHAR2,
P_JOIN_DATE IN VARCHAR2,
P_ALE_YEAR  IN NUMBER,
P_EMP_PK    IN NUMBER,
P_ALE_ADJUST  IN NUMBER

)RETURN NUMBER IS
AV_MONTH  NUMBER;
AV_MONTH2  NUMBER;
AV_ALE  NUMBER;
L_FLAG_EXIST BOOLEAN:=FALSE;
    AL_USE NUMBER;
    L_CUR SYS_REFCURSOR;
    L_UNPAY_LAST_YEAR  NUMBER;
    P_OPTION VARCHAR2(1):='1';
    P_OPTION_DAY NUMBER:=0;
ALE_STANDARD NUMBER:=60;
AV_RESULT NUMBER:=0;
L_PRO VARCHAR2(200):='';
L_STRING VARCHAR2(1000):='';
L_DATE VARCHAR2(8);
L_JOIN_DT VARCHAR2(8);
L_CUR_REC NUMBER;
L_COMPANY_PK NUMBER;

L_ALE_ADJUST NUMBER;


BEGIN

   
   
   SELECT E.TCO_COMPANY_PK INTO L_COMPANY_PK
   FROM THR_EMPLOYEE E
   WHERE E.DEL_IF=0 AND E.PK=P_EMP_PK;


OPEN L_CUR FOR
            SELECT A.CHAR_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_F_CAL_ALE_2')
             AND  NVL(A.TCO_COMPANY_PK,L_COMPANY_PK)=L_COMPANY_PK;

            FETCH L_CUR INTO L_PRO;
            L_FLAG_EXIST:=L_CUR%FOUND;
            CLOSE L_CUR;

 IF L_FLAG_EXIST=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
        L_STRING := 'select ' || L_PRO || '(:1,:2,:3,:4,:5) from dual' ;
        EXECUTE  IMMEDIATE L_STRING  INTO AV_RESULT USING IN P_DATE,IN P_JOIN_DATE,IN P_ALE_YEAR ,IN P_EMP_PK, IN P_ALE_ADJUST;
 ELSE 



   IF P_ALE_YEAR=0 THEN
        RETURN 0;
    END IF;
    
    OPEN L_CUR FOR
    SELECT 1
    FROM THR_ANNUAL_LEAVE A
    WHERE A.DEL_IF=0 AND A.THR_EMP_PK=P_EMP_PK 
    AND A.AN_YEAR=SUBSTR(P_DATE,1,4);
    
     FETCH L_CUR INTO L_CUR_REC;
      L_FLAG_EXIST := L_CUR%FOUND;
    CLOSE L_CUR;
    
    IF L_FLAG_EXIST=TRUE THEN
        SELECT NVL(A.TOTAL_UNPAY,0) INTO  AV_RESULT 
        FROM THR_ANNUAL_LEAVE A
        WHERE A.DEL_IF=0 AND A.THR_EMP_PK=P_EMP_PK 
        AND A.AN_YEAR=SUBSTR(P_DATE,1,4);
    
    ELSE   
   
           OPEN L_CUR FOR 
           SELECT SUM(NVL(A.ABSENCE_TIME,0))/8
           FROM THR_ABSENCE A
           WHERE A.THR_EMP_PK=P_EMP_PK AND DEL_IF=0
           AND SUBSTR(A.ABSENCE_DT,1,4)=SUBSTR(P_DATE,1,4)
           AND A.ABSENCE_TYPE='01'
           AND A.ABSENCE_DT <=P_DATE;    

            FETCH L_CUR INTO AL_USE;
            
            IF AL_USE IS NULL THEN
                AL_USE:=0;
            END IF;    
                
            CLOSE L_CUR;    
            
            OPEN L_CUR FOR
            SELECT C.TOTAL_UNPAY
            FROM THR_ANNUAL_LEAVE C
            WHERE C.THR_EMP_PK=P_EMP_PK AND C.DEL_IF=0
            AND C.AN_YEAR=TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(P_DATE,1,6),'YYYYMM'),-12),'YYYY'); --du lieu nam truoc

            FETCH L_CUR INTO L_UNPAY_LAST_YEAR;
            L_FLAG_EXIST:=L_CUR%FOUND;
            IF L_FLAG_EXIST=FALSE THEN
                L_UNPAY_LAST_YEAR:=0;
            END IF;    
            CLOSE L_CUR;
            
            -----
               
         SELECT NVL(A.NUM_3,5)*12 INTO ALE_STANDARD 
             FROM VHR_HR_CODE A
            WHERE A.ID='HR0006' AND A.CODE='05';
           
         OPEN L_CUR FOR  SELECT NVL(NUM_1,'1') 
            FROM VHR_HR_CODE A
            WHERE A.ID='HR0122' AND A.CODE='05';
            FETCH L_CUR INTO P_OPTION;
           
           IF L_CUR %NOTFOUND=TRUE THEN --ko su dung lam tron 
                L_JOIN_DT:=P_JOIN_DATE;
                 L_DATE:=P_DATE;
           ELSE --ko lam trong 
                 
                 IF TO_NUMBER(SUBSTR(P_JOIN_DATE,-2))>15 THEN 
                    L_JOIN_DT:=SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(P_JOIN_DATE,'yyyymmdd'),1),'yyyymmdd'),1,6)||'01';
                ELSE  
                    L_JOIN_DT:=SUBSTR(P_JOIN_DATE,1,6)||'01';
                END IF;     
                
                 IF TO_NUMBER(SUBSTR(P_DATE,-2))>15 THEN 
                   L_DATE:=SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(P_DATE,'yyyymmdd'),1),'yyyymmdd'),1,6)||'01';
                ELSE  
                    L_DATE:=SUBSTR(P_DATE,1,6)||'01';
                END IF;     
           END IF;
            CLOSE L_CUR;
         
         OPEN L_CUR FOR  SELECT NVL(NUM_1,0) 
            FROM VHR_HR_CODE A
            WHERE A.ID='HR0122' AND A.CODE='06';
            FETCH L_CUR INTO P_OPTION_DAY;
            
            IF L_CUR %NOTFOUND= TRUE THEN
                    P_OPTION_DAY:= 0;
            END IF;
            CLOSE L_CUR;
            
            
                

            SELECT (TO_DATE(L_DATE,'YYYYMMDD')-TO_DATE(L_JOIN_DT,'YYYYMMDD'))*12/365.25
            ,(TO_DATE(L_DATE,'YYYYMMDD')-TO_DATE(SUBSTR(P_DATE,1,4)||'0101','YYYYMMDD'))*12/365.25
                                INTO AV_MONTH,AV_MONTH2 FROM DUAL;
                                
                                
            IF TO_NUMBER(SUBSTR(P_DATE,1,4))>TO_NUMBER(SUBSTR(L_JOIN_DT,1,4)) THEN
                AV_ALE:= ROUND(AV_MONTH2,3);
            ELSE
                AV_ALE:=ROUND(AV_MONTH,3);
            END IF;
            
            
             /* select lai du lieu ale adjsut vi function nay duoc goi tu nhieu nguon 15-12-2015
        de tranh sai sot 
            
         */
        SELECT nvl(sum(a.ALE_PAY),0) INTO L_ALE_ADJUST
        FROM THR_MONTHLY_ALE A WHERE A.DEL_IF=0 AND A.THR_EMP_PK=p_emp_pk
        AND SUBSTR(A.WORK_MON,1,4)=SUBSTR(P_DATE,1,4);
        --AND A.WORK_MON<=SUBSTR(P_DATE,1,6);
        
           
        AV_RESULT:=ROUND(((P_ALE_YEAR+ TRUNC(AV_MONTH/ALE_STANDARD))/12*AV_ALE), P_OPTION_DAY) +L_UNPAY_LAST_YEAR-AL_USE -NVL(L_ALE_ADJUST,0);
      END IF;    
  END IF;
  
  RETURN AV_RESULT;

  /* EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
      RAISE;*/
END HR_F_CAL_ALE_2;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CAL_ALE_STOP;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_CAL_ALE_STOP(
P_DATE IN VARCHAR2,
P_JOIN_DATE IN VARCHAR2,
P_ALE_YEAR  IN NUMBER,
P_ALE_ADJUST  IN NUMBER,
P_EMP_PK IN NUMBER    
)RETURN NUMBER IS
AV_MONTH  NUMBER;
AV_MONTH2  NUMBER;
AV_YEAR NUMBER;
AV_ALE  NUMBER;

p_option varchar2(1):='1';
p_option_day number:=0;
ALE_STANDARD NUMBER;
l_cur sys_refcursor;
l_flag_exist  boolean:=false;
l_string varchar2(100):='';
av_result number(10,2) :=0;
l_pro varchar2(100):=''; 
l_date varchar2(8);
l_join_dt varchar2(8);
l_company_pk number;
L_ALE_ADJUST NUMBER;
l_resign_num  number;
l_join_num   number;
BEGIN

 select e.tco_company_pk into l_company_pk
   from thr_employee e
   where e.del_if=0 and e.pk=P_EMP_PK;

OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_F_CAL_ALE_STOP')
              and  nvl(a.TCO_COMPANY_PK,l_company_pk)=l_company_pk;

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
        l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5) from dual' ;
        execute  immediate l_string  into av_result using in P_DATE,in P_JOIN_DATE,in P_ALE_YEAR,in P_ALE_ADJUST, in P_EMP_PK;
 else 

   if months_between(to_date(P_DATE,'yyyymmdd'),to_date(P_JOIN_DATE,'yyyymmdd')) <1 then
      return 0;
   end if;

    IF P_ALE_YEAR=0 THEN
        av_result:=0;
    ELSE
    
         SELECT NVL(A.NUM_3,5)*12 INTO ALE_STANDARD 
             FROM VHR_HR_CODE A
            WHERE A.ID='HR0006' AND A.CODE='05';
            
       -- KIEM TRA LAM TRON NGAY NGHI     
         SELECT MAX(V.NUM_1) INTO l_resign_num 
         FROM VHR_HR_CODE V
         WHERE V.ID ='HR0122'
         AND V.CODE = '09' ;
         
         IF l_resign_num IS NOT NULL THEN  -- CO LAM TRON NGAY NGHI
         
            if to_number(substr(P_DATE,-2)) > l_resign_num then 
                   l_date:=to_char(last_day(to_date(P_DATE,'yyyymmdd')),'yyyymmdd');
            else  
                   l_date:=to_char(last_day(add_months(to_date(P_DATE,'yyyymmdd'),-1)),'yyyymmdd');    --lay ngay cuoi cung cua thang truoc
            end if; 
         
         ELSE 
         
            l_date:=P_DATE;
            
         END IF;
           
        -- KIEM TRA LAM TRON NGAY VAO
         SELECT MAX(V.NUM_1) INTO l_join_num 
         FROM VHR_HR_CODE V
         WHERE V.ID ='HR0122'
         AND V.CODE = '05' ;
         
         IF l_join_num IS NOT NULL THEN  -- CO LAM TRON NGAY VAO
         
            if to_number(substr(P_JOIN_DATE,-2)) > l_join_num then 
                l_join_dt:=substr(to_char(add_months(to_date(P_JOIN_DATE,'yyyymmdd'),1),'yyyymmdd'),1,6)||'01';
            else  
                l_join_dt:=substr(P_JOIN_DATE,1,6)||'01';
            end if; 
         
         ELSE 
         
            l_join_dt:=P_JOIN_DATE;
            
         END IF;
            
           
          open l_cur for  SELECT nvl(num_1,0) 
            FROM VHR_HR_CODE A
            WHERE A.ID='HR0122' AND A.CODE='06';
            fetch l_cur into p_option_day;
            
            if l_cur %notfound= true then
                    p_option_day:= 0;
            end if;
            close l_cur;

            SELECT 
             (TO_DATE(l_date,'YYYYMMDD')-TO_DATE(l_join_dt,'YYYYMMDD'))*12/365
            ,(TO_DATE(l_date,'YYYYMMDD')-TO_DATE(SUBSTR(l_date,1,4)||'0101','YYYYMMDD') + 1)*12/365
                                INTO AV_MONTH,AV_MONTH2 FROM DUAL;
                                
            IF TO_NUMBER(SUBSTR(P_DATE,1,4))>TO_NUMBER(SUBSTR(l_join_dt,1,4)) THEN
             AV_ALE:= round(AV_MONTH2,3);
            ELSE
                AV_ALE:=round(AV_MONTH,3);
            END IF;
            
            
            /* select lai du lieu ale adjsut vi function nay duoc goi tu nhieu nguon 15-12-2015
        de tranh sai sot 
            
         */
        SELECT nvl(sum(a.ALE_PAY),0) INTO L_ALE_ADJUST
        FROM THR_MONTHLY_ALE A WHERE A.DEL_IF=0 AND A.THR_EMP_PK=p_emp_pk
        AND SUBSTR(A.WORK_MON,1,4)=SUBSTR(P_DATE,1,4);
        --AND A.WORK_MON<=P_DATE;
            

           av_result :=ROUND(((P_ALE_YEAR+ TRUNC(AV_MONTH/ALE_STANDARD))/12*AV_ALE), p_option_day)-NVL(P_ALE_ADJUST,0);
   END IF;
    
end if;

  return av_result;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
 
 
/

DROP FUNCTION HPDQ.HR_F_CH0000000_00_GET_WEEK;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_ch0000000_00_get_week(
    in_DATE IN VARCHAR2,
    in_tco_company_pk varchar2
    )
RETURN NUMBER IS
WEEK_NO NUMBER;
WEEK NUMBER;
FROM_DATE VARCHAR2(10);

BEGIN


   WEEK_NO := 0 ;

   SELECT MIN(CAR_DATE) INTO FROM_DATE FROM THR_CALENDAR a
   WHERE DAY_TYPE=2 AND CAR_DATE BETWEEN SUBSTR(in_DATE,1,4)||'0101' AND SUBSTR(in_DATE,1,4)||'0107'
   and A.DEL_IF = 0 and A.TCO_COMPANY_PK = in_tco_company_pk ;


   SELECT COUNT(*) INTO WEEK FROM THR_CALENDAR a
   WHERE CAR_DATE BETWEEN FROM_DATE AND in_DATE
   and A.DEL_IF = 0 and A.TCO_COMPANY_PK = in_tco_company_pk ;

   IF MOD(WEEK,7)>0 THEN
         WEEK_NO := TRUNC(WEEK/7,0) + 1 ;
   ELSE
         WEEK_NO := TRUNC(WEEK/7,0);
   END IF ;

   RETURN WEEK_NO;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_f_ch0000000_00_get_week;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CHECK_DATE;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_check_date(
  p_date   IN  varchar2
  ) RETURN number IS
  l_result varchar2(100);
  l_exp varchar2(100);
BEGIN
    select to_char(to_date(p_date,'yyyymmdd'),'yyyymmdd') into l_exp from dual;
    return 1;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CHECK_DATE_2;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_check_date_2(
  p_date   IN  varchar2 --dd/mm/yyyy
  ) RETURN number IS
  l_result varchar2(100);
  l_exp varchar2(100);
BEGIN
    select to_char(to_date(p_date, 'dd/mm/yyyy'), 'yyyymmdd') into l_exp from dual;
    return 1;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
/

DROP FUNCTION HPDQ.HR_F_CHECK_HH24MI;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_check_hh24mi(
  p_hh24mi   IN  varchar2
  ) RETURN number IS
  l_result varchar2(100);
  l_exp varchar2(100);
BEGIN
    select to_char(to_date(p_hh24mi,'hh24:mi'),'hh24:mi') into l_exp from dual;
    return 1;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
 
/

DROP FUNCTION HPDQ.HR_F_CHECK_IN_OUT;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_Check_In_Out(
AS_IN IN VARCHAR2,
AS_OUT IN VARCHAR2,
AS_EPLON IN NUMBER
)RETURN NUMBER IS
H1 NUMBER;
H2 NUMBER;
M1 NUMBER;
M2 NUMBER;
SH NUMBER;
SM NUMBER;

BEGIN
   H1:=TO_NUMBER(SUBSTR(AS_IN,1,2));
   H2:=TO_NUMBER(SUBSTR(AS_OUT,1,2));
   M1:=TO_NUMBER(SUBSTR(AS_IN,4,2));
   M2:=TO_NUMBER(SUBSTR(AS_OUT,4,2));
   SH:=H2-H1;
   SH:=SH*60;
   SM:=M2-M1;
   IF ABS(SH+SM)>=AS_EPLON THEN
         RETURN 1;
    ELSE
        RETURN 0;
  END IF;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_F_Check_In_Out;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CHECK_IN_OUT2;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_Check_In_Out2(
AS_START_TIME IN VARCHAR2,
AS_IN IN VARCHAR2,
AS_EPLON IN NUMBER
)RETURN NUMBER IS
H1 VARCHAR2(20);
H2 VARCHAR2(20);
KC NUMBER;
AV_H NUMBER;
AV_M NUMBER;
AV_CUR_DT VARCHAR2(8);
AV_TOM_DT VARCHAR2(8);
BEGIN
   SELECT TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE+1, 'YYYYMMDD') INTO AV_CUR_DT, AV_TOM_DT FROM DUAL;
   H1  := AV_CUR_DT||AS_START_TIME;
   H2  := AV_TOM_DT||AS_IN;

   SELECT ABS(ROUND((TO_DATE(H2,'YYYYMMDDHH24:MI') - TO_DATE(H1,'YYYYMMDDHH24:MI'))*24,2))
    INTO KC
    FROM DUAL;
    IF KC<=AS_EPLON THEN
       RETURN 1;
    ELSE
        RETURN 0;
    END IF;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_F_Check_In_Out2;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CHECK_MONTH;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_check_month(
  p_date   IN  varchar2
  ) RETURN number IS
  l_result varchar2(100);
  l_exp varchar2(100);
BEGIN
    select to_char(to_date(p_date,'yyyymm'),'yyyymm') into l_exp from dual;
    return 1;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CHECK_NUMBER;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_check_number(
  p_number   IN  varchar2
  ) RETURN number IS
  l_result number;
  l_exp number;
BEGIN
    select to_number(p_number) into l_exp from dual;
    return 1;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_COMMONCODE;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_commoncode (
   v_grp    in   varchar2,                                                                            -- Group Code
   v_case   in   varchar2,                                                                              -- sql case
   v_par    in   varchar2                                                                              -- parameter
)
   return varchar2
is
/*====================================================
FUNCTION NM : F_COMMONCODE
REMARK      : Read Common Code
PARAMETER   :
RETURN      :   common code
MODULE:
CREATED DT  : 2003/10/10
CREATED BY  : Kim, Kyung Sik
=====================================================*/
   type cur_typ is ref cursor;

   d_cur       cur_typ;
   lscode      varchar2 (10)   := null;
   lscdname    varchar2 (100)  := null;
   lsvsql      varchar2 (4001) := null;
   lsvreturn   varchar2 (5000) := null;
   strsql      varchar2 (4000) := null;
   cnt         number;
   i           number (2)      := 1;
   i2          number (2)      := 1;
   i3          number (2)      := 0;
   j           number          := 1;

   type vararray is table of varchar2 (10)
      index by binary_integer;

   a           vararray;
--------
begin
--------
-- sql case without parameter
   if v_case is null
   then
      lsvsql :=
            'SELECT CODE, CODE_NM  FROM TCO_ABCODE A, TCO_ABCODEGRP B WHERE A.TCO_ABCODEGRP_PK =
b.pk and b.id ='''
         || v_grp
         || ''' and a.use_if = 1 and a.del_if = 0 and b.del_if = 0 order by a.DEF_YN desc , ord  ';
   elsif v_par is null
   then
-- sql case without parameter
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;
   else
      select b.sql_text
        into lsvsql
        from tco_abcodegrp a, tco_abcodesql b
       where a.pk = b.tco_abcodegrp_pk and a.id = v_grp and b.sql_case = v_case and a.del_if = 0 and b.del_if = 0;

-- sql case with parameter
      cnt := length (v_par);

      for i in 1 .. cnt
      loop
         i2 := i;

         if substr (v_par, i2, 1) = ';'
         then
            a (j) := substr (v_par, i3 + 1, i2 - i3 - 1);
            lsvsql := replace (lsvsql, '$' || j, '''' || a (j) || '''');
            i3 := i2;
            j := j + 1;
         end if;
      end loop;
   end if;

-- execute sql text
   strsql := lsvsql;

   open d_cur for strsql;

   loop
      fetch d_cur
       into lscode, lscdname;

      exit when d_cur%notfound;
      -- process row here
      lsvreturn := lsvreturn || '' || lscode || '|' || lscdname || '|';
   end loop;

   close d_cur;

   return lsvreturn;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CONVERT_DATE;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_CONVERT_DATE(
  p_date   IN  varchar2 --dd/mm/yyyy
  ) RETURN VARCHAR2 IS
  l_result varchar2(100);
  l_exp varchar2(100);
BEGIN
    select to_char(to_date(p_date, 'dd/mm/yyyy'), 'yyyymmdd') into l_exp from dual;
    return l_exp;
   EXCEPTION
     WHEN OTHERS THEN
           return 0;
END;
/

DROP FUNCTION HPDQ.HR_F_FIND_HR_CODE_VALUE;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_FIND_HR_CODE_VALUE(
    in_id IN VARCHAR2, --hr code id 
    p_code   IN VARCHAR2,
    p_return_column varchar2, --'C1' = char_1, 'N1'= num_1 
    p_org_pk varchar2
    )
RETURN VARCHAR2 IS
p_return varchar2(100);
l_flag_exist boolean:=FALSE;
   l_string varchar2(2000):='';
   l_pro varchar2(200):='';
    l_cur_rec number;
    l_cur sys_refcursor;
/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    OPEN l_cur FOR
    SELECT (CASE WHEN  UPPER(p_return_column)='C1' THEN A.CHAR_1 
                        WHEN  UPPER(p_return_column)='C2' THEN A.CHAR_2
                        WHEN  UPPER(p_return_column)='C3' THEN A.CHAR_3
                        WHEN  UPPER(p_return_column)='C4' THEN A.CHAR_4
                        WHEN  UPPER(p_return_column)='C5' THEN A.CHAR_5
                        WHEN  UPPER(p_return_column)='N1' THEN TO_CHAR(A.NUM_1)
                        WHEN  UPPER(p_return_column)='N2' THEN TO_CHAR(A.NUM_2)
                        WHEN  UPPER(p_return_column)='N3' THEN TO_CHAR(A.NUM_3)
                        WHEN  UPPER(p_return_column)='N4' THEN TO_CHAR(A.NUM_4)
                        WHEN  UPPER(p_return_column)='N5' THEN TO_CHAR(A.NUM_5)
                        ELSE A.CODE_NM END)
    FROM VHR_HR_CODE A
    WHERE A.ID=upper(in_id)
     AND( UPPER(A.code)=UPPER(p_code) or p_code='')
    AND (A.TCO_COMPANY_PK=(select max(b.tco_company_pk) from tco_org b where b.del_if=0 and decode(p_org_pk,'ALL','ALL',b.pk)=p_org_pk) --XAC DINH THEO COMPANY
            OR A.TCO_COMPANY_PK IS NULL
           ) 
    and rownum=1;

    FETCH l_cur INTO l_pro;
    l_flag_exist:=l_cur%FOUND;
    CLOSE l_cur;
    
    IF l_flag_exist=TRUE THEN
        p_return:=l_pro;
    ELSE 
            OPEN l_cur FOR
            SELECT  (CASE WHEN  UPPER(p_return_column)='C1' THEN A.CHAR_1 
                        WHEN  UPPER(p_return_column)='C2' THEN A.CHAR_2
                        WHEN  UPPER(p_return_column)='C3' THEN A.CHAR_3
                        WHEN  UPPER(p_return_column)='C4' THEN A.CHAR_4
                        WHEN  UPPER(p_return_column)='C5' THEN A.CHAR_5
                        WHEN  UPPER(p_return_column)='N1' THEN TO_CHAR(A.NUM_1)
                        WHEN  UPPER(p_return_column)='N2' THEN TO_CHAR(A.NUM_2)
                        WHEN  UPPER(p_return_column)='N3' THEN TO_CHAR(A.NUM_3)
                        WHEN  UPPER(p_return_column)='N4' THEN TO_CHAR(A.NUM_4)
                        WHEN  UPPER(p_return_column)='N5' THEN TO_CHAR(A.NUM_5)
                        ELSE A.CODE_NM END)
             FROM VHR_HR_CODE A            
            WHERE A.ID=upper(in_id)
            AND( UPPER(A.code)=UPPER(p_code) or p_code='')
            and rownum=1;

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;   
            
            IF l_flag_exist=TRUE THEN
                    p_return:=l_pro;
            ELSE
                    p_return:='';
            END IF;        
    END IF;                            

RETURN p_return;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_F_FIND_HR_CODE_VALUE;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_FIND_STORE_COM;

CREATE OR REPLACE FUNCTION HPDQ.hr_F_FIND_STORE_COM(
    in_standard_nm IN VARCHAR2,
    p_tco_company_pk   IN VARCHAR2 
    )
RETURN VARCHAR2 IS
p_return varchar2(100);
l_flag_exist boolean:=FALSE;
   l_string varchar2(2000):='';
   l_pro varchar2(200):='';
    l_cur_rec number;
    l_cur sys_refcursor;
/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
  
            OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER(in_standard_nm) 
            AND (NVL(TO_CHAR(A.TCO_COMPANY_PK),p_tco_company_pk) = p_tco_company_pk or p_tco_company_pk = 'ALL')
            and rownum=1;

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;   
            
            IF l_flag_exist=TRUE THEN
                    p_return:=l_pro;
            ELSE
                    p_return:='0';
            END IF;        
                        

RETURN p_return;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_F_FIND_STORE_COM;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_FIND_STORE_FUNC;

CREATE OR REPLACE FUNCTION HPDQ.hr_F_FIND_STORE_FUNC(
    in_standard_nm IN VARCHAR2,
    p_org_pk   IN VARCHAR2 
    )
RETURN VARCHAR2 IS
p_return varchar2(100);
l_flag_exist boolean:=FALSE;
   l_string varchar2(2000):='';
   l_pro varchar2(200):='';
    l_cur_rec number;
    l_cur sys_refcursor;
/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    OPEN l_cur FOR
    SELECT A.char_3 FROM VHR_HR_CODE A
    WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER(in_standard_nm)
    AND A.TCO_COMPANY_PK=(select max(b.tco_company_pk) from tco_org b where b.del_if=0 and decode(p_org_pk,'ALL','ALL',b.pk)=p_org_pk) --XAC DINH THEO COMPANY 
    and rownum=1;

    FETCH l_cur INTO l_pro;
    l_flag_exist:=l_cur%FOUND;
    CLOSE l_cur;
    
    IF l_flag_exist=TRUE THEN
        p_return:=l_pro;
    ELSE 
            OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER(in_standard_nm) and a.tco_company_pk is null
            and rownum=1;

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;   
            
            IF l_flag_exist=TRUE THEN
                    p_return:=l_pro;
            ELSE
                    p_return:='0';
            END IF;        
    END IF;                            

RETURN p_return;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_F_FIND_STORE_FUNC;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_ACCESS_GROUP;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_ACCESS_GROUP(p_user_pk   Number)
RETURN  VARCHAR2
IS
l_acc_pk       NUMBER(10);
l_cur sys_refcursor;
l_temp varchar2(4000):='';
l_value varchar2(4000):='';
BEGIN
   open  l_cur for
   SELECT 
  -- (select code_nm from vhr_hr_code  v where v.id='HR0217' and v.code=BRANCH_CODE )||'-'||
   (select code_nm from vhr_hr_code  v where v.id='HR0216' and v.code=a.ACCESS_GROUP_CODE  )
     FROM thr_user_mapping a
    WHERE a.thr_unis_user_pk  = p_user_pk
      AND DEL_IF = 0;
      
      loop
      fetch l_cur into l_temp ;
      exit when l_cur%notfound ;
      if l_value is null then 
      l_value:=l_temp;
      else
      l_value:=l_value||','||l_temp;
      end if;
      end loop;

   RETURN  l_value;

EXCEPTION
   WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_CARDIAL_NUM;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_get_cardial_num
   RETURN NUMBER
IS
   l_count            NUMBER;
   l_len              NUMBER        := 0;
   l_code_len         VARCHAR (100);
   l_last             NUMBER;
   l_last_comma_pos   NUMBER;
/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    SELECT COUNT (*)
     INTO l_count
     FROM thr_templates
    WHERE del_if = 0 AND ID = 'Emp' AND TEMPLATE = 'N' and code='BYHAND';
    if l_count>0 then
        return 0;
    end if;
   SELECT COUNT (*)
     INTO l_count
     FROM thr_templates
    WHERE del_if = 0 AND ID = 'Emp' AND TEMPLATE = 'N';

   IF (l_count <> 0)
   THEN
      SELECT code_len
        INTO l_code_len
        FROM thr_templates
       WHERE del_if = 0 AND ID = 'Emp' AND TEMPLATE = 'N';

      SELECT LENGTH (TRIM (TRANSLATE (l_code_len, 'a123456789', ' ')))
        INTO l_last_comma_pos
        FROM DUAL;                            --lay phan tu dau phau cuoi cung
   ELSE
      l_len := 0;
   END IF;

   IF (l_last_comma_pos >= 1)
   THEN
      SELECT INSTR (l_code_len, ',', 1, l_last_comma_pos)
        INTO l_last
        FROM DUAL;
   ELSE
      l_last := 0;
   END IF;

   --lay chieu dai cuoi cung cua ma
   l_len :=
      SUBSTR (l_code_len,
              NVL (l_last, 0) + 1,
              LENGTH (l_code_len) - NVL (l_last, 0)
             );
   RETURN l_len;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_CONTRACT_DT;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_CONTRACT_DT(
    p_date             VARCHAR2       
    )
RETURN VARCHAR2 IS

    l_temp_date          VARCHAR2(10);
  l_out_date VARCHAR2(10);
BEGIN

    
       l_temp_date :=to_char(to_date(p_date,'yyyymmdd') +1,'yyyymmdd');
       if to_char(to_date(l_temp_date,'yyyymmdd'),'d')='1' then 
            l_out_date:=to_char(to_date(l_temp_date,'yyyymmdd') +1,'yyyymmdd'); 
       else
            l_out_date:=l_temp_date;
       end if;
 RETURN l_out_date ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return NULL;
     WHEN OTHERS THEN       
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_CONTRACT_NO;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_get_contract_no
(
    p_emp_id varchar2,
    p_contract_times varchar2,
    p_contract_type  varchar2,
    p_end_contract  varchar2
) RETURN varchar2  IS
l_no varchar2(100);
l_contract_no varchar2(100);
l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('hr_f_get_contract_no');

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

     IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
            l_string := 'select ' || l_pro || '(:1,:2,:3,:4) from dual' ;
            execute  immediate l_string  into l_contract_no using in p_emp_id,in p_contract_times,in p_contract_type,in p_end_contract;
     else 
       SELECT a.char_1
         INTO l_no                   --contract name
         FROM vhr_hr_code a
        WHERE a.ID = 'HR0001' AND a.code = p_contract_type;
       l_contract_no:=p_emp_id || '/' || p_contract_times || '/' || l_no;
     end if;
   RETURN l_contract_no;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_DATE;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_DATE(
    p_emp_pk        number,
    p_date             VARCHAR2       
    )
RETURN VARCHAR2 IS

    l_date          VARCHAR2(10);
    l_flag          boolean:=true;
    l_cursor           sys_refcursor; 
     l_cur_rec      number;
BEGIN

    l_date := p_date ;          
    
    while  l_flag = true
    loop     
       open l_cursor for 
       select 1
       from thr_absence a 
       where a.ABSENCE_DT=l_date
       and a.THR_EMP_PK=p_emp_pk 
       and a.DEL_IF=0
       union  all
       select 1
       from tco_abcalendar ta
       where ta.DEL_IF=0   
       and ta.HOL_TYPE in ('SUN','HOL')
       and ta.CAR_DATE=l_date ; 
        
        FETCH l_cursor INTO l_cur_rec;
        l_flag:=l_cursor%FOUND;
        CLOSE l_cursor;
                                
    exit when l_flag=false ;
    
        l_date:=to_char(to_date(l_date,'yyyymmdd')+1,'yyyymmdd');
             
    end loop;
   
   RETURN l_date ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN       
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_DAYS_IN_MON;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_DAYS_IN_MON(
    p_date              VARCHAR2,
    p_thr_emp_pk        varchar2,
    p_period_kind       VARCHAR2       
    )
RETURN VARCHAR2 IS

    l_num             VARCHAR2(10);
    l_company_pk        varchar2(100) ;           
    l_mon           varchar2(6);
    l_from           varchar2(8);
    l_to           varchar2(8);
    l_period_sal    varchar2(10);
    l_flag          boolean:=true;
    l_cursor           sys_refcursor; 
     l_cur_rec      number;
BEGIN
    
    /*    
        p_period_kind : 
        A so ngay chu ky Active
        R so ngay chu ky Resign
    */
    
    if p_period_kind='A' then
        
        select E.SAL_PERIOD, E.TCO_COMPANY_PK
        into l_period_sal, l_company_pk
        from thr_employee e
        where E.DEL_IF = 0
        and E.PK = p_thr_emp_pk ;
    
        select C.MONTH_CLOSE, C.FROM_DT, C.TO_DT
        into l_mon , l_from, l_to
        from  thr_close c
        where C.DEL_IF = 0
        and p_date between C.FROM_DT and C.TO_DT
        and C.ID = l_period_sal
        and C.TIMES = 1; 
        
        select count(*) 
        into l_num
        from thr_calendar a
        where A.DEL_IF = 0
        and nvl(A.HOL_TYPE,' ') <> 'SUN'
        and A.TCO_COMPANY_PK = l_company_pk
        and A.CAR_DATE between l_from and l_to ;
        
    else
    
        l_num := '' ;
        
    end if ; 
   
   RETURN l_num ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN       
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_EMP_ID2;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_EMP_ID2(
    p_emp_pk        varchar   
    )
RETURN varchar IS

   l_id varchar2(20);
   l_cursor           sys_refcursor; 
   l_flag      boolean:=false;
BEGIN

    open l_cursor for
        select emp_id
        from thr_employee e
        where E.DEL_IF=0
        and E.pk=p_emp_pk;
        
    FETCH l_cursor INTO l_id;
        l_flag:=l_cursor%FOUND;
    CLOSE l_cursor;     
    if l_flag=false then
           l_id:='0';
    end if;           
   
   RETURN l_id ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN       
       RAISE;
END HR_F_GET_EMP_ID2;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_EMP_ID_NAME;

CREATE OR REPLACE FUNCTION HPDQ.HR_f_get_emp_id_name (
   p_pk        number,
   p_flag      varchar
)
   return varchar2
is

   l_rtn_value   varchar2 (100);
begin
   if p_pk is null then
        l_rtn_value:='';
   else

       select MAX(decode(p_flag,'0',emp_id,full_name)) into l_rtn_value
       from thr_employee t
       where del_if=0 and t.pk=p_pk;
   end if;
   return l_rtn_value;
--============
exception
--============
   when others
   then
      raise_application_error(-20001,'Error:' ||SQLERRM);
      return null;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_EMP_PK;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_EMP_PK(
    p_emp_id        varchar   
    )
RETURN number IS

   l_pk number;
   l_cursor           sys_refcursor; 
   l_flag      boolean:=false;
BEGIN

    open l_cursor for
        select pk
        from thr_employee e
        where E.DEL_IF=0
        and E.EMP_ID=p_emp_id;
        
    FETCH l_cursor INTO l_pk;
        l_flag:=l_cursor%FOUND;
    CLOSE l_cursor;     
    if l_flag=false then
           l_pk:=0;
    end if;           
   
   RETURN l_pk ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN       
       RAISE;
END HR_F_GET_EMP_PK;
/

DROP FUNCTION HPDQ.HR_F_GET_END_PROBATION;

CREATE OR REPLACE FUNCTION HPDQ.HR_f_get_end_probation
( p_probation_type                 varchar,
   p_join_dt                   varchar
) RETURN varchar2  IS
p_end_probation varchar2(100);
 l_plus_cal     number;
   l_end           number;
   l_type           varchar2(30);


/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    select a.NUM_1,a.num_3,a.CHAR_1 into l_plus_cal,l_end,l_type 
    from thr_code_detail a, thr_code_master b 
    where a.del_if=0 and b.del_if=0 and a.thr_code_master_pk=b.pk and b.id='HR0002' and a.code=p_probation_type;
    
    
    if l_plus_cal is null then --have to input probation date
        p_end_probation:='';
    elsif l_plus_cal=0 then
        p_end_probation:=p_join_dt;
    else
        if l_type='MONTH' then
            select to_char(add_months(to_date(p_join_dt,'yyyymmdd'),l_plus_cal) + l_end,'yyyymmdd') into p_end_probation from dual ;
        else
            select to_char(to_date(p_join_dt,'yyyymmdd') + l_plus_cal + l_end,'yyyymmdd') into p_end_probation from dual ;
        end if;
    end if;

   RETURN p_end_probation;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_HOL_JOIN_DT;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_HOL_JOIN_DT(
    p_date             VARCHAR2     --join date     
    )
RETURN VARCHAR2 IS

    l_date          number:=0;
    l_hol       number:=0;
    
BEGIN

    l_date := to_number(substr(p_date,-2)) - 1; --lay ngay vao tru cho ngay dau thang

    if l_date = 0 then
        return l_date;  -- vao ngay dau thang
    else
        --Dem co bao nhieu  ngay le va chu nhat
        select count(*) into l_hol from tco_abcalendar c 
        where c.del_if = 0
            and C.CAR_DATE between to_char(to_date(substr(p_date,1,6)||'01','yyyymmdd'),'yyyymmdd') and to_char(to_date(p_date,'yyyymmdd')-1,'yyyymmdd')
            and C.HOL_TYPE is not null;    
            
        if l_hol = l_date then
            return l_date;
        else
            return 0;
        end if;       
    
    end if;    
   
   RETURN 0;
EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN       
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_MANAGER;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_MANAGER(
    in_ORG_PK IN VARCHAR2,
    in_emp_id IN VARCHAR2,
    in_flag   IN VARCHAR2--MANAGER KIND,ID , NAME , PK
    )
RETURN VARCHAR2 IS
TMP_KIND    VARCHAR2(200);
TMP_ID      VARCHAR2(200);
TMP_NM      VARCHAR2(200);
TMP_PK      NUMBER;
TMP_ORG_NM VARCHAR(200);
TMP_COMPANY_PK  NUMBER;

/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

   SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
        INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
            FROM tco_org t
            WHERE t.del_if = 0
            AND T.ORG_TYPE IN('06')
            START WITH t.pk=in_ORG_PK
            CONNECT BY PRIOR t.p_pk=t.pk;

   IF in_emp_id=TMP_ID THEN --GET PARENT ID
        SELECT B.MANAGER_KIND, B.MANAGER_ID, B.MANAGER_PK,B.ORG_NM,B.TCO_COMPANY_PK
             INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
        FROM tco_org A,tco_org B
        WHERE A.DEL_IF=0 AND B.DEL_IF=0
              AND A.P_PK=B.PK
              AND A.PK=in_ORG_PK;
   END IF;

   IF in_flag='KIND' THEN
        RETURN NVL(TMP_KIND,'01');
   ELSIF in_flag='ID' THEN
       RETURN TMP_ID;
   ELSIF in_flag='PK' THEN
       RETURN TO_CHAR(TMP_PK);
   ELSIF in_flag='ORG_NM' THEN
        RETURN TMP_ORG_NM;
   ELSIF in_flag='COMPANY_PK' THEN
        RETURN TO_CHAR(TMP_COMPANY_PK);
   ELSE
        SELECT A.FULL_NAME INTO TMP_NM
            FROM THR_EMPLOYEE A WHERE A.DEL_IF=0 AND A.EMP_ID=TMP_ID;
        RETURN TMP_NM;
   END IF;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_F_GET_MANAGER;
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_MANAGER2;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_MANAGER2(
    in_ORG_PK IN VARCHAR2,
    in_emp_id IN VARCHAR2,
    in_flag   IN VARCHAR2--MANAGER KIND,ID , NAME , PK
    )
RETURN VARCHAR2 IS
TMP_KIND    VARCHAR2(200);
TMP_ID      VARCHAR2(200);
TMP_NM      VARCHAR2(200);
TMP_PK      NUMBER;
TMP_ORG_NM VARCHAR(200);
TMP_COMPANY_PK  NUMBER;

/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

   SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
        INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
            FROM tco_org t
            WHERE t.del_if = 0
            AND T.ORG_TYPE IN('07','12')
            START WITH t.pk=in_ORG_PK
            CONNECT BY PRIOR t.p_pk=t.pk;

   IF in_emp_id=TMP_ID OR TMP_ID IS NULL THEN --GET PARENT ID
       SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
        INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
            FROM tco_org t
            WHERE t.del_if = 0
            AND T.ORG_TYPE IN('06')
            START WITH t.pk=in_ORG_PK
            CONNECT BY PRIOR t.p_pk=t.pk;
        
        --VAN CHUA TIM DUOC THI TIM TIEP     
        IF in_emp_id=TMP_ID OR TMP_ID IS NULL THEN --GET PARENT ID 
           SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
            INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
                FROM tco_org t
                WHERE t.del_if = 0
                AND T.ORG_TYPE IN('03')
                START WITH t.pk=in_ORG_PK
                CONNECT BY PRIOR t.p_pk=t.pk;
            
         --VAN CHUA TIM DUOC THI TIM TIEP     
        IF in_emp_id=TMP_ID OR TMP_ID IS NULL THEN --GET PARENT ID 
           SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
            INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
                FROM tco_org t
                WHERE t.del_if = 0
                AND T.ORG_TYPE IN('01','02')
                START WITH t.pk=in_ORG_PK
                CONNECT BY PRIOR t.p_pk=t.pk;
            
            IF in_emp_id=TMP_ID THEN --MAX LEVEL 
               TMP_ID:=NULL;
               TMP_KIND:=NULL;
               TMP_PK:=NULL;
               TMP_ORG_NM:=NULL; 
            END IF;
            
        END IF;   
    END IF;    
                     
   END IF;
            
            
   

   IF in_flag='KIND' THEN
        RETURN NVL(TMP_KIND,'01');
   ELSIF in_flag='ID' THEN
       RETURN TMP_ID;
   ELSIF in_flag='PK' THEN
       RETURN TO_CHAR(TMP_PK);
   ELSIF in_flag='ORG_NM' THEN
        RETURN TMP_ORG_NM;
   ELSIF in_flag='COMPANY_PK' THEN
        RETURN TO_CHAR(TMP_COMPANY_PK);
   ELSE
        SELECT A.FULL_NAME INTO TMP_NM
            FROM THR_EMPLOYEE A WHERE A.DEL_IF=0 AND A.EMP_ID=TMP_ID;
        RETURN TMP_NM;
   END IF;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN NULL;
     WHEN OTHERS THEN
       RETURN NULL;
       RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_MANAGER_ORG;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_MANAGER_ORG(
    in_ORG_PK IN VARCHAR2,
    in_flag   IN VARCHAR2--MANAGER KIND,ID , NAME , PK
    )
RETURN VARCHAR2 IS
TMP_KIND    VARCHAR2(200);
TMP_ID      VARCHAR2(200);
TMP_NM      VARCHAR2(200);
TMP_PK      NUMBER;
TMP_ORG_NM VARCHAR(200);
TMP_COMPANY_PK  NUMBER;

/******************************************************************************
   NAME:       F_GET_DAY
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        15/07/2006          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_GET_DAY
      Sysdate:         15/07/2006
      Date and Time:   15/07/2006, 1:43:40 PM, and 15/07/2006 1:43:40 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

   SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
        INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
            FROM tco_org t
            WHERE t.del_if = 0
            AND T.ORG_TYPE IN('07','12')
            START WITH t.pk=in_ORG_PK
            CONNECT BY PRIOR t.p_pk=t.pk;

   IF TMP_ID IS NULL THEN --GET PARENT ID
       SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
        INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
            FROM tco_org t
            WHERE t.del_if = 0
            AND T.ORG_TYPE IN('06')
            START WITH t.pk=in_ORG_PK
            CONNECT BY PRIOR t.p_pk=t.pk;
        
   --VAN CHUA TIM DUOC THI TIM TIEP     
        IF TMP_ID IS NULL THEN --GET PARENT ID 
           SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
            INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
                FROM tco_org t
                WHERE t.del_if = 0
                AND T.ORG_TYPE IN('03')
                START WITH t.pk=in_ORG_PK
                CONNECT BY PRIOR t.p_pk=t.pk;
            
         --VAN CHUA TIM DUOC THI TIM TIEP     
        IF TMP_ID IS NULL THEN --GET PARENT ID 
           SELECT   MAX(T.MANAGER_KIND),MAX(T.MANAGER_ID),MAX(T.MANAGER_PK),MAX(T.ORG_NM),MAX(T.TCO_COMPANY_PK)
            INTO TMP_KIND,TMP_ID,TMP_PK,TMP_ORG_NM,TMP_COMPANY_PK
                FROM tco_org t
                WHERE t.del_if = 0
                AND T.ORG_TYPE IN('01','02')
                START WITH t.pk=in_ORG_PK
                CONNECT BY PRIOR t.p_pk=t.pk;
            
        END IF;   
    END IF;    
                     
   END IF;
            
            
   

   IF in_flag='KIND' THEN
        RETURN NVL(TMP_KIND,'01');
   ELSIF in_flag='ID' THEN
       RETURN TMP_ID;
   ELSIF in_flag='PK' THEN
       RETURN TO_CHAR(TMP_PK);
   ELSIF in_flag='ORG_NM' THEN
        RETURN TMP_ORG_NM;
   ELSIF in_flag='COMPANY_PK' THEN
        RETURN TO_CHAR(TMP_COMPANY_PK);
   ELSE
        SELECT A.FULL_NAME INTO TMP_NM
            FROM THR_EMPLOYEE A WHERE A.DEL_IF=0 AND A.EMP_ID=TMP_ID;
        RETURN TMP_NM;
   END IF;


   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN NULL;
     WHEN OTHERS THEN
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_OT_5M;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_Get_Ot_5M(
  AS_START           IN  VARCHAR2,
  AS_END             IN  VARCHAR2,
  AS_SHIFT           IN  NUMBER,
  AS_DINNER          IN  VARCHAR2
  ) RETURN NUMBER IS
  N_HOUR        NUMBER;
  N_MINUTE      NUMBER;
  N_OT_TIME     NUMBER;

  AV_CUR_DT        VARCHAR2(8);
  AV_TOM_DT        VARCHAR2(8);  AV_START        VARCHAR2(14) := NULL;
  AV_END        VARCHAR2(14) := NULL;
  AV_SDIN       VARCHAR2(5)  := NULL;
  --AS_TSHIFT     NUMBER;
AV_END1   VARCHAR2(14) := NULL;
    IN_TMP1                 NUMBER;
  IN_TMP2                 VARCHAR2(2);
  BEGIN
      IF (AS_END IS NULL) or (AS_START IS NULL) THEN
       N_OT_TIME:=0;
       RETURN N_OT_TIME;
    END IF;
    --AS_TSHIFT :=AS_SHIFT;
          
    SELECT TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE+1, 'YYYYMMDD') INTO AV_CUR_DT, AV_TOM_DT FROM DUAL;
    
    
     IF (TO_NUMBER(SUBSTR(AS_END,4,2)) >= 0) AND (TO_NUMBER(SUBSTR(AS_END,4,2)) <= 15) THEN
        AV_END1 := SUBSTR(AS_END,1,3) || '00';
    ELSIF (TO_NUMBER(SUBSTR(AS_END,4,2)) >=16) AND (TO_NUMBER(SUBSTR(AS_END,4,2)) <= 24) THEN
        AV_END1 := AS_END;
    ELSIF (TO_NUMBER(SUBSTR(AS_END,4,2)) >=25) AND (TO_NUMBER(SUBSTR(AS_END,4,2)) <= 45) THEN
        AV_END1 := SUBSTR(AS_END,1,3) || '30';
    ELSIF (TO_NUMBER(SUBSTR(AS_END,4,2)) >= 46) AND (TO_NUMBER(SUBSTR(AS_END,4,2)) <=54) THEN
        AV_END1 := AS_END;  
    ELSIF (TO_NUMBER(SUBSTR(AS_END,4,2)) > 54) THEN
        IN_TMP1:= TO_NUMBER(SUBSTR(AS_END,1,2)) + 1;
        IF IN_TMP1 >24 THEN
           IN_TMP1:=IN_TMP1-24;
        END IF;
        IF IN_TMP1 <10 THEN
                IN_TMP2:='0'||IN_TMP1;
        ELSE
                    IN_TMP2:=IN_TMP1;
        END IF;
        
        AV_END1 := IN_TMP2 ||':' || '00';
    END IF;     

 /* if AS_SHIFT=2 and AS_START<'18:30' and AS_START >='18:00' then
  
       AV_START := AV_CUR_DT || ' ' || '18:30';
       AV_END   := AV_CUR_DT || ' ' || AV_END1;
  ELSif AS_SHIFT=2 and AS_START<'20:30' and AS_START >'20:00' then
       AV_START := AV_CUR_DT || ' ' || '20:30';
       AV_END   := AV_CUR_DT || ' ' || AV_END1;
   
  ELSif (AS_SHIFT=0 OR AS_SHIFT=1)  and AV_END1>'16:30' and AV_END1 <='17:15' then
       AV_START := AV_CUR_DT || ' ' || AS_START;
       AV_END   := AV_CUR_DT || ' ' || '16:30';        
  else */
        IF AS_START <= AV_END1 THEN
         AV_START := AV_CUR_DT || ' ' || AS_START;
         AV_END   := AV_CUR_DT || ' ' || AV_END1;
          IF SUBSTR(AV_END1,1,2) = '24' THEN --CANNOT CLACULATE 24:00 CASE SO NEED CHANGE THE 00:00 CASE
             AV_END := AV_TOM_DT || ' ' || '00'||SUBSTR(AV_END1,3,5);
           END IF;
        ELSE
        AV_START := AV_CUR_DT || ' ' || AS_START;
        AV_END     := AV_TOM_DT || ' ' || AV_END1;
        END IF;
 --  end if;  
    SELECT TRUNC((TO_DATE(AV_END,'YYYYMMDD HH24:MI')     - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 )
          ,TRUNC(MOD((TO_DATE(AV_END,'YYYYMMDD HH24:MI') - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 * 60, 60) / 0.6 ) * 0.01
    INTO N_HOUR, N_MINUTE
    FROM DUAL;

--    N_OT_TIME := N_HOUR + N_MINUTE + 0;
/*
    IF N_OT_TIME > 0.25 THEN
--        N_OT_TIME := N_OT_TIME - 0.25;--MOVING TIME
        SELECT TRUNC(N_OT_TIME+0.25)+(ROUND(N_OT_TIME+0.25)-TRUNC(N_OT_TIME+0.25))/2
          INTO N_OT_TIME
          FROM DUAL;
    ELSE
        N_OT_TIME := 0;
    END IF;
*/
--- THANH MODIFY --
    -- 0.41 >=55, 0.46 >=58  --
  /*    IF     N_MINUTE >=0.41 THEN
        --IF N_MINUTE >=0.96 THEN
        -- 0.83 >= 20 , 0.91 >= 25  0.96 >=28 --
        IF N_MINUTE >=0.91 THEN
             N_MINUTE:=1;
             N_OT_TIME := N_HOUR + N_MINUTE;
         elsIF N_MINUTE <=0.5 THEN
             N_MINUTE:=0.5;
             N_OT_TIME := N_HOUR + N_MINUTE;
        ELSE
             --N_MINUTE:=0.5;
             N_OT_TIME := N_HOUR + N_MINUTE;
        END IF;
    ELSE
        N_OT_TIME := N_HOUR;
    END IF; */
/*
    SELECT A.START_DINNER INTO AV_SDIN
      FROM THR_WORK_SHIFT A
     WHERE A.DEL_IF = 0
       AND A.PK = AS_SHIFT;

    IF AS_DINNER = 'N' THEN
        N_OT_TIME := N_OT_TIME;
    ELSE
        IF AV_SDIN = '17:00' AND N_OT_TIME > 0.5 THEN
            N_OT_TIME := N_OT_TIME - 0.5;
        ELSIF AV_SDIN = '17:30' AND N_OT_TIME > 1 THEN
            N_OT_TIME := N_OT_TIME - 0.5;
        ELSIF AV_SDIN = '18:00' AND N_OT_TIME > 1.5 THEN
            N_OT_TIME := N_OT_TIME - 0.5;
        ELSE
            N_OT_TIME := N_OT_TIME;
        END IF;
    END IF;

--    IF AS_START < '16:30' THEN --remove the this sorce because this case 15:00~16:00 for canteen
--        N_OT_TIME := 0;
--    END IF;
*/
    N_OT_TIME := N_HOUR + N_MINUTE;
    IF AS_START >= AS_END THEN
        N_OT_TIME := 0;
    END IF;

    RETURN N_OT_TIME;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_OT_OFF;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_OT_OFF(
  AS_START           IN  VARCHAR2,
  AS_END             IN  VARCHAR2,
  AS_SHIFT           IN  NUMBER,
  AS_DINNER          IN  VARCHAR2
  ) RETURN NUMBER IS
  N_HOUR        NUMBER;
  N_MINUTE      NUMBER;
  N_OT_TIME     NUMBER;

  AV_CUR_DT        VARCHAR2(8);
  AV_TOM_DT        VARCHAR2(8);
  AV_START        VARCHAR2(14) := NULL;
  AV_END        VARCHAR2(14) := NULL;
  AV_SDIN       VARCHAR2(5)  := NULL;

  BEGIN
      IF AS_END IS NULL THEN
       N_OT_TIME:=0;
       RETURN N_OT_TIME;
    END IF;
      SELECT TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE+1, 'YYYYMMDD') INTO AV_CUR_DT, AV_TOM_DT FROM DUAL;

      IF AS_START < AS_END THEN
        AV_START := AV_CUR_DT || ' ' || AS_START;
        AV_END   := AV_CUR_DT || ' ' || AS_END;
        IF SUBSTR(AS_END,1,2) = '24' THEN --CANNOT CLACULATE 24:00 CASE SO NEED CHANGE THE 00:00 CASE
            AV_END := AV_TOM_DT || ' ' || '00'||SUBSTR(AS_END,3,5);
        END IF;
    ELSE
        AV_START := AV_CUR_DT || ' ' || AS_START;
        AV_END     := AV_TOM_DT || ' ' || AS_END;
      END IF;
    IF AS_END IS NULL THEN
      AV_START := AV_CUR_DT || ' ' || AS_START;
      AV_END     := AV_CUR_DT || ' ' || AS_START;
    END IF;

    SELECT TRUNC((TO_DATE(AV_END,'YYYYMMDD HH24:MI')     - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 )
          ,TRUNC(MOD((TO_DATE(AV_END,'YYYYMMDD HH24:MI') - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 * 60, 60) / 0.6 ) * 0.01
    INTO N_HOUR, N_MINUTE
    FROM DUAL;

--    N_OT_TIME := N_HOUR + N_MINUTE + 0;
/*
    IF N_OT_TIME > 0.25 THEN
--        N_OT_TIME := N_OT_TIME - 0.25;--MOVING TIME
        SELECT TRUNC(N_OT_TIME+0.25)+(ROUND(N_OT_TIME+0.25)-TRUNC(N_OT_TIME+0.25))/2
          INTO N_OT_TIME
          FROM DUAL;
    ELSE
        N_OT_TIME := 0;
    END IF;
*/
--- THANH MODIFY 
             N_OT_TIME := N_HOUR + N_MINUTE;
    
/*    
    SELECT A.START_DINNER INTO AV_SDIN
      FROM THR_WORK_SHIFT A
     WHERE A.DEL_IF = 0
       AND A.PK = AS_SHIFT;

    IF AS_DINNER = 'N' THEN
        N_OT_TIME := N_OT_TIME;
    ELSE
        IF AV_SDIN = '17:00' AND N_OT_TIME > 0.5 THEN
            N_OT_TIME := N_OT_TIME - 0.5;
        ELSIF AV_SDIN = '17:30' AND N_OT_TIME > 1 THEN
            N_OT_TIME := N_OT_TIME - 0.5;
        ELSIF AV_SDIN = '18:00' AND N_OT_TIME > 1.5 THEN
            N_OT_TIME := N_OT_TIME - 0.5;
        ELSE
            N_OT_TIME := N_OT_TIME;
        END IF;
    END IF;

--    IF AS_START < '16:30' THEN --remove the this sorce because this case 15:00~16:00 for canteen
--        N_OT_TIME := 0;
--    END IF;
*/
    IF AS_START >= AS_END THEN
        N_OT_TIME := 0;
    END IF;

    RETURN N_OT_TIME;

END hr_F_GET_OT_OFF;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_PERIOD_PCSS;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_PERIOD_PCSS(
    THR_EMP_PK IN VARCHAR2)
RETURN VARCHAR2 IS
PERIOD VARCHAR2(100);
l_start_dt varchar2(8);
l_end_dt VARCHAR2(8);
l_year    number:= 0;
l_month number:= 0;
tmp     number:= 0;

    cursor v_exp is select E.START_DT, E.END_DT--,months_between(to_date(E.END_DT,'mm/yyyy'),to_date(E.START_DT,'mm/yyyy'))
                    from thr_experience e
                    where e.del_if = 0
                        and E.THR_EMPLOYEE_PK = THR_EMP_PK;

BEGIN

    Open v_exp;
    loop
        fetch v_exp into l_start_dt,l_end_dt;
        exit when v_exp%notfound;
            select months_between(to_date(l_end_dt,'mm/yyyy'),to_date(l_start_dt,'mm/yyyy')) into tmp from dual;
            l_month := l_month + tmp;
    end loop;
    CLOSE v_exp;
    
    l_year := trunc(l_month/12);
    l_month := l_month - l_year*12;
    
    if l_year > 0 then
        period := l_year || ' year(s) ' || l_month || ' month(s)';
    else
        period := l_month || ' month(s)';
    end if;         
    
   RETURN PERIOD;
   EXCEPTION
     when others
   then
      raise_application_error(-20001,'Error: Format date incorrect (start date: ' || l_start_dt || ', end date: ' || l_end_dt || ')');
      return null;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_SEVERANCE;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_Get_Severance
(
    p_start_date    varchar,
    p_end_date      varchar,
    p_unemp_mon     VARCHAR
) RETURN NUMBER IS
out_sal_month NUMBER:=0;
l_Month number;
l_Month2 number;

/******************************************************************************
   NAME:       F_Get_Severance_AMT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        08/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     F_Get_Severance_AMT
      Sysdate:         08/01/2008
      Date and Time:   08/01/2008, 8:29:42 AM, and 08/01/2008 8:29:42 AM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    select months_between(to_date(p_end_date,'yyyymmdd'),to_date(p_start_date,'yyyymmdd')) into l_Month from dual;
    if l_Month < 12 then
        out_sal_month:= 0;
    else
        select trunc(months_between(to_date('20090101','yyyymmdd'),to_date(p_start_date,'yyyymmdd')))  into l_Month2 from dual;
        
        IF l_month2 <=0 THEN
                l_month2 :=0;
        END IF;
        
        l_month2 := l_month2 + NVL(p_unemp_mon,0);
        
        select trunc(l_Month2 /12 )*0.5  
                             + (case when mod(l_Month2 ,12) >0 then 
                             trunc((mod(l_Month2 ,12))/6) + (case when mod(l_Month2,12)>=1 then 1 else 0 end)--  decode(mod(mod(l_Month2,12)+1,6),0,0,1)
                             else  0 end)* 0.25 into out_sal_month from dual;         
                     
        /* SELECT (CASE WHEN l_Month2>=1 AND l_Month2<6 THEN 0.25 
                    WHEN l_Month2>=6 AND l_Month2<13 THEN 0.5
                    WHEN l_Month2>=13 AND l_Month2<18 THEN 0.75
                    WHEN l_Month2>=18 AND l_Month2<25 THEN 1 
                    WHEN l_Month2>=25 AND l_Month2<31 THEN 1.25
                    WHEN l_Month2>=31 AND l_Month2<37 THEN 1.5
                    ELSE 0 END) INTO out_sal_month FROM DUAL;*/
        --select 0.5 + (trunc((l_Month - 12 ) / 6) + decode(mod(trunc(l_Month),12),0,0,1))*0.25 into out_sal_month from dual;
    end if;

   RETURN out_sal_month;
   EXCEPTION
     WHEN OTHERS THEN
           Raise_application_error(-20001,'Loi: ' || SQLERRM);
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_TAX;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_TAX(
  AS_SAL   IN  NUMBER,
  AS_KIND   IN VARCHAR2,
  AS_MONEY_KIND IN VARCHAR2,
  AS_EXT_RATE   IN NUMBER,
  AS_COMPANY_PK IN VARCHAR2
  ) RETURN NUMBER IS
  AN_AMT         NUMBER;
  AN_AMT1       NUMBER;
  AN_RATE       NUMBER;
  AN_RATE1      NUMBER;
  AN_TOT_TAX    NUMBER := 0;
  I                NUMBER := 0;
  v_sal            number:=0;
  v_min_tax    number:=0;

  CURSOR V_EMP IS SELECT A.AMount,A.RATE
                      FROM THR_TAX A
                     WHERE A.DEL_IF=0 and tax_kind=AS_KIND
                     ORDER BY A.amount;
BEGIN

/*
2  posco lt
7665   infra
7660   splendora sp1
7663   embankment
9443   splendora sp2
7666   melinh
7257   A3
2257   A1
7277  A2
99   OFFICE
*/

    --DOI SALARY RA TIEN VIET NEU KHAC LOAI TIEN '
    IF AS_MONEY_KIND='01' THEN
        v_sal:=AS_SAL;
    ELSE
        v_sal:=AS_SAL*AS_EXT_RATE;
    END IF;
    
    select NVL(V.NUM_1,0) INTO v_min_tax from vhr_hr_code v where v.id='HR0006' AND V.CODE='12' 
    AND (nvl(TO_CHAR(v.TCO_COMPANY_PK),AS_COMPANY_PK) = AS_COMPANY_PK or AS_COMPANY_PK = 'ALL');
    
    IF v_sal<=v_min_tax then
        return 0;
    end if;

     AN_TOT_TAX:=0;
     AN_AMT:=0;
     AN_AMT1:=0;
     AN_RATE:=0;
     AN_RATE1:=0;
     OPEN V_EMP ;
     LOOP
          FETCH V_EMP INTO AN_AMT,AN_RATE;
                IF v_sal<=AN_AMT THEN
                     AN_TOT_TAX:=AN_TOT_TAX+0;
               ELSE
                     AN_TOT_TAX:=AN_TOT_TAX + (v_sal-AN_AMT)*AN_RATE/100 + (AN_AMT-AN_AMT1)*AN_RATE1/100 - (v_sal-AN_AMT1)*AN_RATE1/100 ;
               END IF;
               AN_AMT1:=AN_AMT;
               AN_RATE1:=AN_RATE;
         EXIT WHEN V_EMP%NOTFOUND;

     END LOOP;
     CLOSE V_EMP;

   IF AS_MONEY_KIND='01' THEN
        RETURN AN_TOT_TAX;
    ELSE
        RETURN AN_TOT_TAX/AS_EXT_RATE;
    END IF;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_USER_MOD;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_USER_MOD (
   P_TYPE          VARCHAR,--1: CRT_BY; 2; CRT_DT
   P_ALLOW_TYPE    varchar,-- ALLOW(1-8)
   P_EMP_PK        VARCHAR,
   P_WORK_MON      VARCHAR)
   
   RETURN VARCHAR2
IS
   L_RTN_VALUE   VARCHAR2 (200):= '';
BEGIN
    IF P_TYPE = '1' THEN
       SELECT (SELECT T.FULL_NAME FROM GASP.TES_USER U, THR_EMPLOYEE T 
                WHERE T.PK = U.THR_ABEMP_PK
                  AND U.USER_ID = (case when P_ALLOW_TYPE = '1' and NVL(A.ALLOW_AMT1,0) <> NVL(A.OLD_ALLOW_AMT1,0) then a.MOD_BY_ALLOW_1 
                                        when P_ALLOW_TYPE = '2' and NVL(A.ALLOW_AMT2,0) <> NVL(A.OLD_ALLOW_AMT2,0) then a.MOD_BY_ALLOW_2
                                        when P_ALLOW_TYPE = '3' and NVL(A.ALLOW_AMT3,0) <> NVL(A.OLD_ALLOW_AMT3,0) then a.MOD_BY_ALLOW_3
                                        when P_ALLOW_TYPE = '4' and NVL(A.ALLOW_AMT4,0) <> NVL(A.OLD_ALLOW_AMT4,0) then a.MOD_BY_ALLOW_4
                                        when P_ALLOW_TYPE = '5' and NVL(A.ALLOW_AMT5,0) <> NVL(A.OLD_ALLOW_AMT5,0) then a.MOD_BY_ALLOW_5
                                        when P_ALLOW_TYPE = '6' and NVL(A.ALLOW_AMT6,0) <> NVL(A.OLD_ALLOW_AMT6,0) then a.MOD_BY_ALLOW_6
                                        when P_ALLOW_TYPE = '7' and NVL(A.ALLOW_AMT7,0) <> NVL(A.OLD_ALLOW_AMT7,0) then a.MOD_BY_ALLOW_7
                                        when P_ALLOW_TYPE = '8' and NVL(A.ALLOW_AMT8,0) <> NVL(A.OLD_ALLOW_AMT8,0) then a.MOD_BY_ALLOW_8 end)) INTO L_RTN_VALUE
        FROM THR_SALARY_MANAGE_HIS A
        WHERE A.PK = (SELECT MAX(A.PK)
                    FROM THR_SALARY_MANAGE_HIS A
                    WHERE A.DEL_IF = 0 AND A.THR_EMP_PK = P_EMP_PK
                    AND ((P_ALLOW_TYPE = '1' and NVL(A.ALLOW_AMT1,0) <> NVL(A.OLD_ALLOW_AMT1,0))
                    OR (P_ALLOW_TYPE = '2' and NVL(A.ALLOW_AMT2,0) <> NVL(A.OLD_ALLOW_AMT2,0))
                    OR (P_ALLOW_TYPE = '3' and NVL(A.ALLOW_AMT3,0) <> NVL(A.OLD_ALLOW_AMT3,0))
                    OR (P_ALLOW_TYPE = '4' and NVL(A.ALLOW_AMT4,0) <> NVL(A.OLD_ALLOW_AMT4,0))
                    OR (P_ALLOW_TYPE = '5' and NVL(A.ALLOW_AMT5,0) <> NVL(A.OLD_ALLOW_AMT5,0))
                    OR (P_ALLOW_TYPE = '6' and NVL(A.ALLOW_AMT6,0) <> NVL(A.OLD_ALLOW_AMT6,0))
                    OR (P_ALLOW_TYPE = '7' and NVL(A.ALLOW_AMT7,0) <> NVL(A.OLD_ALLOW_AMT7,0))
                    OR (P_ALLOW_TYPE = '8' and NVL(A.ALLOW_AMT8,0) <> NVL(A.OLD_ALLOW_AMT8,0)))                    
                    AND A.WORK_MON = P_WORK_MON);
    ELSE
        SELECT TO_CHAR((case when P_ALLOW_TYPE = '1' and NVL(A.ALLOW_AMT1,0) <> NVL(A.OLD_ALLOW_AMT1,0) then a.MOD_DT_ALLOW_1
                     when P_ALLOW_TYPE = '2' and NVL(A.ALLOW_AMT2,0) <> NVL(A.OLD_ALLOW_AMT2,0) then a.MOD_DT_ALLOW_2
                     when P_ALLOW_TYPE = '3' and NVL(A.ALLOW_AMT3,0) <> NVL(A.OLD_ALLOW_AMT3,0) then a.MOD_DT_ALLOW_3
                     when P_ALLOW_TYPE = '4' and NVL(A.ALLOW_AMT4,0) <> NVL(A.OLD_ALLOW_AMT4,0) then a.MOD_DT_ALLOW_4
                     when P_ALLOW_TYPE = '5' and NVL(A.ALLOW_AMT5,0) <> NVL(A.OLD_ALLOW_AMT5,0) then a.MOD_DT_ALLOW_5
                     when P_ALLOW_TYPE = '6' and NVL(A.ALLOW_AMT6,0) <> NVL(A.OLD_ALLOW_AMT6,0) then a.MOD_DT_ALLOW_6
                     when P_ALLOW_TYPE = '7' and NVL(A.ALLOW_AMT7,0) <> NVL(A.OLD_ALLOW_AMT7,0) then a.MOD_DT_ALLOW_7
                     when P_ALLOW_TYPE = '8' and NVL(A.ALLOW_AMT8,0) <> NVL(A.OLD_ALLOW_AMT8,0) then a.MOD_DT_ALLOW_8
                end ), 'DD/MM/YYYY HH24:MI')INTO L_RTN_VALUE
        FROM THR_SALARY_MANAGE_HIS A
        WHERE A.PK = (SELECT MAX(A.PK)
                    FROM THR_SALARY_MANAGE_HIS A
                    WHERE A.DEL_IF = 0 AND A.THR_EMP_PK = P_EMP_PK
                    AND ((P_ALLOW_TYPE = '1' and NVL(A.ALLOW_AMT1,0) <> NVL(A.OLD_ALLOW_AMT1,0))
                    OR (P_ALLOW_TYPE = '2' and NVL(A.ALLOW_AMT2,0) <> NVL(A.OLD_ALLOW_AMT2,0))
                    OR (P_ALLOW_TYPE = '3' and NVL(A.ALLOW_AMT3,0) <> NVL(A.OLD_ALLOW_AMT3,0))
                    OR (P_ALLOW_TYPE = '4' and NVL(A.ALLOW_AMT4,0) <> NVL(A.OLD_ALLOW_AMT4,0))
                    OR (P_ALLOW_TYPE = '5' and NVL(A.ALLOW_AMT5,0) <> NVL(A.OLD_ALLOW_AMT5,0))
                    OR (P_ALLOW_TYPE = '6' and NVL(A.ALLOW_AMT6,0) <> NVL(A.OLD_ALLOW_AMT6,0))
                    OR (P_ALLOW_TYPE = '7' and NVL(A.ALLOW_AMT7,0) <> NVL(A.OLD_ALLOW_AMT7,0))
                    OR (P_ALLOW_TYPE = '8' and NVL(A.ALLOW_AMT8,0) <> NVL(A.OLD_ALLOW_AMT8,0)))   
                    AND A.WORK_MON = P_WORK_MON);
    END IF;
    
   RETURN L_RTN_VALUE;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_USER_MOD_SAL_MANA;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_USER_MOD_SAL_MANA (
   P_TYPE          VARCHAR,--1: CRT_BY; 2; CRT_DT
   P_EMP_PK        VARCHAR,
   P_WORK_MON      VARCHAR)
   RETURN VARCHAR2
IS
   L_RTN_VALUE   VARCHAR2 (200):= '';
   L_SYSDATE DATE;
BEGIN
    IF P_TYPE = '1' THEN
        SELECT (SELECT T.FULL_NAME FROM GASP.TES_USER U, THR_EMPLOYEE T 
                WHERE T.PK = U.THR_ABEMP_PK 
                  AND U.USER_ID = (CASE WHEN INSTR(A.MOD_BY_SAL_LEVEL2, '-') > 0 THEN SUBSTR(A.CRT_BY, 0, INSTR(A.CRT_BY, '-')-1)
                                  ELSE A.MOD_BY_SAL_LEVEL2 END)) INTO L_RTN_VALUE
        FROM THR_SALARY_MANAGE_HIS A
        WHERE A.PK = (SELECT MAX(A.PK)
                    FROM THR_SALARY_MANAGE_HIS A
                    WHERE A.DEL_IF = 0 AND A.THR_EMP_PK = P_EMP_PK
                    AND NVL(A.SALARY_LEVEL2,0) <> NVL(A.OLD_SALARY_LEVEL2,0)
                    AND A.WORK_MON = P_WORK_MON);
    ELSE
        SELECT TO_CHAR(A.MOD_DT_SAL_LEVEL2, 'DD/MM/YYYY HH24:MI') CRT_DT INTO L_RTN_VALUE
                FROM THR_SALARY_MANAGE_HIS A
                WHERE A.PK = (SELECT MAX(A.PK)
                            FROM THR_SALARY_MANAGE_HIS A
                            WHERE A.DEL_IF = 0 AND A.THR_EMP_PK = P_EMP_PK
                            AND NVL(A.SALARY_LEVEL2,0) <> NVL(A.OLD_SALARY_LEVEL2,0)
                            AND A.WORK_MON = P_WORK_MON);
    END IF;        
    
   RETURN L_RTN_VALUE;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_WEEK;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_WEEK(
    in_DATE IN VARCHAR2,
    in_tco_company_pk varchar2
    )
RETURN NUMBER IS
WEEK_NO NUMBER;
WEEK NUMBER;
FROM_DATE VARCHAR2(10);

BEGIN


   WEEK_NO := 0 ;

   SELECT MIN(CAR_DATE) INTO FROM_DATE FROM THR_CALENDAR a
   WHERE DAY_TYPE=2 AND CAR_DATE BETWEEN SUBSTR(in_DATE,1,4)||'0101' AND SUBSTR(in_DATE,1,4)||'0107'
   and A.DEL_IF = 0 and A.TCO_COMPANY_PK = in_tco_company_pk ;


   SELECT COUNT(*) INTO WEEK FROM THR_CALENDAR a
   WHERE CAR_DATE BETWEEN FROM_DATE AND in_DATE
   and A.DEL_IF = 0 and A.TCO_COMPANY_PK = in_tco_company_pk ;

   IF MOD(WEEK,7)>0 THEN
         WEEK_NO := TRUNC(WEEK/7,0) + 1 ;
   ELSE
         WEEK_NO := TRUNC(WEEK/7,0);
   END IF ;

   RETURN WEEK_NO;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_F_GET_WEEK;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_WEEKS;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_WEEKS(
    in_DATE IN VARCHAR2
    )
RETURN NUMBER IS
WEEK_NO NUMBER;
WEEK NUMBER;
FROM_DATE VARCHAR2(10);

BEGIN


   WEEK_NO := 0 ;

  SELECT to_char(CEIL((to_date(in_DATE, 'yyyymmdd') - next_day(trunc(to_date(in_DATE, 'yyyymmdd'), 'mm'), 'Sun')+7)/7) ) INTO WEEK_NO
  FROM DUAL;

   RETURN WEEK_NO;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_F_GET_WEEKS;
 
/

DROP FUNCTION HPDQ.HR_F_OT_OUT_SIDE;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_OT_OUT_SIDE(
  AS_START           IN  VARCHAR2,
  AS_END             IN  VARCHAR2,
  AS_SHIFT           IN  NUMBER
  ) RETURN NUMBER IS
  N_HOUR        NUMBER;
  N_MINUTE      NUMBER;
  N_OT_TIME     NUMBER;

  AV_CUR_DT        VARCHAR2(8);
  AV_TOM_DT        VARCHAR2(8);
  AV_START        VARCHAR2(14) := NULL;
  AV_END        VARCHAR2(14) := NULL;
  AV_SDIN       VARCHAR2(5)  := NULL;
  AS_START1     VARCHAR2(5)  := NULL;
  as_nt_flag    varchar2(1);
  as_wt         number;

  BEGIN
      IF AS_END IS NULL THEN
       N_OT_TIME:=0;
       RETURN N_OT_TIME;
    END IF;
      SELECT TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE+1, 'YYYYMMDD') INTO AV_CUR_DT, AV_TOM_DT FROM DUAL;
    
    select decode(nvl(W.DURING_DAY,1),1,'N','Y') ,w.WT into as_nt_flag,as_wt from thr_work_shift w where w.PK= AS_SHIFT and w.DEL_IF=0;
    
    if  AS_START<='16:30' and  as_nt_flag='N'  then
        AS_START1:='16:30';
    elsif AS_START>'16:30' and  as_nt_flag='N'  then     
        AS_START1:=AS_START; 
    END IF;    
     IF AS_START < AS_END THEN
        AV_START := AV_CUR_DT ||' ' ||  AS_START1;
        AV_END   := AV_CUR_DT || ' ' || AS_END;
        IF SUBSTR(AS_END,1,2) = '24' THEN --CANNOT CLACULATE 24:00 CASE SO NEED CHANGE THE 00:00 CASE
            AV_END := AV_TOM_DT || ' ' || '00'||SUBSTR(AS_END,3,5);
        END IF;
    ELSE
        AV_START := AV_CUR_DT || ' ' || AS_START1;
        AV_END     := AV_TOM_DT || ' ' || AS_END;
      END IF;
    IF AS_END IS NULL THEN
      AV_START := AV_CUR_DT || ' ' || AS_START1;
      AV_END     := AV_CUR_DT || ' ' || AS_START1;
    END IF;
    
    SELECT TRUNC((TO_DATE(AV_END,'YYYYMMDD HH24:MI')    - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 )
          ,TRUNC(MOD((TO_DATE(AV_END,'YYYYMMDD HH24:MI') - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 * 60, 60) / 0.6 ) * 0.01
    INTO N_HOUR, N_MINUTE
    FROM DUAL;
    N_OT_TIME:=N_HOUR+N_MINUTE;
    IF N_OT_TIME > 7.90 THEN
        N_OT_TIME := as_wt;
    ELSIF N_OT_TIME=0.49 THEN
        N_OT_TIME := 0.5;
    ELSIF N_OT_TIME < 0 THEN
        N_OT_TIME := 0;
    END IF;
    IF AS_START >= AS_END THEN
        N_OT_TIME := 0;
    END IF;

    RETURN N_OT_TIME;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_OUT_SIDE;

CREATE OR REPLACE FUNCTION HPDQ.hr_F_OUT_SIDE(
  AS_START           IN  VARCHAR2,
  AS_END             IN  VARCHAR2,
  AS_SHIFT           IN  VARCHAR2
  ) RETURN NUMBER IS
  N_HOUR        NUMBER;
  N_MINUTE      NUMBER;
  N_WT_TIME     NUMBER;

  AV_CUR_DT        VARCHAR2(8);
  AV_TOM_DT        VARCHAR2(8);
  AV_START        VARCHAR2(14) := NULL;
  AV_END        VARCHAR2(14) := NULL;
  SHIFT_START   VARCHAR2(14) := NULL;
  SHIFT_END     VARCHAR2(14) := NULL;
  AV_LUNCH      VARCHAR2(5)  := NULL;
  AV_ELUNCH     VARCHAR2(5)  := NULL;
  AV_END1        VARCHAR2(5)  := NULL;
  AS_START1        VARCHAR2(5)  := NULL;

  BEGIN
  
    IF (AS_START = AS_END) or (AS_START is null) or (AS_END is null) THEN
         N_WT_TIME := 0;
        RETURN N_WT_TIME;
    END IF;     


    SELECT A.START_TIME, A.END_TIME INTO SHIFT_START, SHIFT_END
      FROM THR_WORK_SHIFT A
     WHERE A.DEL_IF = 0 AND A.PK = AS_SHIFT;

    SELECT TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE+1, 'YYYYMMDD') INTO AV_CUR_DT, AV_TOM_DT FROM DUAL;

    SELECT A.START_meal1, A.END_meal1 INTO AV_LUNCH, AV_ELUNCH
      FROM THR_WORK_SHIFT A
     WHERE A.DEL_IF = 0
       AND A.PK = AS_SHIFT;

    IF AS_END > AV_LUNCH AND AS_END < AV_ELUNCH THEN
        AV_END1 := AV_ELUNCH;
    ELSE
        AV_END1 := AS_END;
    END IF;
    
    IF AS_START > AV_LUNCH AND AS_START < AV_ELUNCH THEN
        AS_START1 := AV_LUNCH;
    ELSE
        AS_START1 := AS_START;
    END IF;
    

IF SHIFT_START >  AS_START1 AND SHIFT_END < AV_END1 THEN
    N_WT_TIME := 8;
ELSE
    IF SHIFT_START < SHIFT_END THEN
        IF  AS_START1 < SHIFT_START THEN
            IF AV_END1 < SHIFT_END THEN
                AV_START := AV_CUR_DT || ' ' || SHIFT_START;
                AV_END   := AV_CUR_DT || ' ' || AV_END1;
            ELSE
                AV_START := AV_CUR_DT || ' ' || SHIFT_START;
                AV_END   := AV_CUR_DT || ' ' || SHIFT_END;
                IF SUBSTR(AV_END1,1,2) = '24' THEN --CANNOT CLACULATE 24:00 CASE SO NEED CHANGE THE 00:00 CASE
                    AV_END := AV_TOM_DT || ' ' || '00'||SUBSTR(AV_END1,3,5);
                END IF;
            END IF;
        ELSE
            IF AV_END1 > SHIFT_END THEN
                AV_START := AV_CUR_DT || ' ' || AS_START1;
                AV_END   := AV_CUR_DT || ' ' || SHIFT_END;
            ELSE
                AV_START := AV_CUR_DT || ' ' || AS_START1;
                AV_END   := AV_CUR_DT || ' ' || AV_END1;
            END IF;

        END IF;
    ELSE
        IF  AS_START1 < SHIFT_START THEN
            IF AV_END1 < SHIFT_END THEN
                AV_START := AV_CUR_DT || ' ' || SHIFT_START;
                AV_END   := AV_TOM_DT || ' ' || AV_END1;
            ELSE
                AV_START := AV_CUR_DT || ' ' || SHIFT_START;
                AV_END   := AV_TOM_DT || ' ' || SHIFT_END;
            END IF;
        ELSE
            IF AV_END1 > SHIFT_END THEN
                AV_START := AV_CUR_DT || ' ' || AS_START1;
                AV_END   := AV_TOM_DT || ' ' || SHIFT_END;
            ELSE
                AV_START := AV_CUR_DT || ' ' || AS_START1;
                AV_END   := AV_TOM_DT || ' ' || AV_END1;
            END IF;

        END IF;

    END IF;



    SELECT TRUNC((TO_DATE(AV_END,'YYYYMMDD HH24:MI')     - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 )
          ,TRUNC(MOD((TO_DATE(AV_END,'YYYYMMDD HH24:MI') - TO_DATE(AV_START,'YYYYMMDD HH24:MI')) * 24 * 60, 60) / 0.6 ) * 0.01
    INTO N_HOUR, N_MINUTE
    FROM DUAL;
    N_WT_TIME := N_HOUR + N_MINUTE;
    IF AV_END1>=AV_ELUNCH AND  AS_START1<=AV_LUNCH THEN
        N_WT_TIME := N_WT_TIME - 1;
    ELSE
        N_WT_TIME := N_WT_TIME;
    END IF;

    IF N_WT_TIME > 7.90 THEN
        N_WT_TIME := 8;
    ELSIF N_WT_TIME=0.49 THEN
        N_WT_TIME := 0.5;
    ELSIF N_WT_TIME < 0 THEN
        N_WT_TIME := 0;
    ELSE
        N_WT_TIME := N_WT_TIME;
    END IF;

    N_WT_TIME := N_WT_TIME ;
END IF;
    IF AS_END IS NULL THEN
        N_WT_TIME := 0;
    END IF;
/*
    IF AS_START < '16:30' THEN
        N_WT_TIME := 0;
    END IF;
    */
    RETURN N_WT_TIME;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_PERIOD_MONTH;

CREATE OR REPLACE FUNCTION HPDQ.HR_f_period_month(
P_DATE IN VARCHAR2
)RETURN VARCHAR2 IS
AV_MMMMDD  VARCHAR2(6);
p_yn    varchar(1);
p_from  varchar(8);
p_to  varchar(8);
BEGIN

    
    SELECT NVL(A.CHAR_3,'N'),DECODE(A.CHAR_1,'FIRST','01',A.CHAR_1)
        ,DECODE(A.CHAR_2,'END','31',A.CHAR_2)
         INTO p_yn,p_from,p_to
    FROM VHR_HR_CODE A
    WHERE A.ID='HR0030' AND A.CODE='01';
    
    IF p_yn='N' THEN 
        AV_MMMMDD:=SUBSTR(P_DATE,1,6);
    ELSE
        IF TO_NUMBER(SUBSTR(P_DATE,-2))>=TO_NUMBER(p_from) THEN
            AV_MMMMDD:=TO_CHAR(ADD_MONTHS(TO_DATE(P_DATE,'YYYYMMDD'),1),'YYYYMM');
        ELSE    
            AV_MMMMDD:=SUBSTR(P_DATE,1,6);
        END IF;    
        
    END IF;
    
    RETURN AV_MMMMDD;
EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_f_period_month;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_PERIOD_MONTH_2;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_period_month_2(
P_DATE IN VARCHAR2
,P_ID IN VARCHAR2
)RETURN VARCHAR2 IS
AV_MMMMDD  VARCHAR2(6);
p_yn    varchar(1);
p_from  varchar(8);
p_to  varchar(8);
p_month varchar(6);
l_from  varchar(8);
l_to  varchar(8);
BEGIN

    
    SELECT DECODE(A.CHAR_1,'FIRST','01',A.CHAR_1)
        ,DECODE(A.CHAR_2,'END','31',A.CHAR_2)
         INTO p_from,p_to
    FROM VHR_HR_CODE A
    WHERE A.ID='HR0030' AND A.CODE=P_ID;
    
    p_month:=    SUBSTR(P_DATE,1,6);
    
    if p_from >p_to then
    l_from:= to_char(add_months(to_date(p_month,'yyyymm'),-1),'yyyymm')||p_from;
    l_to:=p_month||p_to;
    else
    l_from:= p_month||p_from;
    l_to:=p_month||p_to;
         
    end if;
    
    
    
   -- IF p_yn='N' THEN 
     --   AV_MMMMDD:=SUBSTR(P_DATE,1,6);
   --- ELSE
        IF P_DATE  between l_from and l_to   THEN
            AV_MMMMDD:=p_month;
            
        ELSE    
               AV_MMMMDD:=to_char(add_months(to_date(p_month,'yyyymm'),1),'yyyymm');
        
        END IF;    
        
  --  END IF;
    
    RETURN AV_MMMMDD;
EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_TIME_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_TIME_SEQ(
  P_DATE   IN  VARCHAR2,
  P_ID_NUM   IN  VARCHAR2,
  P_SEQ IN NUMBER
  ) RETURN VARCHAR IS
  L_RESULT VARCHAR2(25);
  L_EXP VARCHAR2(12);
BEGIN


    select max(c.location) ||' '|| max(d.time) into L_RESULT
        from thr_time_temp c,        
        (select max(hr.time) time,hr.work_dt,hr.id_num 
                from(
                select a.time, a.work_dt, b.id_num
                from thr_time_temp a,thr_employee b
                where a.work_dt=P_DATE 
                and a.id=b.id_num and b.id_num=P_ID_NUM
                order by a.time) hr
                where rownum<=P_SEQ
                HAVING COUNT(*)>=P_SEQ
                group by hr.work_dt,hr.id_num) d
        where C.TIME = d.time        
        and c.work_dt = d.work_dt
        and c.id = d.id_num;    

RETURN L_RESULT;         
        
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
     WHEN OTHERS THEN
           RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_TIME_SEQ_SCAN;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_TIME_SEQ_SCAN(
  P_DATE   IN  VARCHAR2,
  P_ID_NUM   IN  VARCHAR2,
  P_SEQ IN NUMBER
  ) RETURN VARCHAR IS
  L_RESULT VARCHAR2(25);
  L_EXP VARCHAR2(12);
BEGIN


    select MAX(NVL(C.SCAN_BY,'F')) into L_RESULT
        from thr_time_temp c,        
        (select max(hr.time) time,hr.work_dt,hr.id_num 
                from(
                select a.time, a.work_dt, b.id_num
                from thr_time_temp a,thr_employee b
                where a.work_dt=P_DATE 
                and a.id=b.id_num and b.id_num=P_ID_NUM
                order by a.time) hr
                where rownum<=P_SEQ
                HAVING COUNT(*)>=P_SEQ
                group by hr.work_dt,hr.id_num) d
        where C.TIME = d.time        
        and c.work_dt = d.work_dt
        and c.id = d.id_num;    

RETURN L_RESULT;         
        
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
        RETURN NULL;
     WHEN OTHERS THEN
           RETURN NULL;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_WORK_DATE;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_work_date(
  p_date   IN  varchar2 --dd/mm/yyyy
  
) RETURN varchar2 IS
  
  l_exp varchar2(100);
  l_result varchar2(100);
BEGIN
    select to_char(to_date(p_date,'dd/mm/yyyy'),'yyyymmdd') into l_result from dual;
    return l_result;
   EXCEPTION
     WHEN OTHERS THEN
           return '0';
END;
 
/

DROP FUNCTION HPDQ.HR_GET_C_MID_YUJIN;

CREATE OR REPLACE FUNCTION HPDQ.HR_GET_C_MID_YUJIN(
  p_IN_TIME           IN  VARCHAR2, --YYYYMMDDHH:MM 
  p_OUT_TIME             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_company_pk  in number
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
 
l_max_m_ot number:=0;  -- su dung hr code 




  BEGIN
  
     
SELECT NVL(W.OT_MIDDLE_HOUR,0) INTO l_max_m_ot
FROM THR_WORK_SHIFT W
WHERE W.DEL_IF=0
    AND W.PK = p_shift
    AND nvl(W.TCO_COMPANY_PK,p_company_pk)= p_company_pk ;--XAC DINH THEO COMPANY

IF l_max_m_ot> 0 AND p_IN_TIME IS NOT NULL AND p_OUT_TIME IS NOT NULL THEN --KO CO TANG CA NGUOC     
            
      N_OT_TIME:=l_max_m_ot;
ELSE
    N_OT_TIME:=0;
    
END IF;    

    return N_OT_TIME;

 
    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_GET_C_OT_V4;

CREATE OR REPLACE FUNCTION HPDQ.HR_GET_C_OT_V4(
  p_IN_TIME           IN  VARCHAR2, --YYYYMMDDHH:MM 
  p_START_SHIFT             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_company_pk  in number
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_in        number;
  l_flag_exit1    number(1):=0;
  l_cur_rec number;
l_pro varchar(200);
l_cursor          sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;

l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
l_min_c_ot number:=0;  -- su dung hr code 

l_cur_rec number;
l_cur sys_refcursor;
l_ot_c_yn   varchar2(1):='N';

l_max_c_ot number:=0;  -- dinh nghia theo shift



  BEGIN
  
     
SELECT NVL(W.OT_C_HOUR,0) INTO l_max_c_ot
FROM THR_WORK_SHIFT W
WHERE W.DEL_IF=0
    AND W.PK = p_shift
    AND nvl(W.TCO_COMPANY_PK,p_company_pk)= p_company_pk ;--XAC DINH THEO COMPANY

IF l_max_c_ot>0 AND p_IN_TIME IS NOT NULL THEN --KO CO TANG CA NGUOC     
            
  --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0153'
            AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(p_IN_TIME,-2));
    l_in_time:=substr(p_IN_TIME,9,5);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
      
             IF l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_in_time:=p_WORK_DT||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_in_time:=p_WORK_DT||l_temp_in||':'||l_minute_round;
                END IF;

             IF l_temp_in=24 THEN
                l_in_time:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
             
    END LOOP;

    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=p_IN_TIME;
    END IF;

    N_OT_TIME:= ROUND(24*60*(TO_DATE(p_START_SHIFT,'YYYYMMDDHH24:MI')-TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))/60,2);


    IF N_OT_TIME>l_max_c_ot THEN
        N_OT_TIME:=l_max_c_ot;
    END IF;
    
    SELECT NVL(C.NUM_2,0) INTO l_min_c_ot
            FROM VHR_HR_CODE C
            WHERE C.ID='HR0038' AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk;--XAC DINH THEO COMPANY
    
    
    IF N_OT_TIME<l_min_c_ot THEN
        N_OT_TIME:=0;
    END IF;
    
ELSE
    N_OT_TIME:=0;
    
END IF;    

    return N_OT_TIME;

 
    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_GET_C_OT_YUJIN;

CREATE OR REPLACE FUNCTION HPDQ.HR_GET_C_OT_YUJIN(
  p_IN_TIME           IN  VARCHAR2, --YYYYMMDDHH:MM 
  p_START_SHIFT             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_company_pk  in number
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_in        number;
  l_flag_exit1    number(1):=0;
  l_cur_rec number;
l_pro varchar(200);
l_cursor          sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;

l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
l_min_c_ot number:=1;  -- su dung hr code 

l_cur_rec number;
l_cur sys_refcursor;
l_ot_c_yn   varchar2(1):='N';

l_max_c_ot number:=1;  -- dinh nghia theo shift



  BEGIN
  
     
SELECT NVL(W.OT_C_HOUR,0) INTO l_max_c_ot
FROM THR_WORK_SHIFT W
WHERE W.DEL_IF=0
    AND W.PK = p_shift
    AND nvl(W.TCO_COMPANY_PK,p_company_pk)= p_company_pk ;--XAC DINH THEO COMPANY

IF l_max_c_ot>0 AND p_IN_TIME IS NOT NULL THEN --KO CO TANG CA NGUOC     
            
  --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0153'
            AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(p_IN_TIME,-2));
    l_in_time:=substr(p_IN_TIME,9,5);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
      
             IF l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_in_time:=p_WORK_DT||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_in_time:=p_WORK_DT||l_temp_in||':'||l_minute_round;
                END IF;

             IF l_temp_in=24 THEN
                l_in_time:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
             
    END LOOP;

    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=p_IN_TIME;
    END IF;

    N_OT_TIME:= ROUND(24*60*(TO_DATE(p_START_SHIFT,'YYYYMMDDHH24:MI')-TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))/60,2);


    IF N_OT_TIME>l_max_c_ot THEN
        N_OT_TIME:=l_max_c_ot;
    END IF;
    
    IF N_OT_TIME<l_min_c_ot THEN
        N_OT_TIME:=0;
    END IF;
    
ELSE
    N_OT_TIME:=0;
    
END IF;    

    return N_OT_TIME;

 
    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_GET_EMP_HIS;

CREATE OR REPLACE FUNCTION HPDQ.HR_GET_EMP_HIS 
(
    P_TYPE          VARCHAR, --0: old_basic_sal ; 1->8 allow (1->8)
    P_TYPE_1        VARCHAR, --1: old sal; 2: mod by; 3 mod_date
    P_THR_EMP_PK    VARCHAR
)
   RETURN VARCHAR
IS
   L_RTN_VALUE   varchar2(100);
BEGIN
    -- lay gia tri max
    -- thr_emp_sal_change co du lieu khi co su thay doi luong hoac tro cap
    
    IF P_TYPE = 0 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_BASIC_SAL,0)), 2, A.MOD_BY_SAL,TO_CHAR(A.MOD_DT_SAL,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.BASIC_SAL,0) <> NVL(A.OLD_BASIC_SAL,0)) H_SAL  
        WHERE A.DEL_IF = 0 AND A.PK = H_SAL.PK; 
    ELSIF P_TYPE = 1 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT1,0)), 2, A.MOD_BY_ALLOW_1 ,TO_CHAR(A.MOD_DT_ALLOW_1,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT1,0) <> NVL(A.OLD_ALLOW_AMT1,0)) H_ALL_1  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_1.PK; 
    ELSIF P_TYPE = 2 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT2,0)), 2, A.MOD_BY_ALLOW_2, TO_CHAR(A.MOD_DT_ALLOW_2,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT2,0) <> NVL(A.OLD_ALLOW_AMT2,0)) H_ALL_2  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_2.PK; 
    ELSIF P_TYPE = 3 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT3,0)), 2, A.MOD_BY_ALLOW_3, TO_CHAR(A.MOD_DT_ALLOW_3,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT3,0) <> NVL(A.OLD_ALLOW_AMT3,0)) H_ALL_3  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_3.PK; 
    ELSIF P_TYPE = 4 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT4,0)), 2, A.MOD_BY_ALLOW_4, TO_CHAR(A.MOD_DT_ALLOW_4,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT4,0) <> NVL(A.OLD_ALLOW_AMT4,0)) H_ALL_4  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_4.PK; 
    ELSIF P_TYPE = 5 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT5,0)), 2, A.MOD_BY_ALLOW_5, TO_CHAR(A.MOD_DT_ALLOW_5,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT5,0) <> NVL(A.OLD_ALLOW_AMT5,0)) H_ALL_5  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_5.PK; 
    ELSIF P_TYPE = 6 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT6, 0)), 2, A.MOD_BY_ALLOW_6, TO_CHAR(A.MOD_DT_ALLOW_6,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT6,0) <> NVL(A.OLD_ALLOW_AMT6,0)) H_ALL_6  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_6.PK; 
    ELSIF P_TYPE = 7 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT7,0)), 2, A.MOD_BY_ALLOW_7, TO_CHAR(A.MOD_DT_ALLOW_7,'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT7 ,0) <> NVL(A.OLD_ALLOW_AMT7,0)) H_ALL_7  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_7.PK; 
    ELSIF P_TYPE = 8 THEN
        SELECT DECODE(P_TYPE_1, 1, TO_CHAR(NVL(A.OLD_ALLOW_AMT8, 0)), 2, A.MOD_BY_ALLOW_8, TO_CHAR(A.MOD_DT_ALLOW_8, 'DD/MM/YYYY')) INTO L_RTN_VALUE
        FROM THR_EMP_SAL_CHANGE A,
             (SELECT MAX(A.PK) AS PK FROM THR_EMP_SAL_CHANGE A WHERE A.DEL_IF = 0
                AND A.THR_EMP_PK = P_THR_EMP_PK AND NVL(A.ALLOW_AMT8 ,0) <> NVL(A.OLD_ALLOW_AMT8,0)) H_ALL_8  
        WHERE A.DEL_IF = 0 AND A.PK = H_ALL_8.PK; 
    END IF;
   RETURN L_RTN_VALUE;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_GET_MID_TIME;

CREATE OR REPLACE FUNCTION HPDQ.hr_get_mid_time(
  p_date_1           in  varchar2, --YYYYMMDD
  p_time_1           in  varchar2, --HH:MM
  p_date_2           in  varchar2, 
  p_time_2           in  varchar2,
  p_id               in  varchar2,
  p_ws_pk            in  varchar2
  ) return varchar2 is
  n_time     varchar2(5);
  l_cur sys_refcursor;
  l_flag_exist boolean :=false;
    
  l_tmp      varchar2(5);
  l_mm_limit number;


  begin
  
    select nvl(max(a.mm_mid), 0) into l_mm_limit 
    from thr_work_shift a
    where a.del_if=0
    and a.pk = p_ws_pk;
    
    open l_cur for
       select substr(min(a.work_dt||a.time),-5)
        from thr_time_temp a
        where a.id=p_id and a.work_dt between p_date_1 and p_date_2
        and to_date(a.work_dt||a.time,'YYYYMMDDHH24:MI') between to_date(p_date_1||p_time_1,'YYYYMMDDHH24:MI') + l_mm_limit/24/60
        and to_date(p_date_2||p_time_2,'YYYYMMDDHH24:MI') - l_mm_limit/24/60;
       
        fetch l_cur into l_tmp;
        l_flag_exist:=l_cur%found;
        close l_cur;
        
        if l_flag_exist=true then --DA DONG 
            n_time:=l_tmp;
        else
            n_time:=null;
        end if;
    
return n_time;    

 
    exception
    when  others then
        raise;

end;
/

DROP FUNCTION HPDQ.HR_GET_PERIOD_YEAR;

CREATE OR REPLACE FUNCTION HPDQ.HR_GET_PERIOD_YEAR(P_TO_MONTH VARCHAR2,P_FORM_MONTH VARCHAR2, P_REGULATION_TYPE   VARCHAR2)
RETURN  VARCHAR2
IS
L_RTN_VALUE  VARCHAR2(10);
BEGIN    
       SELECT (CASE WHEN P_TO_MONTH IS NOT NULL THEN  
            CASE WHEN P_REGULATION_TYPE = '07' AND MONTHS_BETWEEN(TO_DATE(P_TO_MONTH,'YYYYMM'),TO_DATE(P_FORM_MONTH,'YYYYMM')) >=12 THEN --sinh con va > 12 thang
                    '0-12'
            ELSE
             TRUNC(MONTHS_BETWEEN(TO_DATE(P_TO_MONTH,'YYYYMM'),TO_DATE(P_FORM_MONTH,'YYYYMM'))/12) ||
                     DECODE(TRUNC(TO_NUMBER((MONTHS_BETWEEN(TO_DATE(P_TO_MONTH,'YYYYMM'),TO_DATE(P_FORM_MONTH,'YYYYMM'))/12) - TRUNC(MONTHS_BETWEEN(TO_DATE(P_TO_MONTH,'YYYYMM'),TO_DATE(P_FORM_MONTH,'YYYYMM'))/12))*12), 0, '', '-'|| LPAD(TRUNC(TO_NUMBER((MONTHS_BETWEEN(TO_DATE(P_TO_MONTH,'YYYYMM'),TO_DATE(P_FORM_MONTH,'YYYYMM'))/12) - TRUNC(MONTHS_BETWEEN(TO_DATE(P_TO_MONTH,'YYYYMM'),TO_DATE(P_FORM_MONTH,'YYYYMM'))/12))*12),2,'0'))
            END 
          ELSE '' END) INTO L_RTN_VALUE FROM DUAL;
     
       RETURN L_RTN_VALUE;
EXCEPTION
   WHEN OTHERS THEN 
   RETURN '' ;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_GET_TAX;

CREATE OR REPLACE FUNCTION HPDQ.HR_GET_TAX(
  AS_SAL   IN  NUMBER,
  AS_KIND   IN VARCHAR2,
  AS_MONEY_KIND IN VARCHAR2,
  AS_EXT_RATE   IN NUMBER
  ) RETURN NUMBER IS
  AN_AMT         NUMBER;
  AN_AMT1       NUMBER;
  AN_RATE       NUMBER;
  AN_RATE1      NUMBER;
  AN_TOT_TAX    NUMBER := 0;
  I                NUMBER := 0;
  v_sal            number:=0;
  v_min_tax    number:=0;

  CURSOR V_EMP IS SELECT A.AMount,A.RATE
                      FROM THR_TAX A
                     WHERE A.DEL_IF=0 and tax_kind=AS_KIND
                     ORDER BY A.amount;
BEGIN

    --DOI SALARY RA TIEN VIET NEU KHAC LOAI TIEN '
    IF AS_MONEY_KIND='01' THEN
        v_sal:=AS_SAL;
    ELSE
        v_sal:=AS_SAL*AS_EXT_RATE;
    END IF;
    
    select NVL(V.NUM_1,0) INTO v_min_tax from vhr_hr_code v where v.id='HR0006' AND V.CODE='12';
    
    IF v_sal<=v_min_tax then
        return 0;
    end if;

     AN_TOT_TAX:=0;
     AN_AMT:=0;
     AN_AMT1:=0;
     AN_RATE:=0;
     AN_RATE1:=0;
     OPEN V_EMP ;
     LOOP
          FETCH V_EMP INTO AN_AMT,AN_RATE;
                IF v_sal<=AN_AMT THEN
                     AN_TOT_TAX:=AN_TOT_TAX+0;
               ELSE
                     AN_TOT_TAX:=AN_TOT_TAX + (v_sal-AN_AMT)*AN_RATE/100 + (AN_AMT-AN_AMT1)*AN_RATE1/100 - (v_sal-AN_AMT1)*AN_RATE1/100 ;
               END IF;
               AN_AMT1:=AN_AMT;
               AN_RATE1:=AN_RATE;
         EXIT WHEN V_EMP%NOTFOUND;

     END LOOP;
     CLOSE V_EMP;

   IF AS_MONEY_KIND='01' THEN
        RETURN AN_TOT_TAX;
    ELSE
        RETURN AN_TOT_TAX/AS_EXT_RATE;
    END IF;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_GET_TEMP_HOUR_V4;

CREATE OR REPLACE FUNCTION HPDQ.HR_GET_TEMP_HOUR_V4(
  p_company_pk      IN NUMBER,
  p_TIME_IN             IN VARCHAR2,
  p_TEMP_OUT1           IN  VARCHAR2, --HH:MM 
  p_TEMP_IN1           IN  VARCHAR2, --HH:MM
  p_TEMP_OUT2           IN  VARCHAR2, --HH:MM 
  p_TEMP_IN2           IN  VARCHAR2, --HH:MM
  p_TEMP_WT             IN  VARCHAR2, 
  p_TEMP_OT             IN  VARCHAR2,
  p_TEMP_NT             IN  VARCHAR2,
  p_TEMP_NT2             IN  VARCHAR2,
  p_TEMP_HT             IN  VARCHAR2,
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_return_type in varchar2 --wt,ot,nt,nt2,ht
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;

 V_TEMP_OUT1             VARCHAR2(13); --YYYYMMDDHH:MM
 V_TEMP_IN1             VARCHAR2(13); --YYYYMMDDHH:MM
 V_TEMP_OUT2             VARCHAR2(13); --YYYYMMDDHH:MM
 V_TEMP_IN2             VARCHAR2(13); --YYYYMMDDHH:MM 
 
l_wt1 number:=0;  
l_ot1 number:=0;
l_nt_1 number:=0;
l_nt2_1 number:=0;

l_wt2 number:=0;
l_ot2 number:=0;
l_nt_2 number:=0;
l_nt2_2 number:=0;  

  
l_flag number(1):=1;

l_nghi_trua number:=0;
l_nghi_chieu number:=0;
l_tc_trua number:=0;

l_bd_trua varchar2(13);
l_kt_trua varchar2(13);
l_bd_chieu varchar2(13);
l_kt_chieu varchar2(13);
l_start_ot varchar2(13);
l_start_nt varchar2(13);
l_end_nt varchar2(13);

l_tmp_out1 varchar2(13);
l_tmp_in1 varchar2(13);
l_tmp_out2 varchar2(13);
l_tmp_in2 varchar2(13);


l_tmp number:=0;
l_tmp_ot number:=0;

p_date_next varchar(8);
TYPE Array_num IS TABLE OF NUMBER;

l_from_temp Array_num;
l_to_temp Array_num;
l_round_temp Array_num;
l_result_tmp number:=0;


  BEGIN
    p_date_next:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD');
--xu ly cap out in 1

  
        IF p_TEMP_OUT1 IS NULL OR p_TEMP_IN1 IS NULL THEN --KO CÓ 1 TRONG 2 GIO THI KO TINH 
            l_flag:=0;
        ELSIF p_TEMP_WT IS NOT NULL THEN --KO CAN TINH
            l_flag:=1;
        ELSE --XU LY CAP 1
        
            --DOI RA DANG YYYYMMDDHH:MI
            IF p_TEMP_OUT1> p_TIME_IN THEN --CUNG 1 NGAY
                V_TEMP_OUT1:=p_WORK_DT||p_TEMP_OUT1;
            ELSE
                V_TEMP_OUT1:=p_date_next||p_TEMP_OUT1;
            END IF;
            
            IF p_TEMP_IN1> p_TIME_IN THEN --CUNG 1 NGAY
                V_TEMP_IN1:=p_WORK_DT||p_TEMP_IN1;
            ELSE
                V_TEMP_IN1:=p_date_next||p_TEMP_IN1;
            END IF;
                
            
            l_flag:=2;
            SELECT (CASE WHEN S.START_MEAL1>S.START_TIME THEN p_WORK_DT||S.START_MEAL1 
                        ELSE p_date_next||S.START_MEAL1 END)
                   ,(CASE WHEN S.END_MEAL1>S.START_TIME THEN p_WORK_DT||S.END_MEAL1 
                        ELSE p_date_next||S.END_MEAL1 END)     
                    ,nvl(S.MEAL1_INTERVAL,0)
                   ,(CASE WHEN S.START_MEAL2>S.START_TIME THEN p_WORK_DT||S.START_MEAL2 
                        ELSE p_date_next||S.START_MEAL2 END)
                    ,(CASE WHEN S.START_MEAL2>S.START_TIME THEN p_WORK_DT||S.START_MEAL2 
                        ELSE p_date_next||S.START_MEAL2 END)                        
                    ,NVL(S.MEAL2_INTERVAL,0),NVL(S.OT_MIDDLE_HOUR,0)
                    ,(CASE WHEN S.START_OT>S.START_TIME THEN p_WORK_DT||S.START_OT 
                        ELSE p_date_next||S.START_OT END)
                    ,p_WORK_DT||s.start_nt
                    ,TO_CHAR(TO_DATE(p_WORK_DT||s.start_nt,'YYYYMMDDHH24:MI')+8/24,'YYYYMMDDHH24:MI')     
            INTO l_bd_trua,l_kt_trua,l_nghi_trua,l_bd_chieu,l_kt_chieu,l_nghi_chieu,l_tc_trua,l_start_ot,l_start_nt,l_end_nt 
            FROM THR_WORK_SHIFT S 
            WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;
            
            
                        
            l_tmp_out1:=V_TEMP_OUT1;
            l_tmp_in1:=V_TEMP_IN1;
            l_tmp:=0;
            
            
            IF l_nghi_trua>0 then --co tru gio nghi trua
                IF V_TEMP_OUT1>=l_bd_trua AND V_TEMP_OUT1<=l_kt_trua THEN --GIO TEMP OUT NAM GIUA GIO NGHI 
                    l_tmp_out1:=l_kt_trua;
                    l_tmp:=0;
                    l_tmp_ot:=l_tc_trua;
                ELSIF V_TEMP_OUT1<=l_bd_trua and V_TEMP_IN1>l_bd_trua THEN
                    l_tmp_out1:=V_TEMP_OUT1;
                    l_tmp:=l_nghi_trua*60;
                    l_tmp_ot:=l_tc_trua;
                ELSIF V_TEMP_OUT1>=l_kt_trua THEN
                    l_tmp_out1:=V_TEMP_OUT1;
                    l_tmp:=0;
                    l_tmp_ot:=0;
                END IF;
            END IF;
            
            IF V_TEMP_IN1>to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi') THEN
                l_tmp_in1:=to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi');
            END IF;
            l_wt1:=ROUND((to_date(l_tmp_in1,'yyyymmddhh24:mi')-to_date(l_tmp_out1,'yyyymmddhh24:mi'))*24*60,2)-l_tmp;
            
            IF l_wt1<0 THEN
                 l_wt1:=0;
            END IF;
            
            IF V_TEMP_OUT1>l_start_ot THEN
                l_tmp_out1:=V_TEMP_OUT1;
            ELSE
                l_tmp_out1:=l_start_ot;
            END IF;
            
            IF V_TEMP_IN1>l_start_ot THEN
                l_tmp_in1:=V_TEMP_IN1;
            ELSE 
                l_tmp_in1:=l_start_ot;
            END IF;
            
            IF l_tmp_in1>l_start_ot THEN
                l_ot1:=l_tmp_ot*60+ROUND((to_date(l_tmp_in1,'yyyymmddhh24:mi')-to_date(l_tmp_out1,'yyyymmddhh24:mi'))*24*60,2);
            ELSE 
                l_ot1:=l_tmp_ot*60;
            END IF;
            
            --NT1
            IF l_start_nt<l_start_ot then --co nt1
                IF V_TEMP_IN1>l_start_nt THEN
                     IF V_TEMP_IN1>to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi') THEN
                            l_tmp_in1:=to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi');
                     ELSE 
                            l_tmp_in1:=V_TEMP_IN1;
                     END IF;
                     IF V_TEMP_OUT1<l_start_nt THEN
                        l_tmp_out1:=l_start_nt;
                     ELSE
                        l_tmp_out1:=V_TEMP_OUT1;
                     END IF;
                     l_nt_1:=ROUND((to_date(l_tmp_in1,'yyyymmddhh24:mi')-to_date(l_tmp_out1,'yyyymmddhh24:mi'))*24*60,2);
                     IF l_nt_1<0 THEN
                        l_nt_1:=0;
                     END IF;
                ELSE
                     l_nt_1:=0;                   
                END IF;
            ELSE 
                l_nt_1:=0;
            END IF;
            --NT2
            
            IF l_start_ot<l_end_nt THEN --CO NT2
                IF V_TEMP_IN1>l_start_nt THEN
                    IF V_TEMP_IN1>l_end_nt THEN
                        l_tmp_in1:=l_end_nt;
                    ELSE
                        l_tmp_in1:=V_TEMP_IN1;
                    END IF;
                    
                    IF l_start_ot>l_start_nt THEN   --VIDU: START OT='02:00'
                        IF V_TEMP_OUT1>l_start_ot THEN
                            l_tmp_out1:=V_TEMP_OUT1;
                        ELSE
                            l_tmp_out1:=l_start_ot;
                        END IF;
                    ELSE
                        IF V_TEMP_OUT1>l_start_nt THEN
                            l_tmp_out1:=V_TEMP_OUT1;
                        ELSE
                            l_tmp_out1:=l_start_nt;
                        END IF;
                        
                    END IF;
                    l_nt2_1:=ROUND((to_date(l_tmp_in1,'yyyymmddhh24:mi')-to_date(l_tmp_out1,'yyyymmddhh24:mi'))*24*60,2);
                    IF l_nt2_1<0 THEN
                        l_nt2_1:=0;
                    END IF;
                    
                ELSE  
                    l_nt2_1:=0;
                END IF;  
            ELSE
                l_nt2_1:=0;
            
            END IF;
            
            --xu ly temp out2, in2
            
            IF p_TEMP_OUT2 IS NOT NULL AND p_TEMP_IN2 IS NOT NULL THEN
            
                --DOI RA DANG YYYYMMDDHH:MI
                
                     IF p_TEMP_OUT2> p_TIME_IN THEN --CUNG 1 NGAY
                        V_TEMP_OUT2:=p_WORK_DT||p_TEMP_OUT2;
                    ELSE
                        V_TEMP_OUT2:=p_date_next||p_TEMP_OUT2;
                    END IF;
                    
                    IF p_TEMP_IN2> p_TIME_IN THEN --CUNG 1 NGAY
                        V_TEMP_IN2:=p_WORK_DT||p_TEMP_IN2;
                    ELSE
                        V_TEMP_IN2:=p_date_next||p_TEMP_IN2;
                    END IF;
                
                    
            
                    l_tmp_out2:=V_TEMP_OUT2;
                    l_tmp_in2:=V_TEMP_IN2;
                    l_tmp:=0;
                    
                    IF l_nghi_trua>0 then --co tru gio nghi trua
                        IF V_TEMP_OUT2>=l_bd_trua AND V_TEMP_OUT2<=l_kt_trua THEN --GIO TEMP OUT NAM GIUA GIO NGHI 
                            l_tmp_out2:=l_kt_trua;
                            l_tmp:=0;
                            l_tmp_ot:=l_tc_trua;
                        ELSIF V_TEMP_OUT2<=l_bd_trua and V_TEMP_IN2>l_bd_trua THEN
                            l_tmp_out2:=V_TEMP_OUT2;
                            l_tmp:=l_nghi_trua*60;
                            l_tmp_ot:=l_tc_trua;
                        ELSIF V_TEMP_OUT2>=l_kt_trua THEN
                            l_tmp_out2:=V_TEMP_OUT2;
                            l_tmp:=0;
                            l_tmp_ot:=0;
                        END IF;
                    END IF;
                    
                    IF V_TEMP_IN2>to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi') THEN
                        l_tmp_in2:=to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi');
                    END IF;
                    l_wt2:=ROUND((to_date(l_tmp_in2,'yyyymmddhh24:mi')-to_date(l_tmp_out2,'yyyymmddhh24:mi'))*24*60,2)-l_tmp;
                    
                    IF l_wt2<0 THEN
                         l_wt2:=0;
                    END IF;
                    
                    IF V_TEMP_OUT2>l_start_ot THEN
                        l_tmp_out2:=V_TEMP_OUT2;
                    ELSE
                        l_tmp_out2:=l_start_ot;
                    END IF;
                    
                    IF V_TEMP_IN2>l_start_ot THEN
                        l_tmp_in2:=V_TEMP_IN2;
                    ELSE 
                        l_tmp_in2:=l_start_ot;
                    END IF;
                    
                    IF l_tmp_in2>l_start_ot THEN
                        l_ot2:=l_tmp_ot*60+ROUND((to_date(l_tmp_in2,'yyyymmddhh24:mi')-to_date(l_tmp_out2,'yyyymmddhh24:mi'))*24*60,2);
                    ELSE 
                        l_ot2:=l_tmp_ot*60;
                    END IF;
                    
                    --NT1
                    IF l_start_nt<l_start_ot then --co nt1
                        IF V_TEMP_IN2>l_start_nt THEN
                             IF V_TEMP_IN2>to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi') THEN
                                    l_tmp_in2:=to_char(to_date(l_start_ot,'yyyymmddhh24:mi')-nvl(l_nghi_chieu,0)/24,'yyyymmddhh24:mi');
                             ELSE 
                                    l_tmp_in2:=V_TEMP_IN2;
                             END IF;
                             IF V_TEMP_OUT2<l_start_nt THEN
                                l_tmp_out2:=l_start_nt;
                             ELSE
                                l_tmp_out2:=V_TEMP_OUT2;
                             END IF;
                             l_nt_2:=ROUND((to_date(l_tmp_in2,'yyyymmddhh24:mi')-to_date(l_tmp_out2,'yyyymmddhh24:mi'))*24*60,2);
                             IF l_nt_2<0 THEN
                                l_nt_2:=0;
                             END IF;
                        ELSE
                             l_nt_2:=0;                   
                        END IF;
                    ELSE 
                        l_nt_2:=0;
                    END IF;
                    --NT2
                    
                    IF l_start_ot<l_end_nt THEN --CO NT2
                        IF V_TEMP_IN2>l_start_nt THEN
                            IF V_TEMP_IN2>l_end_nt THEN
                                l_tmp_in2:=l_end_nt;
                            ELSE
                                l_tmp_in2:=V_TEMP_IN2;
                            END IF;
                            
                            IF l_start_ot>l_start_nt THEN   --VIDU: START OT='02:00'
                                IF V_TEMP_OUT2>l_start_ot THEN
                                    l_tmp_out2:=V_TEMP_OUT2;
                                ELSE
                                    l_tmp_out2:=l_start_ot;
                                END IF;
                            ELSE
                                IF V_TEMP_OUT2>l_start_nt THEN
                                    l_tmp_out2:=V_TEMP_OUT2;
                                ELSE
                                    l_tmp_out2:=l_start_nt;
                                END IF;
                                
                            END IF;
                            l_nt2_2:=ROUND((to_date(l_tmp_in2,'yyyymmddhh24:mi')-to_date(l_tmp_out2,'yyyymmddhh24:mi'))*24*60,2);
                            IF l_nt2_2<0 THEN
                                l_nt2_2:=0;
                            END IF;
                            
                        ELSE  
                            l_nt2_2:=0;
                        END IF;  
                    ELSE
                        l_nt2_2:=0;
                    
                    END IF;
            END IF;

        END IF;    
        
       IF l_flag=0 THEN
            N_OT_TIME:=0;
       ELSIF l_flag=1 THEN -- TRA RA GIA TRI CU
       
            IF p_return_type='WT' THEN
                N_OT_TIME:=p_TEMP_WT;
            ELSIF p_return_type='OT' THEN
                N_OT_TIME:=p_TEMP_OT;
            ELSIF p_return_type='NT' THEN
                N_OT_TIME:=p_TEMP_NT;
            ELSIF p_return_type='NT2' THEN
                N_OT_TIME:=p_TEMP_NT2;
            ELSIF p_return_type='HT' THEN
                N_OT_TIME:=p_TEMP_HT;
            ELSE 
                N_OT_TIME:=0;
            END IF;
            
        ELSE --CO TINH 
        
            IF p_return_type='WT' THEN
                
                l_tmp:=mod((l_wt1+l_wt2),60); --so phut le
                N_OT_TIME:=trunc((l_wt1+l_wt2)/60);
                
            ELSIF p_return_type='OT' THEN
                N_OT_TIME:=trunc((l_ot1+l_ot2)/60)+  (CASE WHEN mod((l_ot1+l_ot2),60) BETWEEN 0 AND 9 THEN 0
                                                WHEN mod((l_ot1+l_ot2),60) BETWEEN 10 AND 34 THEN 0.5
                                                ELSE 1 END);
            ELSIF p_return_type='NT' THEN
                l_tmp:=mod((l_nt_1+l_nt_2),60); --so phut le
                N_OT_TIME:=trunc((l_nt_1+l_nt_2)/60);
            ELSIF p_return_type='NT2' THEN
                l_tmp:=mod((l_nt2_1+l_nt2_2),60); --so phut le
                N_OT_TIME:=trunc((l_nt2_1+l_nt2_2)/60);
                
            ELSIF p_return_type='HT' THEN
                l_tmp:=mod((l_wt1+l_wt2),60); --so phut le
                N_OT_TIME:=trunc((l_wt1+l_wt2)/60);
            ELSE 
                l_tmp:=0; --so phut le
                N_OT_TIME:=0;
            END IF;
            
        END IF;
        
        IF l_tmp>0 THEN --XU LY LAM TRONG RA VAO GIUA CA
        
            SELECT C.NUM_1,C.NUM_2,C.NUM_3 BULK COLLECT INTO l_from_temp,l_to_temp,l_round_temp
            FROM VHR_HR_CODE C
            WHERE C.ID='HR0207'
            AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
            ORDER BY C.SEQ;
            
            IF NVL(l_from_temp.FIRST,-1)=-1 THEN --KO CO DU LIEU
                l_result_tmp:=round(l_tmp/60,2); 
            ELSE
        
                FOR i IN l_from_temp.FIRST..l_from_temp.LAST --CHECK VALIDATE
                LOOP
                    IF l_tmp>=l_from_temp(i) AND l_tmp<=l_to_temp(i) THEN
                        l_result_tmp:=l_round_temp(i);
                    END IF; 
                END LOOP;    
            END IF;    
        
        END IF;
                
    return N_OT_TIME+NVL(l_result_tmp,0);

 
    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_LATELY_EARLY;

CREATE OR REPLACE FUNCTION HPDQ.HR_LATELY_EARLY(
P_DATE1 IN VARCHAR2,
P_TIME1 IN VARCHAR2,
P_DATE2 IN VARCHAR2,
P_TIME2      IN VARCHAR2,
P_TYPE      IN VARCHAR2, --IN LATE HAY OUT EARLY 
P_EMP_PK    IN NUMBER
)RETURN NUMBER IS
AV_MINUTE  NUMBER;
AV_REG NUMBER(3):=0;
RESULT NUMBER;




BEGIN
    IF P_TIME1 IS NULL OR P_TIME2 IS NULL THEN
        RESULT:=0;
    ELSE
        IF P_TYPE='IN' THEN
            SELECT NVL(MAX(NVL(A.REG_HOURS,0)*60),0) INTO AV_REG FROM THR_REGULATION A 
                    WHERE A.DEL_IF=0 
                    AND A.THR_EMP_PK=P_EMP_PK AND A.START_DT<=P_DATE1
                    AND A.END_DT>= P_DATE1 
                    AND A.REG_TYPE IN('01','04');
        ELSE
            SELECT NVL(MAX(NVL(A.REG_HOURS,0)*60),0) INTO AV_REG FROM THR_REGULATION A 
                    WHERE A.DEL_IF=0 
                    AND A.THR_EMP_PK=P_EMP_PK AND A.START_DT<=P_DATE1
                    AND A.END_DT>= P_DATE1 
                    AND A.REG_TYPE IN('03','04');    
        END IF;
        
        SELECT (TO_DATE(P_DATE1||P_TIME1,   'YYYYMMDDHH24:MI') - TO_DATE(P_DATE2||P_TIME2,'YYYYMMDDHH24:MI'))*24*60
        INTO AV_MINUTE
        FROM DUAL;
        RESULT:= ROUND(NVL(AV_MINUTE,0)+NVL(AV_REG,0),2);
    END IF;
    
    RETURN RESULT;
    
   EXCEPTION
     WHEN OTHERS THEN
       RAISE;
END HR_LATELY_EARLY;
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SEQUENCE;

CREATE OR REPLACE FUNCTION HPDQ.hr_sequence (v_user in varchar2)
   return varchar2
is
   pragma autonomous_transaction;
/******************************************************************************
   NAME:       f_sequence
   PURPOSE: reset sequence number to maximun pk of table 
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/09/2006   Nguyen Van Thai       1. Created this procedure. 
******************************************************************************/
   l_sql   varchar2 (4000) := null;
   l_cnt   number          := 0;
--------
begin
--------
   for c1 in (select table_name
                from all_all_tables
               where owner = upper (v_user) and table_name like 'THR%')
   loop
      select count (*)
        into l_cnt
        from all_objects
       where owner = upper (v_user)
         and object_type = 'SEQUENCE'
         and object_name = upper (c1.table_name) || '_SEQ'; 
      if l_cnt > 0
      then
         begin
            l_sql := 'DROP SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ'; 
            execute immediate l_sql; 
            l_sql := 'SELECT nvl(MAX(PK),0)+1 from ' || c1.table_name; 
            execute immediate l_sql
                         into l_cnt; 
            l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ start with ' || l_cnt; 
            execute immediate l_sql;
         exception
            when others
            then
               null;
         end;
      else
         l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ'; 
         execute immediate l_sql;
      end if;
   end loop; 
   return 'reset sequence is successful';
exception
   when others
   then
      return l_sql || sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_CHECK_MONTH_CLOSE;

CREATE OR REPLACE FUNCTION HPDQ.hr_sf_check_month_close
(p_date varchar2,
p_id   varchar2,
p_company_pk varchar2
)
   RETURN varchar2
IS
   l_flag_exist   BOOLEAN;
   l_cur_rec      NUMBER;
   l_cur          sys_refcursor;


BEGIN
   --check close month
   OPEN l_cur FOR
      SELECT 1
        FROM thr_close t
       WHERE del_if = 0
         AND t.close_yn = 'Y'
         AND p_date BETWEEN t.from_dt AND t.to_dt
         and T.TCO_COMPANY_PK=p_company_pk
         AND t.ID = p_id;

   FETCH l_cur
    INTO l_cur_rec;

   l_flag_exist := l_cur%FOUND;

   CLOSE l_cur;
    if l_flag_exist then
        return 'Y';
    else
        return 'N';
    end if;


EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_CHECK_MONTH_CLOSE_2;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_check_month_close_2
(p_month varchar2,
p_sal_kind   varchar2, --active hay resign
p_id           varchar2,  --id sal  
p_org_pk varchar2
)
   RETURN varchar2
IS
   l_flag_exist   BOOLEAN;
   l_cur_rec      NUMBER;
   l_cur          sys_refcursor;


BEGIN
   --check close month
   OPEN l_cur FOR
      SELECT 1
        FROM thr_close t
       WHERE del_if = 0
         AND t.close_yn = 'Y'
         AND T.MONTH_CLOSE=p_month
         and T.TCO_COMPANY_PK=(select max(b.tco_company_pk) from tco_org b where b.del_if=0 and decode(p_org_pk,'ALL','ALL',b.pk)=p_org_pk) --XAC DINH THEO COMPANY
         and T.KIND_OF_SALARY=to_number(p_sal_kind)
         AND (t.ID = p_id or p_id='');

   FETCH l_cur
    INTO l_cur_rec;

   l_flag_exist := l_cur%FOUND;

   CLOSE l_cur;
    if l_flag_exist then
        return 'Y';
    else
        return 'N';
    end if;


EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_C_NT2;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_C_NT2(
 
  p_START             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_end_nt_s     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  
  l_shift_start VARCHAR2(13);
  l_ot  number;


    l_start_s varchar2(13);
    l_start_nt varchar2(13);
    l_start_nt2 varchar2(13);
    l_end_nt varchar2(13);
    l_start varchar2(13);
    l_end varchar2(13);
    l_h_nt varchar2(5);
    
    l_temp_in        number;
  BEGIN
        
        select
        A.START_NT  
        ,p_work_dt||A.START_TIME
        , to_char(to_date(to_char(to_date(p_work_dt,'yyyymmdd')-1,'yyyymmdd')||A.START_NT,'yyyymmddhh24:mi'),'yyyymmddhh24:mi')
        , to_char(to_date(to_char(to_date(p_work_dt,'yyyymmdd')-1,'yyyymmdd')||A.START_NT,'yyyymmddhh24:mi')+8/24,'yyyymmddhh24:mi')
        , to_char(to_date(to_char(to_date(p_work_dt,'yyyymmdd'),'yyyymmdd')||A.START_NT,'yyyymmddhh24:mi'),'yyyymmddhh24:mi')
        into l_h_nt, l_start_s, l_start_nt, l_end_nt, l_start_nt2
        from thr_work_shift a
        where a.del_if=0
        and A.PK = p_shift ;
     
    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0153'
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(p_START,-2));
    l_in_time:=substr(p_START,9,5);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
      
             IF l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_in_time:=p_WORK_DT||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_in_time:=p_WORK_DT||l_temp_in||':'||l_minute_round;
                END IF;

             IF l_temp_in=24 THEN
                l_in_time:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
             
    END LOOP;

    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=p_START;
    END IF;
     
    
    l_start := l_in_time;
    l_end :=  l_start_s;   
     
    if substr(l_start_s,-5) < l_h_nt  then -- ca ngày b?t d?u sau 00:00  
        if p_start < l_start_s and p_start < l_end_nt then  -- gio vao phai nho hon gio ca va gio vao thuc t? nh? hon end ca dêm
            if  l_start_s > l_end_nt then       
                l_end := l_end_nt;
            end if;
            
           if p_start < l_start_nt then
                l_start := l_start_nt ;
           end if;
        else 
               RETURN 0;
        end if;
    
    else   -- ca dêm b?t d?u tru?c 00:00
         if p_start < l_start_s and p_start < l_start_nt2 then  -- gio vao phai nho hon gio ca va gio vao thuc t? nh? hon b?t d?u ca
            
           if p_start < l_start_nt2 then
                l_start := l_start_nt2 ;
           end if;
        else 
               RETURN 0;
        end if;        
     end if; 
     

        
        select ROUND((TO_DATE(l_end,'YYYYMMDDHH24:MI') - TO_DATE(l_start,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<=0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_C_NT2_COM;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_C_NT2_COM(
 
  p_START             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_company_pk  IN VARCHAR2
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_end_nt_s     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  
  l_shift_start VARCHAR2(13);
  l_ot  number;


    l_start_s varchar2(13);
    l_start_nt varchar2(13);
    l_start_nt2 varchar2(13);
    l_end_nt varchar2(13);
    l_start varchar2(13);
    l_end varchar2(13);
    l_h_nt varchar2(5);
    
    l_temp_in        number;
    l_max_c_ot  NUMBER;
  BEGIN

    
    
        
        select
        A.START_NT  
        ,p_work_dt||A.START_TIME
        , to_char(to_date(to_char(to_date(p_work_dt,'yyyymmdd')-1,'yyyymmdd')||A.START_NT,'yyyymmddhh24:mi'),'yyyymmddhh24:mi')
        , to_char(to_date(to_char(to_date(p_work_dt,'yyyymmdd')-1,'yyyymmdd')||A.START_NT,'yyyymmddhh24:mi')+8/24,'yyyymmddhh24:mi')
        , to_char(to_date(to_char(to_date(p_work_dt,'yyyymmdd'),'yyyymmdd')||A.START_NT,'yyyymmddhh24:mi'),'yyyymmddhh24:mi')
        ,NVL(A.OT_C_HOUR,99)
        into l_h_nt, l_start_s, l_start_nt, l_end_nt, l_start_nt2,l_max_c_ot
        from thr_work_shift a
        where a.del_if=0
        and A.PK = p_shift ;
        
    IF l_max_c_ot>0 AND p_START IS NOT NULL THEN -- CO TANG CA NGUOC
    
        N_OT_TIME:=-1;
     
    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0153' AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(p_START,-2));
    l_in_time:=substr(p_START,9,5);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
      
             IF l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_in_time:=p_WORK_DT||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_in_time:=p_WORK_DT||l_temp_in||':'||l_minute_round;
                END IF;

             IF l_temp_in=24 THEN
                l_in_time:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
             
    END LOOP;

    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=p_START;
    END IF;
     
    
    l_start := l_in_time;
    l_end :=  l_start_s;   
     
    if substr(l_start_s,-5) < l_h_nt  then -- ca ngày b?t d?u sau 00:00  
        if p_start < l_start_s and p_start < l_end_nt then  -- gio vao phai nho hon gio ca va gio vao thuc t? nh? hon end ca dêm
            if  l_start_s > l_end_nt then       
                l_end := l_end_nt;
            end if;
            
           if p_start < l_start_nt then
                l_start := l_start_nt ;
           end if;
        else 
               N_OT_TIME:= 0;
        end if;
    
    else   -- ca dêm b?t d?u tru?c 00:00
         if p_start < l_start_s then  -- gio vao phai nho hon gio ca va gio vao thuc t? nh? hon b?t d?u ca
            
           if p_start < l_start_nt2 then
                l_start := l_start_nt2 ;
           end if;
        else 
               N_OT_TIME:= 0;
        end if;        
     end if; 
     

        IF N_OT_TIME=-1 THEN
            select ROUND((TO_DATE(l_end,'YYYYMMDDHH24:MI') - TO_DATE(l_start,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;
    
    
            IF N_OT_TIME<=0 THEN
                N_OT_TIME:=0;
            ELSIF N_OT_TIME>l_max_c_ot THEN
                N_OT_TIME:=l_max_c_ot;
            
            END IF;
        ELSE
            N_OT_TIME:=0;
        END IF;
    
    ELSE
        N_OT_TIME:=0;
    
    END IF;            

    RETURN  N_OT_TIME;
    
    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_C_OT;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_C_OT(
  p_IN_TIME           IN  VARCHAR2, --YYYYMMDDHH:MM 
  p_START_SHIFT             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_in        number;
  l_flag_exit1    number(1):=0;
  l_cur_rec number;
l_pro varchar(200);
l_cursor          sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;

l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
l_min_c_ot number:=0.5;  -- su dung hr code 


  BEGIN
  
  
  --poscolt khong su dung tang ca nguoc
   OPEN l_cursor FOR
   select 1 from THR_WORK_SHIFT t  where t.del_if=0 and  t.tco_company_pk=2 and t.pk=p_SHIFT;
    FETCH l_cursor INTO l_cur_rec;
    if l_cursor %found then
    return 0;
    end if;
    close l_cursor;
  -------------------
  
  --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0153'  
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(p_IN_TIME,-2));
    l_in_time:=substr(p_IN_TIME,9,5);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
      
             IF l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_in_time:=p_WORK_DT||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_in_time:=p_WORK_DT||l_temp_in||':'||l_minute_round;
                END IF;

             IF l_temp_in=24 THEN
                l_in_time:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
             
    END LOOP;

    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=p_IN_TIME;
    END IF;

    N_OT_TIME:= ROUND(24*60*(TO_DATE(p_START_SHIFT,'YYYYMMDDHH24:MI')-TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))/60,2);



    IF N_OT_TIME<l_min_c_ot THEN
        N_OT_TIME:=0;
    END IF;

    return N_OT_TIME;

    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_C_OT_COM;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_C_OT_COM(
  p_IN_TIME           IN  VARCHAR2, --YYYYMMDDHH:MM 
  p_START_SHIFT             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_company_pk  in number
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_in        number;
  l_flag_exit1    number(1):=0;
  l_cur_rec number;
l_pro varchar(200);
l_cursor          sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;

l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
l_min_c_ot number:=0;  -- su dung hr code 

l_cur_rec number;
l_cur sys_refcursor;
l_ot_c_yn   varchar2(1):='N';
  BEGIN
  
  OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_SF_GET_C_OT_COM')
                AND nvl(A.TCO_COMPANY_PK,p_company_pk)= p_company_pk;--XAC DINH THEO COMPANY 

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
            l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5) from dual' ;
            execute  immediate l_string  into N_OT_TIME using in p_IN_TIME,in p_START_SHIFT,in p_SHIFT,in p_WORK_DT, in p_company_pk;
 ELSE 
     
        SELECT NVL(W.OT_C_YN,'N') INTO   l_ot_c_yn
        FROM THR_WORK_SHIFT W
        WHERE W.DEL_IF=0
            AND W.PK = p_shift
            AND nvl(W.TCO_COMPANY_PK,p_company_pk)= p_company_pk ;--XAC DINH THEO COMPANY
            
       IF l_ot_c_yn = 'N' THEN 
            RETURN 0;
       END IF;
 
  --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0153'
            AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(p_IN_TIME,-2));
    l_in_time:=substr(p_IN_TIME,9,5);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
      
             IF l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_in_time:=p_WORK_DT||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_in_time:=p_WORK_DT||l_temp_in||':'||l_minute_round;
                END IF;

             IF l_temp_in=24 THEN
                l_in_time:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
             
    END LOOP;

    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=p_IN_TIME;
    END IF;

    N_OT_TIME:= ROUND(24*60*(TO_DATE(p_START_SHIFT,'YYYYMMDDHH24:MI')-TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))/60,2);

    SELECT NVL(C.NUM_2,0) INTO l_min_c_ot
            FROM VHR_HR_CODE C
            WHERE C.ID='HR0038' AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk;--XAC DINH THEO COMPANY 

    IF N_OT_TIME<l_min_c_ot THEN
        N_OT_TIME:=0;
    END IF;

    return N_OT_TIME;

 END IF;
    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_DEPT_OF_EVA_EMP;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_dept_of_eva_emp (p_thr_eva_emp_pk varchar)
   return varchar2
is
/******************************************************************************
   NAME:       sf_get_dept_of_eva_emp
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/11/2009          1. Created this function.

******************************************************************************/
   l_rtn_value    varchar2 (400);
   l_tco_org_pk   number;
begin
   select max (org_nm)
     into l_rtn_value
     from tco_org
    where pk in (select tco_org_pk
                   from thr_eva_emp
                  where pk = p_thr_eva_emp_pk) and org_type = '06';

   if l_rtn_value is not null
   then
      return l_rtn_value;
   else
      select max (org_nm)
        into l_rtn_value
        from tco_org
       where pk in (select p_pk
                      from tco_org
                     where pk in (select tco_org_pk
                                    from thr_eva_emp
                                   where pk = p_thr_eva_emp_pk)) and org_type = '06';

      if l_rtn_value is not null
      then
         return l_rtn_value;
      else
         select max (org_id || '-' || org_nm)
           into l_rtn_value
           from tco_org
          where pk in (select p_pk
                         from tco_org
                        where pk in (select p_pk
                                       from tco_org
                                      where pk in (select tco_org_pk
                                                     from thr_eva_emp
                                                    where pk = p_thr_eva_emp_pk))) and org_type = '06';

         if l_rtn_value is not null
         then
            return l_rtn_value;
         else
            select max (org_id || '-' || org_nm)
              into l_rtn_value
              from tco_org
             where pk in (select p_pk
                            from tco_org
                           where pk in (select p_pk
                                          from tco_org
                                         where pk in (select p_pk
                                                        from tco_org
                                                       where pk in (select tco_org_pk
                                                                      from thr_eva_emp
                                                                     where pk = p_thr_eva_emp_pk)))) and org_type = '06';

            if l_rtn_value is not null
            then
               return l_rtn_value;
            else
               select max (org_id || '-' || org_nm)
                 into l_rtn_value
                 from tco_org
                where pk in (select p_pk
                               from tco_org
                              where pk in (select p_pk
                                             from tco_org
                                            where pk in (select p_pk
                                                           from tco_org
                                                          where pk in (select p_pk
                                                                         from tco_org
                                                                        where pk in (select tco_org_pk
                                                                                       from thr_eva_emp
                                                                                      where pk = p_thr_eva_emp_pk)))));
            end if;
         end if;
      end if;
   end if;

   return l_rtn_value;
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_EVA_TOTAL;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_eva_total (
   p_tco_org_pk        VARCHAR,
   p_year              VARCHAR,
   p_thr_employee_pk   VARCHAR
)
   RETURN VARCHAR
IS
   l_rtn       VARCHAR2 (500);
   l_request   NUMBER;
   l_eva       NUMBER;
   l_total     NUMBER;
/******************************************************************************
   NAME:       SF_GET_EVA_TOTAL
   PURPOSE:

   REVISIONS:
   VER        DATE        AUTHOR           DESCRIPTION
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/5/2009          1. CREATED THIS FUNCTION.
******************************************************************************/
BEGIN
   SELECT COUNT (DISTINCT a.thr_eva_emp_pk)
     INTO l_request
     FROM thr_eva_emp_reviewer a, thr_eva_reviewer b, thr_eva_emp c, thr_eva_group d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND c.del_if = 0
      AND d.del_if = 0
      AND d.mbo_yn = 'N'
      AND a.t_score IS NOT NULL
      AND c.thr_eva_group_pk = d.pk
      AND a.thr_eva_emp_pk = c.pk
      AND a.thr_eva_reviewer_pk = b.pk
      AND c.thr_eva_master_pk = p_year
      AND b.thr_employee_pk = p_thr_employee_pk
      AND c.tco_org_pk = p_tco_org_pk;

   SELECT COUNT (DISTINCT a.thr_eva_emp_pk)
     INTO l_total
     FROM thr_eva_emp_reviewer a, thr_eva_reviewer b, thr_eva_emp c, thr_eva_group d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND c.del_if = 0
      AND d.del_if = 0
      AND d.mbo_yn = 'N'
      AND c.thr_eva_group_pk = d.pk
      AND a.thr_eva_emp_pk = c.pk
      AND a.thr_eva_reviewer_pk = b.pk
      AND c.thr_eva_master_pk = p_year
      AND b.thr_employee_pk = p_thr_employee_pk
      AND c.tco_org_pk = p_tco_org_pk;

   l_rtn := ' (' || NVL (l_request, 0) || '/' || NVL (l_total, 0) || ')';
   RETURN l_rtn;
EXCEPTION
   WHEN OTHERS
   THEN
      -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_thr_eva_group_pk varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_group_kind varchar2(10);
   
begin

    select nvl(A.GROUP_KIND,'01') into l_group_kind
    from thr_eva_group a where a.del_if=0 and a.pk=p_thr_eva_group_pk;
    
IF l_group_kind='01' THEN --LOAI STAFF     
    
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = nvl(p_option_seq,1);

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
        -- and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level
         and g.pk=p_thr_eva_group_pk;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
   
ELSE --LOAI LEADER
    select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to2
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = nvl(p_option_seq,1);

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade2
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level
         and g.pk=p_thr_eva_group_pk;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
        
END IF;   
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_A;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_a (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_thr_eva_group_pk varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_group_kind varchar2(10);
begin

select nvl(A.GROUP_KIND,'01') into l_group_kind
    from thr_eva_group a where a.del_if=0 and a.pk=p_thr_eva_group_pk;
IF l_group_kind='01' THEN --LOAI STAFF         

   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = nvl(p_option_seq,1);

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.a_grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
       --  and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level
         and g.pk=p_thr_eva_group_pk;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
ELSE --LOAI LEADER
     select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to2
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = nvl(p_option_seq,1);

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade2
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.a_grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level
         and g.pk=p_thr_eva_group_pk;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
    
END IF;   
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_C;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_c (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_thr_eva_group_pk varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_group_kind varchar2(10);
begin

select nvl(A.GROUP_KIND,'01') into l_group_kind
    from thr_eva_group a where a.del_if=0 and a.pk=p_thr_eva_group_pk;
IF l_group_kind='01' THEN --LOAI STAFF     
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = nvl(p_option_seq,1);

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.c_grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
       --  and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level
         and g.pk=p_thr_eva_group_pk;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
ELSE
    select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to2
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = nvl(p_option_seq,1);

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade2
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.c_grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level
         and g.pk=p_thr_eva_group_pk;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;   
END IF;   
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_FINAL_A_TMP;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_final_a_tmp (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_thr_eva_group_pk varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_group_kind varchar2(10);
begin
select nvl(A.GROUP_KIND,'01') into l_group_kind
    from thr_eva_group a where a.del_if=0 and a.pk=p_thr_eva_group_pk;
IF l_group_kind='01' THEN --LOAI STAFF    
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq
    and del_if=0;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and a.del_if = 0 and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.pk=p_thr_eva_group_pk
         and g.mbo_yn = 'N'
         and b.a_final_grade = cur.code
         and a.del_if = 0
          and b.del_if=0
      --   and a.grade_yn = 'Y'
         and b.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'E';
   return l_rtn_value;
ELSE
        select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to2
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq
    and del_if=0;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and a.del_if = 0 and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade2
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.pk=p_thr_eva_group_pk
         and g.mbo_yn = 'N'
         and b.a_final_grade = cur.code
         and a.del_if = 0
          and b.del_if=0
      --   and a.grade_yn = 'Y'
         and b.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'E';
   return l_rtn_value;
    
END IF;   
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_FINAL_C_TMP;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_final_c_tmp (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_thr_eva_group_pk varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_group_kind varchar2(10);
begin
select nvl(A.GROUP_KIND,'01') into l_group_kind
    from thr_eva_group a where a.del_if=0 and a.pk=p_thr_eva_group_pk;
IF l_group_kind='01' THEN --LOAI STAFF    
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq
    and del_if=0;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and a.del_if = 0 and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.pk=p_thr_eva_group_pk
         and g.mbo_yn = 'N'
         and b.c_final_grade = cur.code
         and a.del_if = 0
          and b.del_if=0
         --and a.grade_yn = 'Y'
         and b.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'E';
   return l_rtn_value;
ELSE
    select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to2
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq
    and del_if=0;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and a.del_if = 0 and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade2
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.pk=p_thr_eva_group_pk
         and g.mbo_yn = 'N'
         and b.c_final_grade = cur.code
         and a.del_if = 0
          and b.del_if=0
         --and a.grade_yn = 'Y'
         and b.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'E';
   return l_rtn_value;
    
END IF;   
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_FINAL_TMP;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_final_tmp (
   p_num_of_emp            VARCHAR,
   p_thr_eva_master_pk     VARCHAR,
   p_thr_eva_reviewer_pk   VARCHAR,
   p_reviewer_level        VARCHAR,
   p_option_seq            VARCHAR,
   p_thr_eva_group_pk    varchar
)
   RETURN VARCHAR2
IS
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             VARCHAR2 (2);
   l_max_to                NUMBER;
   l_thr_eva_to_pk         NUMBER;
   l_thr_eva_to_grade_pk   NUMBER;
   l_cnt                   NUMBER;
   l_grade                 VARCHAR2 (1);
   l_group_kind varchar2(10);
BEGIN


select nvl(A.GROUP_KIND,'01') into l_group_kind
    from thr_eva_group a where a.del_if=0 and a.pk=p_thr_eva_group_pk;
IF l_group_kind='01' THEN --LOAI STAFF    
   SELECT MAX (pk)
     INTO l_thr_eva_to_pk
     FROM thr_eva_to
    WHERE thr_eva_master_pk = p_thr_eva_master_pk
      AND num_of_emp = p_num_of_emp
      AND option_seq = p_option_seq
      AND del_if = 0;

   IF l_thr_eva_to_pk IS NULL
   THEN
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   END IF;

   FOR cur IN (SELECT   b.code
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.pk = b.thr_code_master_pk
                    AND a.ID = 'HR0101'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY b.seq)
   LOOP
      l_grade := cur.code;

      SELECT MAX (pk), MAX (to_num)
        INTO l_thr_eva_to_grade_pk, l_max_to
        FROM thr_eva_to_grade
       WHERE thr_eva_to_pk = l_thr_eva_to_pk AND grade = l_grade;

      SELECT COUNT (DISTINCT b.pk)
        INTO l_cnt
        FROM thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       WHERE a.thr_eva_emp_pk = b.pk
         AND b.thr_eva_group_pk = g.pk
         and g.pk=p_thr_eva_group_pk
         AND g.mbo_yn = 'N'
         AND b.final_grade = l_grade
         AND a.del_if = 0
         AND b.del_if = 0
       --  AND a.grade_yn = 'Y'
         AND b.processing_yn = 'Y'
         AND b.thr_eva_master_pk = p_thr_eva_master_pk
         AND a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         AND a.reviewer_level = p_reviewer_level;

      IF l_cnt < l_max_to
      THEN
         l_rtn_value := l_grade;
         RETURN l_rtn_value;
      END IF;
   END LOOP;

   l_rtn_value := 'E';
   RETURN l_rtn_value;
ELSE --LOAI LEADER
        SELECT MAX (pk)
     INTO l_thr_eva_to_pk
     FROM thr_eva_to2
    WHERE thr_eva_master_pk = p_thr_eva_master_pk
      AND num_of_emp = p_num_of_emp
      AND option_seq = p_option_seq
      AND del_if = 0;

   IF l_thr_eva_to_pk IS NULL
   THEN
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   END IF;

   FOR cur IN (SELECT   b.code
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.pk = b.thr_code_master_pk
                    AND a.ID = 'HR0101'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY b.seq)
   LOOP
      l_grade := cur.code;

      SELECT MAX (pk), MAX (to_num)
        INTO l_thr_eva_to_grade_pk, l_max_to
        FROM thr_eva_to_grade2
       WHERE thr_eva_to_pk = l_thr_eva_to_pk AND grade = l_grade;

      SELECT COUNT (DISTINCT b.pk)
        INTO l_cnt
        FROM thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       WHERE a.thr_eva_emp_pk = b.pk
         AND b.thr_eva_group_pk = g.pk
         and g.pk=p_thr_eva_group_pk
         AND g.mbo_yn = 'N'
         AND b.final_grade = l_grade
         AND a.del_if = 0
         AND b.del_if = 0
       --  AND a.grade_yn = 'Y'
         AND b.processing_yn = 'Y'
         AND b.thr_eva_master_pk = p_thr_eva_master_pk
         AND a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         AND a.reviewer_level = p_reviewer_level;

      IF l_cnt < l_max_to
      THEN
         l_rtn_value := l_grade;
         RETURN l_rtn_value;
      END IF;
   END LOOP;

   l_rtn_value := 'E';
   RETURN l_rtn_value;
    
END IF;
   
   
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_MBO;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_mbo (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp
    and THR_EVA_MASTER_PK=p_thr_eva_master_pk;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_MBO_A;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_mbo_a (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp
    and THR_EVA_MASTER_PK=p_thr_eva_master_pk;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.a_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.a_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.a_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_MBO_C;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_mbo_c (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a number; 
   l_grade_b number;
   l_grade_s number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;
 
    
   
      select grade_a, grade_b, grade_s
        into  l_grade_a, l_grade_b, l_grade_s
        from thr_eva_to_mbo
       where del_if=0 and number_of_emp = p_num_of_emp
       and THR_EVA_MASTER_PK=p_thr_eva_master_pk;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'Y'
         and a.c_grade = 'S'
         and a.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_grade_s
      then
         l_rtn_value := 'S';
         return l_rtn_value;
      end if;
      
      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'Y'
         and a.c_grade = 'A'
         and a.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_grade_a
      then
         l_rtn_value := 'A';
         return l_rtn_value;
      end if;
      
      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'Y'
         and a.c_grade = 'B'
         and a.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_grade_b
      then
         l_rtn_value := 'B';
         return l_rtn_value;
      end if;
   

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_MBO_FINAL;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_mbo_final (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp
    and THR_EVA_MASTER_PK=p_thr_eva_master_pk;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.final_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.final_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.final_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_MBO_FINAL_A;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_mbo_final_a (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp
    and THR_EVA_MASTER_PK=p_thr_eva_master_pk;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.a_final_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.a_final_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.a_final_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_GRADE_MBO_FINAL_C;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_grade_mbo_final_c (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp
    and THR_EVA_MASTER_PK=p_thr_eva_master_pk;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.c_final_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.c_final_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.c_final_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_HR_COMMON_CODE;

CREATE OR REPLACE FUNCTION HPDQ.HR_sf_get_hr_common_code (p_code varchar, p_group varchar)
   return varchar2
is
/******************************************************************************
   NAME:       sf_get_hr_common_code
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/10/2009          1. Created this function.

******************************************************************************/
   l_rtn_value   varchar2 (200);
begin
   select a.code_nm
     into l_rtn_value
     from thr_code_detail a, thr_code_master b
    where a.thr_code_master_pk = b.pk and b.id = p_group and a.code = p_code and a.del_if = 0 and b.del_if=0;

   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_HT_COM;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_HT_COM(
  p_START           IN  VARCHAR2,--YYYYMMDDHHMM
  p_END             IN  VARCHAR2,--YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_COMPANY_PK           IN  NUMBER
  ) RETURN NUMBER IS
  N_WT_TIME     NUMBER;
  l_in_time     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_in     varchar2(8);
  l_date_out     varchar2(8);
  l_start_meal1  varchar2(13);
  l_end_meal1  varchar2(13);
  l_meal1_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_wt              number;
  
  l_wt_plus              number;
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_flag_exist boolean:=FALSE;
  l_cur_rec number;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(2):='';
  l_temp_in        number;
  l_temp_out        number;
  l_flag_exit1    number(2):=0;
  l_flag_exit2    number(2):=0;
  l_start_ot      varchar(13):='';
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_min_in  number(2):=0;
  l_min_out  number(2):=0;
  l_date_shift_end varchar(8):='';
  l_wt_plus_tyle varchar(1):='';  
  l_tmp_end3 varchar2(13);

  BEGIN
    IF length(p_START)=8 OR length(p_END)=8 or p_start is null or p_end is null THEN
        RETURN 0;
    END IF;

    SELECT nvl(S.WT,0)+NVL(S.WT_PLUS,0)
    ,S.START_TIME
    ,S.END_TIME
    ,S.START_MEAL1
    ,S.END_MEAL1
    ,NVL(S.MEAL1_INTERVAL,0)
    ,NVL(S.DURING_DAY,1)
    ,NVL(S.WT_PLUS,0)
    , DECODE(NVL(S.DURING_DAY,1),2,TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'yyyymmdd')||NVL(S.START_OT,S.END_TIME),TO_CHAR(TO_DATE(p_WORK_DT||NVL(S.START_OT,S.END_TIME),'YYYYMMDDHH24:MI'),'YYYYMMDDHH24:MI'))
    ,DECODE(NVL(S.DURING_DAY,1),1,p_WORK_DT,TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD'))
    ,nvl(S.WT_PLUS_TY_LE,'N')
    INTO l_wt,l_shift_start,l_shift_end,l_start_meal1,l_end_meal1,l_meal1_interval,l_day
    ,l_wt_plus,l_start_ot,l_date_shift_end,l_wt_plus_tyle
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT and S.TCO_COMPANY_PK = p_company_pk;

    l_in_time:=substr(p_START,-5);

     IF p_END>l_start_ot THEN
        l_out_time:=substr(l_start_ot,-5);
     ELSE
        l_out_time:=substr(p_END,-5);
     END IF;


    l_date_in:=substr(p_START,1,8);
    l_date_out:=substr(p_END,1,8);
    
        OPEN l_cursor FOR
            SELECT 1
            FROM VHR_HR_CODE C
            WHERE C.ID='HR0099'
            AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk
            ORDER BY C.SEQ;
         FETCH l_cursor INTO l_cur_rec;
         l_flag_exist := l_cursor%FOUND;
         CLOSE l_cursor;
         
          IF l_flag_exist=TRUE THEN --CO SU DUNG CODE 99    
    
                SELECT C.NUM_1,C.NUM_2 INTO l_min_in,l_min_out
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0099'
                AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk
                ORDER BY C.SEQ;
             END IF;   
   
    
    IF p_START>p_WORK_DT||l_shift_start THEN

               IF TO_CHAR(TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')+l_min_in/60/24,'YYYYMMDDHH24:MI')>=p_START THEN
                    l_in_time:=l_date_in||l_shift_start;
                    l_flag_exit1:=1;
                END IF;
            
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME
            
                OPEN l_cursor FOR
                    SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1,NVL(C.CHAR_2,'N')
                    FROM VHR_HR_CODE C
                    WHERE C.ID='HR0213'
                    AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
                    ORDER BY C.SEQ;
                     
                    l_temp_in:=TO_NUMBER(substr(l_in_time,-2));
            
                    l_tmp:=TRUNC(24*60*(TO_DATE(p_START,'YYYYMMDDHH24:MI')-TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI'))/60);
                    l_tmp2:=MOD(24*60*(TO_DATE(p_START,'YYYYMMDDHH24:MI')-TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')),60);
           
                    LOOP
                        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                         EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
                            IF l_begin_shift='N' THEN

                               IF l_flag_exit1=0 AND  l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                                    l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                                    IF l_temp_in<=9 THEN
                                        l_in_time:=l_date_in||'0'||l_temp_in||':'||l_minute_round;
                                    ELSE
                                        l_in_time:=l_date_in||l_temp_in||':'||l_minute_round; --YYYYMMDDHHMM
                                    END IF;
                                    IF l_temp_in=24 THEN
                                        l_in_time:=TO_CHAR(TO_DATE(l_date_in,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                                    END IF;

                                    l_flag_exit1:=1;
                                 END IF;
                         
                            ELSE --BAT DAU CUA SHIFT 
                                IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                                    l_tmp:=l_tmp+l_interval;
                                    l_in_time:=to_char(TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                                    l_flag_exit1:=1;
                                 END IF;
                         
                             END IF;    
                       
                    END LOOP;
                    CLOSE l_cursor;
            
            IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
                l_in_time:=p_START;
            END IF;
    ELSE
        l_in_time:=p_START;
    END IF;        
    
    IF p_END<l_date_shift_end||l_shift_end THEN
            
    
            --XU LY PHAN LAM TRON GIO  IN DONG DUOC DINH NGHIA TU HR CODE OT TIME TABLE 
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1,NVL(C.CHAR_2,'N')
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0214'
                ORDER BY C.SEQ;

            
            l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
            IF p_END<=p_WORK_DT||l_start_meal1 AND l_start_meal1 IS NOT NULL THEN --RA TRUOC GIO NGHI TRUA
            
                l_tmp:=TRUNC(24*60*(TO_DATE(p_WORK_DT||l_start_meal1,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI'))/60);
            
                l_tmp2:=MOD(24*60*(TO_DATE(p_WORK_DT||l_start_meal1,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI')),60);
                l_tmp_end3:=p_WORK_DT||l_start_meal1;
            ELSE
                l_tmp:=TRUNC(24*60*(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI'))/60);
            
                l_tmp2:=MOD(24*60*(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI')),60);
                l_tmp_end3:=l_date_shift_end||l_shift_end;    
            END IF;    
            
                        

            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit2=1;
                IF l_begin_shift='N' THEN

                         IF l_flag_exit2=0 AND  l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                            l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                            IF l_temp_out<=9 THEN
                                l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                            ELSE
                                l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                            END IF;

                            IF l_temp_out=24 THEN
                                l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                            END IF;
                            l_flag_exit2:=1;
                         END IF;
                ELSE --BAT DAY SHIFT 
                    IF l_flag_exit2=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                            l_tmp:=l_tmp+l_interval;
                            l_out_time:=to_char(TO_DATE(l_tmp_end3,'YYYYMMDDHH24:MI')-(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                            l_flag_exit2:=1;
                    END IF;
                 
                END IF;             
                
            END LOOP;
            CLOSE l_cursor;

            IF  l_flag_exit2=0 THEN -- KO SU DUNG LAM TRON 
                l_out_time:=p_END;
            END IF;
    ELSE
        l_out_time:=p_END;        
    END IF;     

    IF l_day>1 THEN --CA DEM
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;
        IF l_out_time>=l_start_ot THEN
            l_out_time:=l_start_ot;
        END IF;

    ELSE  -- CA NGAY 
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;
        IF l_out_time>=l_start_ot THEN
            l_out_time:=l_start_ot;
        END IF;
    END IF;

    --TOI DOAN NAY TA DA CO IN OUT THEO DINH DANG YYYYMMDDHHMM
    IF l_meal1_interval>0 THEN
        IF l_shift_start<=l_start_meal1 THEN --CA NGAY
            l_start_meal1:=p_WORK_DT||l_start_meal1;
            l_end_meal1:=p_WORK_DT||l_end_meal1;
        ELSE
            l_start_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal1;
            l_end_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal1;
        END IF;
        IF l_in_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_in_time:=l_end_meal1;
        END IF;
        IF l_out_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_out_time:=l_start_meal1;
        END IF;
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;

        IF l_in_time<=l_start_meal1 AND l_out_time>=l_end_meal1 THEN
               N_WT_TIME:=N_WT_TIME-l_meal1_interval;
        END IF;
    ELSE
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;
    END IF;
    
    IF l_wt_plus_tyle='Y' AND l_wt_plus<>0 THEN --TINH TY LE NEU CO WT PLUS
        IF N_WT_TIME<l_wt-l_wt_plus THEN
                N_WT_TIME:=N_WT_TIME*l_wt/(l_wt-l_wt_plus);
        END IF;  
              
    ELSE
        N_WT_TIME:=N_WT_TIME+l_wt_plus;        
        
    END IF; 


    IF N_WT_TIME>l_wt THEN
        RETURN  l_wt;
    ELSIF N_WT_TIME<0 THEN
        RETURN  0;
    ELSE
        RETURN  round(N_WT_TIME,2);
    END IF;



    EXCEPTION
    WHEN  OTHERS THEN
--        raise_application_error(-20019,l_date_shift_end||'---'||p_END);
        raise;

END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_MANAGER_PK;

CREATE OR REPLACE FUNCTION HPDQ.hr_sf_get_manager_pk (p_thr_employee_pk varchar, p_level varchar)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/24/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value         varchar2 (100);
   l_thr_employee_pk   number;
begin
   if p_level = 1
   then
      select max (a.manager_pk)
        into l_rtn_value
        from tco_org a
       where del_if = 0 and a.pk = (select tco_org_pk
                                      from thr_employee
                                     where pk = p_thr_employee_pk);

      if ((l_rtn_value = p_thr_employee_pk) or l_rtn_value is null)
      then
         select max (a.manager_pk)
           into l_rtn_value
           from tco_org a
          where del_if = 0 and a.pk = (select p_pk
                                         from tco_org
                                        where del_if = 0 and pk in (select tco_org_pk
                                                                      from thr_employee
                                                                     where pk = p_thr_employee_pk));
      end if;
   elsif p_level = 2
   then
      select max (a.manager_pk)
        into l_rtn_value
        from tco_org a
       where del_if = 0 and a.pk = (select p_pk
                                      from tco_org
                                     where del_if = 0 and pk in (select tco_org_pk
                                                                   from thr_employee
                                                                  where pk = p_thr_employee_pk));

      if ((l_rtn_value = p_thr_employee_pk) or l_rtn_value is null)
      then
         select max (a.manager_pk)
           into l_rtn_value
           from tco_org a
          where a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;
      SELECT hr_sf_get_manager_pk (p_thr_employee_pk, 1)
        INTO l_thr_employee_pk
        FROM DUAL;

      IF l_rtn_value = l_thr_employee_pk
      THEN
         select max (a.manager_pk)
           into l_rtn_value
           from tco_org a
          where a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;
   elsif p_level = 3
   then
      select max (b.pk)
        into l_rtn_value
        from tco_org a, thr_employee b
       where a.manager_pk = b.pk and a.pk = (select p_pk
                                               from tco_org
                                              where pk in (select p_pk
                                                             from tco_org
                                                            where pk in (select tco_org_pk
                                                                           from thr_employee
                                                                          where pk = p_thr_employee_pk)));
   end if;

   return l_rtn_value;
exception
   when others
   then
      raise;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_NT;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_NT(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHH:MM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2 --YYYYMMDDHH:MM
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_shift_end     varchar2(8);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar(10);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_end_nt varchar(5);
l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
l_out_nt number;

 BEGIN
  OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_SF_GET_NT');

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
        l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5) from dual' ;
        execute  immediate l_string  into l_out_nt using in p_START_NT,in p_END,in p_SHIFT,in p_WORK_DT,in p_START;
 else 



    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;

    l_end_nt:='05:00';
    IF p_START_NT='22:00' THEN
        l_end_nt:='06:00';
    END IF;



    select p_WORK_DT||s.START_TIME into l_shift_start
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT;

    if p_END>TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt then
        l_end:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt;
    else
        l_end:=p_END;
    end if;

    IF l_shift_start<p_WORK_DT||l_end_nt THEN -- CA BAT DAU TU 00 H DEN  END NT
        if l_shift_start>p_START then
            l_start_nt:=p_WORK_DT||SUBSTR(l_shift_start,-5);
        else
            l_start_nt:=p_WORK_DT||SUBSTR(p_START,-5);
        end if;
        
        l_end:=p_WORK_DT||l_end_nt;
    ELSIF p_START>p_WORK_DT||p_START_NT then
        l_start_nt:=p_START;
    else
        l_start_nt:=p_WORK_DT||p_START_NT;
    end if;

    if l_shift_start>l_start_nt then
        l_start_nt:=l_shift_start;
    end if;


    l_out_time:=substr(l_end,-5);
    l_date_out:=substr(l_end,1,8);



    IF l_start_nt>=l_end THEN
        RETURN 0;
    END IF;
    
    IF substr(l_start_nt,-5)<>p_START_NT THEN
                --lam tron gio start nt 
                  --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE ot convert 
             OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0153'
--                and p_SHIFT  not in (select t.pk from THR_WORK_SHIFT t  where t.del_if=0 and  t.tco_company_pk=2 and t.pk=p_SHIFT) --poscolt khong su dung tang ca nguoc
                ORDER BY C.SEQ;      

            l_temp_out:=TO_NUMBER(substr(l_start_nt,-2));
            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

                     IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                        l_temp_out:=TO_NUMBER(substr(l_start_nt,9,2))+l_interval;
                        IF l_temp_out<=9 THEN
                            l_start_nt:=substr(l_start_nt,1,8)||'0'||l_temp_out||':'||l_minute_round;
                        ELSE
                            l_start_nt:=substr(l_start_nt,1,8)||l_temp_out||':'||l_minute_round;
                        END IF;
                        l_flag_exit1:=1;
                        IF l_temp_out=24 THEN
                            l_start_nt:=TO_CHAR(TO_DATE(substr(l_start_nt,1,8),'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                        END IF;

                        EXIT;
                     END IF;
            END LOOP;
            CLOSE l_cursor;

       /*     IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
                l_start_nt:=p_START;
            END IF;
        */
        
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
        AND D.ID='HR0027' AND NVL(C.USE_YN,'N')='Y'
        ORDER BY C.SEQ;

     l_flag_exit1:=0;
    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
            
             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;
                l_flag_exit1:=1;
                IF l_temp_out=24 THEN
                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                EXIT;
                
             END IF;
    END LOOP;
    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_end;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_nt,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;
    
end if;
    return l_out_nt;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_NT1_COM;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_NT1_COM(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  P_DATE_TIME_IN           IN  VARCHAR2,  --YYYYMMDDHHMM
  p_company_pk  in number
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_in     varchar2(8);
  l_start_ot     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_shift_end VARCHAR2(13);
  l_end_nt varchar(13);
  l_end_nt_1 varchar(13);
  l_ot  number;
l_ot_c_yn varchar(2):='';
     l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
l_out_nt number;
p_START VARCHAR2(13);
    
  BEGIN
    -- chi lay nt 30 
  

    OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_SF_GET_NT1_COM');

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
        l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5,:6) from dual' ;
        execute  immediate l_string  into l_out_nt using in p_START_NT,in p_END,in p_SHIFT,in p_WORK_DT,in P_DATE_TIME_IN, in p_company_pk;
 else 

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;
    
    select p_WORK_DT||s.START_TIME
           ,(case when nvl(s.DURING_DAY,1)=1 then p_WORK_DT||s.START_OT --ca 1 ngay 
                else (case when to_number(substr(s.START_OT,1,2)) between 0 and 12 then to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.START_OT
                          else  p_work_dt||s.START_OT
                     end)
                end) 
            ,(case when nvl(s.DURING_DAY,1)=1 then p_WORK_DT||s.END_TIME
                    else to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.END_TIME
                end)
             ,to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24,'YYYYMMDDHH24:MI')            
             ,to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24-1,'YYYYMMDDHH24:MI'),nvl(s.ot_c_yn,'N')
             into l_shift_start,l_start_ot,l_shift_end,l_end_nt,l_end_nt_1 ,l_ot_c_yn
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT;
    
    l_start_nt:=p_WORK_DT||p_START_NT;
    
        --so sanh gio start nt va l_shift_start 
    IF l_start_nt<l_shift_start THEN 
        l_start_nt:=l_shift_start;
    END IF;    
    
    IF l_ot_c_yn='N' THEN --KHONG CO TINH TANG CA NGUOC, GIAI QUYET CHO TRUONG HOP GIO VAO< GIO END NT
        IF P_DATE_TIME_IN<=l_shift_start THEN
            p_START:=l_shift_start;
        ELSE
            p_START:=P_DATE_TIME_IN;
        END IF;
    ELSE
        p_START:=P_DATE_TIME_IN;
    END IF;
    
    
        --so sanh gio start nt va gio vao 
    IF l_start_nt<p_START THEN
       l_start_nt:=p_START;  
    END IF;
    
    --truong hop nhung ca co p_start<end nt -1 ngay, vi du: 04:00-12:00
    IF p_START<l_end_nt_1 THEN
        l_start_nt:=p_START;  
    END IF;
    
    
    
     --so sanh gio start OT va END NT
     IF  l_start_ot>l_end_nt THEN
            l_start_ot:=l_end_nt;
     END IF;       
     
     --so sanh gio start OT va GIO RA 
     IF  l_start_ot>p_END THEN
            l_start_ot:=p_END;
     END IF;    
     
     --truong hop nhung ca co p_start<end nt -1 ngay, vi du: 04:00-12:00
    IF p_START<l_end_nt_1 THEN
        l_start_ot:=l_end_nt_1;  
    END IF;
     
   -- o day ta duoc gio vao la l_start_nt, gio ra la l_start_ot kieu yyyymmddhh24mi

--------------Moi them vao gio gio vao som hon start shift
if l_start_nt < l_shift_start  then
    l_start_nt:=l_shift_start;
    l_start_ot:=l_shift_start;
end if;
--- 

    l_out_time:=substr(l_start_ot,-5);
    l_date_out:=substr(l_start_ot,1,8);

    --XU LY PHAN LAM TRON GIO OUT  DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
        AND D.ID='HR0096' AND NVL(C.USE_YN,'N')='Y'
        AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
        ORDER BY C.SEQ;

    l_temp:=TO_NUMBER(substr(l_out_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

             IF l_temp BETWEEN l_minute_from AND l_minute_to THEN
                l_temp:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp||':'||l_minute_round;
                END IF;
                l_flag_exit1:=1;
                IF l_temp=24 THEN
                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                EXIT;
             END IF;
    END LOOP;
--    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_start_ot;
    END IF;
    
    
    --xu ly lam tron gio in 
    l_flag_exit1:=0;
     l_in_time:=substr(l_start_nt,-5);
    l_date_in:=substr(l_start_nt,1,8);

    --XU LY PHAN LAM TRON GIO OUT  DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
        AND D.ID='HR0026' AND NVL(C.USE_YN,'N')='Y'
        AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk
        ORDER BY C.SEQ;

    l_temp:=TO_NUMBER(substr(l_in_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

             IF l_temp BETWEEN l_minute_from AND l_minute_to THEN
                l_temp:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp<=9 THEN
                    l_in_time:=l_date_in||'0'||l_temp||':'||l_minute_round;
                ELSE
                    l_in_time:=l_date_in||l_temp||':'||l_minute_round;
                END IF;
                l_flag_exit1:=1;
                IF l_temp=24 THEN
                    l_in_time:=TO_CHAR(TO_DATE(l_date_in,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                EXIT;
             END IF;
    END LOOP;
    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=l_start_nt;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;
    
      
    
  END IF;
  
  return l_out_nt;  
  
    EXCEPTION
    WHEN  OTHERS THEN
--        raise_application_error(-20009, l_out_time);
        raise;

END;
/

DROP FUNCTION HPDQ.HR_SF_GET_NT1_HYUNDAI;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_NT1_hyundai(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2  --YYYYMMDDHHMM
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_in_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_in     varchar2(8);
  l_start_ot     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_shift_end VARCHAR2(13);
  l_end_nt varchar(13);
  l_ot  number;
    l_meal_from varchar(5);
  l_meal_to varchar(5);
  l_meal number;
 
  BEGIN
    -- chi lay nt 30 

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;
    
    select p_WORK_DT||s.START_TIME
           ,(case when nvl(s.DURING_DAY,1)=1 then p_WORK_DT||s.START_OT --ca 1 ngay 
                else (case when to_number(substr(s.START_OT,1,2)) between 0 and 12 then to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.START_OT
                          else  p_work_dt||s.START_OT
                     end)
                end) 
            ,(case when nvl(s.DURING_DAY,1)=1 then p_WORK_DT||s.END_TIME
                    else to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.END_TIME
                end)
             ,to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24,'YYYYMMDDHH24:MI')     
             ,S.START_MEAL1,S.END_MEAL1,S.MEAL1_INTERVAL       
             into l_shift_start,l_start_ot,l_shift_end,l_end_nt ,l_meal_from,l_meal_to,l_meal
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT;
    
    l_start_nt:=p_WORK_DT||p_START_NT;
    
        --so sanh gio start nt va l_shift_start 
    IF l_start_nt<l_shift_start THEN 
        l_start_nt:=l_shift_start;
    END IF;    
    
        --so sanh gio start nt va gio vao 
    IF l_start_nt<p_START THEN
       l_start_nt:=p_START;  
    END IF;
    
     --so sanh gio start OT va END NT
     IF  l_start_ot>l_end_nt THEN
            l_start_ot:=l_end_nt;
     END IF;       
     
     --so sanh gio start OT va GIO RA 
     IF  l_start_ot>p_END THEN
            l_start_ot:=p_END;
     END IF;    
     
   -- o day ta duoc gio vao la l_start_nt, gio ra la l_start_ot kieu yyyymmddhh24mi


    l_out_time:=substr(l_start_ot,-5);
    l_date_out:=substr(l_start_ot,1,8);

    --XU LY PHAN LAM TRON GIO OUT  DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
        AND D.ID='HR0096' AND NVL(C.USE_YN,'N')='Y'
        ORDER BY C.SEQ;

    l_temp:=TO_NUMBER(substr(l_out_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

             IF l_temp BETWEEN l_minute_from AND l_minute_to THEN
                l_temp:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp||':'||l_minute_round;
                END IF;
                l_flag_exit1:=1;
                IF l_temp=24 THEN
                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                EXIT;
             END IF;
    END LOOP;
    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_start_ot;
    END IF;
    
    
    --xu ly lam tron gio in 
    l_flag_exit1:=0;
     l_in_time:=substr(l_start_nt,-5);
    l_date_in:=substr(l_start_nt,1,8);

    --XU LY PHAN LAM TRON GIO OUT  DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
        AND D.ID='HR0026' AND NVL(C.USE_YN,'N')='Y'
        ORDER BY C.SEQ;

    l_temp:=TO_NUMBER(substr(l_in_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

             IF l_temp BETWEEN l_minute_from AND l_minute_to THEN
                l_temp:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp<=9 THEN
                    l_in_time:=l_date_in||'0'||l_temp||':'||l_minute_round;
                ELSE
                    l_in_time:=l_date_in||l_temp||':'||l_minute_round;
                END IF;
                l_flag_exit1:=1;
                IF l_temp=24 THEN
                    l_in_time:=TO_CHAR(TO_DATE(l_date_in,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                EXIT;
             END IF;
    END LOOP;
    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=l_start_nt;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;
            
            
          N_OT_TIME:=case when nvl(N_OT_TIME,0)>case when TO_DATE( substr(l_shift_start,-5),'HH24:MI')>=TO_DATE( l_meal_from,'HH24:MI') 
          then nvl(l_meal,0) else 0 end then
                            nvl(N_OT_TIME,0)-case when TO_DATE( substr(l_shift_start,-5),'HH24:MI')>=TO_DATE( l_meal_from,'HH24:MI') then nvl(l_meal,0) else 0 end  
                            else N_OT_TIME
                            end;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_NT2;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_NT2(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2  --YYYYMMDDHHMM
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_end_nt_s     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_end_nt varchar(5);
  l_ot  number;




 l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
l_out_nt number;

 BEGIN
 
  OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_SF_GET_NT2');

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
        l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5) from dual' ;
        execute  immediate l_string  into l_out_nt using in p_START_NT,in p_END,in p_SHIFT,in p_WORK_DT,in p_START;
 else 

    -- chi lay nt 30 

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;
    
    l_end_nt:=to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24,'hh24:mi');

    /*l_end_nt:='05:00';
    IF p_START_NT='22:00' THEN
        l_end_nt:='06:00';
    END IF;*/



    select p_WORK_DT||s.START_TIME
           ,(case when nvl(s.DURING_DAY,1)=1 then TO_CHAR(TO_DATE(p_WORK_DT||s.END_TIME,'YYYYMMDDHH24:MI')-nvl(s.OT,0)/24,'YYYYMMDDHH24:MI')
                else to_char(to_date(to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.END_TIME,'yyyymmddhh24:mi')-nvl(s.OT,0)/24,'yyyymmddhh24:mi')
                end)     
             into l_shift_start,l_end_nt_s
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT;
     
    if p_END>TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt then
        l_end:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt;
    else
        l_end:=p_END;
    end if; 
    
    IF l_shift_start<p_WORK_DT||l_end_nt THEN -- CA BAT DAU TU 00 H DEN  END NT
        l_start_nt:=p_WORK_DT||SUBSTR(l_shift_start,-5);
        l_end:=p_WORK_DT||l_end_nt;
    ELSIF p_START>p_WORK_DT||p_START_NT then
        l_start_nt:=p_START;
    else
        l_start_nt:=p_WORK_DT||p_START_NT;
    end if;

    if l_shift_start>l_start_nt then
        l_start_nt:=l_shift_start;
    end if;

    if l_start_nt<=l_end_nt_s then
        l_start_nt:=l_end_nt_s;
    end if;
    
    IF l_start_nt>=l_end THEN
        RETURN 0;
    END IF;    


    l_out_time:=substr(l_end,-5);
    l_date_out:=substr(l_end,1,8);

   
    IF l_start_nt<p_START THEN
        l_start_nt:=p_START;
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
        AND D.ID='HR0027' AND NVL(C.USE_YN,'N')='Y'
        ORDER BY C.SEQ;

    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;
                l_flag_exit1:=1;
                IF l_temp_out=24 THEN
                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                EXIT;
             END IF;
    END LOOP;
    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_end;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_nt,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;
end if;
    return l_out_nt;

    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_NT2_COM;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_NT2_COM(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2,  --YYYYMMDDHHMM
  p_company_pk in number
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_end_nt_s     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_end_nt varchar(13);
  l_ot  number;
   l_flag_exist  boolean:=FALSE;
    l_cur_rec number;



  BEGIN
    -- chi lay nt 30 

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;
    
    l_end_nt:=to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24,'YYYYMMDDhh24:mi');

    /*l_end_nt:='05:00';
    IF p_START_NT='22:00' THEN
        l_end_nt:='06:00';
    END IF;*/



    select p_WORK_DT||s.START_TIME
           ,(case when nvl(s.DURING_DAY,1)=1 then TO_CHAR(TO_DATE(p_WORK_DT||s.END_TIME,'YYYYMMDDHH24:MI')-nvl(s.OT,0)/24,'YYYYMMDDHH24:MI')
                else to_char(to_date(to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.END_TIME,'yyyymmddhh24:mi')-nvl(s.OT,0)/24,'yyyymmddhh24:mi')
                end)     
             into l_shift_start,l_end_nt_s
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT and S.TCO_COMPANY_PK = p_company_pk;
     
    if p_END>l_end_nt then
        l_end:=l_end_nt;
    else
        l_end:=p_END;
    end if; 
    
    
    
    IF SUBSTR(l_shift_start,-5)<SUBSTR(l_end_nt,-5) THEN -- CA BAT DAU TU 00 H DEN  END NT
        l_start_nt:=p_WORK_DT||p_START_NT;
        l_end:=p_END;
    ELSIF p_START>p_WORK_DT||p_START_NT then
        l_start_nt:=p_START;
    else
        l_start_nt:=p_WORK_DT||p_START_NT;
    end if;

    if l_shift_start>l_start_nt then
        l_start_nt:=l_shift_start;
    end if;

    if l_start_nt<=l_end_nt_s then
        l_start_nt:=l_end_nt_s;
    end if;
    
    IF l_start_nt>=l_end THEN
        RETURN 0;
    END IF;    


    l_out_time:=substr(l_end,-5);
    l_date_out:=substr(l_end,1,8);

   
    IF l_start_nt<p_START THEN
        l_start_nt:=p_START;
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0027'
                AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
                ORDER BY C.SEQ;

            l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                    EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

                     IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                        l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                        IF l_temp_out<=9 THEN
                            l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                        ELSE
                            l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                        END IF;
                        l_flag_exit1:=1;
                        IF l_temp_out=24 THEN
                            l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                        END IF;

                        EXIT;
                     END IF;
            END LOOP;
            CLOSE l_cursor;
        
    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_end;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_nt,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_NT2_HYUNDAI;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_NT2_hyundai(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2  --YYYYMMDDHHMM
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_end_nt_s     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_end_nt varchar(5);
  l_ot  number;




  BEGIN
    -- chi lay nt 30 

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;
    
    l_end_nt:=to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24,'hh24:mi');

    


    select p_WORK_DT||s.START_TIME
           ,(case when nvl(s.DURING_DAY,1)=1 then TO_CHAR(TO_DATE(p_WORK_DT||s.END_TIME,'YYYYMMDDHH24:MI')-nvl(s.OT,0)/24 - nvl(S.MEAL2_INTERVAL,0 )/24,'YYYYMMDDHH24:MI') 
                else to_char(to_date(to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.END_TIME,'yyyymmddhh24:mi')-nvl(s.OT,0)/24 - nvl(S.MEAL2_INTERVAL,0 )/24,'yyyymmddhh24:mi')
                end)     
             into l_shift_start,l_end_nt_s
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT;
     
    if p_END>TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt then
        l_end:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt;
    else
        l_end:=p_END;
    end if; 
    
    IF l_shift_start<p_WORK_DT||l_end_nt THEN -- CA BAT DAU TU 00 H DEN  END NT
        l_start_nt:=p_WORK_DT||SUBSTR(l_shift_start,-5);
        l_end:=p_WORK_DT||l_end_nt;
    ELSIF p_START>p_WORK_DT||p_START_NT then
        l_start_nt:=p_START;
    else
        l_start_nt:=p_WORK_DT||p_START_NT;
    end if;

    if l_shift_start>l_start_nt then
        l_start_nt:=l_shift_start;
    end if;

    if l_start_nt<=l_end_nt_s then
        l_start_nt:=l_end_nt_s;
    end if;
    
    IF l_start_nt>=l_end THEN
        RETURN 0;
    END IF;    


    l_out_time:=substr(l_end,-5);
    l_date_out:=substr(l_end,1,8);

   
    IF l_start_nt<p_START THEN
        l_start_nt:=p_START;
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
        AND D.ID='HR0027' AND NVL(C.USE_YN,'N')='Y'
        ORDER BY C.SEQ;

    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;
                l_flag_exit1:=1;
                IF l_temp_out=24 THEN
                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                EXIT;
             END IF;
    END LOOP;
    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_end;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_nt,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_NT_COM;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_NT_COM(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHH:MM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2, --YYYYMMDDHH:MM
  p_company_pk in number 
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_shift_end     varchar2(8);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round number;
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_end_nt varchar(5);
    l_flag_exist  boolean:=FALSE;
    l_cur_rec number;



  BEGIN

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;

    l_end_nt:='05:00';
    IF p_START_NT='22:00' THEN
        l_end_nt:='06:00';
    END IF;



    select p_WORK_DT||s.START_TIME into l_shift_start
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT and S.TCO_COMPANY_PK = p_company_pk;

    if p_END>TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt then
        l_end:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt;
    else
        l_end:=p_END;
    end if;

    IF l_shift_start<p_WORK_DT||l_end_nt THEN -- CA BAT DAU TU 00 H DEN  END NT
        l_start_nt:=p_WORK_DT||SUBSTR(l_shift_start,-5);
        l_end:=p_WORK_DT||l_end_nt;
    ELSIF p_START>p_WORK_DT||p_START_NT then
        l_start_nt:=p_START;
    else
        l_start_nt:=p_WORK_DT||p_START_NT;
    end if;

    if l_shift_start>l_start_nt then
        l_start_nt:=l_shift_start;
    end if;


    l_out_time:=substr(l_end,-5);
    l_date_out:=substr(l_end,1,8);



    IF l_start_nt>=l_end THEN
        RETURN 0;
    END IF;
    
    IF substr(l_start_nt,-5)<>p_START_NT THEN
                --lam tron gio start nt 
                  --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE ot convert 
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0153'
                AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
                ORDER BY C.SEQ;      
           
            l_temp_out:=TO_NUMBER(substr(l_start_nt,-2));
            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

                     IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                        l_temp_out:=TO_NUMBER(substr(l_start_nt,9,2))+l_interval;
                        IF l_temp_out<=9 THEN
                            l_start_nt:=substr(l_start_nt,1,8)||'0'||l_temp_out||':'||l_minute_round;
                        ELSE
                            l_start_nt:=substr(l_start_nt,1,8)||l_temp_out||':'||l_minute_round;
                        END IF;
                        l_flag_exit1:=1;
                        IF l_temp_out=24 THEN
                            l_start_nt:=TO_CHAR(TO_DATE(substr(l_start_nt,1,8),'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                        END IF;

                        EXIT;
                     END IF;
            END LOOP;
            CLOSE l_cursor;
/*
            IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
                l_start_nt:=p_START;
            END IF;
  */      
        
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
                     
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0027'
                AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
                ORDER BY C.SEQ;

            l_flag_exit1:=0;
            l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
                    EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
                    
                     IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                        l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                        IF l_temp_out<=9 THEN
                            l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                        ELSE
                            l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                        END IF;
                        l_flag_exit1:=1;
                        IF l_temp_out=24 THEN
                            l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                        END IF;

                        EXIT;
                        
                     END IF;
            END LOOP;
            CLOSE l_cursor;
       
    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_end;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_nt,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_OT;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_OT(
  p_START_OT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_KIND            IN VARCHAR2  --01: KIEU TRONG CHUOI, 02: KIEU NOMARL 
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_ot     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_start_meal2  varchar2(13);
  l_end_meal2  varchar2(13);
  l_meal2_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  p_END_TMP       varchar2(13);
  l_start_nt       varchar2(13);
  l_min_ot          number;
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_out_ot number;
l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
max_ot  number;

  BEGIN
  OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_SF_GET_OT');

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

 IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
        l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5) from dual' ;
        execute  immediate l_string  into l_out_ot using in p_START_OT,in p_END,in p_SHIFT,in p_WORK_DT,in p_KIND;
 else 
    p_END_TMP:=p_END;

    IF p_START_OT IS NULL OR p_END_TMP IS NULL THEN
        RETURN 0;
    END IF;

    SELECT S.START_TIME,S.END_TIME,S.START_MEAL2,S.END_MEAL2,NVL(S.MEAL2_INTERVAL,0),NVL(S.DURING_DAY,1),p_WORK_DT||S.START_NT,nvl(s.max_ot,0)
    INTO l_shift_start,l_shift_end,l_start_meal2,l_end_meal2,l_meal2_interval,l_day,l_start_nt,max_ot
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;
    
    IF l_day=2 AND p_END<=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT THEN
        RETURN 0;
    ELSIF l_day=1 AND p_END<=p_WORK_DT||p_START_OT THEN
        RETURN 0;    
    END IF;

    IF l_day=1 AND p_KIND='01' THEN --GIOI HAN LAI GIO OT   
        IF  p_END_TMP>l_start_nt THEN
            p_END_TMP:=l_start_nt;
        END IF;
    END IF;

    l_out_time:=substr(p_END_TMP,-5);
    l_date_out:=substr(p_END_TMP,1,8);

    IF p_START_OT<l_shift_start THEN
        l_start_ot:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT;
    ELSE
        l_start_ot:=p_WORK_DT||p_START_OT;
    END IF;

    IF l_start_ot>=p_END_TMP THEN
        RETURN 0;
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1,NVL(C.CHAR_2,'N')
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0027'
        ORDER BY C.SEQ;

    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    l_tmp:=TRUNC(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))/60);
    l_tmp2:=MOD(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')),60);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
        IF l_begin_shift='N' THEN     
             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;

             IF l_temp_out=24 THEN
                l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
         ELSE --BAT DAY SHIFT 
                IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                        l_tmp:=l_tmp+l_interval;
                        l_out_time:=to_char(TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                        l_flag_exit1:=1;
                END IF;
                 
        END IF;                  
    END LOOP;

    CLOSE l_cursor;


    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=p_END_TMP;
    END IF;

    --xu ly co tru gio com
    IF l_meal2_interval>0 THEN
        IF l_shift_start<l_start_meal2 THEN --CA NGAY
            l_start_meal2:=p_WORK_DT||l_start_meal2;
            l_end_meal2:=p_WORK_DT||l_end_meal2;
        ELSE
            l_start_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal2;
            l_end_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2;
        END IF;

        IF l_out_time BETWEEN l_start_meal2 AND l_end_meal2 THEN
            l_out_time:=l_start_meal2;
        END IF;
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

        IF l_start_ot<=l_start_meal2 AND l_out_time>=l_end_meal2 THEN
               N_OT_TIME:=N_OT_TIME-l_meal2_interval;
        END IF;
    ELSE
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;
    END IF;
    
    SELECT NVL(C.NUM_1,0) INTO l_min_ot
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0038';

    IF N_OT_TIME<l_min_ot THEN
        l_out_ot:=0;
    ELSIF max_ot>0 AND N_OT_TIME>max_ot THEN --CO DUNG MAX OT  
        l_out_ot:=max_ot;
    ELSE
        l_out_ot:=N_OT_TIME;
    END IF;
end if;
    return l_out_ot;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_OT_COM;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_OT_COM(
  p_START_OT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_KIND            IN VARCHAR2,  --01: KIEU TRONG CHUOI, 02: KIEU NOMARL
  p_company_pk in number 
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_ot     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_start_meal2  varchar2(13);
  l_end_meal2  varchar2(13);
  l_meal2_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  p_END_TMP       varchar2(13);
  l_start_nt       varchar2(13);
  l_min_ot          number;
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_out_ot number;
l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
max_ot  number;

  BEGIN
  OPEN l_cur FOR
            SELECT A.char_3 FROM VHR_HR_CODE A
            WHERE A.ID='HR0044' AND UPPER(A.CHAR_1)=UPPER('HR_SF_GET_OT_COM')
                AND nvl(A.TCO_COMPANY_PK,p_company_pk)= p_company_pk;--XAC DINH THEO COMPANY 

            FETCH l_cur INTO l_pro;
            l_flag_exist:=l_cur%FOUND;
            CLOSE l_cur;

     IF l_flag_exist=TRUE THEN --CO SU DUNG PROCEDURE RIENG 
            l_string := 'select ' || l_pro || '(:1,:2,:3,:4,:5,:6) from dual' ;
            execute  immediate l_string  into l_out_ot using in p_START_OT,in p_END,in p_SHIFT,in p_WORK_DT,in p_KIND, in p_company_pk;
     else 
        p_END_TMP:=p_END;

        IF p_START_OT IS NULL OR p_END_TMP IS NULL THEN
            RETURN 0;
        END IF;

        SELECT S.START_TIME,S.END_TIME,S.START_MEAL2,S.END_MEAL2,NVL(S.MEAL2_INTERVAL,0)
            ,NVL(S.DURING_DAY,1),p_WORK_DT||S.START_NT,nvl(s.max_ot,0)
            ,(CASE WHEN S.DURING_DAY=2 AND S.START_OT>S.START_TIME THEN p_WORK_DT||p_START_OT
                  WHEN S.DURING_DAY=2 AND S.START_OT<S.START_TIME THEN TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT
                  WHEN S.DURING_DAY=1 AND S.START_OT<S.START_TIME THEN TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT
                  ELSE p_WORK_DT||p_START_OT
                   END)  
        INTO l_shift_start,l_shift_end,l_start_meal2,l_end_meal2,l_meal2_interval,l_day,l_start_nt,max_ot,l_start_ot
         FROM THR_WORK_SHIFT S
        WHERE S.DEL_IF=0 AND S.PK=p_SHIFT and S.TCO_COMPANY_PK = p_company_pk;
        
        IF l_day=2 AND p_END<=l_start_ot THEN
            RETURN 0;
        ELSIF l_day=1 AND p_END<=l_start_ot THEN
            RETURN 0;    
        END IF;

        IF l_day=1 AND p_KIND='01' THEN --GIOI HAN LAI GIO OT   
            IF  p_END_TMP>l_start_nt THEN
                p_END_TMP:=l_start_nt;
            END IF;
        END IF;

        l_out_time:=substr(p_END_TMP,-5);
        l_date_out:=substr(p_END_TMP,1,8);

       /* IF p_START_OT<l_shift_start THEN
            l_start_ot:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT;
        ELSE
            l_start_ot:=p_WORK_DT||p_START_OT;
        END IF;*/

        IF l_start_ot>=p_END_TMP THEN
            RETURN 0;
        END IF;

        --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE

            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1,NVL(C.CHAR_2,'N')
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0027'
                AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
                ORDER BY C.SEQ;

            l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
            l_tmp:=TRUNC(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))/60);
            l_tmp2:=MOD(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')),60);
            
            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                     EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
                IF l_begin_shift='N' THEN     
                     IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                        l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                        IF l_temp_out<=9 THEN
                            l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                        ELSE
                            l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                        END IF;

                     IF l_temp_out=24 THEN
                        l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                     END IF;
                        l_flag_exit1:=1;
                        
                     END IF;
                 ELSE --BAT DAY SHIFT 
                        IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                                l_tmp:=l_tmp+l_interval;
                                l_out_time:=to_char(TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                                l_flag_exit1:=1;
                        END IF;
                         
                END IF;                  
            END LOOP;

            CLOSE l_cursor;
       
        IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
            l_out_time:=p_END_TMP;
        END IF;

        --xu ly co tru gio com
        IF l_meal2_interval>0 THEN
            IF l_shift_start<l_start_meal2 THEN --CA NGAY
                l_start_meal2:=p_WORK_DT||l_start_meal2;
                l_end_meal2:=p_WORK_DT||l_end_meal2;
            ELSE
                l_start_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal2;
                l_end_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2;
            END IF;

            IF l_out_time BETWEEN l_start_meal2 AND l_end_meal2 THEN
                l_out_time:=l_start_meal2;
            END IF;
            select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
                INTO N_OT_TIME   from dual;

            IF l_start_ot<=l_start_meal2 AND l_out_time>=l_end_meal2 THEN
                   N_OT_TIME:=N_OT_TIME-l_meal2_interval;
            END IF;
        ELSE
            select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
                INTO N_OT_TIME   from dual;
        END IF;
        
        SELECT NVL(C.NUM_1,0) INTO l_min_ot
            FROM VHR_HR_CODE C
            WHERE C.ID='HR0038' AND nvl(C.TCO_COMPANY_PK,p_company_pk)= p_company_pk;--XAC DINH THEO COMPANY 

        IF N_OT_TIME<l_min_ot THEN
            l_out_ot:=0;
        ELSIF max_ot>0 AND N_OT_TIME>max_ot THEN --CO DUNG MAX OT  
            l_out_ot:=max_ot;
        ELSE
            l_out_ot:=N_OT_TIME;
        END IF;
    end if;
    return l_out_ot;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
/

DROP FUNCTION HPDQ.HR_SF_GET_OT_HYUNDAI;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_OT_hyundai(
  p_START_OT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_KIND            IN VARCHAR2  --01: KIEU TRONG CHUOI, 02: KIEU NOMARL 
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_ot     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_start_meal2  varchar2(13);
  l_end_meal2  varchar2(13);
  l_meal2_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  p_END_TMP       varchar2(13);
  l_start_nt       varchar2(13);
  l_min_ot          number;
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_out_ot number;
l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
max_ot  number;
l_ot_plus1 number;
l_ot_plus2 number;
l_start_meal1  varchar2(13);
  l_end_meal1  varchar2(13);
  l_meal1_interval  number;
  

  BEGIN
     p_END_TMP:=p_END;

    IF p_START_OT IS NULL OR p_END_TMP IS NULL THEN
        RETURN 0;
    END IF;

    SELECT S.START_TIME,S.END_TIME,S.START_MEAL2,S.END_MEAL2,NVL(S.MEAL2_INTERVAL,0),NVL(S.DURING_DAY,1),p_WORK_DT||S.START_NT,nvl(s.max_ot,0),S.START_MEAL1,S.END_MEAL1,ot_plus1,ot_plus2
    INTO l_shift_start,l_shift_end,l_start_meal2,l_end_meal2,l_meal2_interval,l_day,l_start_nt,max_ot,l_start_meal1,l_end_meal1,l_ot_plus1,l_ot_plus2
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;
    
    IF l_day=2 AND p_END<=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT THEN
        
        if (l_shift_start> l_end_meal1  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal1) 
        or 
        (l_shift_start< l_end_meal1  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD'),'YYYYMMDD')||l_end_meal1)
        then    
        RETURN nvl(l_ot_plus1,0);
        elsif (l_shift_start> l_end_meal2  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2) 
        or 
        (l_shift_start< l_end_meal2  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD'),'YYYYMMDD')||l_end_meal2) 
        then 
        RETURN nvl(l_ot_plus1,0)+nvl(l_ot_plus2,0);
        else 
        RETURN 0;
        end if;
        
    ELSIF l_day=1 AND p_END<=p_WORK_DT||p_START_OT THEN
        
    if (l_shift_start> l_end_meal1  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal1) 
        or 
        (l_shift_start< l_end_meal1  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD'),'YYYYMMDD')||l_end_meal1)
        then    
        RETURN nvl(l_ot_plus1,0);
        elsif (l_shift_start> l_end_meal2  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2) 
        or 
        (l_shift_start< l_end_meal2  and  p_END>=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD'),'YYYYMMDD')||l_end_meal2) 
        then 
        RETURN nvl(l_ot_plus1,0)+nvl(l_ot_plus2,0);
        else 
        RETURN 0;
        end if;
        
    END IF;

    IF l_day=1 AND p_KIND='01' THEN --GIOI HAN LAI GIO OT   
        IF  p_END_TMP>l_start_nt THEN
            p_END_TMP:=l_start_nt;
        END IF;
    END IF;

    l_out_time:=substr(p_END_TMP,-5);
    l_date_out:=substr(p_END_TMP,1,8);

    IF p_START_OT<l_shift_start THEN
        l_start_ot:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT;
    ELSE
        l_start_ot:=p_WORK_DT||p_START_OT;
    END IF;

    IF l_start_ot>=p_END_TMP THEN
        RETURN 0;
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1,NVL(C.CHAR_2,'N')
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0027'
        ORDER BY C.SEQ;

    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    l_tmp:=TRUNC(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))/60);
    l_tmp2:=MOD(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')),60);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
        IF l_begin_shift='N' THEN     
             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;

             IF l_temp_out=24 THEN
                l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
         ELSE --BAT DAY SHIFT 
                IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                        l_tmp:=l_tmp+l_interval;
                        l_out_time:=to_char(TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                        l_flag_exit1:=1;
                END IF;
                 
        END IF;                  
    END LOOP;

    CLOSE l_cursor;


    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=p_END_TMP;
    END IF;

    --xu ly co tru gio com
    IF l_meal2_interval>0 THEN
        IF l_shift_start<l_start_meal2 THEN --CA NGAY
            l_start_meal2:=p_WORK_DT||l_start_meal2;
            l_end_meal2:=p_WORK_DT||l_end_meal2;
        ELSE
            l_start_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal2;
            l_end_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2;
        END IF;

        IF l_out_time BETWEEN l_start_meal2 AND l_end_meal2 THEN
            l_out_time:=l_start_meal2;
        END IF;
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

        IF l_start_ot<=l_start_meal2 AND l_out_time>=l_end_meal2 THEN
               N_OT_TIME:=N_OT_TIME-l_meal2_interval + nvl(l_ot_plus1 ,0)+  nvl(l_ot_plus2 ,0);-- them OT pluss
        END IF;
    ELSE
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)+ 
        case when l_out_time >= l_end_meal2 then nvl(l_ot_plus1 ,0)+  nvl(l_ot_plus2 ,0) else nvl(l_ot_plus1 ,0) end  
            INTO N_OT_TIME   from dual;
    END IF;
    
    SELECT NVL(C.NUM_1,0) INTO l_min_ot
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0038';

    IF N_OT_TIME<l_min_ot THEN
        l_out_ot:=0;
    ELSIF max_ot>0 AND N_OT_TIME>max_ot THEN --CO DUNG MAX OT  
        l_out_ot:=max_ot;
    ELSE
        l_out_ot:=N_OT_TIME;
    END IF;

    return l_out_ot;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_ROUND_TIME;

CREATE OR REPLACE FUNCTION HPDQ.hr_sf_get_round_time(
  p_time           in  varchar2,
  p_type             in  varchar2
  ) return number is
  
 l_cursor          sys_refcursor;
 l_flag_exit1    number(2):=0;
 l_minute_from number;
 l_minute_to number;
 l_interval number;
 l_minute_round varchar2(2):='';
 l_hours number;
 
 l_count_time number;
 
 l_time number;
  begin
  
   l_count_time :=  trunc(p_time /60);            
   l_time := p_time - (trunc(p_time /60))*60;
            
  if p_type = 'IN' then
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME
           
                open l_cursor for
                    select c.num_1,c.num_2,c.num_3,c.char_1
                    from vhr_hr_code c
                    where c.id='HR0026'
                    order by c.seq;  
                    loop
                        fetch l_cursor into l_minute_from,l_minute_to,l_interval,l_minute_round;
                         exit when l_cursor%notfound or l_flag_exit1=1;
                             
                            if l_flag_exit1=0 and  l_time between l_minute_from and l_minute_to then
                                
                                l_hours := (l_minute_round/60) + l_interval;
                                
                                l_flag_exit1:=1;
                             end if;
                         
                          
                    end loop;
                    close l_cursor;
  
  else -- out
  
    open l_cursor for
                    select c.num_1,c.num_2,c.num_3,c.char_1
                    from vhr_hr_code c
                    where c.id='HR0096'
                    order by c.seq;  
                    loop
                        fetch l_cursor into l_minute_from,l_minute_to,l_interval,l_minute_round;
                         exit when l_cursor%notfound or l_flag_exit1=1;
                             
                            if l_flag_exit1=0 and  l_time between l_minute_from and l_minute_to then
                                
                                 l_hours := (l_minute_round/60) + l_interval;
                                 
                                l_flag_exit1:=1;
                             end if;
                         
                          
                    end loop;
                    close l_cursor;
  
  
  end if;
            return   case when nvl(l_count_time,0) + nvl(l_hours,0) > 0 then  nvl(l_count_time,0) + nvl(l_hours,0) else null end ;
    exception
    when  others then
--        raise_application_error(-20019,l_date_shift_end||'---'||p_END);
        raise;

end;
/

DROP FUNCTION HPDQ.HR_SF_GET_WT;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_WT(
  p_START           IN  VARCHAR2,--YYYYMMDDHHMM
  p_END             IN  VARCHAR2,--YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2
  ) RETURN NUMBER IS
  N_WT_TIME     NUMBER;
  l_in_time     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_in     varchar2(8);
  l_date_out     varchar2(8);
  l_start_meal1  varchar2(13);
  l_end_meal1  varchar2(13);
  l_meal1_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_wt              number;
  
  l_wt_plus              number;
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_flag_exist boolean:=FALSE;
  l_cur_rec number;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(2):='';
  l_temp_in        number;
  l_temp_out        number;
  l_flag_exit1    number(2):=0;
  l_flag_exit2    number(2):=0;
  l_start_ot      varchar(13):='';
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_min_in  number(2):=0;
  l_min_out  number(2):=0;
  l_date_shift_end varchar(8):='';
  l_wt_plus_tyle varchar(1):='';  

  BEGIN
    IF length(p_START)=8 OR length(p_END)=8 or p_start is null or p_end is null THEN
        RETURN 0;
    END IF;

    SELECT nvl(S.WT,0)+NVL(S.WT_PLUS,0)
    ,S.START_TIME
    ,S.END_TIME
    ,S.START_MEAL1
    ,S.END_MEAL1
    ,NVL(S.MEAL1_INTERVAL,0)
    ,NVL(S.DURING_DAY,1)
    ,NVL(S.WT_PLUS,0)
    , DECODE(NVL(S.DURING_DAY,1),2,TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'yyyymmdd')||NVL(S.START_OT,S.END_TIME),TO_CHAR(TO_DATE(p_WORK_DT||NVL(S.START_OT,S.END_TIME),'YYYYMMDDHH24:MI'),'YYYYMMDDHH24:MI'))
    ,DECODE(NVL(S.DURING_DAY,1),1,p_WORK_DT,TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD'))
    ,nvl(S.WT_PLUS_TY_LE,'N')
    INTO l_wt,l_shift_start,l_shift_end,l_start_meal1,l_end_meal1,l_meal1_interval,l_day
    ,l_wt_plus,l_start_ot,l_date_shift_end,l_wt_plus_tyle
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;

    l_in_time:=substr(p_START,-5);

     IF p_END>l_start_ot THEN
        l_out_time:=substr(l_start_ot,-5);
     ELSE
        l_out_time:=substr(p_END,-5);
     END IF;


    l_date_in:=substr(p_START,1,8);
    l_date_out:=substr(p_END,1,8);
        OPEN l_cursor FOR
            SELECT 1
            FROM VHR_HR_CODE C
            WHERE C.ID='HR0099'
                AND C.TCO_COMPANY_PK IS NULL
            ORDER BY C.SEQ;
         FETCH l_cursor INTO l_cur_rec;
         l_flag_exist := l_cursor%FOUND;
         CLOSE l_cursor;
         
          IF l_flag_exist=TRUE THEN --CO SU DUNG CODE 99    
    
                SELECT C.NUM_1,C.NUM_2 INTO l_min_in,l_min_out
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0099'
                    AND C.TCO_COMPANY_PK IS NULL
                ORDER BY C.SEQ;
             END IF;   
    


    IF p_START>p_WORK_DT||l_shift_start THEN

               IF TO_CHAR(TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')+l_min_in/60/24,'YYYYMMDDHH24:MI')>=p_START THEN
                    l_in_time:=l_date_in||l_shift_start;
                    l_flag_exit1:=1;
                END IF;
            
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME 
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1,NVL(C.CHAR_2,'N')
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0026'
                    AND C.TCO_COMPANY_PK IS NULL
                ORDER BY C.SEQ;

            l_temp_in:=TO_NUMBER(substr(l_in_time,-2));
            
            l_tmp:=TRUNC(24*60*(TO_DATE(p_START,'YYYYMMDDHH24:MI')-TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI'))/60);
            l_tmp2:=MOD(24*60*(TO_DATE(p_START,'YYYYMMDDHH24:MI')-TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')),60);
   
            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                 EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
                    IF l_begin_shift='N' THEN

                       IF l_flag_exit1=0 AND  l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                            l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                            IF l_temp_in<=9 THEN
                                l_in_time:=l_date_in||'0'||l_temp_in||':'||l_minute_round;
                            ELSE
                                l_in_time:=l_date_in||l_temp_in||':'||l_minute_round; --YYYYMMDDHHMM
                            END IF;
                            IF l_temp_in=24 THEN
                                l_in_time:=TO_CHAR(TO_DATE(l_date_in,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                            END IF;

                            l_flag_exit1:=1;
                         END IF;
                 
                    ELSE --BAT DAU CUA SHIFT 
                        IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                            l_tmp:=l_tmp+l_interval;
                            l_in_time:=to_char(TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                            l_flag_exit1:=1;
                         END IF;
                 
                     END IF;    
               
            END LOOP;
            CLOSE l_cursor;

            IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
                l_in_time:=p_START;
            END IF;
    ELSE
        l_in_time:=p_START;
    END IF;        
    
    IF p_END<l_date_shift_end||l_shift_end THEN
            
    
            IF l_flag_exist=TRUE THEN --CO SU DUNG CODE 99    
    
                IF TO_CHAR(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-l_min_out/60/24,'YYYYMMDDHH24:MI')<=p_END THEN
                    l_out_time:=l_date_out||l_shift_end;
                    l_flag_exit2:=1;
                   
                END IF;
            END IF;   
    
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME 
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1,NVL(C.CHAR_2,'N')
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0096'
                    AND C.TCO_COMPANY_PK IS NULL
                ORDER BY C.SEQ;

            
            l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
            l_tmp:=TRUNC(24*60*(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI'))/60);
            l_tmp2:=MOD(24*60*(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI')),60);

            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit2=1;
                IF l_begin_shift='N' THEN

                         IF l_flag_exit2=0 AND  l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                            l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                            IF l_temp_out<=9 THEN
                                l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                            ELSE
                                l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                            END IF;

                            IF l_temp_out=24 THEN
                                l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                            END IF;
                            l_flag_exit2:=1;
                         END IF;
                ELSE --BAT DAY SHIFT 
                    IF l_flag_exit2=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to and l_tmp=0 THEN
                            l_tmp:=l_tmp+l_interval;
                            l_out_time:=to_char(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                            l_flag_exit2:=1;
                         END IF;
                 
                END IF;             
                
            END LOOP;
            CLOSE l_cursor;

            IF  l_flag_exit2=0 THEN -- KO SU DUNG LAM TRON 
                l_out_time:=p_END;
            END IF;
    ELSE
        l_out_time:=l_date_shift_end||l_shift_end;        
    END IF;        

    IF l_day>1 THEN --CA DEM
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;
        IF l_out_time>=l_start_ot THEN
            l_out_time:=l_start_ot;
        END IF;

    ELSE  -- CA NGAY 
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;
        IF l_out_time>=l_start_ot THEN
            l_out_time:=l_start_ot;
        END IF;
    END IF;

    --TOI DOAN NAY TA DA CO IN OUT THEO DINH DANG YYYYMMDDHHMM
    IF l_meal1_interval>0 THEN
        IF l_shift_start<=l_start_meal1 THEN --CA NGAY
            l_start_meal1:=p_WORK_DT||l_start_meal1;
            l_end_meal1:=p_WORK_DT||l_end_meal1;
        ELSE
            l_start_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal1;
            l_end_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal1;
        END IF;
        IF l_in_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_in_time:=l_end_meal1;
        END IF;
        IF l_out_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_out_time:=l_start_meal1;
        END IF;
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;

        IF l_in_time<=l_start_meal1 AND l_out_time>=l_end_meal1 THEN
               N_WT_TIME:=N_WT_TIME-l_meal1_interval;
        END IF;
    ELSE
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;
    END IF;
    
    IF l_wt_plus_tyle='Y' AND l_wt_plus<>0 THEN --TINH TY LE NEU CO WT PLUS
        IF N_WT_TIME<l_wt-l_wt_plus THEN
                N_WT_TIME:=N_WT_TIME*l_wt/(l_wt-l_wt_plus);
        END IF;  
              
    ELSE
        N_WT_TIME:=N_WT_TIME+l_wt_plus;        
        
    END IF; 


    IF N_WT_TIME>l_wt THEN
        RETURN  l_wt;
    ELSIF N_WT_TIME<0 THEN
        RETURN  0;
    ELSE
        RETURN  round(N_WT_TIME,2);
    END IF;



    EXCEPTION
    WHEN  OTHERS THEN
--        raise_application_error(-20019,l_date_shift_end||'---'||p_END);
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_WT_5M;

CREATE OR REPLACE FUNCTION HPDQ.HR_SF_GET_WT_5M(
  p_START           IN  VARCHAR2,--YYYYMMDDHHMM
  p_END             IN  VARCHAR2,--YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
 p_OT_ALLOW    IN  VARCHAR2,
 p_REG_HOURS    IN  VARCHAR2,
 p_company_pk   IN VARCHAR2
  ) RETURN NUMBER IS
  N_WT_TIME     NUMBER;
  l_in_time     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_in     varchar2(8);
  l_date_out     varchar2(8);
  l_start_meal1  varchar2(13);
  l_end_meal1  varchar2(13);
  l_meal1_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_wt              number;
  
  l_wt_plus              number;
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_flag_exist boolean:=FALSE;
  l_cur_rec number;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(2):='';
  l_temp_in        number;
  l_temp_out        number;
  l_flag_exit1    number(2):=0;
  l_flag_exit2    number(2):=0;
  l_start_ot      varchar(13):='';
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_min_in  number(2):=0;
  l_min_out  number(2):=0;
  l_date_shift_end varchar(8):='';
  l_wt_plus_tyle varchar(1):='';  

  BEGIN
    IF length(p_START)=8 OR length(p_END)=8 or p_start is null or p_end is null THEN
        RETURN 0;
    END IF;

    SELECT nvl(S.WT,0)+NVL(S.WT_PLUS,0),S.START_TIME,S.END_TIME,S.START_MEAL1,S.END_MEAL1
    ,NVL(S.MEAL1_INTERVAL,0),NVL(S.DURING_DAY,1),NVL(S.WT_PLUS,0)
   , DECODE(NVL(S.DURING_DAY,1),2,TO_CHAR(TO_DATE(TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||NVL(S.START_OT,S.END_TIME),'YYYYMMDDHH24:MI')-NVL(S.MEAL2_INTERVAL,0)/24,'YYYYMMDDHH24:MI'),TO_CHAR(TO_DATE(p_WORK_DT||NVL(S.START_OT,S.END_TIME),'YYYYMMDDHH24:MI')-NVL(S.MEAL2_INTERVAL,0)/24,'YYYYMMDDHH24:MI'))
    ,DECODE(NVL(S.DURING_DAY,1),1,p_WORK_DT,TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')),nvl(S.WT_PLUS_TY_LE,'N')
    INTO l_wt,l_shift_start,l_shift_end,l_start_meal1,l_end_meal1,l_meal1_interval,l_day
    ,l_wt_plus,l_start_ot,l_date_shift_end,l_wt_plus_tyle
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;

    l_in_time:=substr(p_START,-5);

     IF p_END>l_start_ot THEN
        l_out_time:=substr(l_start_ot,-5);
     ELSE
        l_out_time:=substr(p_END,-5);
     END IF;


    l_date_in:=substr(p_START,1,8);
    l_date_out:=substr(p_END,1,8);
        OPEN l_cursor FOR
            SELECT 1
            FROM VHR_HR_CODE C
            WHERE C.ID='HR0099'
            ORDER BY C.SEQ;
         FETCH l_cursor INTO l_cur_rec;
         l_flag_exist := l_cursor%FOUND;
         CLOSE l_cursor;
         
          IF l_flag_exist=TRUE THEN --CO SU DUNG CODE 99    
    
                SELECT C.NUM_1,C.NUM_2 INTO l_min_in,l_min_out
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0099' AND NVL(C.TCO_COMPANY_PK,p_company_pk)=p_company_pk
                ORDER BY C.SEQ;
             END IF;   
    


    IF p_START>p_WORK_DT||l_shift_start THEN

               IF TO_CHAR(TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')+l_min_in/60/24,'YYYYMMDDHH24:MI')>=p_START and nvl(p_OT_ALLOW,'Y')='N' THEN
                    l_in_time:=l_date_in||l_shift_start;
                    l_flag_exit1:=1;
                END IF;
            
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME 
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1,NVL(C.CHAR_2,'N')
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0026' AND NVL(C.TCO_COMPANY_PK,p_company_pk)=p_company_pk
                ORDER BY C.SEQ;

            l_temp_in:=TO_NUMBER(substr(l_in_time,-2));
            
            l_tmp:=TRUNC(24*60*(TO_DATE(p_START,'YYYYMMDDHH24:MI')-TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI'))/60);
            l_tmp2:=MOD(24*60*(TO_DATE(p_START,'YYYYMMDDHH24:MI')-TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')),60);
   
            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                 EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
                    IF l_begin_shift='N' THEN

                       IF l_flag_exit1=0 AND  l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                            l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                            IF l_temp_in<=9 THEN
                                l_in_time:=l_date_in||'0'||l_temp_in||':'||l_minute_round;
                            ELSE
                                l_in_time:=l_date_in||l_temp_in||':'||l_minute_round; --YYYYMMDDHHMM
                            END IF;
                            IF l_temp_in=24 THEN
                                l_in_time:=TO_CHAR(TO_DATE(l_date_in,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                            END IF;

                            l_flag_exit1:=1;
                         END IF;
                 
                    ELSE --BAT DAU CUA SHIFT 
                        IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                            l_tmp:=l_tmp+l_interval;
                            l_in_time:=to_char(TO_DATE(p_WORK_DT||l_shift_start,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                            l_flag_exit1:=1;
                         END IF;
                 
                     END IF;    
               
            END LOOP;
            CLOSE l_cursor;

            IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
                l_in_time:=p_START;
            END IF;
    ELSE
        l_in_time:=p_START;
    END IF;        
    
    IF p_END<l_date_shift_end||l_shift_end THEN
            
    
            IF l_flag_exist=TRUE THEN --CO SU DUNG CODE 99    
    
                IF TO_CHAR(TO_DATE(l_date_shift_end||l_shift_end  ,'YYYYMMDDHH24:MI') - nvl(p_reg_hours,0)/24 -l_min_out/60/24,'YYYYMMDDHH24:MI')<=p_END  and nvl(p_reg_hours,0)=1 THEN
                    l_out_time:=TO_CHAR(TO_DATE(l_date_shift_end||l_shift_end  ,'YYYYMMDDHH24:MI') - nvl(p_reg_hours,0)/24,'YYYYMMDDHH24:MI')  ;
                    l_flag_exit2:=1;
                   
                END IF;
            END IF;   
    
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME 
            OPEN l_cursor FOR
                SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1,NVL(C.CHAR_2,'N')
                FROM VHR_HR_CODE C
                WHERE C.ID='HR0096' AND NVL(C.TCO_COMPANY_PK,p_company_pk)=p_company_pk
                ORDER BY C.SEQ;

            
            l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
            l_tmp:=TRUNC(24*60*(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI'))/60);
            l_tmp2:=MOD(24*60*(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-TO_DATE(p_END,'YYYYMMDDHH24:MI')),60);

            LOOP
                FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit2=1;
                IF l_begin_shift='N' THEN

                         IF l_flag_exit2=0 AND  l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                            l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                            IF l_temp_out<=9 THEN
                                l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                            ELSE
                                l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                            END IF;

                            IF l_temp_out=24 THEN
                                l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                            END IF;
                            l_flag_exit2:=1;
                         END IF;
                ELSE --BAT DAY SHIFT 
                    IF l_flag_exit2=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                            l_tmp:=l_tmp+l_interval;
                            l_out_time:=to_char(TO_DATE(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                            l_flag_exit2:=1;
                         END IF;
                 
                END IF;             
                
            END LOOP;
            CLOSE l_cursor;

            IF  l_flag_exit2=0 THEN -- KO SU DUNG LAM TRON 
                l_out_time:=p_END;
            END IF;
    ELSE
        l_out_time:=p_END;        
    END IF;        

    IF l_day>1 THEN --CA DEM
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;
        IF l_out_time>=l_start_ot THEN
            l_out_time:=l_start_ot;
        END IF;

    ELSE  -- CA NGAY 
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;
        IF l_out_time>=l_start_ot THEN
            l_out_time:=l_start_ot;
        END IF;
    END IF;

        --truong hop cho van phong o NB
       if p_work_dt || l_shift_end > l_out_time and  (TO_DATE(p_work_dt || l_shift_end,'YYYYMMDDHH24:MI') - TO_DATE(l_out_time,'YYYYMMDDHH24:MI'))*24*60 <= 5  then  -- nho hon 5 phut
            l_out_time:=p_work_dt || l_shift_end;
        end if;
    --TOI DOAN NAY TA DA CO IN OUT THEO DINH DANG YYYYMMDDHHMM
    IF l_meal1_interval>0 THEN
        IF l_shift_start<l_start_meal1 THEN --CA NGAY
            l_start_meal1:=p_WORK_DT||l_start_meal1;
            l_end_meal1:=p_WORK_DT||l_end_meal1;
        ELSE
            l_start_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal1;
            l_end_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal1;
        END IF;
        IF l_in_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_in_time:=l_end_meal1;
        END IF;
        IF l_out_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_out_time:=l_start_meal1;
        END IF;
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;

        IF l_in_time<=l_start_meal1 AND l_out_time>=l_end_meal1 THEN
               N_WT_TIME:=N_WT_TIME-l_meal1_interval;
        END IF;
    ELSE
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;
    END IF;
    
    IF l_wt_plus_tyle='Y' AND l_wt_plus<>0 THEN --TINH TY LE NEU CO WT PLUS
        IF N_WT_TIME<l_wt-l_wt_plus THEN
                N_WT_TIME:=N_WT_TIME*l_wt/(l_wt-l_wt_plus);
        END IF;  
              
    ELSE
        N_WT_TIME:=N_WT_TIME+l_wt_plus;        
        
    END IF; 


    IF N_WT_TIME>l_wt THEN
        RETURN  l_wt;
    ELSIF N_WT_TIME<0 THEN
        RETURN  0;
    ELSE
        RETURN  round(N_WT_TIME,2);
    END IF;



    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_WT_COM;

CREATE OR REPLACE FUNCTION HPDQ.hr_sf_get_wt_com(
  p_start           in  varchar2,--YYYYMMDDHHMM
  p_end             in  varchar2,--YYYYMMDDHHMM
  p_shift           in  number,
  p_work_dt         in  varchar2,
  p_company_pk           in  number
  ) return number is
  n_wt_time     number;
  l_in_time     varchar2(13); --YYYYMMDDHHMM
  l_out_time    varchar2(13); --YYYYMMDDHHMM
  l_date_in     varchar2(8);
  l_date_out     varchar2(8);
  l_start_meal1  varchar2(13);
  l_end_meal1  varchar2(13);
  l_meal1_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_wt              number;
  
  l_wt_plus              number;
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_flag_exist boolean:=false;
  l_cur_rec number;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(2):='';
  l_temp_in        number;
  l_temp_out        number;
  l_flag_exit1    number(2):=0;
  l_flag_exit2    number(2):=0;
  l_start_ot      varchar(13):='';
  l_begin_shift   varchar(1):='';
  l_tmp   number(10):=0;
  l_tmp2  number(10):=0;
  l_min_in  number(2):=0;
  l_min_out  number(2):=0;
  l_date_shift_end varchar(8):='';
  l_wt_plus_tyle varchar(1):='';  

  begin
    if length(p_start)=8 or length(p_end)=8 or p_start is null or p_end is null then
        return 0;
    end if;

    select nvl(s.wt,0)+nvl(s.wt_plus,0)
    ,s.start_time
    ,s.end_time
    ,s.start_meal1
    ,s.end_meal1
    ,nvl(s.meal1_interval,0)
    ,nvl(s.during_day,1)
    ,nvl(s.wt_plus,0)
    , decode(nvl(s.during_day,1),2,to_char(to_date(p_work_dt,'YYYYMMDD')+1,'yyyymmdd')||nvl(s.start_ot,s.end_time),to_char(to_date(p_work_dt||nvl(s.start_ot,s.end_time),'YYYYMMDDHH24:MI'),'YYYYMMDDHH24:MI'))
    ,decode(nvl(s.during_day,1),1,p_work_dt,to_char(to_date(p_work_dt,'YYYYMMDD')+1,'YYYYMMDD'))
    ,nvl(s.wt_plus_ty_le,'N')
    into l_wt,l_shift_start,l_shift_end,l_start_meal1,l_end_meal1,l_meal1_interval,l_day
    ,l_wt_plus,l_start_ot,l_date_shift_end,l_wt_plus_tyle
     from thr_work_shift s
    where s.del_if=0 and s.pk=p_shift and s.tco_company_pk = p_company_pk;

    l_in_time:=substr(p_start,-5);

     if p_end>l_start_ot then
        l_out_time:=substr(l_start_ot,-5);
     else
        l_out_time:=substr(p_end,-5);
     end if;


    l_date_in:=substr(p_start,1,8);
    l_date_out:=substr(p_end,1,8);
    
        open l_cursor for
            select 1
            from vhr_hr_code c
            where c.id='HR0099'
            and nvl(c.tco_company_pk,p_company_pk)= p_company_pk
            order by c.seq;
         fetch l_cursor into l_cur_rec;
         l_flag_exist := l_cursor%found;
         close l_cursor;
         
          if l_flag_exist=true then --CO SU DUNG CODE 99    
    
                select c.num_1,c.num_2 into l_min_in,l_min_out
                from vhr_hr_code c
                where c.id='HR0099'
                and nvl(c.tco_company_pk,p_company_pk)= p_company_pk
                order by c.seq;
             end if;   
   
    
    if p_start>p_work_dt||l_shift_start then

               if to_char(to_date(p_work_dt||l_shift_start,'YYYYMMDDHH24:MI')+l_min_in/60/24,'YYYYMMDDHH24:MI')>=p_start then
                    l_in_time:=l_date_in||l_shift_start;
                    l_flag_exit1:=1;
                end if;
            
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME
            
                open l_cursor for
                    select c.num_1,c.num_2,c.num_3,c.char_1,nvl(c.char_2,'N')
                    from vhr_hr_code c
                    where c.id='HR0026'
                    and nvl(c.tco_company_pk,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
                    order by c.seq;
                     
                    l_temp_in:=to_number(substr(l_in_time,-2));
            
                    l_tmp:=trunc(24*60*(to_date(p_start,'YYYYMMDDHH24:MI')-to_date(p_work_dt||l_shift_start,'YYYYMMDDHH24:MI'))/60);
                    l_tmp2:=mod(24*60*(to_date(p_start,'YYYYMMDDHH24:MI')-to_date(p_work_dt||l_shift_start,'YYYYMMDDHH24:MI')),60);
           
                    loop
                        fetch l_cursor into l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                         exit when l_cursor%notfound or l_flag_exit1=1;
                            if l_begin_shift='N' then

                               if l_flag_exit1=0 and  l_temp_in between l_minute_from and l_minute_to then
                                    l_temp_in:=to_number(substr(l_in_time,1,2))+l_interval;
                                    if l_temp_in<=9 then
                                        l_in_time:=l_date_in||'0'||l_temp_in||':'||l_minute_round;
                                    else
                                        l_in_time:=l_date_in||l_temp_in||':'||l_minute_round; --YYYYMMDDHHMM
                                    end if;
                                    if l_temp_in=24 then
                                        l_in_time:=to_char(to_date(l_date_in,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                                    end if;

                                    l_flag_exit1:=1;
                               end if;
                         
                            else --BAT DAU CUA SHIFT 
                                if l_flag_exit1=0 and  l_tmp2 between l_minute_from and l_minute_to then
                                    l_tmp:=l_tmp+l_interval;
                                    l_in_time:=to_char(to_date(p_work_dt||l_shift_start,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                                    l_flag_exit1:=1;
                                 end if;
                         
                             end if;    
                       
                    end loop;
                    close l_cursor;
            
            if l_flag_exit1=0 then -- KO SU DUNG LAM TRON
                l_in_time:=p_start;
            end if;
    else
        l_in_time:=p_start;
    end if;        
    
    if p_end<l_date_shift_end||l_shift_end then
            
    
            if l_flag_exist=true then --CO SU DUNG CODE 99    
    
                if to_char(to_date(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-l_min_out/60/24,'YYYYMMDDHH24:MI')<=p_end then
                    l_out_time:=l_date_out||l_shift_end;
                    l_flag_exit2:=1;
                   
                end if;
            end if;   
    
            --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME 

                open l_cursor for
                    select c.num_1,c.num_2,c.num_3,c.char_1,nvl(c.char_2,'N')
                    from vhr_hr_code c
                    where c.id='HR0096'
                    and nvl(c.tco_company_pk,p_company_pk)= p_company_pk--XAC DINH THEO COMPANY 
                    order by c.seq;
                    
                    l_temp_out:=to_number(substr(l_out_time,-2));
                    l_tmp:=trunc(24*60*(to_date(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-to_date(p_end,'YYYYMMDDHH24:MI'))/60);
                    l_tmp2:=mod(24*60*(to_date(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-to_date(p_end,'YYYYMMDDHH24:MI')),60);

                    loop
                        fetch l_cursor into l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
                        exit when l_cursor%notfound or l_flag_exit2=1;
                        if l_begin_shift='N' then

                                 if l_flag_exit2=0 and  l_temp_out between l_minute_from and l_minute_to then
                                    l_temp_out:=to_number(substr(l_out_time,1,2))+l_interval;
                                    if l_temp_out<=9 then
                                        l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                                    else
                                        l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                                    end if;

                                    if l_temp_out=24 then
                                        l_out_time:=to_char(to_date(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                                    end if;
                                    l_flag_exit2:=1;
                                 end if;
                        else --BAT DAY SHIFT 
                            if l_flag_exit2=0 and  l_tmp2 between l_minute_from and l_minute_to  then
                                    l_tmp:=l_tmp+l_interval;
                                    l_out_time:=to_char(to_date(l_date_shift_end||l_shift_end,'YYYYMMDDHH24:MI')-(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                                    l_flag_exit2:=1;
                                 end if;
                         
                        end if;             
                        
                    end loop;
                    close l_cursor;
            
            if  l_flag_exit2=0 then -- KO SU DUNG LAM TRON 
                l_out_time:=p_end;
            end if;
    else
        l_out_time:=l_date_shift_end||l_shift_end;        
    end if;        

    if l_day>1 then --CA DEM
        if l_in_time<p_work_dt||l_shift_start then
            l_in_time:=p_work_dt||l_shift_start;
        end if;
        if l_out_time>=l_start_ot then
            l_out_time:=l_start_ot;
        end if;

    else  -- CA NGAY 
        if l_in_time<p_work_dt||l_shift_start then
            l_in_time:=p_work_dt||l_shift_start;
        end if;
        if l_out_time>=l_start_ot then
            l_out_time:=l_start_ot;
        end if;
    end if;

    --TOI DOAN NAY TA DA CO IN OUT THEO DINH DANG YYYYMMDDHHMM
    if l_meal1_interval>0 then
        if l_shift_start<=l_start_meal1 then --CA NGAY
            l_start_meal1:=p_work_dt||l_start_meal1;
            l_end_meal1:=p_work_dt||l_end_meal1;
        else
            l_start_meal1:=to_char(to_date(p_work_dt,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal1;
            l_end_meal1:=to_char(to_date(p_work_dt,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal1;
        end if;
        if l_in_time between l_start_meal1 and l_end_meal1 then
            l_in_time:=l_end_meal1;
        end if;
        if l_out_time between l_start_meal1 and l_end_meal1 then
            l_out_time:=l_start_meal1;
        end if;
        select round((to_date(l_out_time,'YYYYMMDDHH24:MI') - to_date(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            into n_wt_time   from dual;

        if l_in_time<=l_start_meal1 and l_out_time>=l_end_meal1 then
               n_wt_time:=n_wt_time-l_meal1_interval;
        end if;
    else
        select round((to_date(l_out_time,'YYYYMMDDHH24:MI') - to_date(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            into n_wt_time   from dual;
    end if;
    
    if l_wt_plus_tyle='Y' and l_wt_plus<>0 then --TINH TY LE NEU CO WT PLUS
        if n_wt_time<l_wt-l_wt_plus then
                n_wt_time:=n_wt_time*l_wt/(l_wt-l_wt_plus);
        end if;  
              
    else
        n_wt_time:=n_wt_time+l_wt_plus;        
        
    end if; 


    if n_wt_time>l_wt then
        return  l_wt;
    elsif n_wt_time<0 then
        return  0;
    else
        return  round(n_wt_time,2);
    end if;



    exception
    when  others then
--        raise_application_error(-20019,l_date_shift_end||'---'||p_END);
        raise;

end;
/

DROP FUNCTION HPDQ.HT_CALC_WEEKDAY_BK;

CREATE OR REPLACE FUNCTION HPDQ.ht_calc_weekday_bk (p_from_date varchar, p_to_date varchar)
   return number
is
   /******************************************************************************
      NAME:       ht_calc_weekday_bk
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/24/2013   Nguyen Van Thai       1. Created this function.

   ******************************************************************************/
   l_rtn_value   number;
   l_from_date   date;
   l_to_date     date;
begin
   select to_date (p_from_date, 'yyyymmdd'), to_date (p_to_date, 'yyyymmdd') - 1
     into l_from_date, l_to_date
     from dual;

   select   (l_to_date - l_from_date)
          - 3 * floor ( (l_to_date - l_from_date) / 7)
          - decode (sign (to_char (l_to_date, 'D') - to_char (l_from_date, 'D')), -1, 3, 0)
          + decode (to_char (l_from_date, 'D'), 6, 1, 0)
          + decode (to_char (l_from_date, 'D'), 7, 1, 0)
          - decode (to_char (l_to_date, 'D'), 6, 1, 0)
          - decode (to_char (l_to_date, 'D'), 7, 1, 0)
     into l_rtn_value
     from dual;

   return l_rtn_value;
end ht_calc_weekday_bk;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.IS_NUMBER;

CREATE OR REPLACE FUNCTION HPDQ.is_number (v_value IN VARCHAR2)
   RETURN NUMBER
IS
   cnv   NUMBER := 0;
BEGIN
   cnv := TO_NUMBER (v_value);
   RETURN 1;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LF_GET_AGCI00091;

CREATE OR REPLACE FUNCTION HPDQ.lf_get_agci00091 (
   p_lit_stitem_pk    NUMBER,
   p_lit_spec_pk_01   NUMBER,
   p_lit_spec_pk_02   NUMBER,
   p_lit_spec_pk_03   NUMBER,
   p_lit_spec_pk_04   NUMBER,
   p_lit_spec_pk_05   NUMBER,
   p_lit_spec_pk_06   NUMBER,
   p_lit_spec_pk_07   NUMBER,
   p_lit_spec_pk_08   NUMBER,
   p_lit_spec_pk_09   NUMBER,
   p_lit_spec_pk_10   NUMBER,
   p_lit_spec_pk_11   NUMBER,
   p_lit_spec_pk_12   NUMBER,
   p_lit_spec_pk_13   NUMBER,
   p_lit_spec_pk_14   NUMBER,
   p_lit_spec_pk_15   NUMBER,
   p_lit_spec_pk_16   NUMBER,
   p_lit_spec_pk_17   NUMBER,
   p_lit_spec_pk_18   NUMBER,
   p_lit_spec_pk_19   NUMBER,
   p_lit_spec_pk_20   NUMBER
)
   RETURN NUMBER
IS
   l_status        VARCHAR2 (100);
--------------------------
   l_rtn_item_pk   NUMBER;
--------------------------
   l_count         NUMBER         := 0;
--------------------------
BEGIN
--------------------------------------------------------------
   IF p_lit_spec_pk_01 IS NOT NULL AND p_lit_spec_pk_01 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_02 IS NOT NULL AND p_lit_spec_pk_02 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_03 IS NOT NULL AND p_lit_spec_pk_03 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_04 IS NOT NULL AND p_lit_spec_pk_04 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_05 IS NOT NULL AND p_lit_spec_pk_05 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_06 IS NOT NULL AND p_lit_spec_pk_06 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_07 IS NOT NULL AND p_lit_spec_pk_07 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_08 IS NOT NULL AND p_lit_spec_pk_08 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_09 IS NOT NULL AND p_lit_spec_pk_09 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_10 IS NOT NULL AND p_lit_spec_pk_10 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_11 IS NOT NULL AND p_lit_spec_pk_11 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_12 IS NOT NULL AND p_lit_spec_pk_12 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_13 IS NOT NULL AND p_lit_spec_pk_13 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_14 IS NOT NULL AND p_lit_spec_pk_14 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_15 IS NOT NULL AND p_lit_spec_pk_15 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_16 IS NOT NULL AND p_lit_spec_pk_16 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_17 IS NOT NULL AND p_lit_spec_pk_17 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_18 IS NOT NULL AND p_lit_spec_pk_18 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_19 IS NOT NULL AND p_lit_spec_pk_19 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_lit_spec_pk_20 IS NOT NULL AND p_lit_spec_pk_20 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

----------------------------------------------------------------------
   IF l_count = 0
   THEN
      IF l_rtn_item_pk IS NULL OR l_rtn_item_pk = 0
      THEN
         SELECT COUNT (gr.pk)
           INTO l_count
           FROM lit_stitem st, lit_grpspecgrp gr
          WHERE st.del_if = 0
            AND gr.del_if = 0
            AND st.lit_itemgrp_pk = gr.lit_itemgrp_pk
            AND st.pk = p_lit_stitem_pk;

         IF l_count = 0
         THEN
            SELECT MAX (a.pk)
              INTO l_rtn_item_pk
              FROM lit_item a
             WHERE a.del_if = 0 AND a.lit_stitem_pk = p_lit_stitem_pk;
         END IF;
      END IF;

      RETURN l_rtn_item_pk;
   END IF;

   l_status := 'Select item error !!!';

----------------------------------------------------------------------
   SELECT MAX (lit_item_pk)
     INTO l_rtn_item_pk
     FROM (SELECT   a.lit_item_pk
               FROM lit_itemspec a, lit_item b
              WHERE a.del_if = 0
                AND a.lit_spec_pk IN
                       (NVL (p_lit_spec_pk_01, 0),
                        NVL (p_lit_spec_pk_02, 0),
                        NVL (p_lit_spec_pk_03, 0),
                        NVL (p_lit_spec_pk_04, 0),
                        NVL (p_lit_spec_pk_05, 0),
                        NVL (p_lit_spec_pk_06, 0),
                        NVL (p_lit_spec_pk_07, 0),
                        NVL (p_lit_spec_pk_08, 0),
                        NVL (p_lit_spec_pk_09, 0),
                        NVL (p_lit_spec_pk_10, 0),
                        NVL (p_lit_spec_pk_11, 0),
                        NVL (p_lit_spec_pk_12, 0),
                        NVL (p_lit_spec_pk_13, 0),
                        NVL (p_lit_spec_pk_14, 0),
                        NVL (p_lit_spec_pk_15, 0),
                        NVL (p_lit_spec_pk_16, 0),
                        NVL (p_lit_spec_pk_17, 0),
                        NVL (p_lit_spec_pk_18, 0),
                        NVL (p_lit_spec_pk_19, 0),
                        NVL (p_lit_spec_pk_20, 0)
                       )
                AND a.lit_item_pk NOT IN (
                       SELECT DISTINCT lit_item_pk
                                  FROM lit_itemspec c
                                 WHERE c.del_if = 0
                                   AND c.lit_spec_pk NOT IN
                                          (NVL (p_lit_spec_pk_01, 0),
                                           NVL (p_lit_spec_pk_02, 0),
                                           NVL (p_lit_spec_pk_03, 0),
                                           NVL (p_lit_spec_pk_04, 0),
                                           NVL (p_lit_spec_pk_05, 0),
                                           NVL (p_lit_spec_pk_06, 0),
                                           NVL (p_lit_spec_pk_07, 0),
                                           NVL (p_lit_spec_pk_08, 0),
                                           NVL (p_lit_spec_pk_09, 0),
                                           NVL (p_lit_spec_pk_10, 0),
                                           NVL (p_lit_spec_pk_11, 0),
                                           NVL (p_lit_spec_pk_12, 0),
                                           NVL (p_lit_spec_pk_13, 0),
                                           NVL (p_lit_spec_pk_14, 0),
                                           NVL (p_lit_spec_pk_15, 0),
                                           NVL (p_lit_spec_pk_16, 0),
                                           NVL (p_lit_spec_pk_17, 0),
                                           NVL (p_lit_spec_pk_18, 0),
                                           NVL (p_lit_spec_pk_19, 0),
                                           NVL (p_lit_spec_pk_20, 0)
                                          ))
                AND b.del_if = 0
                AND a.lit_item_pk = b.pk
                AND b.lit_stitem_pk = p_lit_stitem_pk
           GROUP BY a.lit_item_pk
             HAVING COUNT (*) = l_count);

-------------------------------------------------------------------------
   RETURN NVL (l_rtn_item_pk, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lf_get_agci00091;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LF_GET_AGCI00110;

CREATE OR REPLACE FUNCTION HPDQ.lf_get_agci00110 (
   p_lit_itemgrp_pk   NUMBER,
   p_lit_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM lit_itemgrp
    WHERE del_if = 0 AND pk = p_lit_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM lit_stitem a, lit_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.lit_itemgrp_pk = b.pk
         AND a.lit_itemgrp_pk = p_lit_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM lit_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lf_get_agci00110;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LF_GET_CHECK_SLIP_NO;

CREATE OR REPLACE FUNCTION HPDQ.lf_get_check_slip_no (
   p_slip_type   IN   VARCHAR2,
   p_value       IN   VARCHAR2
)
   RETURN VARCHAR
IS
   lcode_pks         VARCHAR (100);
   lchars            VARCHAR (100);
   l_temp_code_pks   VARCHAR (100);
   lpost             NUMBER         := -1;
   l_pk              VARCHAR (10);
   l_data_type       VARCHAR (100);
   l_format          VARCHAR (100);
   l_len_of_pks      NUMBER;
   l_feild_nm        VARCHAR (100);
   l_length          VARCHAR2 (100);
   l_cent            VARCHAR (1);
   l_value           VARCHAR (50);
   l_all_length      NUMBER;
   l_char_post       NUMBER         := 1;
   l_part            VARCHAR (100);
   temp              VARCHAR (100);
/******************************************************************************
   NAME:       SF_GET_CHECK_SLIP_NO
******************************************************************************/
BEGIN
   BEGIN
      SELECT a.code_pk, a.code_description
        INTO lcode_pks, lchars
        FROM lsa_code_template a
       WHERE a.del_if = 0 AND a.code_type = p_slip_type
             AND a.current_used = 'Y';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         lcode_pks := '';
         lchars := '';
         RETURN 'ERROR';
   END;

   l_value := lcode_pks;

   IF LENGTH (lcode_pks) > 0
   THEN
      l_temp_code_pks := lcode_pks;
      l_len_of_pks := LENGTH (lcode_pks);
      l_all_length := 0;

      --Check length
      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         BEGIN
            SELECT charater_len
              INTO l_length
              FROM lsa_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         l_all_length := l_all_length + l_length;
      END LOOP;

      IF l_all_length <> LENGTH (TRIM (p_value))
      THEN
         RETURN 'ERROR';
      END IF;

      l_temp_code_pks := lcode_pks;

      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         --get data type and fomat of each element in a list of character pk
         BEGIN
            SELECT data_type, CHARACTERS, field_nm, charater_len, c_end
              INTO l_data_type, l_format, l_feild_nm, l_length, l_cent
              FROM lsa_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         CASE l_data_type
            WHEN 'C'
            THEN
               IF (SUBSTR (p_value, l_char_post, l_length) <> l_format)
               THEN
                  RETURN 'ERROR';
               END IF;
            WHEN 'D'
            THEN
               BEGIN
                  SELECT TO_DATE (SUBSTR (p_value, l_char_post, l_length),
                                  l_format
                                 )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            WHEN 'N'
            THEN
               BEGIN
                  SELECT TO_NUMBER (SUBSTR (p_value, l_char_post, l_length),
                                    l_format
                                   )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            ELSE
               l_value := lcode_pks;
         END CASE;

         l_char_post := l_char_post + l_length;
      END LOOP;
   END IF;

   RETURN l_value;
END lf_get_check_slip_no;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LF_GET_ITEM_CODE;

CREATE OR REPLACE FUNCTION HPDQ.lf_get_item_code (p_lit_item_pk IN VARCHAR)
   RETURN VARCHAR2
IS
   l_item_code   VARCHAR2 (100);
BEGIN
   SELECT i.item_code
     INTO l_item_code
     from tlg_it_item  i
    WHERE i.del_if = 0 AND i.pk = p_lit_item_pk;

   RETURN l_item_code;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END lf_get_item_code;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LF_GET_PROCESS_PRICE;

CREATE OR REPLACE FUNCTION HPDQ.lf_get_process_price (
   p_partner_pk   NUMBER,
   p_style_pk     NUMBER,
   p_spec01_pk    NUMBER,
   p_spec02_pk    NUMBER,
   p_spec03_pk    NUMBER,
   p_spec04_pk    NUMBER,
   p_spec05_pk    NUMBER
)
   RETURN NUMBER
IS
   l_numofspec   NUMBER;
/******************************************************************************
******************************************************************************/
   l_price       NUMBER  := 0;
   l_valid       BOOLEAN := TRUE;
   l_count       NUMBER  := 0;
BEGIN
   FOR l_price_m IN (SELECT m.pk, NVL (m.specgrp01_pk, 0) specgrp01_pk,
                            NVL (m.specgrp02_pk, 0) specgrp02_pk,
                            NVL (m.specgrp03_pk, 0) specgrp03_pk,
                            NVL (m.specgrp04_pk, 0) specgrp04_pk,
                            NVL (m.specgrp05_pk, 0) specgrp05_pk, m.st_price,
                            m.partner_chk, m.item_chk
                       FROM lco_process_price_m m
                      WHERE m.del_if = 0 AND m.use_yn = 'Y')
   LOOP
      l_valid := TRUE;

      /*----------count spec-------------*/
      FOR l_price_d IN (SELECT d.lit_stitem_pk, d.tco_buspartner_pk,
                               d.spec01_pk, d.spec02_pk, d.spec03_pk,
                               d.spec04_pk, d.spec05_pk, d.process_fee
                          FROM lco_process_price_d d
                         WHERE d.del_if = 0
                           AND d.use_yn = 'Y'
                           AND d.lco_process_price_m_pk = l_price_m.pk)
      LOOP
         /*----------count spec-------------*/
         l_numofspec := 0;

         IF l_price_d.spec01_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec02_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec03_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec04_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec05_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         /*------------partner --------------*/
         IF l_price_m.partner_chk = 'Y'
         THEN
            IF NVL (l_price_d.tco_buspartner_pk, 0) = NVL (p_partner_pk, 0)
            THEN
               l_valid := TRUE;
            ELSE
               l_valid := FALSE;
            END IF;
         ELSE
            l_valid := TRUE;
         END IF;

         /*style*/
         IF l_price_m.item_chk = 'Y'
         THEN
            IF NVL (l_price_d.lit_stitem_pk, 0) = NVL (p_style_pk, 0)
            THEN
               l_valid := l_valid AND TRUE;
            ELSE
               l_valid := FALSE;
            END IF;
         ELSE
            l_valid := l_valid AND TRUE;
         END IF;

         /*spec*/
         SELECT COUNT (*)
           INTO l_count
           FROM (SELECT p_spec01_pk spec
                   FROM DUAL
                  WHERE p_spec01_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec02_pk spec
                   FROM DUAL
                  WHERE p_spec02_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec03_pk spec
                   FROM DUAL
                  WHERE p_spec03_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec04_pk spec
                   FROM DUAL
                  WHERE p_spec04_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec05_pk spec
                   FROM DUAL
                  WHERE p_spec05_pk IS NOT NULL) in_data
          WHERE in_data.spec IN
                   (l_price_d.spec01_pk,
                    l_price_d.spec02_pk,
                    l_price_d.spec03_pk,
                    l_price_d.spec04_pk,
                    l_price_d.spec05_pk
                   );

         IF l_count = l_numofspec
         THEN
            l_valid := l_valid AND TRUE;
         ELSE
            l_valid := FALSE;
         END IF;

         IF l_valid = TRUE
         THEN
            l_price := l_price + NVL (l_price_d.process_fee, 0);
            EXIT;
         END IF;
      END LOOP;

      IF l_valid = FALSE
      THEN
         l_price := l_price + NVL (l_price_m.st_price, 0);
      END IF;
   END LOOP;

   RETURN l_price;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lf_get_process_price;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LF_LOGISTIC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.lf_logistic_code (v_grp in VARCHAR2)
   return VARCHAR2
is
   lsvreturn   VARCHAR2 (5000) := '';
--------
begin
--------
   for cur in (select   code, (code || ' ' || code_nm) code_nm
                   from tlg_lg_code a, tlg_lg_code_group b
                  where a.tlg_lg_code_group_pk = b.pk
                    and b.group_id = v_grp
                    and a.use_if = 'Y'
                    and a.del_if = 0
                    and b.del_if = 0
               order by a.def_yn DESC, ord)
   loop
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   end loop;

   return lsvreturn;
exception
   when OTHERS
   then
      return sqlerrm;
end lf_logistic_code;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LF_MEASURE_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.lf_measure_convert (
   p_lit_item_pk   IN   NUMBER,
   p_uom_code      IN   VARCHAR2
)
   RETURN NUMBER
IS
   l_tran_rate   NUMBER;
BEGIN
   SELECT MAX (b.tran_rate)
     INTO l_tran_rate
     FROM lit_uom a, lit_measure b, lit_itemmeasure c, lit_item d
    WHERE a.del_if = 0
      AND a.uom_code = p_uom_code
      AND b.del_if = 0
      AND a.pk = b.lit_uom_pk
      AND c.del_if = 0
      AND b.pk = c.lit_measure_pk
      AND d.del_if = 0
      AND c.lit_item_pk = d.pk
      AND b.tranuom_code = d.uom
      AND d.pk = p_lit_item_pk;

   IF (l_tran_rate = 0 OR l_tran_rate IS NULL)
   THEN
      SELECT MAX (b.tran_rate)
        INTO l_tran_rate
        FROM lit_uom a, lit_measure b, lit_itemmeasure c, lit_item d
       WHERE a.del_if = 0
         AND a.uom_code = p_uom_code
         AND b.del_if = 0
         AND a.pk = b.lit_uom_pk
         AND c.del_if = 0
         AND b.pk = c.lit_measure_pk
         AND d.del_if = 0
         AND c.lit_stitem_pk = d.lit_stitem_pk
         AND b.tranuom_code = d.uom
         AND d.pk = p_lit_item_pk;

      IF (l_tran_rate = 0 OR l_tran_rate IS NULL)
      THEN
         SELECT MAX (b.tran_rate)
           INTO l_tran_rate
           FROM lit_uom a, lit_measure b, lit_item d
          WHERE a.del_if = 0
            AND a.uom_code = p_uom_code
            AND b.del_if = 0
            AND a.pk = b.lit_uom_pk
            AND d.del_if = 0
            AND b.tranuom_code = d.uom
            AND d.pk = p_lit_item_pk
            AND b.default_yn = 'Y';

         IF (l_tran_rate = 0 OR l_tran_rate IS NULL)
         THEN
            l_tran_rate := 1;
         END IF;
      END IF;
   END IF;

   RETURN l_tran_rate;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lf_measure_convert;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_90100020_ESTIMATION;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_90100020_estimation (  p_teb_est_mst_pk   varchar)
    return   varchar                                                            
is
 
   /******************************************************************************
      NAME:       lg_sel_teb_est_mst
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        05/04/2013   Pham Duy Tan       1. Created this procedure.

   ******************************************************************************/
   l_count_pk_mst  number;
   l_count_est  number;
begin

   
      select count(TEB_EST_MST_PK),sum(decode(ESTIMATION_YN,'Y',1,0))  into l_count_pk_mst, 
             l_count_est
             
        from TEB_EST_SHORTLIST 
        where del_if=0 and TEB_EST_MST_PK= p_teb_est_mst_pk;
        
     return   l_count_est||'/'||l_count_pk_mst;
  exception
   when others then 
        raise;
end lg_f_90100020_estimation;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_90100020_VIEW;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_90100020_view (  p_teb_est_mst_pk   varchar)
    return   varchar                                                            
is
 
   /******************************************************************************
      NAME:       lg_sel_teb_est_mst
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        05/04/2013   Pham Duy Tan       1. Created this procedure.

   ******************************************************************************/
   l_count_pk_mst  number;
   l_count_view  number;
begin

   
      select count(TEB_EST_MST_PK),sum(decode(VIEW_YN,'Y',1,0))  into l_count_pk_mst, 
             l_count_view
             
        from TEB_EST_SHORTLIST 
        where del_if=0 and TEB_EST_MST_PK= p_teb_est_mst_pk;
        
     return   l_count_view||'/'||l_count_pk_mst;
  exception
   when others then 
        raise;
end lg_f_90100020_view;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_ECUS_TCVN2UNICODE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_ecus_TCVN2Unicode(
arg_StrInput varchar2
) RETURN varchar2 IS
/******************************************************************************
   NAME:       lg_f_ecus_TCVN2Unicode
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04/05/2013   ntxuan       1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     lg_f_ecus_TCVN2Unicode
      Sysdate:         04/05/2013
      Date and Time:   04/05/2013, 1:08:28 PM, and 04/05/2013 1:08:28 PM
      Username:        ntxuan (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
l_TCVN  varchar2(671);
l_UNICODE varchar2(671);

l_strOutput varchar2(4000);
l_COUNTER number;
l_POSITION number;

BEGIN
    l_TCVN := ',184 ,181 ,182 ,183 ,185 ,168 ,190 ,187 ,188 ,189 ,198 ,169 ,202 ,199 ,200 ,201 ,203 ,208 ,204 ,206 ,207 ,209 ,170 ,213 ,210 ,211 ,212 ,214 ,221 ,215 ,216 ,220 ,222 ,227 ,223 ,225 ,226 ,228 ,171 ,232 ,229 ,230 ,231 ,233 ,172 ,237 ,234 ,235 ,236 ,238 ,243 ,239 ,241 ,242 ,244 ,173 ,248 ,245 ,246 ,247 ,249 ,253 ,250 ,251 ,252 ,254 ,174 ,184 ,181 ,182 ,183 ,185 ,161 ,190 ,187 ,188 ,189 ,198 ,162 ,202 ,199 ,200 ,201 ,203 ,208 ,204 ,206 ,207 ,209 ,163 ,213 ,210 ,211 ,212 ,214 ,221 ,215 ,216 ,220 ,222 ,227 ,223 ,225 ,226 ,228 ,164 ,232 ,229 ,230 ,231 ,233 ,165 ,237 ,234 ,235 ,236 ,238 ,243 ,239 ,241 ,242 ,244 ,166 ,248 ,245 ,246 ,247 ,249 ,253 ,250 ,251 ,252 ,254 ,167 ,';
    l_UNICODE := ',225 ,224 ,7843,227 ,7841,259 ,7855,7857,7859,7861,7863,226 ,7845,7847,7849,7851,7853,233 ,232 ,7867,7869,7865,234 ,7871,7873,7875,7877,7879,237 ,236 ,7881,297 ,7883,243 ,242 ,7887,245 ,7885,244 ,7889,7891,7893,7895,7897,417 ,7899,7901,7903,7905,7907,250 ,249 ,7911,361 ,7909,432 ,7913,7915,7917,7919,7921,253 ,7923,7927,7929,7925,273 ,193 ,192 ,7842,195 ,7840,258 ,7854,7856,7858,7860,7862,194 ,7844,7846,7848,7850,7852,201 ,200 ,7866,7868,7864,202 ,7870,7872,7874,7876,7878,205 ,204 ,7880,296 ,7882,211 ,210 ,7886,213 ,7884,212 ,7888,7890,7892,7894,7896,416 ,7898,7900,7902,7904,7906,218 ,217 ,7910,360 ,7908,431 ,7912,7914,7916,7918,7920,221 ,7922,7926,7928,7924,272 ,';
    
    if arg_StrInput is null then
        return null;
    end if;
    
    if arg_StrInput = '' or arg_StrInput = ' ' then
        return null;
    end if;
    
    l_COUNTER := 1;
    l_strOutput := ' ';
    
    WHILE l_COUNTER <= LENGTH(arg_StrInput)
    loop
        select instr(','||to_char(ASCII(substr(arg_StrInput, l_COUNTER, 1)))||',', l_TCVN,1)
        into l_POSITION
        from dual;
        
        if l_POSITION > 0 then
            l_strOutput := l_strOutput + VARCHAR2(to_number(substr(l_UNICODE, l_POSITION+1, 4)));
        ELSE
            l_strOutput := l_strOutput + substr(arg_StrInput, l_COUNTER, 1);
            end if;
        l_COUNTER := l_COUNTER + 1;
    END loop; 
    
    RETURN l_strOutput;
    
  
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END lg_f_ecus_TCVN2Unicode;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_FPPR00313;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_fppr00313 (
   p_prod_date         IN VARCHAR2,
   p_work_shift        IN VARCHAR2,
   p_tlg_pb_line_pk    IN NUMBER,
   p_work_process_pk   IN NUMBER,
   p_item_pk           IN NUMBER)
   RETURN VARCHAR2
IS
   l_charger   VARCHAR (200);
   l_comma     VARCHAR2 (3);
BEGIN
   FOR l_cur
      IN (  SELECT b.emp_id, b.full_name
              FROM tlg_pr_prod_income_emp a, thr_employee b
             WHERE     a.del_if = 0
                   AND a.prod_date = p_prod_date
                   AND a.work_shift = p_work_shift
                   AND a.tlg_pb_line_pk = p_tlg_pb_line_pk
                   AND NVL (a.TLG_PB_WORK_PROCESS_PK, 0) =
                          NVL (p_work_process_pk, 0)
                   AND a.tlg_it_item_pk = p_item_pk
                   AND b.del_if(+) = 0
                   AND a.charger_pk = b.pk(+)
          ORDER BY a.seq)
   LOOP
      l_charger := l_charger || l_comma || l_cur.full_name;

      l_comma := ' ; ';
   END LOOP;

   RETURN l_charger;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_fppr00313;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GETTIME;

CREATE OR REPLACE FUNCTION HPDQ.LG_F_GETTIME(
  p_from_hour   IN  varchar2, --'YYYYMMDDHH24:MI'
  p_to_hour   IN  varchar2
  ) return varchar IS --dd:hh:mm 
  l_temp varchar2(100);
  l_remember number :=0;
  l_number  number;
  l_numday  number;
  l_day_f varchar(8);
  l_day_t varchar(8);
  l_hh_f varchar(2);  
  l_hh_t varchar(2);
  l_mm_f varchar(2);  
  l_mm_t varchar(2);
BEGIN
   if TO_DATE (p_to_hour, 'YYYYMMDDHH24:MI')
                  > TO_DATE (p_from_hour, 'YYYYMMDDHH24:MI')
                  then
                        select 
                            substr(p_from_hour,1,8),
                            substr(p_to_hour,1,8),
                            substr(p_from_hour,9,2),
                            substr(p_to_hour,9,2),
                            substr(p_from_hour,12,2),
                            substr(p_to_hour,12,2)
                        into 
                          l_day_f,
                          l_day_t,
                          l_hh_f ,  
                          l_hh_t ,
                          l_mm_f , 
                          l_mm_t 
                        from dual;
                        
                      select to_Date(l_day_t,'yyyymmdd') - to_Date(l_day_f,'yyyymmdd')   into  l_numday from dual;
                        
                        if l_mm_t < l_mm_f then
                           l_number := 60 +  to_number(l_mm_t) - to_number(l_mm_f) ;
                           l_remember :=1;
                            l_temp := lpad(l_number,2,'0');
                        else
                           l_number := to_number(l_mm_t) - to_number(l_mm_f) ;
                           l_remember :=0;
                            l_temp := lpad(l_number,2,'0');
                        end if;
                        
                         if l_hh_t < l_hh_f then
                           l_number := 24 +  to_number( l_hh_t) - to_number(l_hh_f)  - l_remember;
                           l_remember :=1;                           
                        else
                           l_number := to_number( l_hh_t) - to_number(l_hh_f)  - l_remember;
                           l_remember :=0;                                                   
                        end if;                          
                          l_numday := l_numday - l_remember  ;               
                         l_temp := ((l_numday * 24 ) + l_number)||':'|| l_temp; 
                        
                    return l_temp;    
                  else
                    return null;
                  end if;
    
   EXCEPTION
     WHEN OTHERS THEN
           return null;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_AGCI00091;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_agci00091 (
   p_tco_stitem_pk    NUMBER,
   p_tco_spec_pk_01   NUMBER,
   p_tco_spec_pk_02   NUMBER,
   p_tco_spec_pk_03   NUMBER,
   p_tco_spec_pk_04   NUMBER,
   p_tco_spec_pk_05   NUMBER,
   p_tco_spec_pk_06   NUMBER,
   p_tco_spec_pk_07   NUMBER,
   p_tco_spec_pk_08   NUMBER,
   p_tco_spec_pk_09   NUMBER,
   p_tco_spec_pk_10   NUMBER,
   p_tco_spec_pk_11   NUMBER,
   p_tco_spec_pk_12   NUMBER,
   p_tco_spec_pk_13   NUMBER,
   p_tco_spec_pk_14   NUMBER,
   p_tco_spec_pk_15   NUMBER,
   p_tco_spec_pk_16   NUMBER,
   p_tco_spec_pk_17   NUMBER,
   p_tco_spec_pk_18   NUMBER,
   p_tco_spec_pk_19   NUMBER,
   p_tco_spec_pk_20   NUMBER
)
   RETURN NUMBER
IS
   l_status        VARCHAR2 (100);
--------------------------
   l_rtn_item_pk   NUMBER;
--------------------------
   l_count         NUMBER         := 0;
--------------------------
BEGIN
--------------------------------------------------------------
   IF p_tco_spec_pk_01 IS NOT NULL AND p_tco_spec_pk_01 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_02 IS NOT NULL AND p_tco_spec_pk_02 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_03 IS NOT NULL AND p_tco_spec_pk_03 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_04 IS NOT NULL AND p_tco_spec_pk_04 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_05 IS NOT NULL AND p_tco_spec_pk_05 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_06 IS NOT NULL AND p_tco_spec_pk_06 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_07 IS NOT NULL AND p_tco_spec_pk_07 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_08 IS NOT NULL AND p_tco_spec_pk_08 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_09 IS NOT NULL AND p_tco_spec_pk_09 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_10 IS NOT NULL AND p_tco_spec_pk_10 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_11 IS NOT NULL AND p_tco_spec_pk_11 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_12 IS NOT NULL AND p_tco_spec_pk_12 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_13 IS NOT NULL AND p_tco_spec_pk_13 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_14 IS NOT NULL AND p_tco_spec_pk_14 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_15 IS NOT NULL AND p_tco_spec_pk_15 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_16 IS NOT NULL AND p_tco_spec_pk_16 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_17 IS NOT NULL AND p_tco_spec_pk_17 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_18 IS NOT NULL AND p_tco_spec_pk_18 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_19 IS NOT NULL AND p_tco_spec_pk_19 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_20 IS NOT NULL AND p_tco_spec_pk_20 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

----------------------------------------------------------------------
   IF l_count = 0
   THEN
      IF l_rtn_item_pk IS NULL OR l_rtn_item_pk = 0
      THEN
         SELECT COUNT (gr.pk)
           INTO l_count
           FROM tlg_it_stitem st, tlg_it_grpspecgrp gr
          WHERE st.del_if = 0
            AND gr.del_if = 0
            AND st.tlg_it_itemgrp_pk = gr.tlg_it_itemgrp_pk
            AND st.pk = p_tco_stitem_pk;

         IF l_count = 0
         THEN
            SELECT MAX (a.pk)
              INTO l_rtn_item_pk
              FROM tlg_it_item a
             WHERE a.del_if = 0 AND a.tlg_it_stitem_pk = p_tco_stitem_pk;
         END IF;
      END IF;

      RETURN l_rtn_item_pk;
   END IF;

   l_status := 'Select item error !!!';

----------------------------------------------------------------------
   SELECT MAX (tlg_it_item_pk)
     INTO l_rtn_item_pk
     FROM (SELECT   a.tlg_it_item_pk
               FROM tlg_it_itemspec a, tlg_it_item b
              WHERE a.del_if = 0
                AND a.tlg_it_spec_pk IN
                       (NVL (p_tco_spec_pk_01, 0),
                        NVL (p_tco_spec_pk_02, 0),
                        NVL (p_tco_spec_pk_03, 0),
                        NVL (p_tco_spec_pk_04, 0),
                        NVL (p_tco_spec_pk_05, 0),
                        NVL (p_tco_spec_pk_06, 0),
                        NVL (p_tco_spec_pk_07, 0),
                        NVL (p_tco_spec_pk_08, 0),
                        NVL (p_tco_spec_pk_09, 0),
                        NVL (p_tco_spec_pk_10, 0),
                        NVL (p_tco_spec_pk_11, 0),
                        NVL (p_tco_spec_pk_12, 0),
                        NVL (p_tco_spec_pk_13, 0),
                        NVL (p_tco_spec_pk_14, 0),
                        NVL (p_tco_spec_pk_15, 0),
                        NVL (p_tco_spec_pk_16, 0),
                        NVL (p_tco_spec_pk_17, 0),
                        NVL (p_tco_spec_pk_18, 0),
                        NVL (p_tco_spec_pk_19, 0),
                        NVL (p_tco_spec_pk_20, 0)
                       )
                AND a.tlg_it_item_pk NOT IN (
                       SELECT DISTINCT tlg_it_item_pk
                                  FROM tlg_it_itemspec c
                                 WHERE c.del_if = 0
                                   AND c.tlg_it_spec_pk NOT IN
                                          (NVL (p_tco_spec_pk_01, 0),
                                           NVL (p_tco_spec_pk_02, 0),
                                           NVL (p_tco_spec_pk_03, 0),
                                           NVL (p_tco_spec_pk_04, 0),
                                           NVL (p_tco_spec_pk_05, 0),
                                           NVL (p_tco_spec_pk_06, 0),
                                           NVL (p_tco_spec_pk_07, 0),
                                           NVL (p_tco_spec_pk_08, 0),
                                           NVL (p_tco_spec_pk_09, 0),
                                           NVL (p_tco_spec_pk_10, 0),
                                           NVL (p_tco_spec_pk_11, 0),
                                           NVL (p_tco_spec_pk_12, 0),
                                           NVL (p_tco_spec_pk_13, 0),
                                           NVL (p_tco_spec_pk_14, 0),
                                           NVL (p_tco_spec_pk_15, 0),
                                           NVL (p_tco_spec_pk_16, 0),
                                           NVL (p_tco_spec_pk_17, 0),
                                           NVL (p_tco_spec_pk_18, 0),
                                           NVL (p_tco_spec_pk_19, 0),
                                           NVL (p_tco_spec_pk_20, 0)
                                          ))
                AND b.del_if = 0
                AND a.tlg_it_item_pk = b.pk
                AND b.tlg_it_stitem_pk = p_tco_stitem_pk
           GROUP BY a.tlg_it_item_pk
             HAVING COUNT (*) = l_count);

-------------------------------------------------------------------------
   RETURN NVL (l_rtn_item_pk, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_agci00091;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_AGCI00100;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_agci00100 (
   p_tco_itemgrp_pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_check            NUMBER;
--------------------------------
   l_itemseq_length   NUMBER;
   l_item_seq         NUMBER;
   l_item_code        VARCHAR2 (50);
--------------------------------
BEGIN
   SELECT MAX (itemseq_length)
     INTO l_itemseq_length
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF l_itemseq_length > 0
   THEN
      SELECT MAX (item_seq)
        INTO l_item_seq
        FROM tlg_it_item
       WHERE del_if = 0
         AND tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND tlg_it_stitem_pk = p_tco_stitem_pk
         AND item_code LIKE UPPER (p_item_code) || '%';

      IF TO_NUMBER (l_item_seq) >=
                     TO_NUMBER (LPAD (' ', NVL (l_itemseq_length, 0) + 1, '9'))
      THEN
         raise_application_error (-20999,
                                  'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                                 );
      END IF;

      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                  UPPER (p_item_code)
                  || LPAD (l_item_seq, l_itemseq_length, 0);
   ELSE
      l_item_code := p_item_code;
   END IF;

   SELECT MAX (pk)
     INTO l_check
     FROM tlg_it_item
    WHERE del_if = 0 AND item_code = UPPER (l_item_code);

   WHILE (l_check > 0 AND NVL (l_item_seq, 0) < 10000)
   LOOP
      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                 UPPER (p_item_code)
                 || LPAD (l_item_seq, l_itemseq_length, 0);

      SELECT MAX (pk)
        INTO l_check
        FROM tlg_it_item
       WHERE del_if = 0 AND item_code = UPPER (l_item_code);
   END LOOP;

-------------------------------------
   RETURN l_item_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_agci00100;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_AGCI00110;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_agci00110 (
   p_tco_itemgrp_pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_agci00110;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_AGCI00150;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_agci00150 (
   p_tco_itemgrp_pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_agci00150;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_AGCI00190;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_agci00190 (p_it_itemcombine_m_pk NUMBER)
   RETURN VARCHAR2
IS
   l_detail    VARCHAR2 (500) := '';
   l_connect   VARCHAR2 (3);
/*--------

*/
BEGIN
   FOR l_cur IN (SELECT DISTINCT description
                            FROM tlg_it_itemcombine_d a
                           WHERE del_if = 0
                             AND tlg_it_itemcombine_m_pk =
                                                         p_it_itemcombine_m_pk)
   LOOP
      l_detail := l_detail || l_connect || l_cur.description;
      l_connect := ' ; ';
   END LOOP;

   RETURN l_detail;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_agci00190;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_BEGIN_STOCK;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_begin_stock (
   p_tco_item_pk        VARCHAR,
   p_stock_date         VARCHAR,
   p_tin_warehouse_pk   VARCHAR,
   p_wh_type            VARCHAR
)
   RETURN NUMBER
IS
   tmpvar   NUMBER;
/******************************************************************************
******************************************************************************/
BEGIN
   tmpvar := 0;

   SELECT (NVL (a2.begin_qty, 0) + NVL (a2.in_qty, 0) - NVL (a2.out_qty, 0))
                                                                    begin_qty
     INTO tmpvar
     FROM (SELECT   tlg_it_item_pk, SUM (begin_qty) begin_qty,
                    SUM (in_qty) in_qty, SUM (out_qty) out_qty
               FROM (SELECT a.tlg_in_warehouse_pk, b.tlg_it_item_pk,
                            b.end_qty begin_qty, NULL in_qty, NULL out_qty
                       FROM tlg_sa_stock_closing_m a,
                            tlg_sa_stock_closing_d b,
                            tlg_in_warehouse wh
                      WHERE a.del_if = 0
                        AND wh.del_if = 0
                        AND wh.pk = a.tlg_in_warehouse_pk
                        AND b.tlg_it_item_pk = p_tco_item_pk
                        AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                             OR p_tin_warehouse_pk IS NULL
                            )
                        AND (wh.wh_type = p_wh_type OR p_wh_type IS NULL)
                        AND (a.tlg_in_warehouse_pk, a.stock_date) IN (
                               SELECT   b.tlg_in_warehouse_pk,
                                        MAX (b.stock_date)
                                   FROM tlg_sa_stock_closing_m b
                                  WHERE b.del_if = 0
                                    AND b.stock_date < p_stock_date
                                    AND b.tlg_in_warehouse_pk =
                                                         a.tlg_in_warehouse_pk
                               GROUP BY b.tlg_in_warehouse_pk)
                        AND b.del_if = 0
                        AND a.pk = b.tlg_sa_stock_closing_m_pk
                     UNION ALL
                     SELECT a.tlg_in_warehouse_pk, a.tlg_it_item_pk,
                            NULL begin_qty, a.input_qty in_qty,
                            a.output_qty out_qty
                       FROM tlg_in_stocktr a, tlg_in_warehouse wh
                      WHERE a.del_if = 0
                        AND wh.del_if = 0
                        AND wh.pk = a.tlg_in_warehouse_pk
                        AND a.tlg_it_item_pk = p_tco_item_pk
                        AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                             OR p_tin_warehouse_pk IS NULL
                            )
                        AND (wh.wh_type = p_wh_type OR p_wh_type IS NULL)
                        AND a.tr_date >
                               NVL ((SELECT MAX (b.stock_date)
                                       FROM tlg_sa_stock_closing_m b
                                      WHERE b.del_if = 0
                                        AND b.stock_date < p_stock_date
                                        AND b.tlg_in_warehouse_pk =
                                                         a.tlg_in_warehouse_pk),
                                    '0'
                                   )
                        AND a.tr_date < p_stock_date)
           GROUP BY tlg_it_item_pk) a2;

   RETURN tmpvar;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN 0;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN 0;
END lg_f_get_begin_stock;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_BUSPARTNER_ID;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_buspartner_id (
   p_tco_buspartner_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   partner_id   tco_buspartner.partner_id%TYPE   := '';
BEGIN
   SELECT a.partner_id
     INTO partner_id
     FROM tco_buspartner a
    WHERE a.pk = p_tco_buspartner_pk;

   RETURN partner_id;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN ' ';
   WHEN OTHERS
   THEN
      RETURN ' ';
END lg_f_get_buspartner_id;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_BUSPARTNER_LOC_NM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_buspartner_loc_nm (
   p_tco_partnerloc_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_loc_nm   tco_partnerloc.loc_nm%TYPE   := '';
BEGIN
   SELECT a.loc_nm
     INTO l_loc_nm
     FROM tco_partnerloc a
    WHERE a.pk = p_tco_partnerloc_pk;

   RETURN l_loc_nm;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_buspartner_loc_nm;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_BUSPARTNER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_buspartner_name (
   p_tco_buspartner_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   partner_name   tco_buspartner.partner_name%TYPE   := '';
BEGIN
   SELECT a.partner_name
     INTO partner_name
     FROM tco_buspartner a
    WHERE a.pk = p_tco_buspartner_pk;

   RETURN partner_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN ' ';
   WHEN OTHERS
   THEN
      RETURN ' ';
END lg_f_get_buspartner_name;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_CURRENT_STOCK;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_current_stock (
   p_tco_item_pk        NUMBER,
   p_tin_warehouse_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_rtn_value   NUMBER;
BEGIN
   SELECT SUM (stock_qty)
     INTO l_rtn_value
     FROM vlg_in_sumcurstock
    WHERE tlg_it_item_pk = p_tco_item_pk
      AND (   tlg_in_warehouse_pk = p_tin_warehouse_pk
           OR p_tin_warehouse_pk IS NULL
          );

   RETURN NVL (l_rtn_value, 0);
END lg_f_get_current_stock;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_DOMESTIC_PORT;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_domestic_port (p_code IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
   l_rtn_value := '';
  SELECT    (code || ' ' || code_nm) into l_rtn_value
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = 'LGCM0230'--domestic_port 'LGCM0230'
                    and code=p_code
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0;
   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_DSEP00070_1;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_dsep00070_1 (
   p_pa_packing_wi_pk           NUMBER,
   p_pack_type             IN   VARCHAR2,
   p_pa_packages_type_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_array_packages   VARCHAR2 (200) := '';
   l_cur_num          NUMBER         := -1;
/*--------

*/
BEGIN
   FOR l_cur IN (SELECT DISTINCT a.package_seq
                            FROM tlg_pa_packages a
                           WHERE del_if = 0
                             AND tlg_pa_packing_wi_pk = p_pa_packing_wi_pk
                             AND pack_type = p_pack_type
                             AND tlg_pa_packages_type_pk =
                                                         p_pa_packages_type_pk
                        ORDER BY a.package_seq)
   LOOP
      IF l_cur_num + 1 = l_cur.package_seq
      THEN
         l_cur_num := l_cur.package_seq;
      ELSE
         IF LENGTH (l_array_packages) <> 0
         THEN
            l_array_packages :=
                  l_array_packages
               || '-->'
               || l_cur_num
               || ' ; '
               || l_cur.package_seq;
         ELSE
            l_array_packages := l_cur.package_seq;
         END IF;

         l_cur_num := l_cur.package_seq;
      END IF;
   END LOOP;

   l_array_packages := l_array_packages || '-->' || l_cur_num;
   RETURN l_array_packages;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_dsep00070_1;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_DSMT00100_INCENT_RATE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_dsmt00100_incent_rate (
   p_partner_pk    VARCHAR2,
   p_emp_pk        NUMBER,
   p_itemgrp_pk    NUMBER,
   p_item_pk       NUMBER,
   p_sale_amount   NUMBER,
   p_date          VARCHAR2
)
   RETURN NUMBER
IS
   l_incent_rate   NUMBER;
BEGIN
   SELECT MAX (d.incen_rate)
     INTO l_incent_rate
     FROM tlg_mt_incen_rule_m m, tlg_mt_incen_rule_d d
    WHERE m.del_if = 0
      AND d.del_if = 0
      AND m.status = 3
      AND m.pk = d.tlg_mt_incen_rule_m_pk
      AND p_date BETWEEN m.valid_fr_date AND m.valid_to_date
      AND (   (SELECT     NVL (COUNT (a.pk), 0)
                     FROM tlg_mt_division a, tlg_mt_div_partner b
                    WHERE a.del_if = 0
                      AND b.del_if(+) = 0
                      AND b.tco_buspartner_pk(+) = p_partner_pk
                      AND a.pk = b.tlg_division_pk(+)
               START WITH a.pk = m.tlg_mt_division_pk
               CONNECT BY PRIOR a.pk = a.parent_pk) > 0
           OR (SELECT     NVL (COUNT (a.pk), 0)
                     FROM tlg_mt_pa_group a, tlg_mt_group_partner b
                    WHERE a.del_if = 0
                      AND b.del_if(+) = 0
                      AND b.tco_buspartner_pk(+) = p_partner_pk
                      AND a.pk = b.tlg_mt_pa_group_pk(+)
               START WITH a.pk = m.tlg_mt_pa_group_pk
               CONNECT BY PRIOR a.pk = a.parent_pk) > 0
           OR (   m.tco_buspartner_pk = p_partner_pk
               OR m.tco_buspartner_pk IS NULL
              )
           OR (    m.tlg_mt_division_pk IS NULL
               AND m.tlg_mt_pa_group_pk IS NULL
               AND m.tco_buspartner_pk IS NULL
              )
          )
      AND (d.tlg_it_itemgrp_pk = p_itemgrp_pk OR d.tlg_it_itemgrp_pk IS NULL
          )
      AND (d.tlg_it_item_pk = p_item_pk OR d.tlg_it_item_pk IS NULL)
      AND (m.sale_emp_pk = p_emp_pk OR m.sale_emp_pk IS NULL)
      AND (p_sale_amount >= d.sale_amount OR NVL (d.sale_amount, 0) = 0);

   RETURN l_incent_rate;
END lg_f_get_dsmt00100_incent_rate;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_DSOS00030_STYLE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_dsos00030_style (p_array_so_pk VARCHAR2)
   RETURN VARCHAR2
IS
   l_style       VARCHAR2 (1000);
   l_connect     VARCHAR2 (1);
   l_item_name   VARCHAR (200);
   l_rtn_cur     SYS_REFCURSOR;
   l_sql         VARCHAR2 (4000);
/******************************************************************************
 ******************************************************************************/
BEGIN
   l_sql :=
         'SELECT  distinct   c.item_name   from  vlg_sa_SALE_ORDER a, tlg_it_item b , tlg_it_stitem c
         where  b.del_if(+) = 0 and a.tlg_it_item_pk = b.pk(+) and c.del_if(+) = 0 and b.tlg_it_stitem_pk = c.pk(+) and
         a.tlg_sa_saleorder_m_pk in ('
      || NVL (substr (p_array_so_pk, 2, LENGTH (p_array_so_pk - 1)), 0)
      || ')   ';

   OPEN l_rtn_cur FOR l_sql;

   LOOP
      FETCH l_rtn_cur INTO l_item_name;

      l_style := l_style || l_connect || l_item_name;
      l_connect := ',';
   END LOOP;

   RETURN l_style;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_f_get_dsos00030_style;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_EX_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_ex_item (
   p_out_item_pk        VARCHAR,
   p_from_date          VARCHAR,
   p_to_date            VARCHAR,
   p_tin_warehouse_pk   VARCHAR
)
   RETURN VARCHAR
IS
   l_return   VARCHAR (1000);
   l_count    NUMBER         := 1;
/******************************************************************************
******************************************************************************/
BEGIN
   FOR l_cur IN (SELECT DISTINCT i.item_code
                            FROM tlg_st_exchange_m m,
                                 tlg_st_exchange_d d,
                                 tlg_it_item i
                           WHERE m.del_if = 0
                             AND d.del_if = 0
                             AND i.del_if = 0
                             AND i.pk = d.ex_item_pk
                             AND d.out_item_pk = p_out_item_pk
                             AND m.pk = d.tlg_st_exchange_m_pk
                             AND (   p_tin_warehouse_pk = m.ex_wh_pk
                                  OR p_tin_warehouse_pk IS NULL
                                 )
                             AND m.ex_date BETWEEN p_from_date AND p_to_date
                             AND m.status = '30')
   LOOP
      IF l_count = 1
      THEN
         l_return := l_cur.item_code;
      ELSE
         l_return := l_return || ',' || l_cur.item_code;
      END IF;

      l_count := l_count + 1;
   END LOOP;

   RETURN l_return;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END lg_f_get_ex_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FORMAT;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_format (p_value IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_mask   VARCHAR (50);
--------
BEGIN
   CASE p_value
      WHEN '-2'
      THEN
         l_mask := '###,###,###,#00';
      WHEN '-1'
      THEN
         l_mask := '###,###,###,##0';
      WHEN '0'
      THEN
         l_mask := '###,###,###,###';
      WHEN '1'
      THEN
         l_mask := '###,###,###,##0.#';
      WHEN '2'
      THEN
         l_mask := '###,###,###,##0.##';
      WHEN '3'
      THEN
         l_mask := '###,###,###,##0.###';
      WHEN '4'
      THEN
         l_mask := '###,###,###,##0.####';
      WHEN '5'
      THEN
         l_mask := '###,###,###,##0.#####';
      WHEN '6'
      THEN
         l_mask := '###,###,###,##0.######';
      WHEN '7'
      THEN
         l_mask := '###,###,###,##0.#######';
      WHEN '8'
      THEN
         l_mask := '###,###,###,##0.########';
      WHEN '9'
      THEN
         l_mask := '###,###,###,##0.#########';
      WHEN '10'
      THEN
         l_mask := '###,###,###,##0.##########';
      WHEN '11'
      THEN
         l_mask := '###,###,###,##0.###########';
      WHEN '12'
      THEN
         l_mask := '###,###,###,##0.############';
   END CASE;

   RETURN l_mask;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_f_get_format;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FPFO00040;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_fpfo00040 (p_qc_outgo_d_pk NUMBER)
   RETURN VARCHAR2
IS
/******************************************************************************
 ******************************************************************************/
   l_defect   VARCHAR2 (1000);
BEGIN
   FOR l_cur IN (SELECT b.defect_name
                   FROM tlg_qc_outgo_def a, tlg_qc_defect b
                  WHERE a.del_if = 0
                    AND b.del_if = 0
                    AND a.tlg_qc_defect_pk = b.pk
                    AND a.tlg_qc_outgo_d_pk = p_qc_outgo_d_pk)
   LOOP
      l_defect := l_defect || '-' || l_cur.defect_name;
   END LOOP;

   RETURN l_defect;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '-';
END lg_f_get_fpfo00040;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FPPR00220;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_fppr00220 (
   p_os_type                VARCHAR2,
   p_partner_pk             NUMBER,
   p_style_pk               NUMBER,
   p_pt_component_pk   IN   NUMBER
)
   RETURN NUMBER
IS
   l_unit_price   NUMBER;
--------
BEGIN
   SELECT MAX (a.unit_price)
     INTO l_unit_price
     FROM tlg_pr_os_price a
    WHERE (a.os_type = p_os_type OR a.os_type IS NULL)
      AND (a.partner_pk = p_partner_pk OR a.partner_pk IS NULL)
      AND (a.style_pk = p_style_pk OR a.style_pk IS NULL)
      AND (   a.tlg_pt_component_pk = p_pt_component_pk
           OR p_pt_component_pk IS NULL
          )
      AND a.use_yn = 'Y';

   RETURN l_unit_price;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_fppr00220;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FPPR00270;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_fppr00270 (
   p_tlg_wi_line_ordplan_m_pk   NUMBER,
   p_pt_component_pk            NUMBER,
   p_select                     NUMBER
)
   RETURN VARCHAR
IS
/******************************************************************************
******************************************************************************/
   l_next_component   VARCHAR2 (100);
   l_select           NUMBER;
BEGIN
   l_select := p_select;

   FOR l_cur IN (SELECT DISTINCT d.pk, d.component_id, d.component_name
                            FROM tlg_wi_line_op_cons a,
                                 tlg_pt_process_comp_in b,
                                 tlg_pt_process_comp_out c,
                                 tlg_pt_component d
                           WHERE a.del_if = 0
                             AND a.tlg_wi_line_m_pk =
                                                    p_tlg_wi_line_ordplan_m_pk)
   LOOP
      IF p_select = 1
      THEN
         SELECT l_cur.pk
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 2
      THEN
         SELECT l_cur.component_id
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 3
      THEN
         SELECT l_cur.component_name
           INTO l_next_component
           FROM DUAL;
      END IF;
   END LOOP;

   RETURN l_next_component;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_fppr00270;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FPPR00270_YARN;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_fppr00270_yarn (
   p_style_pk       NUMBER,
   p_component_pk   NUMBER
)
   RETURN VARCHAR2
IS
/******************************************************************************
******************************************************************************/
   l_mat_name   VARCHAR (220);
BEGIN
   SELECT MAX (mat_out.item_name)
     INTO l_mat_name
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_it_stitem mat_out
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND b.close_yn = 'N'
      AND a.pk = b.tlg_pt_process_comp_pk
      AND c.del_if = 0
      AND c.close_yn = 'N'
      AND a.pk = c.tlg_pt_process_comp_pk
      AND c.tlg_pt_component_pk = p_component_pk
      AND mat_out.del_if = 0
      AND b.st_item_pk = mat_out.pk;

   RETURN SUBSTR (l_mat_name, 1, 15);
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_fppr00270_yarn;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FPPR00270_Y_COUNT;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_fppr00270_y_count (
   p_style_pk       NUMBER,
   p_component_pk   NUMBER
)
   RETURN VARCHAR2
IS
/******************************************************************************
******************************************************************************/
   l_card_qty   NUMBER;
BEGIN
   SELECT MAX (c.card_qty)
     INTO l_card_qty
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND b.close_yn = 'N'
      AND a.pk = b.tlg_pt_process_comp_pk
      AND c.del_if = 0
      AND c.close_yn = 'N'
      AND a.pk = c.tlg_pt_process_comp_pk
      AND c.tlg_pt_component_pk = p_component_pk;

   RETURN l_card_qty;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_fppr00270_y_count;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_ITEMCODE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_itemcode (p_tco_item_pk IN VARCHAR)
   RETURN VARCHAR2
IS
   l_item_code   VARCHAR2 (100);
BEGIN
   SELECT i.item_code
     INTO l_item_code
     FROM tlg_it_item i
    WHERE i.del_if = 0 AND i.pk = p_tco_item_pk;

   RETURN l_item_code;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_f_get_itemcode;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_ITEMNAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_itemname (p_pk IN VARCHAR)
   RETURN VARCHAR2
IS
   l_item_nm   VARCHAR2 (100);
BEGIN
   SELECT i.item_name
     INTO l_item_nm
     FROM tlg_it_item i
    WHERE i.del_if = 0 AND i.pk = p_pk;

   RETURN l_item_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_f_get_itemname;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_ITEM_FROM_SPEC;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_item_from_spec (
   p_tco_stitem_pk    NUMBER,
   p_tco_spec_pk_01   NUMBER,
   p_tco_spec_pk_02   NUMBER,
   p_tco_spec_pk_03   NUMBER,
   p_tco_spec_pk_04   NUMBER,
   p_tco_spec_pk_05   NUMBER,
   p_tco_spec_pk_06   NUMBER,
   p_tco_spec_pk_07   NUMBER,
   p_tco_spec_pk_08   NUMBER,
   p_tco_spec_pk_09   NUMBER,
   p_tco_spec_pk_10   NUMBER,
   p_tco_spec_pk_11   NUMBER,
   p_tco_spec_pk_12   NUMBER,
   p_tco_spec_pk_13   NUMBER,
   p_tco_spec_pk_14   NUMBER,
   p_tco_spec_pk_15   NUMBER,
   p_tco_spec_pk_16   NUMBER,
   p_tco_spec_pk_17   NUMBER,
   p_tco_spec_pk_18   NUMBER,
   p_tco_spec_pk_19   NUMBER,
   p_tco_spec_pk_20   NUMBER
)
   RETURN NUMBER
IS
   l_status        VARCHAR2 (100);
--------------------------
   l_rtn_item_pk   NUMBER;
--------------------------
   l_count         NUMBER         := 0;
--------------------------
BEGIN
--------------------------------------------------------------
   IF p_tco_spec_pk_01 IS NOT NULL AND p_tco_spec_pk_01 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_02 IS NOT NULL AND p_tco_spec_pk_02 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_03 IS NOT NULL AND p_tco_spec_pk_03 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_04 IS NOT NULL AND p_tco_spec_pk_04 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_05 IS NOT NULL AND p_tco_spec_pk_05 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_06 IS NOT NULL AND p_tco_spec_pk_06 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_07 IS NOT NULL AND p_tco_spec_pk_07 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_08 IS NOT NULL AND p_tco_spec_pk_08 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_09 IS NOT NULL AND p_tco_spec_pk_09 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_10 IS NOT NULL AND p_tco_spec_pk_10 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_11 IS NOT NULL AND p_tco_spec_pk_11 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_12 IS NOT NULL AND p_tco_spec_pk_12 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_13 IS NOT NULL AND p_tco_spec_pk_13 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_14 IS NOT NULL AND p_tco_spec_pk_14 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_15 IS NOT NULL AND p_tco_spec_pk_15 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_16 IS NOT NULL AND p_tco_spec_pk_16 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_17 IS NOT NULL AND p_tco_spec_pk_17 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_18 IS NOT NULL AND p_tco_spec_pk_18 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_19 IS NOT NULL AND p_tco_spec_pk_19 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_20 IS NOT NULL AND p_tco_spec_pk_20 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

----------------------------------------------------------------------
   IF l_count = 0
   THEN
      IF l_rtn_item_pk IS NULL OR l_rtn_item_pk = 0
      THEN
         SELECT COUNT (gr.pk)
           INTO l_count
           FROM tlg_it_stitem st, tlg_it_grpspecgrp gr
          WHERE st.del_if = 0
            AND gr.del_if = 0
            AND st.tlg_it_itemgrp_pk = gr.tlg_it_itemgrp_pk
            AND st.pk = p_tco_stitem_pk;

         IF l_count = 0
         THEN
            SELECT MAX (a.pk)
              INTO l_rtn_item_pk
              FROM tlg_it_item a
             WHERE a.del_if = 0 AND a.tlg_it_stitem_pk = p_tco_stitem_pk;
         END IF;
      END IF;

      RETURN l_rtn_item_pk;
   END IF;

   l_status := 'Select item error !!!';

----------------------------------------------------------------------
   SELECT MAX (tlg_it_item_pk)
     INTO l_rtn_item_pk
     FROM (SELECT   a.tlg_it_item_pk
               FROM tlg_it_itemspec a, tlg_it_item b
              WHERE a.del_if = 0
                AND a.tlg_it_spec_pk IN
                       (NVL (p_tco_spec_pk_01, 0),
                        NVL (p_tco_spec_pk_02, 0),
                        NVL (p_tco_spec_pk_03, 0),
                        NVL (p_tco_spec_pk_04, 0),
                        NVL (p_tco_spec_pk_05, 0),
                        NVL (p_tco_spec_pk_06, 0),
                        NVL (p_tco_spec_pk_07, 0),
                        NVL (p_tco_spec_pk_08, 0),
                        NVL (p_tco_spec_pk_09, 0),
                        NVL (p_tco_spec_pk_10, 0),
                        NVL (p_tco_spec_pk_11, 0),
                        NVL (p_tco_spec_pk_12, 0),
                        NVL (p_tco_spec_pk_13, 0),
                        NVL (p_tco_spec_pk_14, 0),
                        NVL (p_tco_spec_pk_15, 0),
                        NVL (p_tco_spec_pk_16, 0),
                        NVL (p_tco_spec_pk_17, 0),
                        NVL (p_tco_spec_pk_18, 0),
                        NVL (p_tco_spec_pk_19, 0),
                        NVL (p_tco_spec_pk_20, 0)
                       )
                AND a.tlg_it_item_pk NOT IN (
                       SELECT DISTINCT tlg_it_item_pk
                                  FROM tlg_it_itemspec c
                                 WHERE c.del_if = 0
                                   AND c.tlg_it_spec_pk NOT IN
                                          (NVL (p_tco_spec_pk_01, 0),
                                           NVL (p_tco_spec_pk_02, 0),
                                           NVL (p_tco_spec_pk_03, 0),
                                           NVL (p_tco_spec_pk_04, 0),
                                           NVL (p_tco_spec_pk_05, 0),
                                           NVL (p_tco_spec_pk_06, 0),
                                           NVL (p_tco_spec_pk_07, 0),
                                           NVL (p_tco_spec_pk_08, 0),
                                           NVL (p_tco_spec_pk_09, 0),
                                           NVL (p_tco_spec_pk_10, 0),
                                           NVL (p_tco_spec_pk_11, 0),
                                           NVL (p_tco_spec_pk_12, 0),
                                           NVL (p_tco_spec_pk_13, 0),
                                           NVL (p_tco_spec_pk_14, 0),
                                           NVL (p_tco_spec_pk_15, 0),
                                           NVL (p_tco_spec_pk_16, 0),
                                           NVL (p_tco_spec_pk_17, 0),
                                           NVL (p_tco_spec_pk_18, 0),
                                           NVL (p_tco_spec_pk_19, 0),
                                           NVL (p_tco_spec_pk_20, 0)
                                          ))
                AND b.del_if = 0
                AND a.tlg_it_item_pk = b.pk
                AND b.tlg_it_stitem_pk = p_tco_stitem_pk
           GROUP BY a.tlg_it_item_pk
             HAVING COUNT (*) = l_count);

-------------------------------------------------------------------------
   RETURN NVL (l_rtn_item_pk, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_item_from_spec;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_KBCH00040;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_kbch00040 (
   p_tin_warehouse_pk    NUMBER,
   p_from_ym             VARCHAR2)
   RETURN NUMBER
IS
   /******************************************************************************
   ******************************************************************************/
   l_rtn_val   NUMBER;
BEGIN
   SELECT SUM (begin_qty) begin_qty
     INTO l_rtn_val
     FROM (SELECT (  NVL (a2.begin_qty, 0)
                   + NVL (a2.in_qty, 0)
                   - NVL (a2.out_qty, 0))
                     begin_qty,
                  NULL in_qty,
                  NULL or_in_qty,
                  NULL out_qty,
                  NULL or_out_qty
             FROM (SELECT SUM (begin_qty) begin_qty,
                          SUM (in_qty) in_qty,
                          SUM (out_qty) out_qty
                     FROM (SELECT b.end_qty begin_qty,
                                  NULL in_qty,
                                  NULL out_qty
                             FROM tlg_sa_stock_closing_m a,
                                  tlg_sa_stock_closing_d b
                            WHERE     a.del_if = 0
                                  AND (   a.tlg_in_warehouse_pk =
                                             p_tin_warehouse_pk
                                       OR p_tin_warehouse_pk IS NULL)
                                  AND (a.tlg_in_warehouse_pk, a.stock_date) IN
                                         (  SELECT b.tlg_in_warehouse_pk,
                                                   MAX (b.stock_date)
                                              FROM tlg_sa_stock_closing_m b
                                             WHERE     b.del_if = 0
                                                   AND b.stock_date <
                                                          p_from_ym || '01'
                                                   AND (   b.tlg_in_warehouse_pk =
                                                              p_tin_warehouse_pk
                                                        OR p_tin_warehouse_pk
                                                              IS NULL)
                                          GROUP BY b.tlg_in_warehouse_pk)
                                  AND b.del_if = 0
                                  AND a.pk = b.tlg_sa_stock_closing_m_pk
                                  AND NVL (b.end_qty, 0) <> 0
                           UNION ALL
                           SELECT NULL begin_qty,
                                  a.input_qty in_qty,
                                  a.output_qty out_qty
                             FROM tlg_in_stocktr a
                            WHERE     a.del_if = 0
                                  AND (   a.tlg_in_warehouse_pk =
                                             p_tin_warehouse_pk
                                       OR p_tin_warehouse_pk IS NULL)
                                  AND a.tr_date >
                                         NVL (
                                            (SELECT MAX (b.stock_date)
                                               FROM tlg_sa_stock_closing_m b
                                              WHERE     b.del_if = 0
                                                    AND b.stock_date <
                                                           p_from_ym || '01'
                                                    AND b.tlg_in_warehouse_pk =
                                                           a.tlg_in_warehouse_pk),
                                            '0')
                                  AND a.tr_date < p_from_ym || '01')) a2
           UNION ALL
           SELECT NULL begin_qty,
                  a.input_qty in_qty,
                  NULL or_in_qty,
                  NULL out_qty,
                  NULL or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trin_type IN ('I10', 'I20', 'I120')
           UNION ALL
           SELECT NULL begin_qty,
                  NULL in_qty,
                  NULL or_in_qty,
                  a.output_qty out_qty,
                  NULL or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trout_type IN ('O10', 'O20', 'O100', 'O120')
           UNION ALL
           SELECT NULL begin_qty,
                  NULL in_qty,
                  a.input_qty or_in_qty,
                  NULL out_qty,
                  NULL or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trin_type NOT IN ('I10', 'I20', 'I120')
           UNION ALL
           SELECT NULL begin_qty,
                  NULL in_qty,
                  NULL or_in_qty,
                  NULL out_qty,
                  a.output_qty or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trout_type NOT IN ('O10', 'O20', 'O100', 'O120'));

   RETURN l_rtn_val;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END lg_f_get_kbch00040;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_LOGISTIC_CODENAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_logistic_codename (
   v_grpcode   IN   VARCHAR,
   v_code      IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_code_nm   VARCHAR2 (100);
BEGIN
   SELECT a.code_nm
     INTO l_code_nm
     FROM tlg_lg_code a, tlg_lg_code_group g
    WHERE a.tlg_lg_code_group_pk = g.pk
      AND g.GROUP_ID = v_grpcode
      AND a.del_if = 0
      AND a.code = v_code;

   RETURN l_code_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_f_get_logistic_codename;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_OVERSEA_PORT;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_oversea_port (p_code IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
   l_rtn_value := '';
  SELECT    (code || ' ' || code_nm) into l_rtn_value
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = 'LGCM0240'--oversea_port
                    and code=p_code
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0;
   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PACKAGE_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_package_seq (
   p_pa_packing_wi_pk      NUMBER,
   p_pa_packages_type_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_package_seq   NUMBER;
BEGIN
   SELECT MAX (package_seq)
     INTO l_package_seq
     FROM tlg_pa_packages a
    WHERE del_if = 0
      AND close_yn = 'N'
      AND tlg_pa_packing_wi_pk = p_pa_packing_wi_pk
      AND tlg_pa_packages_type_pk = p_pa_packages_type_pk;

   RETURN NVL (l_package_seq, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_package_seq;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PARENT_COMP_PK;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_parent_comp_pk (
   p_style_pk          NUMBER,
   p_pt_component_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   rtn_parent_comp_pk   NUMBER;
   l_comp_level_00      NUMBER;
   l_comp_level_01      NUMBER;
   l_comp_level_02      NUMBER;
   l_comp_level_03      NUMBER;
   l_comp_level_04      NUMBER;
   l_comp_level_05      NUMBER;
BEGIN
   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_00
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = p_pt_component_pk
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk;

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_01
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = p_pt_component_pk
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_02
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_01
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_03
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_02
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_04
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_03
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_05
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_04
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   IF (l_comp_level_05 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_05;
   ELSIF (l_comp_level_04 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_04;
   ELSIF (l_comp_level_03 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_03;
   ELSIF (l_comp_level_02 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_02;
   ELSIF (l_comp_level_01 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_01;
   ELSIF (l_comp_level_00 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_00;
   END IF;

   RETURN rtn_parent_comp_pk;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END lg_f_get_parent_comp_pk;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PARTNER_ITEM_NAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_partner_item_name (
   p_partner_pk   IN   NUMBER,
   p_item_pk      IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_partner_item_name   VARCHAR2 (100);
BEGIN
   SELECT ctn.item_name
     INTO l_partner_item_name
     FROM tlg_it_partner_item ctn
    WHERE ctn.del_if = 0
      AND ctn.tco_buspartner_pk = p_partner_pk
      AND ctn.tlg_it_item_pk = p_item_pk;

   RETURN l_partner_item_name;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
END lg_f_get_partner_item_name;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PATTERN;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_pattern (
   p_style_pk           IN   NUMBER,
   p_out_component_pk   IN   NUMBER
)
   RETURN VARCHAR
IS
   l_pattern   VARCHAR2 (100);
   l_comma     VARCHAR2 (1);
--------
BEGIN
   FOR l_cur IN (SELECT   c.seq
                     FROM tlg_pt_process_comp a,
                          tlg_pt_process_comp_out b,
                          tlg_pt_process_comp_in c
                    WHERE a.del_if = 0
                      AND a.close_yn = 'N'
                      AND a.style_pk = p_style_pk
                      AND b.del_if = 0
                      AND b.close_yn = 'N'
                      AND b.tlg_pt_component_pk > 0
                      AND b.tlg_pt_component_pk = p_out_component_pk
                      AND a.pk = b.tlg_pt_process_comp_pk
                      AND c.del_if = 0
                      AND c.close_yn = 'N'
                      AND a.pk = c.tlg_pt_process_comp_pk
                      AND c.seq IS NOT NULL
                 ORDER BY seq)
   LOOP
      l_pattern := l_pattern || l_comma || l_cur.seq;
      l_comma := ',';
   END LOOP;

   RETURN l_pattern;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_POP_PROD030;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_pop_prod030 (p_pt_process_comp_in_pk NUMBER)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   rtn_tes_lgpicture_pk   NUMBER;
BEGIN
   SELECT MAX (d.tlg_pt_picture_pk)
     INTO rtn_tes_lgpicture_pk
     FROM tlg_pt_process_comp_in a,
          tlg_pt_process_comp b,
          tlg_pt_process_comp c,
          tlg_pt_process_comp_out d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tlg_pt_process_comp_pk = b.pk
      AND c.del_if = 0
      AND b.style_pk = c.style_pk
      AND c.pk = d.tlg_pt_process_comp_pk
      AND a.tlg_pt_component_pk = d.tlg_pt_component_pk
      AND a.pk = p_pt_process_comp_in_pk;

   IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
   THEN
      SELECT MAX (c.tlg_pt_picture_pk)
        INTO rtn_tes_lgpicture_pk
        FROM tlg_pt_style_consumption a,
             tlg_pt_pattern_group b,
             tlg_pt_pattern_grpcom c,
             tlg_pt_process_comp_in d,
             tlg_pt_process_comp e
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_pt_pattern_group_pk = b.pk
         AND c.del_if = 0
         AND b.pk = c.tlg_pt_pattern_group_pk
         AND d.del_if = 0
         AND e.pk = d.tlg_pt_process_comp_pk
         AND a.st_prod_pk = e.style_pk
         AND d.tlg_pt_component_pk = c.tlg_pt_component_pk
         AND d.pk = p_pt_process_comp_in_pk;

      IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
      THEN
         SELECT MAX (b.tlg_pt_picture_pk)
           INTO rtn_tes_lgpicture_pk
           FROM tlg_pt_process_comp_in a, tlg_pt_component b
          WHERE a.del_if = 0
            AND b.del_if = 0
            AND a.tlg_pt_component_pk = b.pk
            AND a.pk = p_pt_process_comp_in_pk;
      END IF;
   END IF;

   RETURN rtn_tes_lgpicture_pk;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END lg_f_get_pop_prod030;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_POP_PROD270;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_pop_prod270 (
   p_style_pk          NUMBER,
   p_pt_component_pk   NUMBER,
   p_select            NUMBER
)
   RETURN VARCHAR
IS
/******************************************************************************
******************************************************************************/
   l_next_component   VARCHAR2 (100);
   l_select           NUMBER;
BEGIN
   l_select := p_select;

   FOR l_cur IN (SELECT DISTINCT d.pk, d.component_id, d.component_name
                            FROM tlg_pt_process_comp a,
                                 tlg_pt_process_comp_in b,
                                 tlg_pt_process_comp_out c,
                                 tlg_pt_component d
                           WHERE a.del_if = 0
                             AND a.style_pk = p_style_pk
                             AND b.del_if = 0
                             AND a.pk = b.tlg_pt_process_comp_pk
                             AND b.tlg_pt_component_pk = p_pt_component_pk
                             AND c.del_if = 0
                             AND a.pk = c.tlg_pt_process_comp_pk
                             AND d.del_if = 0
                             AND c.tlg_pt_component_pk = d.pk)
   LOOP
      IF p_select = 1
      THEN
         SELECT l_cur.pk
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 2
      THEN
         SELECT l_cur.component_id
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 3
      THEN
         SELECT l_cur.component_name
           INTO l_next_component
           FROM DUAL;
      END IF;
   END LOOP;

   RETURN l_next_component;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_pop_prod270;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PO_STATUS;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_po_status (p_po_m_pk NUMBER)
   RETURN VARCHAR
IS
   l_value    VARCHAR2 (100);
   l_count    NUMBER;
   l_po_qty   NUMBER;
   l_in_qty   NUMBER;
   l_status   VARCHAR (2);
/*--------
   RETURN GRAVITY FOR ITEM
---------*/
BEGIN
   l_value := 'NOT PROCESS';

   SELECT   SUM (d.po_qty) po_qty, m.status
       INTO l_po_qty, l_status
       FROM tlg_po_po_d d, tlg_po_po_m m
      WHERE d.del_if = 0
        AND d.tlg_po_po_m_pk = p_po_m_pk
        AND m.del_if = 0
        AND m.pk = d.tlg_po_po_m_pk
   GROUP BY m.status;

   CASE l_status
      WHEN '1'
      THEN
         l_value := 'SAVE';
      WHEN '2'
      THEN
         l_value := 'SUBMIT';
      WHEN '3'
      THEN
         l_value := 'APPROVE';
      WHEN '4'
      THEN
         l_value := 'CANCEL';
   END CASE;

   SELECT SUM (d.in_qty)
     INTO l_in_qty
     FROM tlg_st_income_d d, tlg_po_po_d pod
    WHERE d.del_if = 0
      AND d.tlg_po_po_d_pk = pod.pk
      AND pod.del_if = 0
      AND pod.tlg_po_po_m_pk = p_po_m_pk;

   --- cannot get return data at this time ----
   IF NVL (l_in_qty, 0) = 0
   THEN
      RETURN l_value;
   ELSE
      IF NVL (l_po_qty, 0) > NVL (l_in_qty, 0)
      THEN
         l_value := 'PROCESSING';
      ELSE
         l_value := 'FINISHED';
      END IF;
   END IF;

   RETURN l_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_f_get_po_status;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROCESS_PRICE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_process_price (
   p_partner_pk   NUMBER,
   p_style_pk     NUMBER,
   p_spec01_pk    NUMBER,
   p_spec02_pk    NUMBER,
   p_spec03_pk    NUMBER,
   p_spec04_pk    NUMBER,
   p_spec05_pk    NUMBER
)
   RETURN NUMBER
IS
   l_numofspec   NUMBER;
/******************************************************************************
******************************************************************************/
   l_price       NUMBER  := 0;
   l_valid       BOOLEAN := TRUE;
   l_count       NUMBER  := 0;
BEGIN
   FOR l_price_m IN (SELECT m.pk, NVL (m.specgrp01_pk, 0) specgrp01_pk,
                            NVL (m.specgrp02_pk, 0) specgrp02_pk,
                            NVL (m.specgrp03_pk, 0) specgrp03_pk,
                            NVL (m.specgrp04_pk, 0) specgrp04_pk,
                            NVL (m.specgrp05_pk, 0) specgrp05_pk, m.st_price,
                            m.partner_chk, m.item_chk
                       FROM tlg_it_process_price_m m
                      WHERE m.del_if = 0 AND m.use_yn = 'Y')
   LOOP
      l_valid := TRUE;

      /*----------count spec-------------*/
      FOR l_price_d IN (SELECT d.tlg_it_stitem_pk, d.tco_buspartner_pk,
                               d.spec01_pk, d.spec02_pk, d.spec03_pk,
                               d.spec04_pk, d.spec05_pk, d.process_fee
                          FROM tlg_it_process_price_d d
                         WHERE d.del_if = 0
                           AND d.use_yn = 'Y'
                           AND d.tlg_it_process_price_m_pk = l_price_m.pk)
      LOOP
         /*----------count spec-------------*/
         l_numofspec := 0;

         IF l_price_d.spec01_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec02_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec03_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec04_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec05_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         /*------------partner --------------*/
         IF l_price_m.partner_chk = 'Y'
         THEN
            IF NVL (l_price_d.tco_buspartner_pk, 0) = NVL (p_partner_pk, 0)
            THEN
               l_valid := TRUE;
            ELSE
               l_valid := FALSE;
            END IF;
         ELSE
            l_valid := TRUE;
         END IF;

         /*style*/
         IF l_price_m.item_chk = 'Y'
         THEN
            IF NVL (l_price_d.tlg_it_stitem_pk, 0) = NVL (p_style_pk, 0)
            THEN
               l_valid := l_valid AND TRUE;
            ELSE
               l_valid := FALSE;
            END IF;
         ELSE
            l_valid := l_valid AND TRUE;
         END IF;

         /*spec*/
         SELECT COUNT (*)
           INTO l_count
           FROM (SELECT p_spec01_pk spec
                   FROM DUAL
                  WHERE p_spec01_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec02_pk spec
                   FROM DUAL
                  WHERE p_spec02_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec03_pk spec
                   FROM DUAL
                  WHERE p_spec03_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec04_pk spec
                   FROM DUAL
                  WHERE p_spec04_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec05_pk spec
                   FROM DUAL
                  WHERE p_spec05_pk IS NOT NULL) in_data
          WHERE in_data.spec IN
                   (l_price_d.spec01_pk,
                    l_price_d.spec02_pk,
                    l_price_d.spec03_pk,
                    l_price_d.spec04_pk,
                    l_price_d.spec05_pk
                   );

         IF l_count = l_numofspec
         THEN
            l_valid := l_valid AND TRUE;
         ELSE
            l_valid := FALSE;
         END IF;

         IF l_valid = TRUE
         THEN
            l_price := l_price + NVL (l_price_d.process_fee, 0);
            EXIT;
         END IF;
      END LOOP;

      IF l_valid = FALSE
      THEN
         l_price := l_price + NVL (l_price_m.st_price, 0);
      END IF;
   END LOOP;

   RETURN l_price;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_process_price;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_SIZE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_size (
   p__pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_prod170_sw_size;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_SIZING_02;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_sizing_02 (
   p_line_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_emp   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (description)
     INTO l_emp
     FROM tlg_pb_line_emp a, thr_employee b
    WHERE a.del_if = 0
      AND a.tlg_pb_line_pk = p_line_pk
      AND b.del_if = 0
      AND a.charger_pk = b.pk
      AND a.seq = 1;

   RETURN NVL (l_emp, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_prod170_sw_sizing_02;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_SIZING_03;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_sizing_03 (
   p_line_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_emp   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (description)
     INTO l_emp
     FROM tlg_pb_line_emp a, thr_employee b
    WHERE a.del_if = 0
      AND a.tlg_pb_line_pk = p_line_pk
      AND b.del_if = 0
      AND a.charger_pk = b.pk
      AND a.seq = 2;

   RETURN NVL (l_emp, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_prod170_sw_sizing_03;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_WEAVING_02;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_weaving_02 (
   p_line_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_emp   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (description)
     INTO l_emp
     FROM tlg_pb_line_emp a, thr_employee b
    WHERE a.del_if = 0
      AND a.tlg_pb_line_pk = p_line_pk
      AND b.del_if = 0
      AND a.charger_pk = b.pk
      AND a.seq = 1;

   RETURN NVL (l_emp, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_prod170_sw_weaving_02;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_WEAVING_03;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_weaving_03 (
   p_line_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_emp   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (description)
     INTO l_emp
     FROM tlg_pb_line_emp a, thr_employee b
    WHERE a.del_if = 0
      AND a.tlg_pb_line_pk = p_line_pk
      AND b.del_if = 0
      AND a.charger_pk = b.pk
      AND a.seq = 2;

   RETURN NVL (l_emp, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_prod170_sw_weaving_03;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_WEA_CARD;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_wea_card (p_style_pk NUMBER)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_card_qty   NUMBER;
BEGIN
   SELECT MAX (c.card_qty)
     INTO l_card_qty
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_out c,
          tlg_pt_component comp_out
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND a.style_pk = p_style_pk
      AND c.del_if = 0
      AND c.close_yn = 'N'
      AND a.pk = c.tlg_pt_process_comp_pk
      AND comp_out.del_if = 0
      AND comp_out.component_id = 'WEA'
      AND comp_out.pk = c.tlg_pt_component_pk;

   RETURN l_card_qty;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_prod170_sw_wea_card;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_WEA_DUOI;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_wea_duoi (
   p_style_pk   NUMBER
)
   RETURN VARCHAR2
IS
/******************************************************************************
******************************************************************************/
   l_mat_name   VARCHAR (220);
BEGIN
   SELECT MAX (mat_out.item_name)
     INTO l_mat_name
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pt_component comp_out,
          tlg_it_stitem mat_out
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND b.close_yn = 'N'
      AND a.pk = b.tlg_pt_process_comp_pk
      AND c.del_if = 0
      AND c.close_yn = 'N'
      AND a.pk = c.tlg_pt_process_comp_pk
      AND comp_out.del_if = 0
      AND comp_out.component_id = 'SZ04'
      AND comp_out.pk = c.tlg_pt_component_pk
      AND mat_out.del_if = 0
      AND b.st_item_pk = mat_out.pk;

   RETURN SUBSTR (l_mat_name, 1, 15);
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_prod170_sw_wea_duoi;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_WEA_TREN;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_wea_tren (
   p_style_pk   NUMBER
)
   RETURN VARCHAR2
IS
/******************************************************************************
******************************************************************************/
   l_mat_name   VARCHAR (220);
BEGIN
   SELECT MAX (mat_out.item_name)
     INTO l_mat_name
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pt_component comp_out,
          tlg_it_stitem mat_out
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND b.close_yn = 'N'
      AND a.pk = b.tlg_pt_process_comp_pk
      AND c.del_if = 0
      AND c.close_yn = 'N'
      AND a.pk = c.tlg_pt_process_comp_pk
      AND comp_out.del_if = 0
      AND comp_out.component_id = 'SZ03'
      AND comp_out.pk = c.tlg_pt_component_pk
      AND mat_out.del_if = 0
      AND b.st_item_pk = mat_out.pk;

   RETURN SUBSTR (l_mat_name, 1, 15);
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_get_prod170_sw_wea_tren;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_QUO_UNIT_PRICE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_quo_unit_price (
   p_tlg_it_item_pk       NUMBER,
   p_tco_buspartner_pk    NUMBER,
   p_tlg_po_dept_pk       NUMBER,
   p_price_date           VARCHAR2,
   p_uom                  VARCHAR2)
   RETURN NUMBER
IS
   l_unit_price   NUMBER;
BEGIN
   SELECT MAX (b1.unit_price)
     INTO l_unit_price
     FROM TLG_MT_PUR_PRICE_M a1, TLG_MT_PUR_PRICE_d b1
    WHERE     b1.del_if = 0
          AND b1.tlg_it_item_pk = p_tlg_it_item_pk
          AND a1.pk = b1.tlg_mt_pur_price_m_pk
          AND p_price_date BETWEEN NVL (a1.start_date, p_price_date)
                               AND NVL (a1.end_date, p_price_date)
          AND (   NVL (b1.tlg_po_dept_pk, a1.tlg_po_dept_pk) =
                     p_tlg_po_dept_pk
               OR NVL (b1.tlg_po_dept_pk, a1.tlg_po_dept_pk) IS NULL)
          AND a1.tco_buspartner_pk = p_tco_buspartner_pk;

   RETURN NVL (l_unit_price, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_quo_unit_price;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_REPORT_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_report_seq (
   p_report_id   VARCHAR,
   p_slip_no     VARCHAR,
   p_user        VARCHAR
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_seq   NUMBER;
BEGIN
   SELECT COUNT (a.pk)
     INTO l_seq
     FROM tlg_lg_report_print_hist a
    WHERE a.del_if = 0
      AND a.report_id = p_report_id
      AND a.slip_no = p_slip_no
      AND a.user_id = p_user;

   RETURN NVL (l_seq, 1);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 1;
END lg_f_get_report_seq;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SALE080;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_sale080 (
   p_tlg_sa_saleorder_d_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_package_seq   NUMBER;
BEGIN
   SELECT MAX (a.package_seq)
     INTO l_package_seq
     FROM tlg_pa_packages a, tlg_pa_packages_item b
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND b.del_if = 0
      AND a.pk = b.tlg_pa_packages_pk
      AND b.tlg_sa_saleorder_d_pk = p_tlg_sa_saleorder_d_pk;

   RETURN NVL (l_package_seq, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_sale080;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SALE090_PO_NO;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_sale090_po_no (p_pa_packages_pk NUMBER)
   RETURN VARCHAR2
IS
   l_po_no     VARCHAR2 (1000);
   l_connect   VARCHAR2 (1);
/******************************************************************************
 ******************************************************************************/
BEGIN
   FOR l_cur IN (SELECT DISTINCT b.po_no
                            FROM tlg_pa_packages_item a, vlg_sa_sale_order b
                           WHERE a.del_if = 0
                             AND a.tlg_pa_packages_pk = p_pa_packages_pk
                             AND a.tlg_sa_saleorder_d_pk =
                                                       b.tlg_sa_saleorder_d_pk
                        ORDER BY b.po_no)
   LOOP
      l_po_no := l_po_no || l_connect || l_cur.po_no;
      l_connect := '*';
   END LOOP;

   RETURN l_po_no;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_f_get_sale090_po_no;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SLIPNO_DORCO;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_slipno_dorco (
   p_slip_type   VARCHAR,
   p_yyyymmdd    VARCHAR,
   p_wh_pk       NUMBER
)
   RETURN VARCHAR
IS
   l_slipno   VARCHAR (20);
   l_seq      NUMBER       := NULL;
   l_date     VARCHAR (6)  := SUBSTR (p_yyyymmdd, 1, 6);
   l_wh_id    VARCHAR (10);
/******************************************************************************
******************************************************************************/
BEGIN
   SELECT MAX (wh_id)
     INTO l_wh_id
     FROM tlg_in_warehouse
    WHERE del_if = 0 AND pk = p_wh_pk;

   CASE p_slip_type
      WHEN 'IN'
      THEN                                                          --incoming
         l_slipno := 'PNI';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_income_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.in_date, 1, 6) = l_date
            AND m.tlg_in_warehouse_pk = p_wh_pk;

         l_seq := NVL (l_seq, 0) + 1;
         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'OUT'
      THEN                                                         -- outgoing
         l_slipno := 'PXO';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_outgo_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.out_date, 1, 6) = l_date
            AND m.out_wh_pk = p_wh_pk;

         -- AND m.out_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'PROD-OUT'
      THEN                                                         -- outgoing
         l_slipno := 'PXO';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_pr_prod_outgo_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.prod_date, 1, 6) = l_date
            AND m.tlg_in_warehouse_pk = p_wh_pk;

         -- AND m.out_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'RS'
      THEN                                               -- return to supplier
         l_slipno := 'PXR';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_outgo_return_m m
          WHERE m.del_if = 0 AND SUBSTR (m.re_date, 1, 6) = l_date;

         -- AND m.re_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'RL'
      THEN                                                 -- return from line
         l_slipno := 'PNR';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_income_return_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.re_date, 1, 6) = l_date
            AND re_wh_pk = p_wh_pk;

         --  AND m.re_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'EX'
      THEN                                                   -- stock exchange
         l_slipno := 'PE';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_exchange_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.ex_date, 1, 6) = l_date
            AND m.ex_wh_pk = p_wh_pk;

         -- AND m.tr_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'TRANS'
      THEN                                                    -- stock tranfer
         l_slipno := 'PT';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_transfer_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.tr_date, 1, 6) = l_date
            AND m.out_wh_pk = p_wh_pk;

         -- AND m.ex_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'DISCARD'
      THEN                                                    -- stock discard
         l_slipno := 'PXD';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_discard_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.out_date, 1, 6) = l_date
            AND m.out_wh_pk = p_wh_pk;

         -- AND m.out_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
--------------------------------------------------------------------------
   WHEN 'PRO-IN'
      THEN                                                   -- PRODUCT INCOMe
         l_slipno := 'PNP';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_pr_prod_income_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.prod_date, 1, 6) = l_date
            AND tlg_in_warehouse_pk = p_wh_pk;

         --  AND m.PROD_DATE  > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'DELI'
      THEN                                                -- PRODUCT  Delivery
         l_slipno := 'PXD';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_gd_outgo_m m
          WHERE m.del_if = 0 AND SUBSTR (m.out_date, 1, 6) = l_date;

         -- AND m.OUT_DATE > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
            l_slipno || SUBSTR (p_yyyymmdd, 3, 4) || '-'
            || LPAD (l_seq, 4, '0');
      WHEN 'GDR'
      THEN                                        -- PRODUCT  Delivery Request
         l_slipno := 'PYD';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_gd_req_m m
          WHERE m.del_if = 0 AND SUBSTR (m.req_date, 1, 6) = l_date;

         -- AND m.OUT_DATE > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || 'F1'
            || LPAD (l_seq, 4, '0');
   END CASE;

   RETURN l_slipno;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_code (p_tco_spec_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (a.spec_id)
     INTO l_spec_id
     FROM tlg_it_spec a
    WHERE a.del_if = 0 AND a.pk = p_tco_spec_pk;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_code;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_CODE_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_code_01_item (
   p_seq           IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_id)
     INTO l_spec_id
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND e.tlg_it_specgrp_pk = b.tlg_it_specgrp_pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND e.seq = p_seq;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_code_01_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_CODE_01_ST;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_code_01_st (
   p_seq             IN   VARCHAR2,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_id)
     INTO l_spec_id
     FROM tlg_it_stitemspec a,
          tlg_it_spec b,
          tlg_it_stitem c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_stitem_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_code_01_st;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_CODE_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_code_02_item (
   p_specgrp_type   IN   VARCHAR2,
   p_tco_item_pk    IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (50);
--------
BEGIN
   SELECT MAX (b.spec_id)
     INTO l_spec_id
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND f.del_if = 0
      AND b.tlg_it_specgrp_pk = f.pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_code_02_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_name (p_tco_spec_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT a.spec_nm
     INTO l_spec_nm
     FROM tlg_it_spec a
    WHERE a.del_if = 0 AND pk = p_tco_spec_pk;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_spec_name;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NAME_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_name_01_item (
   p_specgrp_nm    IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND f.del_if = 0
      AND b.tlg_it_specgrp_pk = f.pk
      AND f.specgrp_nm = UPPER (p_specgrp_nm);

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_name_01_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NAME_01_ST;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_name_01_st (
   p_specgrp_type    IN   NUMBER,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_stitemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_name_01_st;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NAME_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_name_02_item (
   p_seq           IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_name_02_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NAME_02_ST;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_name_02_st (
   p_seq             IN   VARCHAR2,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_stitemspec a,
          tlg_it_spec b,
          tlg_it_stitem c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_stitem_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_name_02_st;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NAME_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_name_03_item (
   p_specgrp_type   IN   NUMBER,
   p_tco_item_pk    IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_name_03_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NAME_04_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_name_04_item (
   p_plan_spec_seq   IN   VARCHAR2,
   p_tco_item_pk     IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.plan_spec_seq = p_plan_spec_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_name_04_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_NM_BY_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_nm_by_seq (
   p_tlg_it_item_pk           IN   VARCHAR2,
   p_specgrp_seq                  IN   varchar2
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
    
    select c.spec_nm into l_spec_nm from tlg_it_item a,tlg_it_itemspec b,tlg_it_spec c,tlg_it_specgrp d,tlg_it_grpspecgrp e
    where a.del_if=0 and b.del_if=0 and c.del_if=0 and d.del_if=0 and e.del_if=0 
    and a.pk=b.tlg_it_item_pk and B.TLG_IT_SPEC_PK=c.pk 
    and E.TLG_IT_SPECGRP_PK=d.pk 
    and a.tlg_it_itemgrp_pk=e.tlg_it_itemgrp_pk
    and C.TLG_IT_SPECGRP_PK=d.pk
    and a.pk=p_tlg_it_item_pk
    and e.seq=p_specgrp_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_spec_nm_by_seq;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_PK_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_pk_01_item (
   p_specgrp_type   IN   NUMBER,
   p_tco_item_pk    IN   NUMBER
)
   RETURN NUMBER
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND f.del_if = 0
      AND b.tlg_it_specgrp_pk = f.pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_pk;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_pk_01_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_PK_01_ST;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_pk_01_st (
   p_seq                  VARCHAR2,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_stitemspec a,
          tlg_it_spec b,
          tlg_it_stitem c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_stitem_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_pk;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_get_spec_pk_01_st;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_PK_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_pk_02_item (
   p_seq                VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_pk;
END lg_f_get_spec_pk_02_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_PK_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_pk_03_item (
   p_plan_spec_seq        VARCHAR2,
   p_tco_item_pk     IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.plan_spec_seq = p_plan_spec_seq;

   RETURN l_spec_pk;
END lg_f_get_spec_pk_03_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_VALUE_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_value_01_item (
   p_seq           IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN NUMBER
IS
   l_spec_value   NUMBER;
--------
BEGIN
   SELECT MAX (b.spec_value)
     INTO l_spec_value
     FROM tlg_it_itemspec a,
          tlg_it_spec b,
          tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN NVL (l_spec_value, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_spec_value_01_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_VALUE_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_value_02_item (
   p_specgrp_type   IN   VARCHAR2,
   p_tco_item_pk    IN   NUMBER
)
   RETURN NUMBER
IS
   l_spec_value   NUMBER;
BEGIN
   SELECT MAX (b.spec_value)
     INTO l_spec_value
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN NVL (l_spec_value, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END lg_f_get_spec_value_02_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_SPEC_VALUE_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_spec_value_03_item (p_tco_spec_pk IN NUMBER)
   RETURN NUMBER
IS
   l_spec_value   NUMBER;
--------
BEGIN
   SELECT MAX (a.spec_value)
     INTO l_spec_value
     FROM tlg_it_spec a
    WHERE a.del_if = 0 AND a.pk = p_tco_spec_pk;

   RETURN NVL (l_spec_value, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_spec_value_03_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_TIME_DIFF;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_time_diff (date_1   IN DATE,
                                               date_2   IN DATE)
   RETURN NUMBER
IS
   ndate_1     NUMBER;
   ndate_2     NUMBER;
   nsecond_1   NUMBER (5, 0);
   nsecond_2   NUMBER (5, 0);
   /*-----------------------------*/
   l_date_1    DATE;
   l_date_2    DATE;
BEGIN
   IF date_2 > date_1
   THEN
      ndate_1 := TO_NUMBER (TO_CHAR (date_1, 'J'));
      ndate_2 := TO_NUMBER (TO_CHAR (date_2, 'J'));

      IF (ndate_2 = ndate_1)
      THEN
         IF (TO_CHAR (date_1, 'HH24:MI') < '07:30')
         THEN
            l_date_1 := TO_DATE ('07:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_1, 'HH24:MI') > '11:30'
                AND TO_CHAR (date_1, 'HH24:MI') < '12:30')
         THEN
            l_date_1 := TO_DATE ('12:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_1, 'HH24:MI') > '18:20'
                AND TO_CHAR (date_1, 'HH24:MI') < '18:50')
         THEN
            l_date_1 := TO_DATE ('18:50', 'HH24:30');
         ELSIF (TO_CHAR (date_1, 'HH24:MI') > '20:20')
         THEN
            l_date_1 := TO_DATE ('20:20', 'HH24:30');
         ELSE
            l_date_1 := date_1;
         END IF;

         IF (TO_CHAR (date_2, 'HH24:MI') < '07:30')
         THEN
            l_date_2 := TO_DATE ('07:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_2, 'HH24:MI') > '11:30'
                AND TO_CHAR (date_2, 'HH24:MI') < '12:30')
         THEN
            l_date_2 := TO_DATE ('12:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_2, 'HH24:MI') > '18:20'
                AND TO_CHAR (date_2, 'HH24:MI') < '18:50')
         THEN
            l_date_2 := TO_DATE ('18:50', 'HH24:30');
         ELSIF (TO_CHAR (date_2, 'HH24:MI') > '20:20')
         THEN
            l_date_2 := TO_DATE ('20:20', 'HH24:30');
         ELSE
            l_date_2 := date_2;
         END IF;

         nsecond_1 := TO_NUMBER (TO_CHAR (l_date_1, 'SSSSS'));
         nsecond_2 := TO_NUMBER (TO_CHAR (l_date_2, 'SSSSS'));
         RETURN (nsecond_2 - nsecond_1);
      ELSE
         nsecond_1 := TO_NUMBER (TO_CHAR (date_1, 'SSSSS'));
         nsecond_2 := TO_NUMBER (TO_CHAR (date_2, 'SSSSS'));
         RETURN ( ( (ndate_2 - ndate_1) * 86400) + (nsecond_2 - nsecond_1));
      END IF;
   END IF;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_WAREHOUSE_NM;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_warehouse_nm (
   p_tin_warehouse_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_wh_name   VARCHAR (100);
BEGIN
   SELECT a.wh_name
     INTO l_wh_name
     FROM tlg_in_warehouse a
    WHERE a.pk = p_tin_warehouse_pk;

   RETURN l_wh_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_warehouse_nm;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_IE_GETSYSDATE;

CREATE OR REPLACE FUNCTION HPDQ.lg_F_IE_GETsysdate
   RETURN date
IS
/******************************************************************************
   ---
******************************************************************************/
   l_rtn_val        date;
--------------------------------
BEGIN
   l_rtn_val := sysdate;
-------------------------------------
   RETURN l_rtn_val;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_F_IE_GETsysdate;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_LOGISTIC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_logistic_code (v_grp IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   code, (code || ' ' || code_nm) code_nm
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = v_grp
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY a.def_yn DESC, ord)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_f_logistic_code;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_MEASURE_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_measure_convert (p_tco_item_pk   IN NUMBER,
                                                 p_trans_uom     IN VARCHAR2)
   RETURN NUMBER
IS
   l_trans_rate   NUMBER;

   l_item_code    VARCHAR2 (100);
   l_item_uom     VARCHAR2 (50);
BEGIN
   SELECT MAX (c.trans_rate), MAX (d.uom), MAX (d.item_code)
     INTO l_trans_rate, l_item_uom, l_item_code
     FROM tlg_it_itemmeasure c, tlg_it_item d
    WHERE     c.del_if = 0
          AND c.trans_uom = p_trans_uom
          AND c.tlg_it_item_pk = p_tco_item_pk
          AND d.del_if = 0
          AND c.tlg_it_item_pk = d.pk
          AND c.trans_uom <> d.uom;

   IF     (l_trans_rate <= 0 OR l_trans_rate IS NULL)
      AND (l_item_uom <> p_trans_uom)
   THEN
      raise_application_error (
         -20999,
         'PLS CHECK MEASUREMENT EXCHANGE FOR ITEM ' || l_item_code);
   END IF;

   RETURN NVL (l_trans_rate, 1);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 1;
END lg_f_measure_convert;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_RPT_FPPR00313;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_rpt_fppr00313 (
   p_prod_date         IN VARCHAR2,
   p_work_shift        IN VARCHAR2,
   p_tlg_pb_line_pk    IN NUMBER,
   p_work_process_pk   IN NUMBER,
   p_item_pk           IN NUMBER)
   RETURN VARCHAR2
IS
   l_charger   VARCHAR (200);
   l_comma     VARCHAR2 (3);
BEGIN
   FOR l_cur
      IN (  SELECT b.emp_id, b.full_name
              FROM tlg_pr_prod_income_emp a, thr_employee b
             WHERE     a.del_if = 0
                   AND a.prod_date = p_prod_date
                   AND a.work_shift = p_work_shift
                   AND a.tlg_pb_line_pk = p_tlg_pb_line_pk
                   AND NVL (a.TLG_PB_WORK_PROCESS_PK, 0) =
                          NVL (p_work_process_pk, 0)
                   AND a.tlg_it_item_pk = p_item_pk
                   AND b.del_if(+) = 0
                   AND a.charger_pk = b.pk(+)
          ORDER BY a.seq)
   LOOP
      IF (l_charger = '' OR l_charger IS NULL)
      THEN
         l_charger := l_cur.emp_id || ' - ' || l_cur.full_name;
      ELSE
         l_charger :=
            l_charger || CHR (10) || l_cur.emp_id || ' - ' || l_cur.full_name;
      END IF;
   END LOOP;

   RETURN l_charger;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_rpt_fppr00313;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_RPT_FPPR00313_1;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_rpt_fppr00313_1 (
   p_prod_date         IN VARCHAR2,
   p_work_shift        IN VARCHAR2,
   p_tlg_pb_line_pk    IN NUMBER,
   p_work_process_pk   IN NUMBER,
   p_item_pk           IN NUMBER)
   RETURN VARCHAR2
IS
   l_remark   VARCHAR (200);
   l_comma    VARCHAR2 (3);
BEGIN
   FOR l_cur
      IN (  SELECT a.description
              FROM tlg_pr_none_work a
             WHERE     a.del_if = 0
                   AND a.fr_dt = p_prod_date
                   AND a.work_shift = p_work_shift
                   AND a.tlg_pb_line_pk = p_tlg_pb_line_pk
                   AND NVL (a.TLG_PB_WORK_PROCESS_PK, 0) =
                          NVL (p_work_process_pk, 0)
                   AND a.tlg_it_item_pk = p_item_pk
          ORDER BY a.seq)
   LOOP
      l_remark := l_remark || l_comma || l_cur.description;

      l_comma := ' ; ';
   END LOOP;

   RETURN l_remark;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_rpt_fppr00313_1;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_SEQUENCE;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_sequence (v_user IN VARCHAR2)
   RETURN VARCHAR2
IS
   PRAGMA AUTONOMOUS_TRANSACTION;
/******************************************************************************



   select lg_f_sequence('GENUWIN') from dual

******************************************************************************/
   l_sql   VARCHAR2 (4000) := NULL;
   l_cnt   NUMBER          := 0;
--------
BEGIN
--------
   FOR c1 IN (SELECT table_name
                FROM all_all_tables
               WHERE owner = UPPER (v_user) AND table_name LIKE 'TLG_%')
   LOOP
      SELECT COUNT (*)
        INTO l_cnt
        FROM all_objects
       WHERE owner = UPPER (v_user)
         AND object_type = 'SEQUENCE'
         AND object_name = UPPER (c1.table_name) || '_SEQ';

      IF l_cnt > 0
      THEN
         BEGIN
            l_sql :=
                 'DROP SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ';

            EXECUTE IMMEDIATE l_sql;

            l_sql := 'SELECT nvl(MAX(PK),0)+1 from ' || c1.table_name;

            EXECUTE IMMEDIATE l_sql
                         INTO l_cnt;

            l_sql :=
                  'create SEQUENCE '
               || v_user
               || '.'
               || c1.table_name
               || '_SEQ start with '
               || l_cnt;

            EXECUTE IMMEDIATE l_sql;

            IF UPPER (v_user) = 'COMM'
            THEN
               SELECT COUNT (*)
                 INTO l_cnt
                 FROM all_objects
                WHERE owner = 'PUBLIC'
                  AND object_type = 'SYNONYM'
                  AND object_name = UPPER (c1.table_name) || '_SEQ';

               IF l_cnt = 0
               THEN
                  l_sql :=
                        'CREATE PUBLIC SYNONYM '
                     || c1.table_name
                     || '_SEQ FOR '
                     || v_user
                     || '.'
                     || c1.table_name
                     || '_SEQ';

                  EXECUTE IMMEDIATE l_sql;
               END IF;

               l_sql :=
                     'grant select on '
                  || v_user
                  || '.'
                  || c1.table_name
                  || '_SEQ to public';

               EXECUTE IMMEDIATE l_sql;

               SELECT COUNT (*)
                 INTO l_cnt
                 FROM all_objects
                WHERE owner = 'PUBLIC'
                  AND object_type = 'SYNONYM'
                  AND object_name = UPPER (c1.table_name);

               IF l_cnt = 0
               THEN
                  l_sql :=
                        'CREATE PUBLIC SYNONYM '
                     || c1.table_name
                     || ' FOR '
                     || v_user
                     || '.'
                     || c1.table_name;

                  EXECUTE IMMEDIATE l_sql;
               END IF;

               l_sql :=
                     'grant select on '
                  || v_user
                  || '.'
                  || c1.table_name
                  || ' to public';

               EXECUTE IMMEDIATE l_sql;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;
      ELSE
         BEGIN
            l_sql :=
               'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ';

            EXECUTE IMMEDIATE l_sql;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;
      END IF;
   END LOOP;

   RETURN 'reset sequence is successful';
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN l_sql || SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_UOM_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_uom_convert (
   p_item_uom   IN   VARCHAR2,
   p_cnv_uom    IN   VARCHAR2
)
   RETURN NUMBER
IS
   l_trans_rate   NUMBER;
BEGIN
   SELECT MAX (c.cnv_ratio_01)
     INTO l_trans_rate
     FROM tlg_it_uom c
    WHERE c.del_if = 0 AND c.uom_code = p_item_uom
          AND c.cnv_uom_01 = p_cnv_uom;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_02)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_02 = p_cnv_uom;
   END IF;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_03)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_03 = p_cnv_uom;
   END IF;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_04)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_04 = p_cnv_uom;
   END IF;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_05)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_05 = p_cnv_uom;
   END IF;

   RETURN l_trans_rate;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_f_uom_convert;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_AGCI00100;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_agci00100 (
   p_tlg_it_itemgrp_pk   NUMBER,
   p_tlg_it_stitem_pk    NUMBER,
   p_item_code           VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_check            NUMBER;
--------------------------------
   l_itemseq_length   NUMBER;
   l_item_seq         NUMBER;
   l_item_code        VARCHAR2 (50);
--------------------------------
BEGIN
   SELECT MAX (itemseq_length)
     INTO l_itemseq_length
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tlg_it_itemgrp_pk;

   IF l_itemseq_length > 0
   THEN
      SELECT MAX (item_seq)
        INTO l_item_seq
        FROM tlg_it_item
       WHERE del_if = 0
         AND tlg_it_itemgrp_pk = p_tlg_it_itemgrp_pk
         AND tlg_it_stitem_pk = p_tlg_it_stitem_pk
         AND item_code LIKE UPPER (p_item_code) || '%';

      IF TO_NUMBER (l_item_seq) >=
                     TO_NUMBER (LPAD (' ', NVL (l_itemseq_length, 0) + 1, '9'))
      THEN
         raise_application_error (-20999,
                                  'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                                 );
      END IF;

      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                  UPPER (p_item_code)
                  || LPAD (l_item_seq, l_itemseq_length, 0);
   ELSE
      l_item_code := p_item_code;
   END IF;

   SELECT MAX (pk)
     INTO l_check
     FROM tlg_it_item
    WHERE del_if = 0 AND item_code = UPPER (l_item_code);

   WHILE (l_check > 0 AND NVL (l_item_seq, 0) < 10000)
   LOOP
      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                 UPPER (p_item_code)
                 || LPAD (l_item_seq, l_itemseq_length, 0);

      SELECT MAX (pk)
        INTO l_check
        FROM tlg_it_item
       WHERE del_if = 0 AND item_code = UPPER (l_item_code);
   END LOOP;

-------------------------------------
   RETURN l_item_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_get_agci00100;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_AGCI00110;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_agci00110 (
   p_lit_itemgrp_pk   NUMBER,
   p_lit_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_lit_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_lit_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_get_agci00110;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_AGCI00190;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_agci00190 (p_tco_itemcombine_m_pk NUMBER)
   RETURN VARCHAR2
IS
   l_detail    VARCHAR2 (500) := '';
   l_connect   VARCHAR2 (3);
/*--------

*/
BEGIN
   FOR l_cur IN (SELECT DISTINCT description
                            FROM tlg_it_itemcombine_d a
                           WHERE del_if = 0
                             AND tlg_it_itemcombine_m_pk = p_tco_itemcombine_m_pk)
   LOOP
      l_detail := l_detail || l_connect || l_cur.description;
      l_connect := ' ; ';
   END LOOP;

   RETURN l_detail;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_get_agci00190;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_CHECK_SLIP_NO;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_check_slip_no (
   p_slip_type   IN   VARCHAR2,
   p_value       IN   VARCHAR2
)
   RETURN VARCHAR
IS
   lcode_pks         VARCHAR (100);
   lchars            VARCHAR (100);
   l_temp_code_pks   VARCHAR (100);
   lpost             NUMBER         := -1;
   l_pk              VARCHAR (10);
   l_data_type       VARCHAR (100);
   l_format          VARCHAR (100);
   l_len_of_pks      NUMBER;
   l_feild_nm        VARCHAR (100);
   l_length          VARCHAR2 (100);
   l_cent            VARCHAR (1);
   l_value           VARCHAR (50);
   l_all_length      NUMBER;
   l_char_post       NUMBER         := 1;
   l_part            VARCHAR (100);
   temp              VARCHAR (100);
/******************************************************************************
   NAME:       SF_GET_CHECK_SLIP_NO
******************************************************************************/
BEGIN
   BEGIN
      SELECT a.code_pk, a.code_description
        INTO lcode_pks, lchars
        FROM tlg_lg_code_template a
       WHERE a.del_if = 0 AND a.code_type = p_slip_type
             AND a.current_used = 'Y';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         lcode_pks := '';
         lchars := '';
         RETURN 'ERROR';
   END;

   l_value := lcode_pks;

   IF LENGTH (lcode_pks) > 0
   THEN
      l_temp_code_pks := lcode_pks;
      l_len_of_pks := LENGTH (lcode_pks);
      l_all_length := 0;

      --Check length
      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         BEGIN
            SELECT charater_len
              INTO l_length
              FROM tlg_lg_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         l_all_length := l_all_length + l_length;
      END LOOP;

      IF l_all_length <> LENGTH (TRIM (p_value))
      THEN
         RETURN 'ERROR';
      END IF;

      l_temp_code_pks := lcode_pks;

      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         --get data type and fomat of each element in a list of character pk
         BEGIN
            SELECT data_type, CHARACTERS, field_nm, charater_len, c_end
              INTO l_data_type, l_format, l_feild_nm, l_length, l_cent
              FROM tlg_lg_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         CASE l_data_type
            WHEN 'C'
            THEN
               IF (SUBSTR (p_value, l_char_post, l_length) <> l_format)
               THEN
                  RETURN 'ERROR';
               END IF;
            WHEN 'D'
            THEN
               BEGIN
                  SELECT TO_DATE (SUBSTR (p_value, l_char_post, l_length),
                                  l_format
                                 )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            WHEN 'N'
            THEN
               BEGIN
                  SELECT TO_NUMBER (SUBSTR (p_value, l_char_post, l_length),
                                    l_format
                                   )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            ELSE
               l_value := lcode_pks;
         END CASE;

         l_char_post := l_char_post + l_length;
      END LOOP;
   END IF;

   RETURN l_value;
END lg_get_check_slip_no;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_FORMAT;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_format (p_value IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_mask   VARCHAR (20);
--------
BEGIN
   CASE p_value
      WHEN '-2'
      THEN
         l_mask := '###,###,###,#00';
      WHEN '-1'
      THEN
         l_mask := '###,###,###,##0';
      WHEN '0'
      THEN
         l_mask := '###,###,###,###';
      WHEN '1'
      THEN
         l_mask := '###,###,###,##0.#';
      WHEN '2'
      THEN
         l_mask := '###,###,###,##0.##';
      WHEN '3'
      THEN
         l_mask := '###,###,###,##0.###';
      WHEN '4'
      THEN
         l_mask := '###,###,###,##0.####';
      WHEN '5'
      THEN
         l_mask := '###,###,###,##0.#####';
      WHEN '6'
      THEN
         l_mask := '###,###,###,##0.######';
      WHEN '7'
      THEN
         l_mask := '###,###,###,##0.#######';
      WHEN '8'
      THEN
         l_mask := '###,###,###,##0.########';
      WHEN '9'
      THEN
         l_mask := '###,###,###,##0.#########';
      WHEN '10'
      THEN
         l_mask := '###,###,###,##0.##########';
      WHEN '11'
      THEN
         l_mask := '###,###,###,##0.###########';
      WHEN '12'
      THEN
         l_mask := '###,###,###,##0.############';
   END CASE;

   RETURN l_mask;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_FPAB00770_ITEM_LOCATION;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_fpab00770_item_location (
   p_io_type       VARCHAR2,
   p_table_name    VARCHAR2,
   p_table_pk      NUMBER)
   RETURN VARCHAR2
IS
   l_detail    VARCHAR2 (500) := '';
   l_connect   VARCHAR2 (4);
/*--------

*/
BEGIN
   FOR l_cur
      IN (  SELECT b.loc_id, a.tr_qty
              FROM tlg_in_whloctr a, tlg_in_whloc b
             WHERE     a.del_if = 0
                   AND a.io_type = p_io_type
                   AND a.table_name = p_table_name
                   AND a.table_pk = p_table_pk
                   AND b.del_if = 0
                   AND a.tlg_in_whloc_pk = b.pk
          ORDER BY b.loc_id)
   LOOP
      l_detail :=
         l_detail || l_connect || l_cur.loc_id || ' : ' || l_cur.tr_qty;
      l_connect := ' / ' ;
   END LOOP;

   RETURN l_detail;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END lg_get_fpab00770_item_location;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_LOGISTIC_CODENAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_logistic_codename (
   v_grpcode   IN   VARCHAR,
   v_code      IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_code_nm   VARCHAR2 (100);
BEGIN
   SELECT a.code_nm
     INTO l_code_nm
     FROM tlg_lg_code a, tlg_lg_code_group g
    WHERE a.tlg_lg_code_group_pk = g.pk
      AND g.GROUP_ID = v_grpcode
      AND a.del_if = 0
      AND a.code = v_code;

   RETURN l_code_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_get_logistic_codename;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_PARTNER_ITEM_NAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_partner_item_name (
   p_partner_pk   IN   NUMBER,
   p_item_pk      IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_partner_item_name   VARCHAR2 (100);
BEGIN
   SELECT ctn.item_name
     INTO l_partner_item_name
     FROM tlg_it_partner_item ctn
    WHERE ctn.del_if = 0
      AND ctn.tco_buspartner_pk = p_partner_pk
      AND ctn.tlg_it_item_pk = p_item_pk;

   RETURN l_partner_item_name;                        --sf_get_salemannamebyid
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
END lg_get_partner_item_name;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_PO_STATUS;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_po_status (p_po_m_pk NUMBER)
   RETURN VARCHAR
IS
   l_value    VARCHAR2 (100);
   l_count    NUMBER;
   l_po_qty   NUMBER;
   l_in_qty   NUMBER;
   l_status   VARCHAR (2);
/*--------
   RETURN GRAVITY FOR ITEM
---------*/
BEGIN
   l_value := 'NOT PROCESS';

   SELECT   SUM (d.po_qty_01) po_qty, m.status
       INTO l_po_qty, l_status
       FROM tlg_po_po_d d, tlg_po_po_m m
      WHERE d.del_if = 0
        AND d.tlg_po_po_m_pk = p_po_m_pk
        AND m.del_if = 0
        AND m.pk = d.tlg_po_po_m_pk
   GROUP BY m.status;

   CASE l_status
      WHEN '1'
      THEN
         l_value := 'SAVE';
      WHEN '2'
      THEN
         l_value := 'SUBMIT';
      WHEN '3'
      THEN
         l_value := 'APPROVE';
      WHEN '4'
      THEN
         l_value := 'CANCEL';
   END CASE;

   SELECT SUM (d.in_qty)
     INTO l_in_qty
     FROM tlg_st_income_d d, tlg_po_po_d pod
    WHERE d.del_if = 0
      AND d.po_po_d_pk = pod.pk
      AND pod.del_if = 0
      AND pod.tlg_po_po_m_pk = p_po_m_pk;

   --- cannot get return data at this time ----
   IF NVL (l_in_qty, 0) = 0
   THEN
      RETURN l_value;
   ELSE
      IF NVL (l_po_qty, 0) > NVL (l_in_qty, 0)
      THEN
         l_value := 'PROCESSING';
      ELSE
         l_value := 'FINISHED';
      END IF;
   END IF;

   RETURN l_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END lg_get_po_status;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_PRICE_BIMC00060;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_price_bimc00060 (
   p_tco_item_pk    NUMBER,
   p_warehouse_pk   NUMBER,
   p_stock_date     VARCHAR2
)
   RETURN NUMBER
IS
   l_unit_price      NUMBER;
   l_parent_wh_pk    NUMBER;
   l_alter_qty       NUMBER;
   l_alter_item_pk   NUMBER;
/******************************************************************************
******************************************************************************/
BEGIN
   BEGIN
      SELECT w.parent_pk
        INTO l_parent_wh_pk
        FROM tlg_in_warehouse w
       WHERE w.del_if = 0 AND w.pk = p_warehouse_pk;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         l_parent_wh_pk := p_warehouse_pk;
   END;

   /* tim gia o kho cha */
   SELECT MAX (b.unit_price)
     INTO l_unit_price
     FROM tlg_sa_stock_closing_m a, tlg_sa_stock_closing_d b
    WHERE a.del_if = 0
      AND a.tlg_in_warehouse_pk = l_parent_wh_pk
      AND a.stock_date =
             (SELECT MAX (c.stock_date)
                FROM tlg_sa_stock_closing_m c, tlg_sa_stock_closing_d d
               WHERE c.del_if = 0
                 AND c.tlg_in_warehouse_pk = l_parent_wh_pk
                 AND c.stock_date <= p_stock_date
                 AND d.del_if = 0
                 AND d.tlg_it_item_pk = p_tco_item_pk
                 AND c.pk = d.tlg_sa_stock_closing_m_pk)
      AND b.del_if = 0
      AND b.tlg_it_item_pk = p_tco_item_pk
      AND a.pk = b.tlg_sa_stock_closing_m_pk;

   IF l_unit_price IS NULL OR l_unit_price = 0
   THEN
      /*neu cha khong co gia thi tim  gia cua item tuong ung cua item do trong kho cha */
      BEGIN
         SELECT al.tlg_it_item_pk, al.alter_qty
           INTO l_alter_item_pk, l_alter_qty
           FROM tlg_alter_item al
          WHERE al.del_if = 0 AND al.alter_item_pk = p_tco_item_pk;

         SELECT MAX (b.unit_price) / l_alter_qty
           INTO l_unit_price
           FROM tlg_sa_stock_closing_m a, tlg_sa_stock_closing_d b
          WHERE a.del_if = 0
            AND b.del_if = 0
            AND b.tlg_it_item_pk = l_alter_item_pk
            AND a.pk = b.tlg_sa_stock_closing_m_pk
            AND a.tlg_in_warehouse_pk = l_parent_wh_pk
            AND a.stock_date =
                   (SELECT MAX (c.stock_date)
                      FROM tlg_sa_stock_closing_m c, tlg_sa_stock_closing_d d
                     WHERE c.del_if = 0
                       AND c.tlg_in_warehouse_pk = l_parent_wh_pk
                       AND c.stock_date <= p_stock_date
                       AND d.del_if = 0
                       AND d.tlg_it_item_pk = l_alter_item_pk
                       AND c.pk = d.tlg_sa_stock_closing_m_pk);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_unit_price := 0;
      END;
   END IF;

   RETURN l_unit_price;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_REPORT_LST2;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_report_lst2 
(p_form IN VARCHAR2,
 p_option_num in number   
)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (select v.CHA_VALUE2,v.CODE_NM 
                from vlg_code v where v.group_id='LGCM0050' 
                and upper(v.CHA_VALUE1)=upper(p_form) and nvl(v.NUM_VALUE2,p_option_num)=p_option_num 
                order by nvl(v.NUM_VALUE1,0))
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.CHA_VALUE2 || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_get_report_lst2;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_REPORT_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_report_seq (
   p_report_id   VARCHAR,
   p_slip_no     VARCHAR,
   p_user        VARCHAR
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_seq   NUMBER;
BEGIN
   SELECT COUNT (a.pk)
     INTO l_seq
     FROM tlg_report_print_hist a
    WHERE a.del_if = 0
      AND a.report_id = p_report_id
      AND a.slip_no = p_slip_no
      AND a.user_id = p_user;

   RETURN NVL (l_seq, 1);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 1;
END lg_get_report_seq;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_SPEC_NAME_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_spec_name_03_item (
   p_specgrp_type   IN   NUMBER,
   p_tco_item_pk    IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END lg_get_spec_name_03_item;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_TRANS_NM;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_trans_nm (
   p_tr_code   VARCHAR,
   p_tr_type   VARCHAR
)
   RETURN VARCHAR2
IS
   l_tr_nm   VARCHAR2 (100);
/******************************************************************************
******************************************************************************/
BEGIN
   SELECT a.trans_name
     INTO l_tr_nm
     FROM tlg_in_trans_code a
    WHERE a.del_if = 0 AND a.trans_code = p_tr_code AND a.TYPE = p_tr_type;

   RETURN l_tr_nm;
/*EXCEPTION

   THEN
      -- Consider logging the error and then re-raise
      RAISE; */
END lg_get_trans_nm;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_GET_WAREHOUSE_NAME;

CREATE OR REPLACE FUNCTION HPDQ.lg_get_warehouse_name (p_tin_warehouse_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_wh_name   VARCHAR2 (100);
BEGIN
   SELECT a.wh_name
     INTO l_wh_name
     FROM tlg_in_warehouse a
    WHERE a.pk = p_tin_warehouse_pk AND del_if = 0;

   RETURN l_wh_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END lg_get_warehouse_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_LOGISTIC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.lg_logistic_code (v_grp IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   code, (code || ' ' || code_nm) code_nm
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = v_grp
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY a.def_yn DESC, ord)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_PRO_90100020_PREBID;

CREATE OR REPLACE FUNCTION HPDQ.lg_pro_90100020_prebid (  p_teb_est_mst_pk       varchar
                                                           )
    return   varchar                                                            
is
 
   /******************************************************************************
      NAME:       lg_sel_teb_est_mst
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        04/04/2013   Pham Duy Tan       1. Created this procedure.

   ******************************************************************************/
   l_count_pk_mst  number;
   l_count_pre_bid  number;
begin

   
      select count(TEB_EST_MST_PK),sum(decode(PRE_BID_MEETING_YN,'Y',1,0))  into l_count_pk_mst, 
             l_count_pre_bid
             
        from TEB_EST_SHORTLIST 
        where del_if=0 and TEB_EST_MST_PK= p_teb_est_mst_pk;
        
     return   l_count_pre_bid||'/'||l_count_pk_mst;
  exception
   when others then 
        raise;
end lg_pro_90100020_prebid;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_SF_GET_FPDP00120;

CREATE OR REPLACE FUNCTION HPDQ.lg_sf_get_fpdp00120 (
   p_pt_process_comp_in_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   rtn_tes_lgpicture_pk   NUMBER;
BEGIN
   SELECT MAX (d.tlg_pt_picture_pk)
     INTO rtn_tes_lgpicture_pk
     FROM tlg_pt_process_comp_in a,
          tlg_pt_process_comp b,
          tlg_pt_process_comp c,
          tlg_pt_process_comp_out d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tlg_pt_process_comp_pk = b.pk
      AND c.del_if = 0
      AND b.style_pk = c.style_pk
      AND c.pk = d.tlg_pt_process_comp_pk
      AND a.tlg_pt_component_pk = d.tlg_pt_component_pk
      AND a.pk = p_pt_process_comp_in_pk;

   IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
   THEN
      SELECT MAX (c.tlg_pt_picture_pk)
        INTO rtn_tes_lgpicture_pk
        FROM tlg_pt_style_consumption a,
             tlg_pt_pattern_group b,
             tlg_pt_pattern_grpcom c,
             tlg_pt_process_comp_in d,
             tlg_pt_process_comp e
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_pt_pattern_group_pk = b.pk
         AND c.del_if = 0
         AND b.pk = c.tlg_pt_pattern_group_pk
         AND d.del_if = 0
         AND e.pk = d.tlg_pt_process_comp_pk
         AND a.st_prod_pk = e.style_pk
         AND d.tlg_pt_component_pk = c.tlg_pt_component_pk
         AND d.pk = p_pt_process_comp_in_pk;

      IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
      THEN
         SELECT MAX (b.tlg_pt_picture_pk)
           INTO rtn_tes_lgpicture_pk
           FROM tlg_pt_process_comp_in a, tlg_pt_component b
          WHERE a.del_if = 0
            AND b.del_if = 0
            AND a.tlg_pt_component_pk = b.pk
            AND a.pk = p_pt_process_comp_in_pk;
      END IF;
   END IF;

   RETURN rtn_tes_lgpicture_pk;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END lg_sf_get_fpdp00120;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_TEST_REENCODE;

CREATE OR REPLACE FUNCTION HPDQ.lg_test_reencode(string IN VARCHAR2) RETURN VARCHAR2
AS
    encoded VARCHAR2(32767);
    type  array_t IS varray(3) OF VARCHAR2(15);
    array array_t := array_t('AL32UTF8', 'WE8MSWIN1252', 'WE8ISO8859P1');
BEGIN
    FOR I IN 1..array.count LOOP
        encoded := CASE array(i)
            WHEN 'AL32UTF8' THEN string
            ELSE CONVERT(string, 'AL32UTF8', array(i))
        END;
        IF instr(
            rawtohex(
                utl_raw.cast_to_raw(
                    utl_i18n.raw_to_char(utl_raw.cast_to_raw(encoded), 'utf8')
                )
            ),
            'EFBFBD'
        ) = 0 THEN
            RETURN encoded;
        END IF;
    END LOOP;
    RAISE VALUE_ERROR;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.NUM2HEX;

CREATE OR REPLACE FUNCTION HPDQ.num2hex (N NUMBER) RETURN VARCHAR2 IS
  H  VARCHAR2(64) :='';
  N2 INTEGER      := N;
BEGIN
  LOOP
     SELECT RAWTOHEX(CHR(N2))||H
     INTO   H
     FROM   dual;
 
     N2 := TRUNC(N2 / 256);
     EXIT WHEN N2=0;
  END LOOP;
  RETURN H;
END num2hex;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.PUBLIC_ALL_OBJECT;

CREATE OR REPLACE FUNCTION HPDQ.public_all_object (p_user in varchar)
   return varchar2
is
   pragma autonomous_transaction;
/******************************************************************************
   NAME:       f_sequence
   PURPOSE: reset sequence number to maximun pk of table 
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/09/2006   Nguyen Van Thai       1. Created this procedure. 
******************************************************************************/
   l_sql   varchar2 (4000) := null;
   l_cnt   number          := 0;
--------
begin
--------
   for cur in (select object_name
                 from all_objects
                where owner = upper (p_user) and object_type in ('FUNCTION', 'PROCEDURE' ))
   loop
      begin
         l_sql := 'GRANT EXECUTE ON ' || upper (p_user) || '.' || cur.object_name || ' TO PUBLIC'; 
         execute immediate l_sql;
      exception
         when others
         then
            null;
      end;
   end loop; 
   for cur in (select object_name
                 from all_objects
                where owner = upper (p_user) and object_type in ('TABLE','VIEW','SEQUENCE'))
   loop
      begin
         l_sql := 'grant select on ' || p_user || '.' || cur.object_name || ' to public'; 
         execute immediate l_sql;
      exception
         when others
         then
            null;
      end;
   end loop; 
 
   return 'grant all object to public  is successful';
exception
   when others
   then
      return l_sql || sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.RAWTOCHAR;

CREATE OR REPLACE FUNCTION HPDQ.rawtochar(v_raw long raw) return varchar2
is
rawlen number;
hex varchar2(32760);
rawparam varchar2(32760);
i number;
begin
hex := rawtohex(v_raw);
rawlen := length(hex);
i := 1;
while i <= rawlen
loop
rawparam := rawparam||CHR(HEXTONUM(substrb(hex,i,2)));
i := i + 2;
end loop;

return rawparam;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SEND_MAIL_LATELY_PER;

CREATE OR REPLACE FUNCTION HPDQ.SEND_MAIL_LATELY_PER
( 
   P_FROM VARCHAR2,
   P_TO VARCHAR2,
   P_SUBJECT VARCHAR2,
   P_CC         VARCHAR2,
   P_MAILHOST VARCHAR2,
   P_DATE VARCHAR2,
   P_MANAGER_PK VARCHAR2,
   P_TOTAL VARCHAR2
) 
RETURN VARCHAR2 
IS

  
  L_MAIL_CONN   UTL_SMTP.CONNECTION;
  L_STRING  VARCHAR2(32767);
  L_TABLE   VARCHAR2(32767);
  L_FROM_DB VARCHAR2(100);
  L_NO      NUMBER:=0;
  L_RETURN  VARCHAR2(4000);
  
 

BEGIN
   -- UTL_SMTP.CLOSE_DATA(L_MAIL_CONN);
  L_FROM_DB:='hyosung@vinagenuwin.com';
  L_MAIL_CONN := UTL_SMTP.OPEN_CONNECTION(P_MAILHOST, 25);
  UTL_SMTP.HELO(L_MAIL_CONN, P_MAILHOST);
  UTL_SMTP.MAIL(L_MAIL_CONN, L_FROM_DB);
  UTL_SMTP.RCPT(L_MAIL_CONN, P_TO );
  UTL_SMTP.RCPT(L_MAIL_CONN, P_CC);
  
  
  
      UTL_SMTP.OPEN_DATA(L_MAIL_CONN);
      UTL_SMTP.WRITE_DATA(L_MAIL_CONN, 'DATE: '    || TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS') || UTL_TCP.CRLF);
      UTL_SMTP.WRITE_DATA(L_MAIL_CONN, 'FROM: '    || P_FROM|| UTL_TCP.CRLF );
      UTL_SMTP.WRITE_DATA(L_MAIL_CONN, 'SUBJECT: ' || P_SUBJECT || UTL_TCP.CRLF);
      UTL_SMTP.WRITE_DATA(L_MAIL_CONN, 'CONTENT-TYPE: text/html; CHARSET=UTF-8' || UTL_TCP.CRLF );
      UTL_SMTP.WRITE_DATA(L_MAIL_CONN, 'TO: '      || P_TO || UTL_TCP.CRLF);
      UTL_SMTP.WRITE_DATA(L_MAIL_CONN, 'CC: '         || UTL_TCP.CRLF);
      L_TABLE:=
              '<TABLE width="100%" cellpadding="0" cellspacing="0" border=1 >
             <TR style="height:10px;border:0">
                    <TD width="5%" style="border:0;" >DATE:</TD>
                    <TD  width="10%" style="border:0;">' || TO_CHAR(TO_DATE(P_DATE,'YYYYMMDD'),'DD/MM/YYYY') || '</TD>
                    <TD  width="20%" style="border:0;">;</TD>
                    <TD  width="23%" style="border:0;">;</TD>
                    <TD   width="17%" style="border:0;">;</TD>
                    <TD   width="10%" style="border:0;">;</TD>
                    <TD  width="15%"  style=''border:0;COLOR:RED''>TOTAL: ' || P_TOTAL || '</TD>
             </TR>
             <TR  >
                     <TD align=center border=1><B>NO</B>.</TD>
                     <TD align=center   ><B>EMP ID</B></TD>
                     <TD  align=center ><B>FULL NAME</B></TD>
                     <TD align=center  ><B>ORGANIZATION</B></TD>
                     <TD  align=center ><B>TIME IN/NO SCAN CARD</B></TD>
                     <TD align=center  ><B>LATE MINUTES</B></TD>
                     <TD align=center  ><B>REMARK</B></TD>
             </TR>';
        FOR CUR IN (
                    SELECT A.EMP_ID C1,A.FULL_NAME C2,B.ORG_NM C3,A.NOTE C4,A.LATELY C5,A.REMARK C6
                   FROM THR_NON_LATELY_MAIL A,TCO_ORG B
                   WHERE A.DEL_IF=0 AND B.DEL_IF=0 AND A.TCO_ORG_PK=B.PK 
                   AND A.WORK_DT=P_DATE 
                   AND A.MANAGER_PK=P_MANAGER_PK 
                   ORDER BY EMP_ID)
      
      LOOP
        L_NO:=L_NO+1;
        L_TABLE:=L_TABLE 
          || '<TR>
              <TD  align=center >' || L_NO || '</TD>
              <TD   align=center ><B>' || CUR.C1 || '</B></TD>
              <TD  >' || CUR.C2 || '</TD>
              <TD  >' || CUR.C3 || '</TD>
              <TD  align=center >' || CUR.C4 || '</TD>
              <TD  align=center >' || CUR.C5 || ';</TD>
              <TD  align=center >' || CUR.C6 || ';</TD>
             </TR>';
        
    
      END LOOP;
      L_TABLE:=L_TABLE 
          || '</TABLE>' ; 
  UTL_SMTP.WRITE_RAW_DATA(L_MAIL_CONN, UTL_RAW.CAST_TO_RAW(CONVERT(   UTL_TCP.CRLF || L_TABLE || UTL_TCP.CRLF, 'UTF8')));
  UTL_SMTP.CLOSE_DATA(L_MAIL_CONN);
  UTL_SMTP.QUIT(L_MAIL_CONN);
  L_RETURN:='OK';
     
  RETURN L_RETURN;
  EXCEPTION
  WHEN UTL_SMTP.TRANSIENT_ERROR OR UTL_SMTP.PERMANENT_ERROR THEN
    --RAISE_APPLICATION_ERROR(-20000, 'UNABLE TO SEND MAIL: '||SQLERRM); 
     L_RETURN:=SUBSTR(SQLERRM,-(LENGTH(SQLERRM)-10));   
     --L_RETURN:=SQLERRM;
     RETURN L_RETURN;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_60200020_FORMULAR;

CREATE OR REPLACE FUNCTION HPDQ.sf_60200020_formular(p_tac_kafinanceform_pk in varchar,
                                                     p_column_type varchar,
                                                     p_kind varchar,
                                                     p_balance_type varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        28-Oct-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2(32767) := '';
   l_value       varchar2(2000) := '';
   l_rtn_value   number;
   l_status      varchar(300);
   l_balance_type varchar2(10);
begin
       for c1 in (
        select case when length(op) > 4 then substr(op, 3, length(op) - 3) else substr(op, -1) || substr(op, 1, 2) end operator_,
                     ac_cd, PRN_LR
                from (    select sys_connect_by_path(b.operator_, '1*') op, a.ac_cd, c.PRN_LR
                            from tac_tmptrialbal a, tac_kafinanceformd1 b, TAC_KAFINANCEFORM c
                           where b.del_if = 0 and a.ac_cd(+) = b.ac_cd 
                           and b.TAC_KAFINANCEFORM_PK=c.pk
                           and c.del_if=0
                           and a.ac_cd is not null
                      start with b.tac_kafinanceform_pk = p_tac_kafinanceform_pk and b.del_if = 0
                      connect by prior b.tac_kafinanceform_sum_pk = tac_kafinanceform_pk and b.del_if = 0)
                  )
   loop
    
    l_balance_type :=  upper(c1.PRN_LR);
    
      if p_column_type = 'THIS'
      then
         if (   l_balance_type = 'L'
             or l_balance_type = 'R'
             or l_balance_type = 'B'
             or l_balance_type = 'E'
             or l_balance_type = 'O')
         then
            begin
                 select decode(l_balance_type,  'L', sum(nvl(dr_this_ps, 0)),  'R', sum(nvl(cr_this_ps, 0)),  'O', sum(nvl(dr_this_op, 0)),  'E', decode(dc, 1, sum(nvl(dr_this_bl, 0)), sum(nvl(cr_this_bl, 0))),  decode(dc, 1, sum(nvl(dr_this_bl, 0)) - sum(nvl(cr_this_op, 0)), sum(nvl(dr_this_bl, 0)) - sum(nvl(cr_this_op, 0))))
                   into l_value
                   from tac_ic_internal
                  where ac_cd = c1.ac_cd
               group by dc;
            exception
               when no_data_found
               then
                  l_value   := 0;
            end;
         end if;
      elsif p_column_type = 'THIS_ACC'
      then
         if (   l_balance_type = 'L'
             or l_balance_type = 'R'
             or l_balance_type = 'B'
             or l_balance_type = 'E'
             or l_balance_type = 'O')
         then
            begin
                 select decode(l_balance_type,  'L', sum(nvl(dr_acc_this_ps, 0)),  'R', sum(nvl(cr_acc_this_ps, 0)),  'O', sum(nvl(dr_acc_this_op, 0)),  'E', decode(dc, 1, sum(nvl(dr_acc_this_bl, 0)), sum(nvl(cr_acc_this_bl, 0))),  decode(dc, 1, sum(nvl(dr_acc_this_bl, 0)) - sum(nvl(cr_acc_this_op, 0)), sum(nvl(dr_acc_this_bl, 0)) - sum(nvl(cr_acc_this_op, 0))))
                   into l_value
                   from tac_ic_internal
                  where ac_cd = c1.ac_cd
               group by dc;
            exception
               when no_data_found
               then
                  l_value   := 0;
            end;
         end if;
      elsif p_column_type = 'PRE_ACC'
      then
         if (   l_balance_type = 'L'
             or l_balance_type = 'R'
             or l_balance_type = 'B'
             or l_balance_type = 'E'
             or l_balance_type = 'O')
         then
            begin
                 select decode(l_balance_type,  'L', sum(nvl(dr_acc_ps, 0)),  'R', sum(nvl(cr_acc_ps, 0)),  'O', sum(nvl(dr_acc_op, 0)),  'E', decode(dc, 1, sum(nvl(dr_acc_bl, 0)), sum(nvl(cr_acc_bl, 0))),  decode(dc, 1, sum(nvl(dr_acc_bl, 0)) - sum(nvl(cr_acc_op, 0)), sum(nvl(dr_acc_bl, 0)) - sum(nvl(cr_acc_op, 0))))
                   into l_value
                   from tac_ic_internal
                  where ac_cd = c1.ac_cd
               group by dc;
            exception
               when no_data_found
               then
                  l_value   := 0;
            end;
         end if;
      end if;

      if (l_value is null or l_value = '')
      then
         l_value   := 0;
      else
         l_value   := nvl(c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular   := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status   := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_ALLOTMENT_ROOM_REMAIN;

CREATE OR REPLACE FUNCTION HPDQ.sf_allotment_room_remain (p_allotment_yn         varchar,
                                                     p_date                 varchar,
                                                     p_room_type            varchar,
                                                     p_tco_buspartner_pk    varchar)
   return number
is
   /******************************************************************************
      NAME:       sf_allotment_room_remain
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        11/24/2012   Administrator       1. Created this function.

   ******************************************************************************/
   l_rtn_value       number;
   l_use_qty         number;
   l_allotment_qty   number;
begin
   if p_allotment_yn = 'Y'
   then
      select count (*)
        into l_use_qty
        from tht_booking x, tht_bookingd y
       where     y.tht_booking_pk = x.pk
             and x.del_if = 0
             and y.del_if = 0
             and x.status in (10, 20)
             and y.allotment_yn = 'Y'
             and y.room_type = p_room_type
             and p_date between x.from_date and to_char (to_date (x.date_to, 'yyyymmdd') - 1, 'yyyymmdd')
             and x.tco_buspartner_pk = p_tco_buspartner_pk;

      select sum (b.room_qty)
        into l_allotment_qty
        from tht_allotment_booking a, tht_allotment_bookingd b
       where     p_date between a.from_date and a.date_to
             and a.del_if = 0
             and b.del_if = 0
             and a.tco_buspartner_pk = p_tco_buspartner_pk
             and b.tht_allotment_booking_pk = a.pk
             and b.room_qty is not null
             and a.booking_type = 'ALLT'
             and b.room_type = p_room_type;

      l_rtn_value := nvl (l_allotment_qty, 0) - nvl (l_use_qty, 0);
      return l_rtn_value;
   else
      select count (*)
        into l_use_qty
        from tht_booking x, tht_bookingd y
       where     y.tht_booking_pk = x.pk
             and x.del_if = 0
             and y.del_if = 0
             and x.status in (10, 20)
             and y.commitment_yn = 'Y'
             and y.room_type = p_room_type
             and p_date between x.from_date and to_char (to_date (x.date_to, 'yyyymmdd') - 1, 'yyyymmdd')
             and x.tco_buspartner_pk = p_tco_buspartner_pk;

      select sum (b.room_qty)
        into l_allotment_qty
        from tht_allotment_booking a, tht_allotment_bookingd b
       where     p_date between a.from_date and a.date_to
             and a.del_if = 0
             and b.del_if = 0
             and a.tco_buspartner_pk = p_tco_buspartner_pk
             and b.tht_allotment_booking_pk = a.pk
             and b.room_qty is not null
             and a.booking_type = 'CMMT'
             and b.room_type = p_room_type;

      l_rtn_value := nvl (l_allotment_qty, 0) - nvl (l_use_qty, 0);
      return l_rtn_value;
   end if;
end sf_allotment_room_remain;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_AVAILABLE_ROOM_TYPE;

CREATE OR REPLACE FUNCTION HPDQ.sf_available_room_type(p_fr_date varchar, p_to_date varchar, p_room_type varchar)
 return NUMBER is

/******************************************************************************
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/7/2011   Nguyen Van Thai       1. Created this function.

******************************************************************************/
l_rtn_value number:=1000;
l_fr_date date;
l_to_date date;
l_days number;
l_cnt number;
l_total_room number;
l_ymd varchar2(8);
l_book_qty number;
l_book_qty2 number;
l_occupied_qty number;

begin
   select to_date(p_fr_date, 'yyyymmdd'),to_date(p_to_date, 'yyyymmdd') into l_fr_date,l_to_date from dual;
   select round(l_to_date - l_fr_date) into l_days from dual;
        
   for l_cnt in 0..l_days-1
   loop
     select to_char(l_fr_date+l_cnt,'yyyymmdd') into l_ymd from dual;
      
     select count (*)
      into l_total_room
      from tht_room
     where     room_type = p_room_type
       and del_if = 0
       and use_yn = 'Y'
       and pk not in (select tht_room_pk
                        from tht_room_status
                       where l_ymd between out_of_order_fr and out_of_order_to and del_if = 0);
     
   select  count (a.pk) into l_book_qty
    from tht_bookingd a,  tht_booking c
   where     a.del_if = 0
          and c.del_if = 0
          and a.tht_booking_pk = c.pk
          and c.status in ('10')
          and not exists (select 1 from tht_room_allocate where del_if=0 and tht_bookingd_pk=a.pk)
         and l_ymd between c.from_date and nvl(to_char(to_date(c.date_to,'yyyymmdd')-1,'yyyymmdd'),c.from_date)
         and a.room_type=p_room_type;
         
   select  count (a.pk) into l_book_qty2
    from tht_bookingd a,  tht_booking c
   where     a.del_if = 0
          and c.del_if = 0
          and a.tht_booking_pk = c.pk
          and c.status in ('20')
          and (c.release_date > to_char(sysdate,'yyyymmdd') or c.release_date is null)
          and not exists (select 1 from tht_room_allocate where del_if=0 and tht_bookingd_pk=a.pk)
         and l_ymd between c.from_date and nvl(to_char(to_date(c.date_to,'yyyymmdd')-1,'yyyymmdd'),c.from_date)
         and a.room_type=p_room_type;      
         
    l_book_qty := nvl(l_book_qty,0) + nvl(l_book_qty2,0) ;    
    
    ----------------------------------------------------
    select count (*)
      into l_occupied_qty
      from tht_room_allocate
     where l_ymd between to_char (sysdate, 'yyyymmdd')
                           and to_char (to_date (departure_date, 'yyyymmdd') - 1, 'yyyymmdd')
       and checkout_date is null
       and del_if = 0
       and room_type = p_room_type;
    --------------------------------------------   
       
    if l_rtn_value > (l_total_room-(nvl(l_book_qty,0)+l_occupied_qty)) then
        l_rtn_value := l_total_room-(nvl(l_book_qty,0)+l_occupied_qty);
    end if;
    
    if l_rtn_value < 0 then
          return l_rtn_value;
    end if;
    
   end loop;
     
    
   return l_rtn_value;
   
end sf_available_room_type;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACCD;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACCD
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK             = p_pk
     --AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END SF_A_GET_ACCD;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACCD3;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_accd3 (p_pk VARCHAR2, p_compk VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (50);
BEGIN
   l_rtn_value := '';

   SELECT ac_cd
     INTO l_rtn_value
     FROM tac_stcode
    WHERE pk = p_pk AND tco_company_pk = p_compk AND del_if = 0;

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACCD_ST;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACCD_ST
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_STCODE
   WHERE PK             = p_pk
     --AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACCD_ST1;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACCD_St1
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(255);
BEGIN

  l_rtn_value := '';
  
  SELECT '[' || b.ac_cd || ':' || b.AC_SNM || ']' 
    INTO l_rtn_value
    FROM TAC_ABACCTCODE a, TAC_STCODE b
   WHERE a.PK             = p_pk
     --AND tco_company_pk = p_compk
     AND a.DEL_IF         = 0
     and b.del_if=0
     and a.TAC_STCODE_PK = b.pk;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACCD_ST2;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACCD_ST2
                                (
                                    p_pk           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN VARCHAR2 
IS
  l_rtn_value       VARCHAR2(50);
BEGIN

  l_rtn_value := '';
  
  SELECT ac_cd
    INTO l_rtn_value
    FROM TAC_STCODE
   WHERE PK             =p_pk
     AND tco_company_pk = p_compk
     AND DEL_IF         = 0;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACC_PK;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACC_PK
                                (
                                    p_ac_cd           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN number 
IS
  l_rtn_value       number;
BEGIN

  l_rtn_value := '';
  
  SELECT pk
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE     AC_CD  =  p_ac_cd
     AND tco_company_pk = p_compk
     AND DEL_IF         = 0;
  RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACNM;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACNM(
                                            p_pk        VARCHAR2,
                                            p_compk     VARCHAR2,
                                            p_lang    VARCHAR2
                                        ) 
RETURN VARCHAR2
IS
  l_rtn_value VARCHAR2(255);
BEGIN

  l_rtn_value := '';

  SELECT decode(p_lang,'ENG',AC_NM,'VIE',ac_lnm,'KOR',ac_knm)
    INTO l_rtn_value
    FROM TAC_ABACCTCODE
   WHERE PK              = p_pk
     --AND TCO_COMPANY_PK  = p_compk
     AND DEL_IF          = 0;

  RETURN l_rtn_value;
---------
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACNMLOCAL_BYACPK;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACNMlocal_byacpk(
                                            p_tac_abacctcode_pk        VARCHAR2,
                                            p_compk     VARCHAR2,
                                            p_lang    VARCHAR2
                                        ) 
RETURN VARCHAR2
IS
  l_rtn_value VARCHAR2(255);
BEGIN

  l_rtn_value := '';

  SELECT decode(p_lang,'ENG',AC_NM,'VIE',ac_lnm,'KOR',ac_knm)
    INTO l_rtn_value
     FROM tac_localcode
    WHERE pk =
             (SELECT tac_localcode_pk
                FROM tac_abacctcode
               WHERE del_if = 0 AND pk = p_tac_abacctcode_pk
                     AND tco_company_pk = p_compk);

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACNM_KOREAN;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACNM_KOREAN(P_PK IN STRING) 
RETURN VARCHAR2 
IS
l_rtn_value VARCHAR2(255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
    l_rtn_value :='';

   SELECT AC_KNM INTO   l_rtn_value
     FROM TAC_ABACCTCODE
    WHERE PK     =  p_Pk
      AND DEL_IF = 0;
      
RETURN  l_rtn_value;
---------
EXCEPTION
---------
     WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACNM_LOCAL;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACNM_LOCAL(P_PK IN STRING) 
RETURN VARCHAR2 
IS
l_rtn_value VARCHAR2(255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
    l_rtn_value :='';

   SELECT AC_LNM INTO   l_rtn_value
     FROM TAC_ABACCTCODE
    WHERE PK     =  p_Pk
      AND DEL_IF = 0;
      
RETURN  l_rtn_value;
---------
EXCEPTION
---------
     WHEN OTHERS THEN RAISE;
END SF_A_GET_ACNM_LOCAL;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACPK_COMPK;

CREATE OR REPLACE FUNCTION HPDQ.Sf_A_Get_Acpk_compk(p_acc_code   VARCHAR2,COM_PK   IN  STRING)
RETURN  VARCHAR2
IS
l_acc_pk       NUMBER(10);
BEGIN
   SELECT PK INTO l_acc_pk
     FROM TAC_ABACCTCODE
    WHERE AC_CD  = p_acc_code
--      AND TCO_COMPANY_PK = COM_PK
      AND DEL_IF = 0;

   RETURN  l_acc_pk;

EXCEPTION
   WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_ACPK_FR_GRP;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_ACPK_FR_GRP
                                (
                                    p_grp_cd       VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN number 
IS
  l_rtn_value       number;
BEGIN

  l_rtn_value := '';
  
  
     
     SELECT tac_abacctcode_pk
          INTO l_rtn_value
          FROM tac_abtracgrpd d, tac_abtracgrp h
         WHERE d.del_if = 0
           AND h.del_if = 0
           AND d.tac_abtracgrp_pk = h.pk
           AND h.app_grp = 'Y'
           AND h.ac_grp = p_grp_cd
           AND h.tco_company_pk = p_compk
           
     ;

  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_AGTRITEM;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_AGTRITEM
  (
   v_trdpk        in       NUMBER      -- Trd_Pk
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
       SELECT '[' || CCY || ',' || DECODE(CCY,'VND',TO_CHAR(TR_AMT,'999,999,999,999,999'),TO_CHAR(TR_AMT,'999,999,999,999,990.99')) ||']' AS DATA1
     FROM TAC_HGTRD
         WHERE PK= v_trdpk
        AND CCY != 'KRW'
    UNION ALL
       SELECT '[' || B.PARTNER_NAME ||']' AS DATA1
         FROM TAC_HGTRD A, TCO_BUSPARTNER B
        WHERE A.PK= v_trdpk
            AND A.TCO_BUSPARTNER_PK = B.PK
    

            
    UNION ALL
    SELECT '[' || A.ITEM || ']'AS DATA1
      FROM TAC_HGTRDITEM a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_HGTRD_PK = v_trdpk
       AND B.TAC_ABITEM_ALIAS  = 'EMPLOYEE NAME'
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 
    UNION ALL   
    SELECT '[Project : ' ||B.PLC_CD || ' ' || B.PLC_NM || ']' AS DATA1
     FROM TAC_HGTRD A, TAC_ABCENTER B
    WHERE A.PK= v_trdpk
        AND A.TAC_ABPLCENTER_PK  = B.PK;
      
   /* UNION ALL
    SELECT '[' || b.TAC_ABITEM_ALIAS ||' : ' || DECODE(A.ITEM_NM,NULL,A.ITEM,A.ITEM_NM) || ']'AS DATA1
      FROM tac_bgtrditem a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_BGTRD_PK = v_trdpk
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 ;
       
           UNION ALL
       SELECT '[' || B.BG_DEPTNM ||']' AS DATA1
         FROM TAC_HGTRD A, TAC_EBDEPT B
        WHERE A.PK= v_trdpk
             AND A.TAC_ABBUDGET_PK = B.PK
             
       
       */


BEGIN


FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_AGTRITEM1;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_AGTRITEM1
  (
   v_trdpk        in       NUMBER      -- Trd_Pk
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
       SELECT '[' || CCY ||  ','  || DECODE(CCY,'VND',TO_CHAR(TR_AMT,'999,999,999,999,999'),TO_CHAR(TR_AMT,'999,999,999,999,990.99')) ||
                     chr(10)  ||  chr(13)  ||    ',Ex.Rate: '  || to_char(TR_RATE,'999,999')  ||   ']' AS DATA1
     FROM TAC_HGTRD
         WHERE PK= v_trdpk
        AND CCY != 'KRW'
    UNION ALL
       SELECT '[' || B.PARTNER_NAME ||']' AS DATA1
         FROM TAC_HGTRD A, TCO_BUSPARTNER B, TAC_ABACCTCODE c
        WHERE A.PK= v_trdpk
            AND A.TCO_BUSPARTNER_PK = B.PK
            and c.del_if = 0
            and a.TAC_ABACCTCODE_pk = c.pk
            and C.CUST_YN = 'Y'
    

            
    UNION ALL
    SELECT '[' || A.ITEM ||' ' || A.ITEM_nm ||  ']'AS DATA1
      FROM TAC_HGTRDITEM a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_HGTRD_PK = v_trdpk
    --   AND B.TAC_ABITEM_ALIAS  = 'EMPLOYEE NAME'
    and  b.PRN_CHK = 'Y'
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 
    UNION ALL   
    SELECT '[Project : ' ||B.PLC_CD || ' ' || B.PLC_NM || ']' AS DATA1
     FROM TAC_HGTRD A, TAC_ABPLCENTER c, TAC_ABCENTER B
    WHERE A.PK = v_trdpk
        AND A.TAC_ABPLCENTER_PK  = c.PK
        and c.del_if = 0
        and b.del_if = 0
        and c.TAC_ABCENTER_PK = b.pk;
        
--    UNION ALL
--    SELECT '[' || A.ITEM ||' ' || A.ITEM_nm ||  ']'AS DATA1
--      FROM TAC_HGTRDITEM a, TAC_ABACCTITEM b
--     where TAC_ABACCTITEM_PK = b.PK
--       AND TAC_HGTRD_PK = v_trdpk
--       AND B.TAC_ABITEM_ALIAS  = 'EMPLOYEE NAME'
--    and  b.PRN_CHK = 'Y'
--       AND a.DEL_IF = 0
--       AND b.DEL_IF = 0   ;
   /* UNION ALL
    SELECT '[' || b.TAC_ABITEM_ALIAS ||' : ' || DECODE(A.ITEM_NM,NULL,A.ITEM,A.ITEM_NM) || ']'AS DATA1
      FROM tac_bgtrditem a, TAC_ABACCTITEM b
     where TAC_ABACCTITEM_PK = b.PK
       AND TAC_BGTRD_PK = v_trdpk
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0 ;
       
           UNION ALL
       SELECT '[' || B.BG_DEPTNM ||']' AS DATA1
         FROM TAC_HGTRD A, TAC_EBDEPT B
        WHERE A.PK= v_trdpk
             AND A.TAC_ABBUDGET_PK = B.PK
             
       
       */


BEGIN


FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_AGTRITEM2;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_AGTRITEM2
  (
   v_trdpk        in       NUMBER      -- Trd_Pk
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
      
       SELECT  B.PARTNER_ID||' - '|| B.PARTNER_NAME  AS DATA1
         FROM TAC_HGTRD A, TCO_BUSPARTNER B
        WHERE A.PK= v_trdpk
            AND A.TCO_BUSPARTNER_PK = B.PK
         
    UNION ALL   
    SELECT B.PLC_CD || ' - ' || B.PLC_NM AS DATA1
     FROM TAC_HGTRD A, TAC_ABCENTER B
    WHERE A.PK= v_trdpk
        AND A.TAC_ABPL_PK  = B.PK;   
    
BEGIN


FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_AGTRITEM3;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_AGTRITEM3
  (
   v_trdpk        in       NUMBER      -- Trd_Pk
  )


RETURN  VARCHAR2
IS
/**=================================================================================
* Function     SF_A_GET_AGTRITEM
* Description
* Return
* Writer        Tuyen
* Create Date   2003-11-17
=================================================================================*/

lsvItem       VARCHAR2(1000) := NULL;

CURSOR ITEM_CUS IS
      
   SELECT d.plc_cd || ' - ' || d.plc_nm as DATA1
  FROM tac_hgtrd b,
       tac_abplcenter a,
       tac_abpl c,
       tac_abcenter d
 WHERE a.pk = b.tac_abpl_pk AND a.tac_abpl_pk = c.pk(+) AND a.tac_abcenter_pk = d.pk(+) AND b.pk(+) = v_trdpk;
    
BEGIN


FOR rec IN ITEM_CUS LOOP
    lsvItem := lsvItem || rec.DATA1;
END LOOP;



RETURN  lsvItem;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_BOOKCCY;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_bookccy (p_compk varchar2)
   return varchar2
is
   l_rtn_value   varchar2 (10);
begin
   l_rtn_value := '';

   select code
     into l_rtn_value
     from tco_abcode a, tco_abcodegrp b
    where     a.tco_abcodegrp_pk = b.pk
          and b.id = 'ACBG0040'
          and a.use_if = 1
          and a.del_if = 0
          and b.del_if = 0
          and a.def_yn = 'Y';

   return l_rtn_value;

end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_BOOKFORMAT;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_bookformat (p_grp varchar2)
   return varchar2
is
   
   v_rpt_code   varchar2 (50);
begin
   select   b.code_nm
       into v_rpt_code
       from tac_commcode_master a, tac_commcode_detail b
      where a.pk = b.tac_commcode_master_pk and a.id = p_grp and a.del_if = 0 and b.del_if = 0
      AND def_yn='Y'
   order by code, b.code_nm;

   return v_rpt_code;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_COMMONCODE;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_COMMONCODE
                                    (
                                        p_grp       VARCHAR2
                                    )
RETURN VARCHAR2
IS
    
    v_code          VARCHAR2(20);
    v_name          VARCHAR2(100);
    v_rpt_code      VARCHAR2(3000);
    
    CURSOR C1 IS
        SELECT CODE, B.CODE_NM
          FROM TAC_COMMCODE_MASTER A, TAC_COMMCODE_DETAIL B
         WHERE A.PK     = B.TAC_COMMCODE_MASTER_PK
           AND A.ID     = p_grp
           AND A.DEL_IF = 0
           AND B.DEL_IF = 0
           AND B.USE_YN ='Y'
         ORDER BY CODE, B.CODE_NM;
         
BEGIN

    OPEN C1;
    LOOP
      FETCH C1 INTO v_code, v_name;
      EXIT WHEN C1%NOTFOUND;
          v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
    END LOOP;

    RETURN v_rpt_code;

EXCEPTION
    WHEN OTHERS THEN RETURN SQLERRM;
END SF_A_GET_COMMONCODE;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_COMMON_BYCODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_common_bycode (p_grp     varchar2,
                                                        p_code    varchar)
   return varchar2
is
   v_code       varchar2 (20);
   v_name       varchar2 (100);
   v_rpt_code   varchar2 (3000);
begin
     select b.num_1
       into v_rpt_code
       from tac_commcode_master a, tac_commcode_detail b
      where     a.pk = b.tac_commcode_master_pk
            and a.id = p_grp
            and a.del_if = 0
            and b.del_if = 0
            and b.use_yn = 'Y'
            and b.code = p_code
   order by code, b.code_nm;

   return v_rpt_code;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_COMPANY;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_company(p_grp VARCHAR2)
   RETURN VARCHAR2
IS
   v_code VARCHAR2(20);
   v_name VARCHAR2(100);
   v_rpt_code VARCHAR2(3000);

   CURSOR c1
   IS
      SELECT pk, partner_name
        FROM tco_company
       WHERE del_if = 0;
BEGIN
   OPEN c1;

   LOOP
      FETCH c1
       INTO v_code, v_name;

      EXIT WHEN c1%NOTFOUND;
      v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
   END LOOP;

   RETURN v_rpt_code;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_DEFAULT;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_default (p_grp varchar2)
   return varchar2
is
   
   v_rpt_code   varchar2 (10);
begin
   select   code
       into v_rpt_code
       from tac_commcode_master a, tac_commcode_detail b
      where a.pk = b.tac_commcode_master_pk and a.id = p_grp and a.del_if = 0 and b.del_if = 0
      AND def_yn='Y'
   order by code, b.code_nm;

   return v_rpt_code;
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_DEPARTMENT_PK;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_DEPARTMENT_PK
                                (
                                    p_dept_nm          VARCHAR2
                              --      p_compk        VARCHAR2
                                )
RETURN number 
IS
  l_rtn_value       number;
BEGIN

  l_rtn_value := '';
  
  SELECT pk
    INTO l_rtn_value
    FROM TCO_ORG
   WHERE     org_id  =  p_dept_nm
 --    AND tco_company_pk = p_compk
     AND DEL_IF         = 0;
  RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_GFGF00040_01_1;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_gfgf00040_01_1(
   p_tac_gffa_mst_pk   VARCHAR
 , p_from              VARCHAR2
 , p_to                VARCHAR)
   RETURN VARCHAR2
IS
   l_rtn_value VARCHAR2(255);
  /******************************************************************************
 NAME:       SF_A_GET_UPPER_DEPTNM
 PURPOSE:

 REVISIONS:
 Ver        Date         Author              Description
 ---------  ----------   ---------------     ------------------------------------
 1.0        21-Jul-2009  TTAL                1. Created this procedure.

******************************************************************************/
BEGIN
   SELECT CASE
             WHEN fa_depr_date <=
                    TO_CHAR(LAST_DAY(TO_DATE(p_to || '01', 'yyyymmdd') )
                          , 'yyyymmdd')
                THEN 'DEPRECIATED'
             ELSE 'NOT DEPRECIATED'
          END CASE
     INTO l_rtn_value
     FROM tac_gffa_mst a
    WHERE a.del_if = 0 AND pk = p_tac_gffa_mst_pk;

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_LIST_COMPANY;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_list_company(p_user_pk VARCHAR2)
   RETURN VARCHAR2
IS
   v_code VARCHAR2(20);
   v_name VARCHAR2(100);
   v_rpt_code VARCHAR2(3000);

   CURSOR c1
   IS
      select  a.tco_company_pk,decode( a.tco_company_pk,0,'ALL',b.partner_name) partner_name
        from tac_companyuser a,tco_company b
       where a.del_if = 0 and b.del_if (+)= 0
             and a.tco_company_pk = b.pk(+)
            and a.tco_bsuser_pk = p_user_pk;
BEGIN
   OPEN c1;

   LOOP
      FETCH c1
       INTO v_code, v_name;

      EXIT WHEN c1%NOTFOUND;
      v_rpt_code := v_rpt_code || '' || v_code || '|' || v_name || '|';
   END LOOP;
    v_rpt_code := substr(v_rpt_code, 1, length(v_rpt_code) - 1); 
   RETURN v_rpt_code;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_PLUNIT_PK;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_PLUNIT_PK
                                (
                                    p_pl_cd           VARCHAR2,
                                    p_compk        VARCHAR2
                                )
RETURN number 
IS
  l_rtn_value       number;
BEGIN

  l_rtn_value := '';
  
  SELECT E.PK
  INTO l_rtn_value
  FROM TAC_ABPL D,
       TAC_ABPLCENTER E,
       (    SELECT PK, plc_cd, plc_nm
              FROM TAC_ABCENTER
             WHERE DEL_IF = 0 AND TCO_COMPANY_PK = p_compk 
             AND CONNECT_BY_ISLEAF = 1
        CONNECT BY PRIOR PK = P_PK
        START WITH P_PK IS NULL) B
 WHERE     D.DEL_IF = 0
       AND E.DEL_IF = 0
       AND E.TAC_ABPL_PK = D.PK
       AND E.TAC_ABCENTER_PK = B.PK
       AND D.PL_CD = p_pl_cd
       AND D.USE_YN = 'Y';
  RETURN l_rtn_value;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_UPPER_DEPTNM;

CREATE OR REPLACE FUNCTION HPDQ.sf_a_get_upper_deptnm(p_tco_org_pk VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value VARCHAR2(255);
  /******************************************************************************
 NAME:       SF_A_GET_UPPER_DEPTNM
 PURPOSE:

 REVISIONS:
 Ver        Date         Author              Description
 ---------  ----------   ---------------     ------------------------------------
 1.0        21-Jul-2009  TTAL                1. Created this procedure.

******************************************************************************/
BEGIN
   SELECT org_id || '--' || org_nm
     INTO l_rtn_value
     FROM tco_org
    WHERE del_if = 0 AND pk = (SELECT p_pk
                                 FROM tco_org
                                WHERE del_if = 0 AND pk = p_tco_org_pk);

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_CALCULATE_ROOM_RATE;

CREATE OR REPLACE FUNCTION HPDQ.sf_calculate_room_rate(p_tht_rate_plans_pk varchar,p_room_type varchar, p_adult varchar, p_child varchar ) return NUMBER is

/******************************************************************************
    REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/18/2010   Nguyen Van Thai       1. Created this function.

   NOTES:
   
******************************************************************************/
l_adult_amt number;
l_child_amt number;
l_rtn_value number;
begin

  for cur in (select *
  from tht_room_price
 where tht_rate_plans_pk = p_tht_rate_plans_pk and room_type = p_room_type and del_if = 0)
  loop
     /*
      if p_adult = 1 then
        l_adult_amt:=cur.single_amt;
      elsif p_adult = 2 then
        l_adult_amt:=cur.double_amt*2;
      elsif p_adult = 3 then
        l_adult_amt:=cur.triple_amt*3;
      elsif p_adult = 4 then
        l_adult_amt:=cur.quad_amt*4;
      elsif p_adult > 4 then
        l_adult_amt:=cur.quad_amt*4;
        l_adult_amt:=l_adult_amt+ (p_adult-4)*cur.extra_adult_amt;      
      end if;
      */
      l_adult_amt:=cur.package_amt;
      
      if p_adult > cur.max_adult then
        l_adult_amt:=l_adult_amt+(p_adult - cur.max_adult)*cur.extra_adult_amt;
      end if;
      
      l_child_amt:=nvl(p_child,0)*cur.child_amt;
      
      l_rtn_value:=l_adult_amt+l_child_amt;
      
      return l_rtn_value;       
  end loop;
  
  return -1;
end sf_calculate_room_rate;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_CALCULATE_ROOM_RATE2;

CREATE OR REPLACE FUNCTION HPDQ.sf_calculate_room_rate2(p_tht_room_price_pk varchar,p_adult varchar, p_child varchar ) return NUMBER is

/******************************************************************************
    REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/18/2010   Nguyen Van Thai       1. Created this function.

   NOTES:
   
******************************************************************************/
l_adult_amt number;
l_child_amt number;
l_rtn_value number;
begin

  for cur in (select *
  from tht_room_price
 where pk = p_tht_room_price_pk and del_if = 0)
  loop
  /*
      if p_adult = 1 then
        l_adult_amt:=cur.single_amt;
      elsif p_adult = 2 then
        l_adult_amt:=cur.double_amt*2;
      elsif p_adult = 3 then
        l_adult_amt:=cur.triple_amt*3;
      elsif p_adult = 4 then
        l_adult_amt:=cur.quad_amt*4;
      elsif p_adult > 4 then
        l_adult_amt:=cur.quad_amt*4;
        l_adult_amt:=l_adult_amt+ (p_adult-4)*cur.extra_adult_amt;      
      end if;
  */    
      l_adult_amt:=cur.package_amt;
      
      if p_adult > cur.max_adult then
        l_adult_amt:=l_adult_amt+(p_adult - cur.max_adult)*cur.extra_adult_amt;
      end if;
      
      l_child_amt:=nvl(p_child,0)*cur.child_amt;
      
      l_rtn_value:=l_adult_amt+l_child_amt;
      
      return l_rtn_value;       
      
  end loop;
  
 return -1;
  
end sf_calculate_room_rate2;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_CHECK_DATE;

CREATE OR REPLACE FUNCTION HPDQ.SF_CHECK_DATE 
(
    p_date varchar
)

RETURN NUMBER IS
l_date  date;

/******************************************************************************
   NAME:       SF_CHECK_DATE
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/13/2010          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SF_CHECK_DATE
      Sysdate:         12/13/2010
      Date and Time:   12/13/2010, 2:29:18 PM, and 12/13/2010 2:29:18 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN

        select to_date(p_date,'yyyymmdd') into l_date  from dual;
        return 1 ;
        
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
           return 0;
       -- Consider logging the error and then re-raise
END SF_CHECK_DATE;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_CHECK_VIEW_EXISTS;

CREATE OR REPLACE FUNCTION HPDQ.SF_CHECK_VIEW_EXISTS (
   P_VIEW_NAME   VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   NAME:       SF_GET_BUDGET_BALANCE
   PURPOSE:

   REVISIONS:
   VER        DATE        AUTHOR           DESCRIPTION
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/23/2009   NGUYEN VAN THAI       1. CREATED THIS FUNCTION.

******************************************************************************/
   L_RES   VARCHAR2(100);
BEGIN
   
    SELECT VIEW_NAME INTO L_RES FROM USER_VIEWS WHERE VIEW_NAME = P_VIEW_NAME;

   RETURN L_RES;
   
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_COABCALENDAR;

CREATE OR REPLACE FUNCTION HPDQ.SF_COABCALENDAR (
   aSvStDate        IN   VARCHAR2,
   aSvEndDate          IN   VARCHAR2
)
   RETURN VARCHAR2
IS

lnvI               Number  := 0  ;
lnvDays               Number  := 0  ;
lnvPK               Number  := 0  ;
lDvDate            DATE;
lSvDate            VARCHAR2(8);
rsvReturn            VARCHAR2(30);-- change to 30  (10 )



BEGIN

    lnvDays    := TO_DATE(aSvEndDate,'YYYYMMDD') - TO_DATE(aSvStDate,'YYYYMMDD');

    FOR lnvI IN 0..lnvDays LOOP


       lDvDate := TO_DATE(aSvStDate,'YYYYMMDD') + lnvI;
       lSvDate := TO_CHAR(lDvDate,'YYYYMMDD');

       BEGIN

       INSERT INTO TCO_ABCALENDAR (PK,     CAR_DATE, DAY_TYPE,   DEL_IF, CRT_BY, CRT_DT)
       select TCO_ABCALENDAR_seq.nextval, lSvDate,  to_char(lDvDate,'D'),    0,  'GEN',SYSDATE  from dual;

       EXCEPTION
         WHEN NO_DATA_FOUND THEN
             RETURN '-11' ;
          WHEN OTHERS THEN
             RETURN '-21'||TO_CHAR(lnvI)||TO_CHAR(lnvDays)||RTRIM(SUBSTR(SQLERRM,10,90)) || '[' || TO_CHAR(SQLCODE) || ']';

       END;

--      EXECUTE IMMEDIATE lsvSql;

        RETURN TO_CHAR(lDvDate,'YYYYMMDD')||'  '||TO_CHAR(lnvI);

    END LOOP;

    RETURN 'SUCCESS '||TO_CHAR(lnvDays)||'DAYS' ;

EXCEPTION
     WHEN NO_DATA_FOUND THEN
             RETURN '-1' ;
     WHEN OTHERS THEN
             RETURN '-2'||TO_CHAR(lnvI)||TO_CHAR(lnvDays)||RTRIM(SUBSTR(SQLERRM,10,90)) || '[' || TO_CHAR(SQLCODE) || ']';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_CODE_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_code_name (
   t_group   IN   VARCHAR2,
   t_code    IN   VARCHAR2,
   t_type    IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   v_name   VARCHAR2 (50);
BEGIN
   SELECT DECODE (RTRIM (t_type),
                  '1', RTRIM (code_nm),
                  RTRIM (code) || ' ' || RTRIM (code_nm)
                 ) AS NAME
     INTO v_name
     FROM tco_abcode a, tco_abcodegrp b
    WHERE a.tco_abcodegrp_pk = b.pk
      AND b.del_if = 0
      AND a.del_if = 0
      AND b.ID = t_group
      AND a.code = t_code;

   RETURN (v_name);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN (' ');
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_CUSTOMER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_customer_name (p_pk in varchar2)
    RETURN  varchar
  IS
    l_rtn_value varchar2(100);


BEGIN
    SELECT  last_name into l_rtn_value FROM tht_room_allocate WHERE pk < 0 AND del_if = 0 and pk=p_pk;  
RETURN    l_rtn_value ;

EXCEPTION
   WHEN OTHERS THEN
        RETURN 'Select All';
END sf_customer_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_ES_GET_USER_ALERT;

CREATE OR REPLACE FUNCTION HPDQ.sf_es_get_user_alert (p_tco_bsuser_pk in varchar)
   return varchar2
is
   l_rtn_value   varchar2 (4000) := ' ';
begin
   for cur in (select     pk
                     from tes_alertlist
                    where use_yn = 'Y' and del_if = 0
               connect by prior parent_pk = pk
               start with pk in (select tes_alertlist_pk
                                   from tes_user_alert
                                  where use_yn = 'Y' and del_if = 0 and tes_user_pk = p_tco_bsuser_pk))
   loop
      l_rtn_value := l_rtn_value || cur.pk || ',';
   end loop;

   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_ES_RESET_SEQUENCE;

CREATE OR REPLACE FUNCTION HPDQ.sf_es_reset_sequence (v_user in varchar2)
   return varchar2
is
   pragma autonomous_transaction;
   /******************************************************************************
      NAME:       f_sequence
      PURPOSE: reset sequence number to maximun pk of table

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        02/09/2006   Nguyen Van Thai       1. Created this procedure.

   ******************************************************************************/
   l_sql   varchar2 (4000) := null;
   l_cnt   number := 0;
--------
begin
   --------
   for c1 in (select table_name
                from all_all_tables
               where owner = upper (v_user) and table_name like 'T%')
   loop
      select count (*)
        into l_cnt
        from all_objects
       where owner = upper (v_user) and object_type = 'SEQUENCE' and object_name = upper (c1.table_name) || '_SEQ';

      begin
         if l_cnt > 0
         then
            l_sql := 'DROP SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ';

            execute immediate l_sql;

            l_sql := 'SELECT nvl(MAX(PK),0)+1 from ' || c1.table_name;

            execute immediate l_sql into l_cnt;

            l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ start with ' || l_cnt;

            execute immediate l_sql;
         else
            l_sql := 'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ';

            execute immediate l_sql;
         end if;
      exception
         when others
         then
            null;
      end;
   end loop;

   return 'reset sequence is successful';
exception
   when others
   then
      return l_sql || sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_FORMULAR_EXECUTE;

CREATE OR REPLACE FUNCTION HPDQ.sf_formular_execute (
   p_formular      in varchar,
   p_date_type        varchar,
   p_column_type      varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        12/11/2008   Phan Huy Quoc My       1. Created this function.
   ******************************************************************************/
   l_tmp         varchar (5000) := trim (p_formular);
   l_len         number := 0;
   l_cnt         number := 0;
   l_formular    varchar (1000) := '';
   l_ac_cd       varchar (1000) := '';
   l_value       varchar (1000) := '';
   l_buf         varchar (1) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   select length (l_tmp) into l_len from dual;

   l_tmp := '(' || l_tmp || ')';
   l_len := l_len + 2;

   if (l_len < 8)
   then
      /* Toi thieu co 6 ky tu cua tai khoan */
      l_formular := 'ERROR';
   end if;

   for i in 1 .. l_len
   loop
      l_buf := substr (l_tmp, i, 1);

      select instr ('0123456789', l_buf) into l_cnt from dual;

      if (l_cnt = 0)
      then                                          /*  Khong phai la ky so */
         l_formular := l_formular || l_value;
         l_formular := l_formular || l_buf;
         l_value := '';
      else
         l_ac_cd := l_ac_cd || l_buf;

         if (length (l_ac_cd) = 6)
         then
            if p_date_type = 'M'
            then
               if p_column_type = 'THIS'
               then
                  select sum (m_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (m_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC'
               then
                  select sum (m_acc)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC1'
               then
                  select sum (m_acc1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL'
               then
                  select sum (m_bal)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL1'
               then
                  select sum (m_bal1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            elsif p_date_type = 'Q'
            then
               if p_column_type = 'THIS'
               then
                  select sum (q_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (q_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC'
               then
                  select sum (q_acc)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'ACC1'
               then
                  select sum (q_acc1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            elsif p_date_type = 'Y'
            then
               if p_column_type = 'THIS'
               then
                  select sum (y_ps)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'LAST'
               then
                  select sum (y_ps1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL'
               then
                  select sum (y_bal)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               elsif p_column_type = 'BAL1'
               then
                  select sum (y_bal1)
                    into l_value
                    from tac_fsqd15
                   where ac_cd = l_ac_cd;
               end if;
            end if;

            if (l_value is null or l_value = '')
            then
               l_value := 0;
            end if;

            l_ac_cd := '';
         end if;
      end if;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_formular_execute;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ACCDLOCAL_BY_ACPK;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_accdlocal_by_acpk(
   p_tac_abacctcode_pk   VARCHAR2
 , p_compk               VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value VARCHAR2(50);
BEGIN
   l_rtn_value := '';

   SELECT ac_cd
     INTO l_rtn_value
     FROM tac_localcode
    WHERE pk =
             (SELECT tac_localcode_pk
                FROM tac_abacctcode
               WHERE del_if = 0 AND pk = p_tac_abacctcode_pk
                     AND tco_company_pk = p_compk);

   RETURN l_rtn_value;
---------
EXCEPTION
---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_AGCI00091;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_agci00091 (
   p_tco_stitem_pk    NUMBER,
   p_tco_spec_pk_01   NUMBER,
   p_tco_spec_pk_02   NUMBER,
   p_tco_spec_pk_03   NUMBER,
   p_tco_spec_pk_04   NUMBER,
   p_tco_spec_pk_05   NUMBER,
   p_tco_spec_pk_06   NUMBER,
   p_tco_spec_pk_07   NUMBER,
   p_tco_spec_pk_08   NUMBER,
   p_tco_spec_pk_09   NUMBER,
   p_tco_spec_pk_10   NUMBER,
   p_tco_spec_pk_11   NUMBER,
   p_tco_spec_pk_12   NUMBER,
   p_tco_spec_pk_13   NUMBER,
   p_tco_spec_pk_14   NUMBER,
   p_tco_spec_pk_15   NUMBER,
   p_tco_spec_pk_16   NUMBER,
   p_tco_spec_pk_17   NUMBER,
   p_tco_spec_pk_18   NUMBER,
   p_tco_spec_pk_19   NUMBER,
   p_tco_spec_pk_20   NUMBER
)
   RETURN NUMBER
IS
   l_status        VARCHAR2 (100);
--------------------------
   l_rtn_item_pk   NUMBER;
--------------------------
   l_count         NUMBER         := 0;
--------------------------
BEGIN
--------------------------------------------------------------
   IF p_tco_spec_pk_01 IS NOT NULL AND p_tco_spec_pk_01 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_02 IS NOT NULL AND p_tco_spec_pk_02 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_03 IS NOT NULL AND p_tco_spec_pk_03 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_04 IS NOT NULL AND p_tco_spec_pk_04 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_05 IS NOT NULL AND p_tco_spec_pk_05 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_06 IS NOT NULL AND p_tco_spec_pk_06 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_07 IS NOT NULL AND p_tco_spec_pk_07 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_08 IS NOT NULL AND p_tco_spec_pk_08 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_09 IS NOT NULL AND p_tco_spec_pk_09 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_10 IS NOT NULL AND p_tco_spec_pk_10 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_11 IS NOT NULL AND p_tco_spec_pk_11 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_12 IS NOT NULL AND p_tco_spec_pk_12 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_13 IS NOT NULL AND p_tco_spec_pk_13 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_14 IS NOT NULL AND p_tco_spec_pk_14 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_15 IS NOT NULL AND p_tco_spec_pk_15 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_16 IS NOT NULL AND p_tco_spec_pk_16 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_17 IS NOT NULL AND p_tco_spec_pk_17 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_18 IS NOT NULL AND p_tco_spec_pk_18 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_19 IS NOT NULL AND p_tco_spec_pk_19 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_20 IS NOT NULL AND p_tco_spec_pk_20 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

----------------------------------------------------------------------
    IF l_count = 0
   THEN
      IF l_rtn_item_pk IS NULL OR l_rtn_item_pk = 0
      THEN
         SELECT COUNT (gr.pk)
           INTO l_count
           FROM comm.tco_stitem st, comm.tco_grpspecgrp gr
          WHERE st.del_if = 0
            AND gr.del_if = 0
            AND st.tco_itemgrp_pk = gr.tco_itemgrp_pk
            AND st.pk = p_tco_stitem_pk;

         IF l_count = 0
         THEN
            SELECT MAX (a.pk)
              INTO l_rtn_item_pk
              FROM comm.tco_item a
             WHERE a.del_if = 0 AND a.tco_stitem_pk = p_tco_stitem_pk;
         END IF;
      END IF;

      RETURN l_rtn_item_pk;
   END IF;

   l_status := 'Select item error !!!';

----------------------------------------------------------------------
   SELECT MAX (tco_item_pk)
     INTO l_rtn_item_pk
     FROM (SELECT   a.tco_item_pk
               FROM comm.tco_itemspec a, comm.tco_item b
              WHERE a.del_if = 0
                AND a.tco_spec_pk IN
                       (NVL (p_tco_spec_pk_01, 0),
                        NVL (p_tco_spec_pk_02, 0),
                        NVL (p_tco_spec_pk_03, 0),
                        NVL (p_tco_spec_pk_04, 0),
                        NVL (p_tco_spec_pk_05, 0),
                        NVL (p_tco_spec_pk_06, 0),
                        NVL (p_tco_spec_pk_07, 0),
                        NVL (p_tco_spec_pk_08, 0),
                        NVL (p_tco_spec_pk_09, 0),
                        NVL (p_tco_spec_pk_10, 0),
                        NVL (p_tco_spec_pk_11, 0),
                        NVL (p_tco_spec_pk_12, 0),
                        NVL (p_tco_spec_pk_13, 0),
                        NVL (p_tco_spec_pk_14, 0),
                        NVL (p_tco_spec_pk_15, 0),
                        NVL (p_tco_spec_pk_16, 0),
                        NVL (p_tco_spec_pk_17, 0),
                        NVL (p_tco_spec_pk_18, 0),
                        NVL (p_tco_spec_pk_19, 0),
                        NVL (p_tco_spec_pk_20, 0)
                       )
                AND a.tco_item_pk NOT IN (
                       SELECT DISTINCT tco_item_pk
                                  FROM comm.tco_itemspec c
                                 WHERE c.del_if = 0
                                   AND c.tco_spec_pk NOT IN
                                          (NVL (p_tco_spec_pk_01, 0),
                                           NVL (p_tco_spec_pk_02, 0),
                                           NVL (p_tco_spec_pk_03, 0),
                                           NVL (p_tco_spec_pk_04, 0),
                                           NVL (p_tco_spec_pk_05, 0),
                                           NVL (p_tco_spec_pk_06, 0),
                                           NVL (p_tco_spec_pk_07, 0),
                                           NVL (p_tco_spec_pk_08, 0),
                                           NVL (p_tco_spec_pk_09, 0),
                                           NVL (p_tco_spec_pk_10, 0),
                                           NVL (p_tco_spec_pk_11, 0),
                                           NVL (p_tco_spec_pk_12, 0),
                                           NVL (p_tco_spec_pk_13, 0),
                                           NVL (p_tco_spec_pk_14, 0),
                                           NVL (p_tco_spec_pk_15, 0),
                                           NVL (p_tco_spec_pk_16, 0),
                                           NVL (p_tco_spec_pk_17, 0),
                                           NVL (p_tco_spec_pk_18, 0),
                                           NVL (p_tco_spec_pk_19, 0),
                                           NVL (p_tco_spec_pk_20, 0)
                                          ))
                AND b.del_if = 0
                AND a.tco_item_pk = b.pk
                AND b.tco_stitem_pk = p_tco_stitem_pk
           GROUP BY a.tco_item_pk
             HAVING COUNT (*) = l_count);

-------------------------------------------------------------------------
   RETURN NVL (l_rtn_item_pk, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_APPLICATION_NO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_application_no(p_emp_id varchar2,p_approver_id varchar2) RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;

/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from THR_biz_trip
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;


   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='BIZ' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(sysdate,l_characters);
            elsif l_type='EMPID' then
                l_temp:=p_emp_id;
            elsif l_type='APPROVERID' then
                l_temp:=p_approver_id;
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV
      l_temp:=0;
   else
        select max(substr(application_no,-l_len)) into l_emp_id_max from THR_biz_trip
        where del_if=0 ;
        l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_application_no;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_APP_NO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_app_no(p_emp_id varchar2) RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;


BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from THR_DORMITORY_APP
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;


   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='Dormitory' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(sysdate,l_characters);
            elsif l_type='EMPID' then
                l_temp:=p_emp_id;
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV
      l_temp:=0;
   else
        select max(substr(application_no,-l_len)) into l_emp_id_max from THR_DORMITORY_APP
        where del_if=0 ;
        l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_app_no;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_APP_NO_BUSINESS;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_app_no_business RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;

/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from thr_business_card
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;


   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='Card' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(to_date(sysdate,l_characters),l_characters);
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV
      l_temp:=0;
   else
        select max(substr(application_no,-l_len)) into l_emp_id_max from thr_business_card
        where del_if=0 ;
        l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_app_no_business;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_APP_NO_CHKR00060;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_app_no_chkr00060(p_emp_id varchar2) RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;


BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from thr_train_req
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;


   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='Training' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(sysdate,l_characters);
            elsif l_type='EMPID' then
                l_temp:=p_emp_id;
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV
      l_temp:=0;
   else
        select max(substr(req_no,-l_len)) into l_emp_id_max from thr_train_req
        where del_if=0 ;
        l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_AP_YN;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_AP_YN(p_tin_stocktr_pk    varchar2)           
RETURN VARCHAR2 
IS

/******************************************************************************
   NAME:       SF_GET_AP_YN
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/29/2012   Administrator       1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     SF_GET_AP_YN
      Sysdate:         2/29/2012
      Date and Time:   2/29/2012, 3:25:15 PM, and 2/29/2012 3:25:15 PM
      Username:        Administrator (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
    v_tac_mattkein_ap_pk    number ;
    v_voucherno tac_crda.voucherno%type;
BEGIN
        v_tac_mattkein_ap_pk := null ; 
        v_voucherno := '';                     
    begin
        select max(pk) into v_tac_mattkein_ap_pk
        from tac_mattakein_ap
        where trans_pk = p_tin_stocktr_pk
        and del_if = 0 ;        
    exception
    when no_data_found then
        v_tac_mattkein_ap_pk := null ; 
        v_voucherno := '';                     
    end ;
    if v_tac_mattkein_ap_pk > 0 then
        begin
            select a.voucherno into v_voucherno
            from tac_crdad d, tac_crda a
            where d.tac_mattakein_ap_pk = v_tac_mattkein_ap_pk
            and d.del_if = 0
            and d.tac_crda_pk = a.pk
            and a.del_if = 0
            and a.tr_status in ('1', '2', '0') ;
        exception
        when others then
            begin
                select a.voucherno into v_voucherno
                from tac_crdad_other d, tac_crda_other a
                where d.tac_mattakein_ap_pk = v_tac_mattkein_ap_pk
                and d.del_if = 0
                and d.tac_crda_other_pk = a.pk
                and a.del_if = 0
                and a.tr_status in ('1', '2', '0') ;
            exception
            when others then       
                    v_voucherno := '';     
            end ;                             
        end ;        
    end if;
    return v_voucherno ;
END SF_GET_AP_YN;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BKAMT_COSTING;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_bkamt_costing(p_tac_hgtrh_pk varchar2) 
RETURN NUMBER IS
    v_sum_book_amt number ;
    
/******************************************************************************
   NAME:       sf_get_ar_costing 
   PURPOSE:     Used for AR HISTORY 

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/8/2009   Van Le       1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_ar_costing
      Sysdate:         1/8/2009
      Date and Time:   1/8/2009, 2:33:37 PM, and 1/8/2009 2:33:37 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   select sum(tr_bookamt)
   into v_sum_book_amt
   from tac_hgtrd 
   where del_if = 0 
   and  tac_hgtrh_pk = p_tac_hgtrh_pk ;
   RETURN v_sum_book_amt;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_bkamt_costing;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BKING_SRC_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_bking_src_name(
  p_code varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_NAME varchar2(500);
begin
SELECT NAME into l_NAME FROM  TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='BKSRC' and use_yn='Y' and code=p_code;
 return l_NAME;
end sf_get_bking_src_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BOOK_CRT;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_book_crt (p_tht_booking_pk in varchar2)
    return  varchar2
  is
    l_rtn_value varchar2(8);


begin
    select from_date into l_rtn_value
    from tht_booking c
    where c.del_if = 0
    and c.pk = p_tht_booking_pk;
    
return    l_rtn_value ;

end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BOOK_STATUS;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_book_status (p_tht_bookingd_pk in varchar2)
    RETURN  varchar
  IS
    l_rtn_value varchar2(8);


BEGIN
    select decode(c.status, '10', 'S', '20', 'C') into l_rtn_value
    from tht_booking c, tht_bookingd d
    where c.del_if = 0 and d.del_if = 0
    and c.pk = d.tht_booking_pk
    and c.status <> '30'
    and d.pk = p_tht_bookingd_pk;
    
RETURN    l_rtn_value ;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BUDGET_AMOUNT;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_budget_amount (p_tco_company_pk varchar, p_tac_abpl_pk varchar, p_budget_year varchar)
   return number
is
/******************************************************************************
   NAME:       sf_get_budget_amount
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/23/2009   Nguyen Van Thai       1. Created this function.

******************************************************************************/
   l_budget_amt   number;
begin
   select max (budget_amt)
     into l_budget_amt
     from acnt.tac_plbudget
    where tac_abpl_pk = p_tac_abpl_pk
      and budget_year = substr(p_budget_year,1,4)
      and del_if = 0
      and tco_company_pk = p_tco_company_pk;

   return nvl (l_budget_amt, 0);
exception
   when others
   then
      return -1;
end sf_get_budget_amount;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BUDGET_BALANCE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_budget_balance (
   p_tco_company_pk   varchar,
   p_tac_abpl_pk      varchar,
   p_budget_year      varchar
)
   return number
is
/******************************************************************************
   NAME:       sf_get_budget_balance
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/23/2009   Nguyen Van Thai       1. Created this function.

******************************************************************************/
   l_balance_amt   number;
begin
   select max (budget_amt - nvl(used_amt,0))
     into l_balance_amt
     from acnt.tac_plbudget
    where tac_abpl_pk = p_tac_abpl_pk
      and budget_year = substr(p_budget_year,1,4)
      and del_if = 0
      and (tco_company_pk = p_tco_company_pk or tco_company_pk is null);

   return nvl (l_balance_amt, 0);
exception
   when others
   then
      return -1;
end sf_get_budget_balance;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BUSPARTNER_ADDRESS;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_buspartner_address (
   p_tco_buspartner_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   partner_add   tco_buspartner.addr1%TYPE   := '';
BEGIN
   SELECT NVL (a.addr1, NVL (a.addr2, a.addr3))
     INTO partner_add
     FROM tco_buspartner a
    WHERE a.pk = p_tco_buspartner_pk;

   RETURN partner_add;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN ' ';
   WHEN OTHERS
   THEN
      RETURN ' ';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BUSPARTNER_ID;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_buspartner_id (
   p_tco_buspartner_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   partner_id   tco_buspartner.partner_id%TYPE   := '';
BEGIN
   SELECT a.partner_id
     INTO partner_id
     FROM tco_buspartner a
    WHERE a.pk = p_tco_buspartner_pk;

   RETURN partner_id;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN ' ';
   WHEN OTHERS
   THEN
      RETURN ' ';
END sf_get_buspartner_id;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BUSPARTNER_INFO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_buspartner_info(
                 p_tco_buspartner_pk varchar
) 
RETURN 
                 VARCHAR2 
IS
        l_partner_id varchar2(200);
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select partner_id || '-'  || PARTNER_NAME into  l_partner_id from tco_buspartner where del_if = 0 and pk = p_tco_buspartner_pk ;
             return l_partner_id ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
END sf_get_buspartner_info;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BUSPARTNER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_buspartner_name (
   p_tco_buspartner_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   partner_name   tco_buspartner.partner_name%TYPE   := '';
BEGIN
   SELECT a.partner_name
     INTO partner_name
     FROM tco_buspartner a
    WHERE a.pk = p_tco_buspartner_pk;

   RETURN partner_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN ' ';
   WHEN OTHERS
   THEN
      RETURN ' ';
END sf_get_buspartner_name;
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_BUSPARTNER_NM;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_buspartner_nm(
                 p_tco_buspartner_pk varchar
) 
RETURN 
                 VARCHAR2 
IS
        l_partner_nm varchar2(200);
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select partner_name into  l_partner_nm from tco_buspartner where del_if = 0 and pk = p_tco_buspartner_pk ;
             return l_partner_nm ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
END sf_get_buspartner_nm;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CARDIAL_NUM;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_cardial_num
   RETURN NUMBER
IS
   l_count            NUMBER;
   l_len              NUMBER        := 0;
   l_code_len         VARCHAR (100);
   l_last             NUMBER;
   l_last_comma_pos   NUMBER;
/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    SELECT COUNT (*)
     INTO l_count
     FROM thr_templates
    WHERE del_if = 0 AND ID = 'Emp' AND TEMPLATE = 'N' and code='BYHAND';
    if l_count>0 then
        return 0;
    end if;
   SELECT COUNT (*)
     INTO l_count
     FROM thr_templates
    WHERE del_if = 0 AND ID = 'Emp' AND TEMPLATE = 'N';

   IF (l_count <> 0)
   THEN
      SELECT code_len
        INTO l_code_len
        FROM thr_templates
       WHERE del_if = 0 AND ID = 'Emp' AND TEMPLATE = 'N';

      SELECT LENGTH (TRIM (TRANSLATE (l_code_len, 'a123456789', ' ')))
        INTO l_last_comma_pos
        FROM DUAL;                            --lay phan tu dau phau cuoi cung
   ELSE
      l_len := 0;
   END IF;

   IF (l_last_comma_pos >= 1)
   THEN
      SELECT INSTR (l_code_len, ',', 1, l_last_comma_pos)
        INTO l_last
        FROM DUAL;
   ELSE
      l_last := 0;
   END IF;

   --lay chieu dai cuoi cung cua ma
   l_len :=
      SUBSTR (l_code_len,
              NVL (l_last, 0) + 1,
              LENGTH (l_code_len) - NVL (l_last, 0)
             );
   RETURN l_len;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CARDIAL_NUM_CV;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_cardial_num_cv
   RETURN NUMBER
IS
   l_count            NUMBER;
   l_len              NUMBER        := 0;
   l_code_len         VARCHAR (100);
   l_last             NUMBER;
   l_last_comma_pos   NUMBER;
/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    SELECT COUNT (*)
     INTO l_count
     FROM thr_templates
    WHERE del_if = 0 AND ID = 'CV' AND TEMPLATE = 'N' and code='BYHAND';
    if l_count>0 then
        return 0;
    end if;
   SELECT COUNT (*)
     INTO l_count
     FROM thr_templates
    WHERE del_if = 0 AND ID = 'CV' AND TEMPLATE = 'N';

   IF (l_count <> 0)
   THEN
      SELECT code_len
        INTO l_code_len
        FROM thr_templates
       WHERE del_if = 0 AND ID = 'CV' AND TEMPLATE = 'N';

      SELECT LENGTH (TRIM (TRANSLATE (l_code_len, 'a123456789', ' ')))
        INTO l_last_comma_pos
        FROM DUAL;                            --lay phan tu dau phau cuoi cung
   ELSE
      l_len := 0;
   END IF;

   IF (l_last_comma_pos >= 1)
   THEN
      SELECT INSTR (l_code_len, ',', 1, l_last_comma_pos)
        INTO l_last
        FROM DUAL;
   ELSE
      l_last := 0;
   END IF;

   --lay chieu dai cuoi cung cua ma
   l_len :=
      SUBSTR (l_code_len,
              NVL (l_last, 0) + 1,
              LENGTH (l_code_len) - NVL (l_last, 0)
             );
   RETURN l_len;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CARD_INFO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_card_info(p_emp_id varchar2) RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;


BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from THR_ID_CARD
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;


   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='IdCard' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(to_date(sysdate,l_characters),l_characters);
            elsif l_type='EMPID' then
                l_temp:=p_emp_id;
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV
      l_temp:=0;
   else
        select max(substr(application_no,-l_len)) into l_emp_id_max from THR_ID_CARD
        where del_if=0 ;
        l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_card_info;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CARD_NO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_card_no (p_card_id in varchar2)
    RETURN  varchar
  IS
    l_rtn_value varchar2(8);


BEGIN
    select card_number into l_rtn_value        
    from tcm_card
    where del_if = 0 and card_id = p_card_id;
    
RETURN    l_rtn_value ;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CC_REQ_NO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_cc_req_no(p_emp_id varchar2,p_approver_id varchar2) RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;

/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008  VanLe        1. Created this function.

   NOTES:
******************************************************************************/
BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from thr_expense_req
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;


   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='CC' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(sysdate,l_characters);
            elsif l_type='EMPID' then
                l_temp:=p_emp_id;
            elsif l_type='APPROVERID' then
                l_temp:=p_approver_id;
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV
      l_temp:=0;
   else
        select max(substr(req_no,-l_len)) into l_emp_id_max from thr_expense_req
        where del_if=0 ;
        l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_cc_req_no;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CHECK_SLIP_NO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_check_slip_no (
   p_slip_type   IN   VARCHAR2,
   p_value       IN   VARCHAR2
)
   RETURN VARCHAR
IS
   lcode_pks         VARCHAR (100);
   lchars            VARCHAR (100);
   l_temp_code_pks   VARCHAR (100);
   lpost             NUMBER         := -1;
   l_pk              VARCHAR (10);
   l_data_type       VARCHAR (100);
   l_format          VARCHAR (100);
   l_len_of_pks      NUMBER;
   l_feild_nm        VARCHAR (100);
   l_length          VARCHAR2 (100);
   l_cent            VARCHAR (1);
   l_value           VARCHAR (50);
   l_all_length      NUMBER;
   l_char_post       NUMBER         := 1;
   l_part            VARCHAR (100);
   temp              VARCHAR (100);
/******************************************************************************
   NAME:       SF_GET_CHECK_SLIP_NO
******************************************************************************/
BEGIN
   BEGIN
      SELECT a.code_pk, a.code_description
        INTO lcode_pks, lchars
        FROM tsa_code_template a
       WHERE a.del_if = 0 AND a.code_type = p_slip_type
             AND a.current_used = 'Y';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         lcode_pks := '';
         lchars := '';
         RETURN 'ERROR';
   END;

   l_value := lcode_pks;

   IF LENGTH (lcode_pks) > 0
   THEN
      l_temp_code_pks := lcode_pks;
      l_len_of_pks := LENGTH (lcode_pks);
      l_all_length := 0;

      --Check length
      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         BEGIN
            SELECT charater_len
              INTO l_length
              FROM tsa_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         l_all_length := l_all_length + l_length;
      END LOOP;

      IF l_all_length <> LENGTH (TRIM (p_value))
      THEN
         RETURN 'ERROR';
      END IF;

      l_temp_code_pks := lcode_pks;

      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         --get data type and fomat of each element in a list of character pk
         BEGIN
            SELECT data_type, CHARACTERS, field_nm, charater_len, c_end
              INTO l_data_type, l_format, l_feild_nm, l_length, l_cent
              FROM tsa_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         CASE l_data_type
            WHEN 'C'
            THEN
               IF (SUBSTR (p_value, l_char_post, l_length) <> l_format)
               THEN
                  RETURN 'ERROR';
               END IF;
            WHEN 'D'
            THEN
               BEGIN
                  SELECT TO_DATE (SUBSTR (p_value, l_char_post, l_length),
                                  l_format
                                 )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            WHEN 'N'
            THEN
               BEGIN
                  SELECT TO_NUMBER (SUBSTR (p_value, l_char_post, l_length),
                                    l_format
                                   )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            ELSE
               l_value := lcode_pks;
         END CASE;

         l_char_post := l_char_post + l_length;
      END LOOP;
   END IF;

   RETURN l_value;
END sf_get_check_slip_no;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CITY_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_city_name (p_code in varchar2)
    return  varchar2
  is
    l_rtn_value varchar2(100);


begin
   SELECT NAME into l_rtn_value FROM  TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='CITY' and CODE = p_code;
    
return    l_rtn_value ;

end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CODENAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_codename (
   v_grpcode   in   varchar,
   v_code      in   varchar
)
   return varchar2
is
   l_code_nm   varchar2 (100);
begin
   select a.code_nm
     into l_code_nm
     from tco_abcode a, tco_abcodegrp g
    where a.tco_abcodegrp_pk = g.pk
      and g.id = v_grpcode
      and a.del_if = 0
      and a.code = v_code;

   return l_code_nm;
--============
exception
--============
   when no_data_found
   then
      return null;
   when others
   then
      return null;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CODE_PK;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_code_pk (
   v_grpcode   IN   VARCHAR,
   v_code      IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_lpk   VARCHAR2 (40);
BEGIN
   SELECT a.code_nm
     INTO l_lpk
     FROM comm.tco_abcode a, comm.tco_abcodegrp g
    WHERE a.tco_abcodegrp_pk = g.pk
      AND g.ID = v_grpcode
      AND a.del_if = 0
      AND a.code = v_code;

   RETURN l_lpk;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_COMMCODE_NM;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_commcode_nm (v_group   IN VARCHAR2,
                                                  v_code    IN VARCHAR2)
   RETURN VARCHAR2
IS
   /*=================================================================================
   * Function      SF_GET_COMMCODE_NM
   * Description   Get Account Code depend on group and code
   * Return        CODE, TEXT
   * Create Date   03 Oct 2005

   =================================================================================*/
   w_string   VARCHAR2 (1000);
BEGIN
   SELECT RTRIM (a.code_nm) AS code
     INTO w_string
     FROM tco_abcode a, tco_abcodegrp b
    WHERE     a.del_if = 0
          AND b.del_if = 0
          AND a.tco_abcodegrp_pk = b.pk
          AND b.id = v_group
          AND a.code = v_code
          AND a.use_if = 1;

   RETURN w_string;
EXCEPTION
   WHEN OTHERS
   THEN
      --RETURN '';
      raise_application_error (-20001, SQLERRM);
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_COMPANY;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_company(p_tco_buspartner_pk in varchar2)
    return  varchar2
  is
    l_rtn_value varchar2(200);


begin
    select partner_name into l_rtn_value
    from tco_buspartner 
    where del_if = 0
    and pk = p_tco_buspartner_pk;
    
return    l_rtn_value ;

end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_COMPANY_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_company_name (
   p_cmp_pk   IN   VARCHAR
)
   RETURN VARCHAR
IS
   partner_name   tco_company.partner_name%TYPE   := '';
BEGIN
   SELECT a.partner_name
     INTO partner_name
     FROM tco_company a
    WHERE a.pk = p_cmp_pk;

   RETURN partner_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END sf_get_company_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CRCAD_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_crcad_item(p_crca_pk  varchar2,
p_item_nm varchar2
) 
RETURN VARCHAR2 
IS
/******************************************************************************
   NAME:       sf_get_crcad_item
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/16/2013   Van Le       1. Created this function.

   NOTES:

******************************************************************************/
    v_item_value    varchar2(40);
BEGIN
   
    select i.item
      into v_item_value
      from tac_crcaditem i, tac_abitem a
     where     i.tac_crca_pk = p_crca_pk
           and i.del_if = 0
           and i.tac_abitem_pk = a.pk
           and a.del_if = 0
           and a.item_nm = p_item_nm;
           
   RETURN v_item_value ;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RETURN NULL ;
END sf_get_crcad_item;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CREDIT_CARD_TYPE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_credit_card_type (p_credit_card_type in varchar2)
    RETURN  varchar
  IS
    l_rtn_value varchar2(8);


BEGIN
   SELECT NAME into l_rtn_value 
  FROM TCO_COMMCODE
 WHERE     DEL_IF = 0
       AND PARENT_CODE = 'CREDITCARD'
       AND CODE = p_credit_card_type;

RETURN    l_rtn_value;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CREDIT_TYPE_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_credit_type_name (p_gtd_type IN VARCHAR2)
   RETURN VARCHAR
IS
   l_rtn_value   VARCHAR2 (100);
BEGIN
   SELECT NAME
     INTO l_rtn_value
     FROM comm.tco_commcode
    WHERE del_if = 0 AND parent_code = 'CREDITCARD' AND code = p_gtd_type;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CURRENT_BUY_EX_RATE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_current_buy_ex_rate (p_tco_company_pk varchar, p_ccy varchar)
   return number
is
   /******************************************************************************
         REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        7/9/2010   Nguyen Van Thai       1. Created this function.

      NOTES:

   ******************************************************************************/
   l_rtn_value   number;
begin
   select a.internal_buy_rate
     into l_rtn_value
     from tac_abexrates a
    where     a.del_if = 0
          and a.tco_company_pk = p_tco_company_pk
          and a.std_ymd = to_char (sysdate, 'yyyymmdd')
          and ccy = upper (p_ccy);

   return l_rtn_value;
exception
   when others
   then
      return -1;
end sf_get_current_buy_ex_rate;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CURRENT_SELL_EX_RATE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_current_sell_ex_rate (p_tco_company_pk varchar, p_ccy varchar)
   return number
is
   /******************************************************************************
         REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        7/9/2010   Nguyen Van Thai       1. Created this function.

      NOTES:

   ******************************************************************************/
   l_rtn_value   number;
begin
   select max(a.internal_sell_rate)
     into l_rtn_value
     from tac_abexrates a
    where     a.del_if = 0
          and a.tco_company_pk = p_tco_company_pk
          and a.std_ymd = to_char (sysdate, 'yyyymmdd')
          and ccy = upper (p_ccy);
          
      if l_rtn_value is null then
      select max (a.internal_sell_rate)
      into l_rtn_value
      from tac_abexrates a
     where     a.del_if = 0
           and a.tco_company_pk = p_tco_company_pk
           and a.std_ymd = to_char (sysdate-1, 'yyyymmdd')
           and ccy = upper (p_ccy);
      end if;    

   return l_rtn_value;
exception
   when others
   then
      return -1;
end sf_get_current_sell_ex_rate;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CUSTIDBYPK;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_CUSTIDBYPK
                                (    
                                    p_custpk        VARCHAR2,
                                    p_compk         VARCHAR2
                                )
RETURN  VARCHAR2

IS 
    l_return    VARCHAR2(40);
    v_count    NUMBER;
    
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM TCO_BUSPARTNER T
     WHERE PK             = p_custpk
       --AND tco_company_pk = p_compk
       AND del_if         = 0;
    IF v_count = 0 THEN
        l_return := '';
    ELSE   
      SELECT T.PARTNER_ID INTO l_return
        FROM TCO_BUSPARTNER T
       WHERE PK             = p_custpk
         --AND tco_company_pk = p_compk
         AND del_if         = 0;
    END IF;
    RETURN    l_return;

  EXCEPTION
   WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CUSTOMER_PROSHOP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_customer_proshop(
  p_tht_room_allocate_pk varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_name varchar2(50);
begin
  SELECT  CUSTOMER_NAME into l_name FROM tht_room_allocate WHERE pk < 0 AND del_if = 0
    and pk=p_tht_room_allocate_pk;
 RETURN l_name;
end sf_get_customer_proshop;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CUSTOMER_TYPE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_customer_type(
  p_code_customer_type varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_customer_name varchar2(50);
begin
   SELECT name
    INTO l_customer_name
  FROM tco_commcode
 WHERE del_if = 0 AND parent_code = 'CTYPE' AND code = p_code_customer_type;
 return l_customer_name;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CV_ID;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_cV_id(p_join_dt varchar2) RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;

/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from THR_REC_EMP
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;

   IF l_flag_exist=true THEN --DA CO NV 
        select max(substr(rec_id,-SF_GET_CARDIAL_NUM_cv())) into l_emp_id_max from THR_REC_EMP
        where del_if=0;
   END IF;

   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='CV' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(to_date(p_join_dt,'yyyymmdd'),l_characters);
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma 
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV 
      l_temp:=0;
   else
      l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_DAY_OF_MONTH;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_day_of_month
(
    p_date varchar
) RETURN varchar IS
tmpVar varchar2(10);
/******************************************************************************
   NAME:       sf_get_day_of_month
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/21/2010   Administrator       1. Created this function.

******************************************************************************/
BEGIN
   select decode(a.day_type,1,'CN','T.'|| a.day_type) into tmpVar 
     from tco_abcalendar a
     where a.del_if = 0 and a.car_date = p_date;
     
   RETURN tmpVar;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_day_of_month;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_DEPT_OF_EMP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_dept_of_emp (p_thr_employee_pk varchar)
   return varchar2
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/20/2009          1. Created this function.

******************************************************************************/
   l_rtn_value    varchar2 (400);
   l_tco_org_pk   number;
begin
   select max (org_id || '-' || org_nm)
     into l_rtn_value
     from comm.tco_org
    where pk in (select tco_org_pk
                   from thr_employee
                  where pk = p_thr_employee_pk) and org_type = '06';

   if l_rtn_value is not null
   then
      return l_rtn_value;
   else
      select max (org_id || '-' || org_nm)
        into l_rtn_value
        from comm.tco_org
       where pk in (select p_pk
                      from comm.tco_org
                     where pk in (select tco_org_pk
                                    from thr_employee
                                   where pk = p_thr_employee_pk)) and org_type = '06';

      if l_rtn_value is not null
      then
         return l_rtn_value;
      else
         select max (org_id || '-' || org_nm)
           into l_rtn_value
           from comm.tco_org
          where pk in (select p_pk
                         from comm.tco_org
                        where pk in (select p_pk
                                       from comm.tco_org
                                      where pk in (select tco_org_pk
                                                     from thr_employee
                                                    where pk = p_thr_employee_pk))) and org_type = '06';

         if l_rtn_value is not null
         then
            return l_rtn_value;
         else
            select max (org_id || '-' || org_nm)
              into l_rtn_value
              from comm.tco_org
             where pk in (select p_pk
                            from comm.tco_org
                           where pk in (select p_pk
                                          from comm.tco_org
                                         where pk in (select p_pk
                                                        from comm.tco_org
                                                       where pk in (select tco_org_pk
                                                                      from thr_employee
                                                                     where pk = p_thr_employee_pk))))
                   and org_type = '06';

            if l_rtn_value is not null
            then
               return l_rtn_value;
            else
               select max (org_id || '-' || org_nm)
                 into l_rtn_value
                 from comm.tco_org
                where pk in (select p_pk
                               from comm.tco_org
                              where pk in (select p_pk
                                             from comm.tco_org
                                            where pk in (select p_pk
                                                           from comm.tco_org
                                                          where pk in (select p_pk
                                                                         from comm.tco_org
                                                                        where pk in (select tco_org_pk
                                                                                       from thr_employee
                                                                                      where pk = p_thr_employee_pk)))));
            end if;
         end if;
      end if;
   end if;

   return l_rtn_value;
end sf_get_dept_of_emp;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_DEPT_OF_EVA_EMP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_dept_of_eva_emp (p_thr_eva_emp_pk varchar)
   return varchar2
is
/******************************************************************************
   NAME:       sf_get_dept_of_eva_emp
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/11/2009          1. Created this function.

******************************************************************************/
   l_rtn_value    varchar2 (400);
   l_tco_org_pk   number;
begin
   select max (org_id || '-' || org_nm)
     into l_rtn_value
     from comm.tco_org
    where pk in (select tco_org_pk
                   from thr_eva_emp
                  where pk = p_thr_eva_emp_pk) and org_type = '06';

   if l_rtn_value is not null
   then
      return l_rtn_value;
   else
      select max (org_id || '-' || org_nm)
        into l_rtn_value
        from comm.tco_org
       where pk in (select p_pk
                      from comm.tco_org
                     where pk in (select tco_org_pk
                                    from thr_eva_emp
                                   where pk = p_thr_eva_emp_pk)) and org_type = '06';

      if l_rtn_value is not null
      then
         return l_rtn_value;
      else
         select max (org_id || '-' || org_nm)
           into l_rtn_value
           from comm.tco_org
          where pk in (select p_pk
                         from comm.tco_org
                        where pk in (select p_pk
                                       from comm.tco_org
                                      where pk in (select tco_org_pk
                                                     from thr_eva_emp
                                                    where pk = p_thr_eva_emp_pk))) and org_type = '06';

         if l_rtn_value is not null
         then
            return l_rtn_value;
         else
            select max (org_id || '-' || org_nm)
              into l_rtn_value
              from comm.tco_org
             where pk in (select p_pk
                            from comm.tco_org
                           where pk in (select p_pk
                                          from comm.tco_org
                                         where pk in (select p_pk
                                                        from comm.tco_org
                                                       where pk in (select tco_org_pk
                                                                      from thr_eva_emp
                                                                     where pk = p_thr_eva_emp_pk)))) and org_type = '06';

            if l_rtn_value is not null
            then
               return l_rtn_value;
            else
               select max (org_id || '-' || org_nm)
                 into l_rtn_value
                 from comm.tco_org
                where pk in (select p_pk
                               from comm.tco_org
                              where pk in (select p_pk
                                             from comm.tco_org
                                            where pk in (select p_pk
                                                           from comm.tco_org
                                                          where pk in (select p_pk
                                                                         from comm.tco_org
                                                                        where pk in (select tco_org_pk
                                                                                       from thr_eva_emp
                                                                                      where pk = p_thr_eva_emp_pk)))));
            end if;
         end if;
      end if;
   end if;

   return l_rtn_value;
end sf_get_dept_of_eva_emp;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_DOR_ST_SCORE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_dor_st_score (
   p_thr_employee_pk   varchar,
   p_dif_code          varchar,
   p_frequency_ot       varchar
)
   return number
is
/******************************************************************************
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/4/2009   Nguyen Van Thai       1. Created this function.

   NOTES:

******************************************************************************/
   l_rtn_value      number;
   l_temp_dt        date;
   l_age            number;
   l_ah_score       number;
   l_sen_score      number;
   l_cnt            number;
   l_pos_score      number;
   l_res_score      number;
   l_wt_score       number;
   l_dif_score      number;
   l_frequency_ot   number;
begin
   for cur in (select *
                 from thr_employee
                where pk = p_thr_employee_pk)
   loop
      l_temp_dt := to_date (cur.birth_dt, 'yyyymmdd');
      l_cnt := trunc ((sysdate - l_temp_dt) / 365);

      select max (score)
        into l_ah_score
        from thr_dor_entry_std
       where standard_type = 'AH'
         and del_if = 0
         and use_yn = 'Y'
         and (end_date is null or end_date <= to_char (sysdate, 'yyyymmdd'))
         and l_cnt between min_value and max_value;

      l_temp_dt := to_date (cur.join_dt, 'yyyymmdd');
      l_cnt := trunc ((sysdate - l_temp_dt) / 30);

      select max (score)
        into l_sen_score
        from thr_dor_entry_std
       where standard_type = 'SEN'
         and del_if = 0
         and use_yn = 'Y'
         and (end_date is null or end_date <= to_char (sysdate, 'yyyymmdd'))
         and l_cnt between min_value and max_value;

      if (cur.pos_type = 'staff')
      then
         l_pos_score := 1;
      elsif cur.pos_type = 'operator'
      then
         l_pos_score := 1;
      elsif cur.pos_type = 'part leader'
      then
         l_pos_score := 3;
      elsif cur.pos_type = 'supervisor'
      then
         l_pos_score := 5;
      elsif cur.pos_type = 'assistant'
      then
         l_pos_score := 6;
      elsif cur.pos_type = 'deputy'
      then
         l_pos_score := 8;
      else
         l_pos_score := 10;
      end if;

      if (cur.resident_code = 'other')
      then
         l_res_score := 10;
      elsif cur.resident_code = 'HCMC'
      then
         l_res_score := 8;
      elsif cur.resident_code = 'DN'
      then
         l_res_score := 6;
      elsif cur.resident_code = 'TPVT'
      then
         l_res_score := 5;
      elsif cur.resident_code = 'TXBR'
      then
         l_res_score := 3;
      elsif cur.resident_code = 'TANTHANH'
      then
         l_res_score := 1;
      else
         l_res_score := 10;
      end if;

      if cur.salary_type = '01'
      then
         l_wt_score := 10;
      else
         l_wt_score := 7;
      end if;

      if p_dif_code = 'PVD'
      then
         l_dif_score := 10;
      elsif p_dif_code = 'RH'
      then
         l_dif_score := 8;
      elsif p_dif_code = 'RELATIVE'
      then
         l_dif_score := 6;
      elsif p_dif_code = 'PARENT'
      then
         l_dif_score := 4;
      elsif p_dif_code = 'PRIVATE'
      then
         l_dif_score := 2;
      else
         l_dif_score := 0;
      end if;

      if p_frequency_ot = 7
      then
         l_frequency_ot := 10;
      elsif p_frequency_ot = 6
      then
         l_frequency_ot := 9;
      elsif p_frequency_ot = 5
      then
         l_frequency_ot := 8;
      elsif p_frequency_ot = 4
      then
         l_frequency_ot := 6;
      elsif p_frequency_ot = 3
      then
         l_frequency_ot := 4;
      elsif p_frequency_ot = 2
      then
         l_frequency_ot := 2;
      else
         l_frequency_ot := 1;
      end if;

      l_rtn_value :=
            nvl (l_ah_score, 0) + nvl (l_sen_score, 0) + l_pos_score + l_wt_score + l_dif_score
            + l_frequency_ot;
      return l_rtn_value;
   end loop;

   return -1;
end sf_get_dor_st_score;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_DRCRNUM;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_DRCRNUM
    (
        p_comp          VARCHAR2,
        p_acc_pk        VARCHAR2
    ) 
    return  number
is
  lsvreturn   number := 1;
begin
  SELECT DECODE(UPPER(DRCR_TYPE),'C',-1,1)
      INTO lsvreturn
      FROM tac_abacctcode
     WHERE del_if = 0 
--       AND tco_company_pk = p_comp
       AND pk = p_acc_pk;
  return(lsvreturn);
end SF_GET_DRCRNUM;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_DRCRTYPE;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_DRCRTYPE
    (
        p_comp          VARCHAR2,
        p_acc_pk        VARCHAR2
    ) 
    return  Varchar2
is
  lsvreturn   VARCHAR2 (1) := NULL;
begin
  SELECT drcr_type
      INTO lsvreturn
      FROM tac_abacctcode
     WHERE del_if = 0 
       AND pk = p_acc_pk;
  return(lsvreturn);
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_DRCRTYPE_IFRS;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_drcrtype_ifrs (p_comp      VARCHAR2,
                                                 p_acc_pk    VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (1) := NULL;
BEGIN
   SELECT drcr_type
     INTO lsvreturn
     FROM tac_stcode
    WHERE del_if = 0 AND tco_company_pk = p_comp AND pk = p_acc_pk;

   RETURN (lsvreturn);
END sf_get_drcrtype_ifrs;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_EMPADVPK;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_empadvpk (
   p_emppk   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_return   VARCHAR2 (250);
   v_count    NUMBER;
BEGIN
   SELECT COUNT (*)
     INTO v_count
     FROM thr_employee t
    WHERE pk = p_emppk AND del_if = 0;

   IF v_count = 0
   THEN
      l_return := '';
   ELSE
      SELECT t.pk
        INTO l_return
        FROM tac_employee_adv t
       WHERE THR_EMPLOYEE_PK = p_emppk AND  del_if = 0;
   END IF;

   RETURN l_return;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END sf_get_empadvpk;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_EMPIDBYPK1;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_empidbypk1 (
   p_emppk   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_return   VARCHAR2 (250);
   v_count    NUMBER;
BEGIN
   SELECT COUNT (*)
     INTO v_count
     FROM thr_employee t
    WHERE pk = p_emppk AND del_if = 0;

   IF v_count = 0
   THEN
      l_return := '';
   ELSE
      SELECT t.EMP_ID
        INTO l_return
        FROM tac_employee_adv t
       WHERE THR_EMPLOYEE_PK = p_emppk AND  del_if = 0;
   END IF;

   RETURN l_return;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END sf_get_empidbypk1;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_EMPNAMEBYPK1;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_empnamebypk1 (
   p_emppk   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_return   VARCHAR2 (250);
   v_count    NUMBER;
BEGIN
   SELECT COUNT (*)
     INTO v_count
     FROM thr_employee t
    WHERE pk = p_emppk AND del_if = 0;

   IF v_count = 0
   THEN
      l_return := '';
   ELSE
      SELECT t.FULL_NAME
        INTO l_return
        FROM tac_employee_adv t
       WHERE THR_EMPLOYEE_PK = p_emppk AND  del_if = 0;
   END IF;

   RETURN l_return;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END sf_get_empnamebypk1;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_EMP_ID_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_emp_id_name (
   p_pk        number,
   p_flag      varchar
)
   return varchar2
is

   l_rtn_value   varchar2 (100);
begin
   if p_pk is null then
        l_rtn_value:='';
   else

       select MAX(decode(p_flag,'0',emp_id,full_name)) into l_rtn_value
       from thr_employee t
       where del_if=0 and t.pk=p_pk;
   end if;
   return l_rtn_value;
--============
exception
--============
   when others
   then
      raise_application_error(-20001,'Error:' ||SQLERRM);
      return null;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_EMP_ID_TEL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_emp_id_tel (
   p_pk        number,
   p_flag      varchar
)
   return varchar2
is

   l_rtn_value   varchar2 (100);
begin
   if p_pk is null then
        l_rtn_value:='';
   else

       select MAX(decode(p_flag,'0',emp_id,tel)) into l_rtn_value
       from thr_employee t
       where del_if=0 and t.pk=p_pk;
   end if;
   return l_rtn_value;
--============
exception
--============
   when others
   then
      raise_application_error(-20001,'Error:' ||SQLERRM);
      return null;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_EMP_ID_VHPC;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_emp_id_vhpc(p_join_dt varchar2) RETURN varchar2  IS
l_emp_id    varchar2(50);
l_num    varchar2(10);
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;

/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    l_emp_id:='';

    open l_cur for
            select count(a.pk) from THR_EMPLOYEE a where a.del_if=0 and substr(a.JOIN_DT,1,6)=substr(p_join_dt,1,6);
   

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;

   IF l_flag_exist=true THEN --DA CO NV 
        l_num:=l_cur_rec+1;
        if length(l_num)=1 then
            l_emp_id:=substr(p_join_dt,3,4)||'00'||l_num;
        elsif length(l_num)=2 then    
            l_emp_id:=substr(p_join_dt,3,4)||'0'||l_num;
        else
            l_emp_id:=substr(p_join_dt,3,4)||l_num;
        end if; 
   ELSE
       l_emp_id:=substr(p_join_dt,3,4)||'001';     
        
   END IF;

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_emp_id_vhpc;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_EVA_TOTAL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_eva_total (
   p_tco_org_pk        VARCHAR,
   p_year              VARCHAR,
   p_thr_employee_pk   VARCHAR
)
   RETURN VARCHAR
IS
   l_rtn       VARCHAR2 (500);
   l_request   NUMBER;
   l_eva       NUMBER;
   l_total     NUMBER;
/******************************************************************************
   NAME:       SF_GET_EVA_TOTAL
   PURPOSE:

   REVISIONS:
   VER        DATE        AUTHOR           DESCRIPTION
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/5/2009          1. CREATED THIS FUNCTION.
******************************************************************************/
BEGIN
   SELECT COUNT (DISTINCT a.thr_eva_emp_pk)
     INTO l_request
     FROM hr.thr_eva_emp_reviewer a, hr.thr_eva_reviewer b, hr.thr_eva_emp c, thr_eva_group d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND c.del_if = 0
      AND d.del_if = 0
      AND d.mbo_yn = 'N'
      AND a.t_score IS NOT NULL
      AND c.thr_eva_group_pk = d.pk
      AND a.thr_eva_emp_pk = c.pk
      AND a.thr_eva_reviewer_pk = b.pk
      AND c.thr_eva_master_pk = p_year
      AND b.thr_employee_pk = p_thr_employee_pk
      AND c.tco_org_pk = p_tco_org_pk;

   SELECT COUNT (DISTINCT a.thr_eva_emp_pk)
     INTO l_total
     FROM hr.thr_eva_emp_reviewer a, hr.thr_eva_reviewer b, hr.thr_eva_emp c, thr_eva_group d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND c.del_if = 0
      AND d.del_if = 0
      AND d.mbo_yn = 'N'
      AND c.thr_eva_group_pk = d.pk
      AND a.thr_eva_emp_pk = c.pk
      AND a.thr_eva_reviewer_pk = b.pk
      AND c.thr_eva_master_pk = p_year
      AND b.thr_employee_pk = p_thr_employee_pk
      AND c.tco_org_pk = p_tco_org_pk;

   l_rtn := ' (' || NVL (l_request, 0) || '/' || NVL (l_total, 0) || ')';
   RETURN l_rtn;
EXCEPTION
   WHEN OTHERS
   THEN
      -- CONSIDER LOGGING THE ERROR AND THEN RE-RAISE
      RAISE;
END sf_get_eva_total;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_FORMAT;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_FORMAT
(
    v_grp_code                IN      VARCHAR2  --ACBG0040

)
RETURN  VARCHAR2
  IS
/*=================================================================================
* Function      SF_GET_FORMAT
* Description   get format to string number
* Return        CODE, TEXT
* Create Date   2004/06/10
* Writer        Tuyen
=================================================================================*/
w_string            VARCHAR2(20);

BEGIN

      SELECT A.CODE_NM
        INTO w_string
        FROM  TCO_ABCODE A, TCO_ABCODEGRP B
       WHERE A.DEL_IF = 0
         AND B.DEL_IF = 0
         AND A.TCO_ABCODEGRP_PK = B.PK
         AND B.ID = v_grp_code
         AND A.USE_IF = 1
         AND DEF_YN = 'Y';


RETURN    w_string;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GENDER;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_gender(
  p_code_gender varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_code_gender varchar2(50);
begin
   SELECT name into l_code_gender
  FROM tco_commcode 
 WHERE del_if = 0 AND parent_code = 'GEN' AND code = p_code_gender;

 RETURN l_code_gender;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_A;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_a (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.a_grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_C;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_c (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (*)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and a.c_grade = cur.code
         and a.del_if = 0
         and b.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'D';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_FINAL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_final (
   p_num_of_emp            VARCHAR,
   p_thr_eva_master_pk     VARCHAR,
   p_thr_eva_reviewer_pk   VARCHAR,
   p_reviewer_level        VARCHAR,
   p_option_seq            VARCHAR
)
   RETURN VARCHAR2
IS
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             VARCHAR2 (2);
   l_max_to                NUMBER;
   l_thr_eva_to_pk         NUMBER;
   l_thr_eva_to_grade_pk   NUMBER;
   l_cnt                   NUMBER;
   l_grade                 VARCHAR2 (1);
BEGIN
   SELECT MAX (pk)
     INTO l_thr_eva_to_pk
     FROM thr_eva_to
    WHERE thr_eva_master_pk = p_thr_eva_master_pk
      AND num_of_emp = p_num_of_emp
      AND option_seq = p_option_seq
      AND del_if = 0;

   IF l_thr_eva_to_pk IS NULL
   THEN
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   END IF;

   FOR cur IN (SELECT   b.code
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.pk = b.thr_code_master_pk
                    AND a.ID = 'HR0101'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY b.seq)
   LOOP
      l_grade := cur.code;

      SELECT MAX (pk), MAX (to_num)
        INTO l_thr_eva_to_grade_pk, l_max_to
        FROM thr_eva_to_grade
       WHERE thr_eva_to_pk = l_thr_eva_to_pk AND grade = l_grade;

      SELECT COUNT (DISTINCT b.pk)
        INTO l_cnt
        FROM thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       WHERE a.thr_eva_emp_pk = b.pk
         AND b.thr_eva_group_pk = g.pk
         AND g.mbo_yn = 'N'
         AND b.final_grade = l_grade
         AND a.del_if = 0
         AND b.del_if = 0
         AND a.grade_yn = 'Y'
         AND b.processing_yn = 'Y'
         AND b.thr_eva_master_pk = p_thr_eva_master_pk
         AND a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         AND a.reviewer_level = p_reviewer_level;

      IF l_cnt < l_max_to
      THEN
         l_rtn_value := l_grade;
         RETURN l_rtn_value;
      END IF;
   END LOOP;

   l_rtn_value := 'E';
   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_FINAL_A;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_final_a (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq
    and del_if=0;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and a.del_if = 0 and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and b.a_final_grade = cur.code
         and a.del_if = 0
          and b.del_if=0
         and a.grade_yn = 'Y'
         and b.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_FINAL_C;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_final_c (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to
    where thr_eva_master_pk = p_thr_eva_master_pk and num_of_emp = p_num_of_emp and option_seq = p_option_seq
    and del_if=0;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined TO information firstly.'
                              );
   end if;

   for cur in (select   b.code
                   from thr_code_master a, thr_code_detail b
                  where a.pk = b.thr_code_master_pk and a.id = 'HR0101' and a.del_if = 0 and b.del_if = 0
               order by b.seq)
   loop
      select max (pk), max (to_num)
        into l_thr_eva_to_grade_pk, l_max_to
        from thr_eva_to_grade
       where thr_eva_to_pk = l_thr_eva_to_pk and grade = cur.code;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'N'
         and b.c_final_grade = cur.code
         and a.del_if = 0
          and b.del_if=0
         and a.grade_yn = 'Y'
         and b.processing_yn = 'Y'
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_max_to
      then
         l_rtn_value := cur.code;
         return l_rtn_value;
      end if;
   end loop;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_MBO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_mbo (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_MBO_A;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_mbo_a (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.a_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.a_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and a.a_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_MBO_C;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_mbo_c (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a number; 
   l_grade_b number;
   l_grade_s number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;
 
    
   
      select grade_a, grade_b, grade_s
        into  l_grade_a, l_grade_b, l_grade_s
        from thr_eva_to_mbo
       where del_if=0 and number_of_emp = p_num_of_emp;

      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'Y'
         and a.c_grade = 'S'
         and a.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_grade_s
      then
         l_rtn_value := 'S';
         return l_rtn_value;
      end if;
      
      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'Y'
         and a.c_grade = 'A'
         and a.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_grade_a
      then
         l_rtn_value := 'A';
         return l_rtn_value;
      end if;
      
      select count (distinct b.pk)
        into l_cnt
        from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
       where a.thr_eva_emp_pk = b.pk
         and b.thr_eva_group_pk = g.pk
         and g.mbo_yn = 'Y'
         and a.c_grade = 'B'
         and a.del_if = 0
         and a.grade_yn = 'Y'
         and a.processing_yn = 'Y'
         and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
         and b.thr_eva_master_pk = p_thr_eva_master_pk
         and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
         and a.reviewer_level = p_reviewer_level;

      if l_cnt < l_grade_b
      then
         l_rtn_value := 'B';
         return l_rtn_value;
      end if;
   

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_MBO_FINAL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_mbo_final (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.final_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.final_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.final_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_MBO_FINAL_A;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_mbo_final_a (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.a_final_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.a_final_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.a_final_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and a.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GRADE_MBO_FINAL_C;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_grade_mbo_final_c (
   p_num_of_emp            varchar,
   p_thr_eva_master_pk     varchar,
   p_thr_eva_reviewer_pk   varchar,
   p_reviewer_level        varchar,
   p_option_seq            varchar,
   p_tco_org_pk            varchar
)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/27/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value             varchar2 (2);
   l_max_to                number;
   l_thr_eva_to_pk         number;
   l_thr_eva_to_grade_pk   number;
   l_cnt                   number;
   l_grade_a               number;
   l_grade_b               number;
   l_grade_s               number;
begin
   select max (pk)
     into l_thr_eva_to_pk
     from thr_eva_to_mbo
    where thr_eva_master_pk = p_thr_eva_master_pk and number_of_emp = p_num_of_emp and option_seq = p_option_seq;

   if l_thr_eva_to_pk is null
   then
      raise_application_error (-20001,
                                  'You have not defined MBO TO information(emp#:'
                               || p_num_of_emp
                               || ') . Please defined MBO TO information firstly.'
                              );
   end if;

   select grade_a, grade_b, grade_s
     into l_grade_a, l_grade_b, l_grade_s
     from thr_eva_to_mbo
    where del_if = 0 and number_of_emp = p_num_of_emp;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.c_final_grade = 'S'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_s
   then
      l_rtn_value := 'S';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.c_final_grade = 'A'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_a
   then
      l_rtn_value := 'A';
      return l_rtn_value;
   end if;

   select count (distinct b.pk)
     into l_cnt
     from thr_eva_emp_reviewer a, thr_eva_emp b, thr_eva_group g
    where a.thr_eva_emp_pk = b.pk
      and b.thr_eva_group_pk = g.pk
      and g.mbo_yn = 'Y'
      and b.c_final_grade = 'B'
      and a.del_if = 0
      and a.grade_yn = 'Y'
      and b.processing_yn = 'Y'
      and b.tco_org_pk in (select     pk
                                 from comm.tco_org
                                where del_if = 0
                           start with p_pk = p_tco_org_pk
                           connect by prior pk = p_pk)
      and b.thr_eva_master_pk = p_thr_eva_master_pk
      and a.thr_eva_reviewer_pk = p_thr_eva_reviewer_pk
      and a.reviewer_level = p_reviewer_level;

   if l_cnt < l_grade_b
   then
      l_rtn_value := 'B';
      return l_rtn_value;
   end if;

   l_rtn_value := 'E';
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GTD_TYPE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_gtd_type (p_gtd_type IN VARCHAR2)
   RETURN VARCHAR
IS
   l_rtn_value   VARCHAR2 (100);
BEGIN
   SELECT NAME
     INTO l_rtn_value
     FROM comm.tco_commcode
    WHERE del_if = 0 AND parent_code = 'GTD' AND code = p_gtd_type;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_GUEST_STATUS;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_guest_status (p_tht_bookingd_pk varchar)
   return varchar
is
   /******************************************************************************
      NAME:       sf_get_guest_status
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        5/3/2012   Nguyen Van Thai       1. Created this function.

      NOTES:
   ******************************************************************************/
   l_rtn_value       varchar2 (100);
   l_checkout_date   varchar2 (8);
   l_cnt             number;
begin
   select count (*)
     into l_cnt
     from tht_room_allocate
    where tht_bookingd_pk = p_tht_bookingd_pk and del_if = 0;

   if l_cnt > 0
   then
      select count (*)
        into l_cnt
        from tht_room_allocate
       where tht_bookingd_pk = p_tht_bookingd_pk and del_if = 0 and checkout_date is null;

      if l_cnt > 0
      then
         return 'INHOUSE';
      else
         return 'CHECKOUT';
      end if;
   else
      return 'NOT CHECKIN YET';
   end if;
end sf_get_guest_status;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_HR_COMMONCODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_hr_commoncode (p_group VARCHAR, p_code VARCHAR)
   RETURN VARCHAR2
IS
/******************************************************************************
   NAME:       sf_get_hr_commoncode
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/8/2008   Nguyen Van Thai       1. Created this function.

   NOTES:

******************************************************************************/
   l_rtn_value   VARCHAR2 (500);
BEGIN
   SELECT MAX (b.code_nm)
     INTO l_rtn_value
     FROM thr_code_master a, thr_code_detail b
    WHERE a.pk = b.thr_code_master_pk AND a.ID = p_group AND b.code = p_code AND a.del_if = 0 AND b.del_if = 0;
    return l_rtn_value;
END sf_get_hr_commoncode;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_HR_COMMON_CODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_hr_common_code (p_code varchar, p_group varchar, p_tco_company_pk varchar)
   return varchar2
is
/******************************************************************************
   NAME:       sf_get_hr_common_code
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/10/2009          1. Created this function.

******************************************************************************/
   l_rtn_value   varchar2 (200);
begin
/*   select a.code_nm
     into l_rtn_value
     from thr_code_detail a, thr_code_master b
    where a.thr_code_master_pk = b.pk 
        and b.id = p_group 
        and a.code = p_code 
        and a.del_if = 0 
        and b.del_if=0
        and A.TCO_COMPANY_PK;
  */  
    SELECT A.code_nm into l_rtn_value
    FROM VHR_HR_CODE A
    WHERE A.ID=p_group AND A.code=p_code
    and  nvl(TCO_COMPANY_PK,p_tco_company_pk)=p_tco_company_pk;
    
    
   return l_rtn_value;
   
end sf_get_hr_common_code;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_HR_COMMON_CODE_FN;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_hr_common_code_fn (p_code varchar, p_group varchar, p_tco_company_pk varchar)
   return varchar2
is
/******************************************************************************
   NAME:       sf_get_hr_common_code
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/10/2009          1. Created this function.

******************************************************************************/
   l_rtn_value   varchar2 (200);
begin
/*   select a.code_nm
     into l_rtn_value
     from thr_code_detail a, thr_code_master b
    where a.thr_code_master_pk = b.pk 
        and b.id = p_group 
        and a.code = p_code 
        and a.del_if = 0 
        and b.del_if=0
        and A.TCO_COMPANY_PK;
  */  
    SELECT A.code_fnm into l_rtn_value
    FROM VHR_HR_CODE A
    WHERE A.ID=p_group AND A.code=p_code
    and  nvl(TCO_COMPANY_PK,p_tco_company_pk)=p_tco_company_pk;
    
    
   return l_rtn_value;
   
end ;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_HSCODE_BY_PK;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_hscode_by_pk (
   p_tco_hscode_pk   IN   NUMBER                       -- 0 import rate, 1 vat
)
   RETURN VARCHAR2
IS
   l_rtn   VARCHAR2 (40);
BEGIN
   SELECT v.hs_code
     INTO l_rtn
     FROM tlg_ie_hscode v
    WHERE v.pk = p_tco_hscode_pk;

   RETURN l_rtn;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_HT;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_HT(
  p_START           IN  VARCHAR2,--YYYYMMDDHHMM
  p_END             IN  VARCHAR2,--YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_KIND            IN VARCHAR2  --01: KIEU TRONG CHUOI, 02: KIEU NOMARL
  ) RETURN NUMBER IS
  N_WT_TIME     NUMBER;
  l_in_time     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_in     varchar2(8);
  l_date_out     varchar2(8);
  l_start_meal1  varchar2(13);
  l_end_meal1  varchar2(13);
  l_meal1_interval  number;
  l_start_meal2  varchar2(13);
  l_end_meal2  varchar2(13);
  l_meal2_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_wt              number;
  l_wt_plus              number;
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_in        number;
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_flag_exit2    number(1):=0;
   p_END_TMP       varchar2(13);
  l_start_nt       varchar2(13);
  l_interval_tmp    number;
  l_min_ot          number;



  BEGIN
    p_END_TMP:=p_END;
    IF p_START IS NULL OR p_END_TMP IS NULL THEN
        RETURN 0;
    END IF;

    SELECT S.WT,S.START_TIME,S.END_TIME,S.START_MEAL1,S.END_MEAL1,NVL(S.MEAL1_INTERVAL,0),NVL(S.DURING_DAY,1),p_WORK_DT||S.START_NT,NVL(S.WT_PLUS,0)
    ,S.START_MEAL2,S.END_MEAL2,NVL(S.MEAL2_INTERVAL,0)
    INTO l_wt,l_shift_start,l_shift_end,l_start_meal1,l_end_meal1,l_meal1_interval,l_day,l_start_nt,l_wt_plus,l_start_meal2,l_end_meal2,l_meal2_interval
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;

    IF l_day=1 AND p_KIND='01' THEN --GIOI HAN LAI GIO OT
        IF  p_END_TMP>l_start_nt THEN
            p_END_TMP:=l_start_nt;
        END IF;
    END IF;

    l_in_time:=substr(p_START,-5);
    l_out_time:=substr(p_END_TMP,-5);
    l_date_in:=substr(p_START,1,8);
    l_date_out:=substr(p_END_TMP,1,8);


  --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME 
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0026'
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(l_in_time,-2));
   
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;

            IF l_flag_exit1=0 AND  l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_in_time:=l_date_in||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_in_time:=l_date_in||l_temp_in||':'||l_minute_round; --YYYYMMDDHHMM
                END IF;
                IF l_temp_in=24 THEN
                    l_in_time:=TO_CHAR(TO_DATE(l_date_in,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;

                l_flag_exit1:=1;
             END IF;

            
        EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
    END LOOP;
    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_in_time:=p_START;
    END IF;
    
    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE INTIME 
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0096'
        ORDER BY C.SEQ;

    
    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;

             IF l_flag_exit2=0 AND  l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;

                IF l_temp_out=24 THEN
                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
                END IF;
                l_flag_exit2:=1;
             END IF;
        EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit2=1;
    END LOOP;
    CLOSE l_cursor;

    IF  l_flag_exit2=0 THEN -- KO SU DUNG LAM TRON 
        l_out_time:=p_END;
    END IF;

    IF l_day>1 THEN --CA DEM
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;

    ELSE
        IF l_in_time<p_WORK_DT||l_shift_start THEN
            l_in_time:=p_WORK_DT||l_shift_start;
        END IF;
    END IF;

    --TOI DOAN NAY TA DA CO IN OUT THEO DINH DANG YYYYMMDDHHMM
    IF l_meal1_interval>0 THEN
        IF l_shift_start<l_start_meal1 THEN --CA NGAY
            l_start_meal1:=p_WORK_DT||l_start_meal1;
            l_end_meal1:=p_WORK_DT||l_end_meal1;
        ELSE
            l_start_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal1;
            l_end_meal1:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal1;
        END IF;
        IF l_in_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_in_time:=l_end_meal1;
        END IF;
        IF l_out_time BETWEEN l_start_meal1 AND l_end_meal1 THEN
            l_out_time:=l_start_meal1;
        END IF;

     /* select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;*/

        IF l_in_time<=l_start_meal1 AND l_out_time>=l_end_meal1 THEN
               --N_WT_TIME:=N_WT_TIME-l_meal1_interval;
               l_interval_tmp:=l_meal1_interval;
        END IF;
    ELSE
        /*
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;*/
        l_interval_tmp:=0;
    END IF;

    IF l_meal2_interval>0 THEN --TRU GIO NGHI LAN 2

        IF l_shift_start<l_start_meal1 THEN --CA NGAY
            l_start_meal2:=p_WORK_DT||l_start_meal2;
            l_end_meal2:=p_WORK_DT||l_end_meal2;
        ELSE
            l_start_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal2;
            l_end_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2;
        END IF;
        IF l_out_time BETWEEN l_start_meal2 AND l_end_meal2 THEN
            l_out_time:=l_start_meal2;
        END IF;

        IF l_in_time<=l_start_meal2 AND l_out_time>=l_end_meal2 THEN
               --N_WT_TIME:=N_WT_TIME-l_meal2_interval;
               l_interval_tmp:=l_interval_tmp+l_meal2_interval;
        END IF;

    END IF;
    select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_in_time,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_WT_TIME   from dual;

    N_WT_TIME:=N_WT_TIME+l_wt_plus-nvl(l_interval_tmp,0);
    
    SELECT NVL(C.NUM_1,0) INTO l_min_ot
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0038';

    IF N_WT_TIME<l_min_ot THEN
        RETURN  0;
    ELSE
        RETURN  N_WT_TIME;
    END IF;




    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ITEMCODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_itemcode (p_tco_item_pk IN VARCHAR)
   RETURN VARCHAR2
IS
   l_item_code   VARCHAR2 (100);
BEGIN
   SELECT i.item_code
     INTO l_item_code
     FROM TLG_IT_ITEM  i
    WHERE i.del_if = 0 AND i.pk = p_tco_item_pk;

   RETURN l_item_code;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ITEMNAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_itemname (
   p_pk      IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_item_nm   VARCHAR2 (100);
BEGIN

   SELECT i.item_name 
    INTO l_item_nm
    FROM TLG_IT_ITEM i
    WHERE i.del_if = 0
    AND i.pk = p_pk;
   
   RETURN l_item_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ITEM_ATTRIBUTE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_item_attribute (
   p_tco_item_pk   IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_item_attribute   VARCHAR2 (200);
   l_cur              sys_refcursor;
BEGIN
   l_item_attribute := '';

   FOR l_cur IN (SELECT   spec_nm, specgrp_nm
                     FROM lit_item v1,
                          lit_grpspecgrp v2,
                          lit_specgrp v3,
                          lit_itemspec v4,
                          lit_spec v5
                    WHERE v1.lit_itemgrp_pk = v2.lit_itemgrp_pk
                      AND v2.lit_specgrp_pk = v3.pk
                      AND v1.pk = v4.lit_item_pk
                      AND v3.pk = v5.lit_specgrp_pk
                      AND v4.lit_spec_pk = v5.pk
                      AND v1.pk = p_tco_item_pk
                 ORDER BY seq)
   LOOP
      l_item_attribute :=
          l_item_attribute || l_cur.specgrp_nm || ':' || l_cur.spec_nm || ' ';
   END LOOP;

   RETURN l_item_attribute;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_LASTCLOSEMM;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_lastclosemm (v_yymmdd VARCHAR2, v_company VARCHAR2)
   RETURN VARCHAR2
IS
   v_ym   VARCHAR2 (9);
   v_mm   VARCHAR2 (9);
BEGIN
   SELECT TO_CHAR (ADD_MONTHS (TO_DATE (SUBSTR (v_yymmdd, 1, 6) || '01', 'YYYYMMDD'), -1), 'YYYYMMDD')
     INTO v_ym
     FROM DUAL;

   SELECT MAX (std_ym) || '01'
     INTO v_mm
     FROM tac_icmmclose
    WHERE decode(v_company,0,2  ,tco_company_pk)  = decode(v_company,0,2  ,v_company) AND close_yn = 'Y' AND del_if = 0;

   IF (v_mm <= v_ym)
   THEN
      v_ym := v_mm;
   END IF;

   RETURN v_ym;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_LASTCLOSEMM2;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_LASTCLOSEMM2(p_yyyymmdd varchar, p_TCO_COMPANY_PK varchar)
   return varchar
is
   l_STD_YMd   varchar(8);
begin
   select max(STD_YM)
     into l_STD_YMd
     from TAC_ICMMCLOSE
    where TCO_COMPANY_PK = p_TCO_COMPANY_PK
      and CLOSE_YN = 'Y'
      and DEL_IF = 0;

   if l_STD_YMd is null
   then
      l_STD_YMd := '19000131';
   else
      l_STD_YMd := l_STD_YMd || '01';
   end if;

   select to_char(last_day(to_date(l_STD_YMd, 'yyyymmdd') ), 'yyyymmdd')
     into l_STD_YMd
     from dual;

   return l_STD_YMd;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_LAST_DAY;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_last_day
(
    v_yyyymmdd                IN      VARCHAR2
)

  RETURN  varchar2

  IS
  l_last_day varchar2(8);
BEGIN

    select  to_char(last_day(to_date(v_yyyymmdd, 'yyyyMMdd')), 'yyyyMMdd') into l_last_day from dual;
    
RETURN    l_last_day;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_LENGTH_COLUMN;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_length_column (p_table_name varchar, p_col_name VARCHAR)
   RETURN NUMBER
IS
   tmpvar   NUMBER;
/******************************************************************************
   NAME:       sf_get_length_column
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/24/2009          1. Created this function.
******************************************************************************/
BEGIN
   SELECT data_length
     INTO tmpvar
     FROM user_tab_columns
    WHERE table_name = upper(p_table_name)
      AND column_name = upper(p_col_name);

   RETURN tmpvar;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END sf_get_length_column;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_LOCATION;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_location(
  p_code_location varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_name varchar2(50);
begin
  SELECT NAME into l_name FROM comm.tco_commcode 
    WHERE PARENT_CODE = 'POINT' 
    and code in ('POINT-01','POINT-04','POINT-05','POINT-06','POINT-09')
    and CODE=p_code_location;
 RETURN l_name;
end sf_get_location;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_LOCATION_PROSHOP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_location_proshop(
  p_code_location varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_name varchar2(50);
begin
  /*if p_code_location = '' then
    l_name := 'ALL';
   elsif p_code_location = 'GOLF' then
    l_name := 'PROSHOP GOLF';
   else */
  SELECT NAME into l_name FROM comm.tco_commcode 
    WHERE PARENT_CODE = 'POINT' 
    and code in ('POINT-02','POINT-03','POINT-07','POINT-16','POINT-21')
    and CODE=p_code_location;
 --end if;
 RETURN l_name;
end sf_get_location_proshop;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_LOCATION_SALE_TREND;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_location_sale_trend(
  p_code_location varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_name varchar2(50);
begin
  SELECT nvl(max(NAME),'Select All') into l_name FROM tco_commcode 
    WHERE PARENT_CODE = 'POINT' 
    and code in ('POINT-01','POINT-04','POINT-05','POINT-06','POINT-09')
    and CODE=p_code_location;
 RETURN l_name;
end sf_get_location_sale_trend;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_MANAGER_PK;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_manager_pk (p_thr_employee_pk varchar, p_level varchar)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/24/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value         varchar2 (100);
   l_thr_employee_pk   number;
begin
   if p_level = 1
   then
      select max (a.manager_pk)
        into l_rtn_value
        from tco_org a
       where del_if = 0 and a.pk = (select tco_org_pk
                                      from hr.thr_employee
                                     where pk = p_thr_employee_pk);

      if ((l_rtn_value = p_thr_employee_pk) or l_rtn_value is null)
      then
         select max (a.manager_pk)
           into l_rtn_value
           from tco_org a
          where del_if = 0 and a.pk = (select p_pk
                                         from tco_org
                                        where del_if = 0 and pk in (select tco_org_pk
                                                                      from hr.thr_employee
                                                                     where pk = p_thr_employee_pk));
      end if;
   elsif p_level = 2
   then
      select max (a.manager_pk)
        into l_rtn_value
        from tco_org a
       where del_if = 0 and a.pk = (select p_pk
                                      from tco_org
                                     where del_if = 0 and pk in (select tco_org_pk
                                                                   from hr.thr_employee
                                                                  where pk = p_thr_employee_pk));

      if ((l_rtn_value = p_thr_employee_pk) or l_rtn_value is null)
      then
         select max (a.manager_pk)
           into l_rtn_value
           from tco_org a
          where a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from hr.thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;
      SELECT sf_get_manager_pk (p_thr_employee_pk, 1)
        INTO l_thr_employee_pk
        FROM DUAL;

      IF l_rtn_value = l_thr_employee_pk
      THEN
         select max (a.manager_pk)
           into l_rtn_value
           from tco_org a
          where a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from hr.thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;
   elsif p_level = 3
   then
      select max (b.pk)
        into l_rtn_value
        from tco_org a, hr.thr_employee b
       where a.manager_pk = b.pk and a.pk = (select p_pk
                                               from tco_org
                                              where pk in (select p_pk
                                                             from tco_org
                                                            where pk in (select tco_org_pk
                                                                           from hr.thr_employee
                                                                          where pk = p_thr_employee_pk)));
   end if;

   return l_rtn_value;
exception
   when others
   then
      raise;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_MAX_ITEMCODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_max_itemcode
    RETURN  NUMBER
  IS
    l_rtn_value varchar2(6);


BEGIN
    select max(item_code) + 1 into l_rtn_value  
    from tgm_item_ccacc_map;
    
RETURN    l_rtn_value ;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_MENU_TYPE_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_menu_type_name (p_code_type IN VARCHAR2)
   RETURN VARCHAR
IS
   l_rtn_value   VARCHAR2 (100);
BEGIN
   SELECT  NAME into l_rtn_value  FROM  COMM.TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='PARTY' and CODE in (10,50,70,80) and code = p_code_type;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END sf_get_menu_type_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_MONTHLY_FUP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_monthly_fup (p_std_ym varchar2, p_tco_item_pk varchar2, p_tco_company_pk number,
            p_tin_warehouse_pk number)
   return number
is
   l_rtn_amt   number;
   l_std_ym    varchar2 (6);
/******************************************************************************
   NAME:       sf_get_monthly_UP
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/28/2008  Linh Truong       1. Created this function.

  ******************************************************************************/
begin
   l_rtn_amt := 0;
    begin
      select takeout_fup
        into l_rtn_amt
        from tac_crcost_up
       where del_if = 0 
       and tco_item_pk = p_tco_item_pk 
       and std_ym = p_std_ym 
       and tco_company_pk = p_tco_company_pk
       and tin_warehouse_pk = p_tin_warehouse_pk ;
    exception
        when no_data_found then
       select to_char (add_months (to_date (p_std_ym || '01', 'yyyymmdd'), -1), 'yyyymm')
         into l_std_ym
         from dual;

       begin
          select takeout_fup
            into l_rtn_amt
            from tac_crcost_up
           where tco_item_pk = p_tco_item_pk 
           and tin_warehouse_pk = p_tin_warehouse_pk 
           and std_ym = l_std_ym 
           and del_if = 0                        
           and tco_company_pk = p_tco_company_pk ;
           
       exception
          when no_data_found
          then
             l_rtn_amt := 0;
       end;
                       
    end ;


   return l_rtn_amt;
exception
   when others
   then
      -- Consider logging the error and then re-raise
      raise;
end sf_get_monthly_fup;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_MONTHLY_UP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_monthly_up (p_std_ym varchar2, p_tco_item_pk varchar2, p_tco_company_pk number,
    p_tin_warehouse_pk number)
   return number
is
   l_rtn_amt   number;
   l_std_ym    varchar2 (6);
/******************************************************************************
   NAME:       sf_get_monthly_UP
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/28/2008  Linh Truong       1. Created this function.

  ******************************************************************************/
begin
   l_rtn_amt := 0;
    begin
      select takeout_up
        into l_rtn_amt
        from tac_crcost_up
       where del_if = 0 and tco_item_pk = p_tco_item_pk 
       and std_ym = p_std_ym 
       and tco_company_pk = p_tco_company_pk
       and tin_warehouse_pk = p_tin_warehouse_pk ;
    exception
        when no_data_found then
       select to_char (add_months (to_date (p_std_ym || '01', 'yyyymmdd'), -1), 'yyyymm')
         into l_std_ym
         from dual;

       begin
          select takeout_up
            into l_rtn_amt
            from tac_crcost_up
           where del_if = 0 and tco_item_pk = p_tco_item_pk and std_ym = l_std_ym 
           and tco_company_pk = p_tco_company_pk
           and tin_warehouse_pk = p_tin_warehouse_pk ;
       exception
          when no_data_found
          then
             l_rtn_amt := 0;
       end;
                       
    end ;


   return l_rtn_amt;
exception
   when others
   then
      -- Consider logging the error and then re-raise
      raise;
end sf_get_monthly_up;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_MONTH_CLOSE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_month_close(p_date varchar)
   RETURN varchar2
IS
   l_flag_exist   BOOLEAN;
   l_cur_rec      NUMBER;
   l_cur          sys_refcursor;
   l_work_mon       varchar2(6);

BEGIN
   --check close month
   OPEN l_cur FOR
      SELECT 1
        FROM thr_close t
       WHERE del_if = 0
         AND p_date BETWEEN t.from_dt AND t.to_dt
         AND t.ID = '01';

   FETCH l_cur
    INTO l_cur_rec;

   l_flag_exist := l_cur%FOUND;

   CLOSE l_cur;
    if l_flag_exist then
        SELECT month_close into l_work_mon
        FROM thr_close t
        WHERE del_if = 0
         AND p_date BETWEEN t.from_dt AND t.to_dt
         AND t.ID = '01';
    else
        l_work_mon:=substr(p_date,1,6);
    end if;
   return l_work_mon     ;

EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NAME_CODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_name_code
(
    p_code                IN      VARCHAR2
)

  RETURN  varchar

  IS
    l_re    varchar2(50);


BEGIN
    select name into l_re from comm.tco_commcode where del_if=0 and code = p_code;
RETURN    l_re;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NAME_EVALUATION;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_name_evaluation(p_code in varchar2)
    RETURN  varchar
  IS
    l_rtn_value varchar2(100);


BEGIN
    SELECT  NAME into l_rtn_value FROM  COMM.TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='CDEVAL' and CODE=p_code;
    
RETURN    l_rtn_value ;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END sf_get_name_evaluation;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NAME_JACD90;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_name_jacd90(p_code in varchar2)
    RETURN  varchar
  IS
    l_rtn_value varchar2(100);


BEGIN
    SELECT  CODE||'-'||NAME into l_rtn_value FROM  COMM.TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='CDEVAL' and CODE=p_code;
    
RETURN    l_rtn_value ;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END sf_get_name_jacd90;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NAME_PARTY_TYPE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_name_party_type (p_card_id IN VARCHAR2)
   RETURN VARCHAR
IS
   l_rtn_value   VARCHAR2 (100);
BEGIN
   SELECT NAME
     INTO l_rtn_value
     FROM comm.tco_commcode
    WHERE del_if = 0 AND parent_code = 'PARTY' AND code = p_card_id;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NAME_RATE_PLAN;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_name_rate_plan (
   p_rate_plan_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (300);
BEGIN
   SELECT a.RATE_CODE || ' - ' || a.RATE_NAME
     INTO l_rtn_value
     FROM THT_RATE_PLANS a
    WHERE a.DEL_IF = 0 AND a.pk = p_rate_plan_pk;

   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NAME_ROOM_TYPE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_name_room_type(
  p_tht_room_type varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_code_room_type varchar2(50);
begin
SELECT NAME
  INTO l_code_room_type
  FROM TCO_COMMCODE
 WHERE DEL_IF = 0 AND PARENT_CODE = 'RTYPE' AND code = p_tht_room_type;
 return l_code_room_type;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NATION;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_nation(
  p_code_nation varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_code_nation varchar2(50);
begin
   select name
  into l_code_nation
  from tco_commcode
 where del_if = 0 and parent_code = 'NAT' and code = p_code_nation;

 return l_code_nation;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NOTE_REG;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_NOTE_REG(
  P_THR_EMP_PK      IN  VARCHAR2, --HH:MM
  P_MONTH           IN  VARCHAR2, --YYYYMMDDHHMM
  P_DETAIL_INS_REG_TYPE    IN  NUMBER
  ) RETURN VARCHAR2 IS
  
  l_cur sys_refcursor;
  l_result varchar(500);
  l_flag_exist boolean:=FALSE;
  l_cur_note_type varchar(300);
  l_cur_note varchar(300);
  l_old_note_type varchar(300):='';
  l_old_note varchar(300):='';
  l_cur_note_type_code varchar(300):='';
  l_cur_date varchar(8);
  BEGIN
  
     OPEN l_cur FOR
        select c.code_fnm,note,note_type,to_char(to_date(a.ABS_DT,'yyyymmdd'),'dd/mm') 
        from thr_ins_regulation_detail a,
        (select b.code,b.code_fnm from vhr_hr_code b where b.id='HR0128') c
        where a.del_if=0 and a.thr_emp_pk=p_thr_emp_pk
        and  a.ins_month=p_month
        and a.note is not null
        and a.note_type=c.code(+)
        and a.DETAIL_INS_REG_TYPE= p_detail_ins_reg_type
        order by a.NOTE_TYPE desc,note ;
          
        LOOP
                FETCH l_cur INTO l_cur_note_type,l_cur_note,l_cur_note_type_code,l_cur_date;
                 EXIT WHEN l_cur%NOTFOUND ;
                      if l_old_note_type <> l_cur_note_type or l_old_note_type is null then
                        if l_old_note_type is null then 
                            l_result:=l_result || '';
                        else
                            l_result:=l_result || '),';
                            
                        end if;
                        if l_cur_note_type_code = '01' then 
                            select  l_result || decode(l_cur_note_type_code,'01','',l_cur_note_type) || '(' || l_cur_date || ':' || l_cur_note  into l_result
                            from dual;  
                        else
                            select  l_result || decode(l_cur_note_type_code,'01','',l_cur_note_type) || '(' || l_cur_note  into l_result
                            from dual;  
                        end if;
                      else
                        if l_cur_note_type_code='01' then 
                            l_result:=l_result || ',' || l_cur_date || ':' ||  l_cur_note;
                        else
                            l_result:=l_result || ',' || l_cur_note;
                        end if;
                      end if;   
                      l_old_note_type:=l_cur_note_type;
                      l_old_note:=l_cur_note;
            END LOOP;
        if l_result is not null then
            l_result:=l_result || ')';
        end if;    
    return l_result ;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NT1_VHPC_DRIVER;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_NT1_VHPC_DRIVER(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2  --YYYYMMDDHHMM
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_end_nt_s     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round number;
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_end_nt varchar(5);
  l_ot  number;




  BEGIN
    -- chi lay nt 30 

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;
    
    l_end_nt:=to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24,'hh24:mi');

    /*l_end_nt:='05:00';
    IF p_START_NT='22:00' THEN
        l_end_nt:='06:00';
    END IF;*/

    select p_WORK_DT||s.START_TIME
           ,(case when nvl(s.DURING_DAY,1)=1 then TO_CHAR(TO_DATE(p_WORK_DT||s.END_TIME,'YYYYMMDDHH24:MI')-nvl(s.OT,0)/24,'YYYYMMDDHH24:MI')
               -- else to_char(to_date(to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.END_TIME,'yyyymmddhh24:mi')-nvl(s.OT,0)/24,'yyyymmddhh24:mi')
                else (case when to_number(substr(s.START_OT,1,2)) between 0 and 12 then to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.START_OT
                          else  p_work_dt||s.START_OT
                     end)
                end)     
             into l_shift_start,l_end_nt_s
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT;
    -- Gioi han gio p_END trong 
    if p_END>l_end_nt_s then
        l_end:=l_end_nt_s;
        if l_end > to_char(to_date(p_work_dt,'yyyymmdd')+1,'yyyymmdd')||l_end_nt then
                l_end:= substr(l_end,1,8)||l_end_nt;
        
        end if;
    else
        l_end:=p_END;
    end if;

   

    IF l_shift_start<p_WORK_DT||l_end_nt THEN -- CA BAT DAU TU 00 H DEN  END NT 
        l_start_nt:=p_WORK_DT||SUBSTR(l_shift_start,-5);
        l_end:=p_WORK_DT||l_end_nt;
    ELSIF p_START>p_WORK_DT||p_START_NT then
        l_start_nt:=p_START;
    else
        l_start_nt:=p_WORK_DT||p_START_NT;
    end if;

    if l_shift_start>l_start_nt then
        l_start_nt:=l_shift_start;
    end if;
    
    IF l_start_nt>=l_end THEN
        RETURN 0;
    END IF;    


    l_out_time:=substr(l_end,-5);
    l_date_out:=substr(l_end,1,8);

   
    IF l_start_nt<p_START THEN
        l_start_nt:=p_START;
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
--    OPEN l_cursor FOR
--        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
--        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
--        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
--        AND D.ID='HR0027' AND NVL(D.USE_YN,'N')='Y'
--        ORDER BY C.SEQ;

--    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
--    LOOP
--        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
--            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

--             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
--                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
--                IF l_temp_out<=9 THEN
--                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
--                ELSE
--                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
--                END IF;
--                l_flag_exit1:=1;
--                IF l_temp_out=24 THEN
--                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
--                END IF;

--                EXIT;
--             END IF;
--    END LOOP;
--    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_end;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_nt,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_NT2_VHPC_DRIVER;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_NT2_VHPC_DRIVER(
  p_START_NT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_START           IN  VARCHAR2  --YYYYMMDDHHMM
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_nt     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_end_nt_s     varchar2(13);
  l_cursor          sys_refcursor;
  l_minute_from number;
  l_minute_to number;
  l_interval number;
  l_minute_round number;
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  l_end     VARCHAR2(13); --YYYYMMDDHHMM
  l_shift_start VARCHAR2(13);
  l_end_nt varchar(5);
  l_ot  number;




  BEGIN
    -- chi lay nt 30 

    IF p_START_NT IS NULL OR p_END IS NULL THEN
        RETURN 0;
    END IF;
    
    l_end_nt:=to_char(to_date(p_WORK_DT||p_START_NT,'yyyymmddhh24:mi')+8/24,'hh24:mi');

    /*l_end_nt:='05:00';
    IF p_START_NT='22:00' THEN
        l_end_nt:='06:00';
    END IF;*/



    select p_WORK_DT||s.START_TIME
           ,(case when nvl(s.DURING_DAY,1)=1 then TO_CHAR(TO_DATE(p_WORK_DT||s.END_TIME,'YYYYMMDDHH24:MI')-nvl(s.OT,0)/24,'YYYYMMDDHH24:MI')
                else to_char(to_date(to_char(to_date(p_WORK_DT,'yyyymmdd')+1,'yyyymmdd')||s.END_TIME,'yyyymmddhh24:mi')-nvl(s.OT,0)/24,'yyyymmddhh24:mi')
                end)     
             into l_shift_start,l_end_nt_s
     from thr_work_shift s where s.del_if=0 and s.pk=p_SHIFT;
     
    if p_END>TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt then
        l_end:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_nt;
    else
        l_end:=p_END;
    end if; 
    
    IF l_shift_start<p_WORK_DT||l_end_nt THEN -- CA BAT DAU TU 00 H DEN  END NT
        l_start_nt:=p_WORK_DT||SUBSTR(l_shift_start,-5);
        l_end:=p_WORK_DT||l_end_nt;
    ELSIF p_START>p_WORK_DT||p_START_NT then
        l_start_nt:=p_START;
    else
        l_start_nt:=p_WORK_DT||p_START_NT;
    end if;

    if l_shift_start>l_start_nt then
        l_start_nt:=l_shift_start;
    end if;

    if l_start_nt<=l_end_nt_s then
        l_start_nt:=l_end_nt_s;
    end if;
    
    IF l_start_nt>=l_end THEN
        RETURN 0;
    END IF;    


    l_out_time:=substr(l_end,-5);
    l_date_out:=substr(l_end,1,8);

   
    IF l_start_nt<p_START THEN
        l_start_nt:=p_START;
    END IF;

--    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
--    OPEN l_cursor FOR
--        SELECT C.NUM_1,C.NUM_2,C.NUM_3,C.CHAR_1
--        FROM THR_CODE_DETAIL C,THR_CODE_MASTER D
--        WHERE C.DEL_IF=0 AND D.DEL_IF=0 AND C.THR_CODE_MASTER_PK=D.PK
--        AND D.ID='HR0027' AND NVL(D.USE_YN,'N')='Y'
--        ORDER BY C.SEQ;

--    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
--    LOOP
--        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
--            EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;

--             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
--                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
--                IF l_temp_out<=9 THEN
--                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
--                ELSE
--                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
--                END IF;
--                l_flag_exit1:=1;
--                IF l_temp_out=24 THEN
--                    l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
--                END IF;

--                EXIT;
--             END IF;
--    END LOOP;
--    CLOSE l_cursor;

    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=l_end;
    END IF;

        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_nt,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

    IF N_OT_TIME<0 THEN
        RETURN  0;
    ELSIF N_OT_TIME>8 THEN
        RETURN  8;
    ELSE
        RETURN  N_OT_TIME;
    END IF;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_OTHER_FEE_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_other_fee_name (p_code IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (500);
BEGIN 
    SELECT NAME  INTO l_rtn_value FROM  TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='OTHERFEE' and code=p_code;
   RETURN l_rtn_value;
END sf_get_other_fee_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_OT_VHPC;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_OT_VHPC(
  p_START_OT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_KIND            IN VARCHAR2  --01: KIEU TRONG CHUOI, 02: KIEU NOMARL 
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_ot     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_start_meal2  varchar2(13);
  l_end_meal2  varchar2(13);
  l_meal2_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  p_END_TMP       varchar2(13);
  l_start_nt       varchar2(13);
  l_min_ot          number;
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_out_ot number;
l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
max_ot  number;
l_day_type      varchar2(1);

  BEGIN
   
    p_END_TMP:=p_END;

    IF p_START_OT IS NULL OR p_END_TMP IS NULL THEN
        RETURN 0;
    END IF;

    SELECT S.START_TIME,S.END_TIME,S.START_MEAL2,S.END_MEAL2,NVL(S.MEAL2_INTERVAL,0),NVL(S.DURING_DAY,1),p_WORK_DT||S.START_NT,nvl(s.max_ot,0)
    INTO l_shift_start,l_shift_end,l_start_meal2,l_end_meal2,l_meal2_interval,l_day,l_start_nt,max_ot
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;

    IF l_day=1 AND p_KIND='01' THEN --GIOI HAN LAI GIO OT   
        IF  p_END_TMP>l_start_nt THEN
            p_END_TMP:=l_start_nt;
        END IF;
    END IF;

    l_out_time:=substr(p_END_TMP,-5);
    l_date_out:=substr(p_END_TMP,1,8);

    IF p_START_OT<l_shift_start THEN
        l_start_ot:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT;
    ELSE
        l_start_ot:=p_WORK_DT||p_START_OT;
    END IF;

    IF l_start_ot>=p_END_TMP THEN
        RETURN 0;
    END IF;

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE 
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1,NVL(C.CHAR_2,'N')
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0027'
        ORDER BY C.SEQ;

    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    l_tmp:=TRUNC(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))/60);
    l_tmp2:=MOD(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')),60);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
        IF l_begin_shift='N' THEN     
             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;

             IF l_temp_out=24 THEN
                l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
         ELSE --BAT DAY SHIFT 
                IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                        l_tmp:=l_tmp+l_interval;
                        l_out_time:=to_char(TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                        l_flag_exit1:=1;
                END IF;
                 
        END IF;                  
    END LOOP;

    CLOSE l_cursor;


    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=p_END_TMP;
    END IF;

    --xu ly co tru gio com
    IF l_meal2_interval>0 THEN
        IF l_shift_start<l_start_meal2 THEN --CA NGAY
            l_start_meal2:=p_WORK_DT||l_start_meal2;
            l_end_meal2:=p_WORK_DT||l_end_meal2;
        ELSE
            l_start_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal2;
            l_end_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2;
        END IF;

        IF l_out_time BETWEEN l_start_meal2 AND l_end_meal2 THEN
            l_out_time:=l_start_meal2;
        END IF;
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

        IF l_start_ot<=l_start_meal2 AND l_out_time>=l_end_meal2 THEN
               N_OT_TIME:=N_OT_TIME-l_meal2_interval;
        END IF;
    ELSE
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;
    END IF;
    
    SELECT NVL(C.NUM_1,0) INTO l_min_ot
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0038';
        
    SELECT a.DAY_TYPE into l_day_type
    from comm.tco_abcalendar a
    where a.DEL_IF=0 and a.CAR_DATE= p_work_dt;

    IF N_OT_TIME<l_min_ot and l_day_type<>'1' THEN  --Khong phai ngay chu nhat ma nho hon l_min_ot thi bang 0 
        l_out_ot:=0;
    ELSIF max_ot>0 AND N_OT_TIME>max_ot and l_day_type <>'1' THEN --CO DUNG MAX OT  
        l_out_ot:=max_ot;
    ELSE
        l_out_ot:=N_OT_TIME;
    END IF;

    return l_out_ot;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_OT_VST;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_OT_VST(
  P_IN_TIME         IN VARCHAR2, --yyyymmddhhmm 
  p_START_OT           IN  VARCHAR2, --HH:MM
  p_END             IN  VARCHAR2, --YYYYMMDDHHMM
  p_SHIFT           IN  NUMBER,
  p_WORK_DT         IN  VARCHAR2,
  p_KIND            IN VARCHAR2  --01: KIEU TRONG CHUOI, 02: KIEU NOMARL 
  ) RETURN NUMBER IS
  N_OT_TIME     NUMBER;
  l_start_ot     VARCHAR2(13); --YYYYMMDDHHMM
  l_out_time    VARCHAR2(13); --YYYYMMDDHHMM
  l_date_out     varchar2(8);
  l_start_meal2  varchar2(13);
  l_end_meal2  varchar2(13);
  l_meal2_interval  number;
  l_shift_start     varchar2(8);
  l_shift_end     varchar2(8);
  l_day              number(1):=0;
  l_cursor          sys_refcursor;
  l_minute_from varchar2(5);
  l_minute_to varchar2(5);
  l_interval number;
  l_minute_round varchar2(5);
  l_temp_out        number;
  l_flag_exit1    number(1):=0;
  p_END_TMP       varchar2(13);
  l_start_nt       varchar2(13);
  l_min_ot          number;
  l_begin_shift   varchar(1):='';
  l_tmp   NUMBER(10):=0;
  l_tmp2  NUMBER(10):=0;
  l_out_ot number;
l_cur_rec number;
l_pro varchar(200);
l_cur sys_refcursor;
l_string varchar(200);
l_flag_exist boolean:=FALSE;
max_ot  number;
l_temp_in number;
l_in_time   varchar2(5);
  BEGIN
  
    p_END_TMP:=p_END;

    IF p_START_OT IS NULL OR p_END_TMP IS NULL THEN
        RETURN 0;
    END IF;

    SELECT S.START_TIME,S.END_TIME,S.START_MEAL2,S.END_MEAL2,NVL(S.MEAL2_INTERVAL,0),NVL(S.DURING_DAY,1),p_WORK_DT||S.START_NT,nvl(s.max_ot,0)
    INTO l_shift_start,l_shift_end,l_start_meal2,l_end_meal2,l_meal2_interval,l_day,l_start_nt,max_ot
     FROM THR_WORK_SHIFT S
    WHERE S.DEL_IF=0 AND S.PK=p_SHIFT;

    IF l_day=1 AND p_KIND='01' THEN --GIOI HAN LAI GIO OT   
        IF  p_END_TMP>l_start_nt THEN
            p_END_TMP:=l_start_nt;
        END IF;
    END IF;

    l_out_time:=substr(p_END_TMP,-5);
    l_date_out:=substr(p_END_TMP,1,8);

    IF p_START_OT<l_shift_start THEN
        l_start_ot:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||p_START_OT;
    ELSE
        l_start_ot:=p_WORK_DT||p_START_OT;
    END IF;

    IF l_start_ot>=p_END_TMP THEN
        RETURN 0;
    END IF;
    
    IF P_IN_TIME>l_start_ot THEN
        l_start_ot:=P_IN_TIME;
        
        --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0026'
        ORDER BY C.SEQ;

    l_temp_in:=TO_NUMBER(substr(l_start_ot,-2));
    l_in_time:=substr(l_start_ot,9,5);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
      
             IF l_temp_in BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_in:=TO_NUMBER(substr(l_in_time,1,2))+l_interval;
                IF l_temp_in<=9 THEN
                    l_start_ot:=p_WORK_DT||'0'||l_temp_in||':'||l_minute_round;
                ELSE
                    l_start_ot:=p_WORK_DT||l_temp_in||':'||l_minute_round;
                END IF;

             IF l_temp_in=24 THEN
                l_start_ot:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
             
        END LOOP;
         CLOSE l_cursor;

        IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
            l_start_ot:=p_IN_TIME;
        END IF;
        
            
    END IF;    

    --XU LY PHAN LAM TRON DONG DUOC DINH NGHIA TU HR CODE
    OPEN l_cursor FOR
        SELECT C.NUM_1,C.NUM_2,nvl(C.NUM_3,0),C.CHAR_1,NVL(C.CHAR_2,'N')
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0027'
        ORDER BY C.SEQ;

    l_temp_out:=TO_NUMBER(substr(l_out_time,-2));
    l_tmp:=TRUNC(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))/60);
    l_tmp2:=MOD(24*60*(TO_DATE(p_END,'YYYYMMDDHH24:MI')-TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')),60);
    
    LOOP
        FETCH l_cursor INTO l_minute_from,l_minute_to,l_interval,l_minute_round,l_begin_shift;
             EXIT WHEN l_cursor%NOTFOUND OR l_flag_exit1=1;
        IF l_begin_shift='N' THEN     
             IF l_temp_out BETWEEN l_minute_from AND l_minute_to THEN
                l_temp_out:=TO_NUMBER(substr(l_out_time,1,2))+l_interval;
                IF l_temp_out<=9 THEN
                    l_out_time:=l_date_out||'0'||l_temp_out||':'||l_minute_round;
                ELSE
                    l_out_time:=l_date_out||l_temp_out||':'||l_minute_round;
                END IF;

             IF l_temp_out=24 THEN
                l_out_time:=TO_CHAR(TO_DATE(l_date_out,'YYYYMMDD')+1,'YYYYMMDD')||'00:'||l_minute_round;
             END IF;
                l_flag_exit1:=1;
                
             END IF;
         ELSE --BAT DAY SHIFT 
                IF l_flag_exit1=0 AND  l_tmp2 BETWEEN l_minute_from AND l_minute_to THEN
                        l_tmp:=l_tmp+l_interval;
                        l_out_time:=to_char(TO_DATE(l_start_ot,'YYYYMMDDHH24:MI')+(l_tmp+l_minute_round/60)/24,'YYYYMMDDHH24:MI');
                        l_flag_exit1:=1;
                END IF;
                 
        END IF;                  
    END LOOP;

    CLOSE l_cursor;


    IF l_flag_exit1=0 THEN -- KO SU DUNG LAM TRON
        l_out_time:=p_END_TMP;
    END IF;

    --xu ly co tru gio com
    IF l_meal2_interval>0 THEN
        IF l_shift_start<l_start_meal2 THEN --CA NGAY
            l_start_meal2:=p_WORK_DT||l_start_meal2;
            l_end_meal2:=p_WORK_DT||l_end_meal2;
        ELSE
            l_start_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_start_meal2;
            l_end_meal2:=TO_CHAR(TO_DATE(p_WORK_DT,'YYYYMMDD')+1,'YYYYMMDD')||l_end_meal2;
        END IF;

        IF l_out_time BETWEEN l_start_meal2 AND l_end_meal2 THEN
            l_out_time:=l_start_meal2;
        END IF;
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;

        IF l_start_ot<=l_start_meal2 AND l_out_time>=l_end_meal2 THEN
               N_OT_TIME:=N_OT_TIME-l_meal2_interval;
        END IF;
    ELSE
        select ROUND((TO_DATE(l_out_time,'YYYYMMDDHH24:MI') - TO_DATE(l_start_ot,'YYYYMMDDHH24:MI'))*24,2)
            INTO N_OT_TIME   from dual;
    END IF;
    
    SELECT NVL(C.NUM_1,0) INTO l_min_ot
        FROM VHR_HR_CODE C
        WHERE C.ID='HR0038';

    IF N_OT_TIME<l_min_ot THEN
        l_out_ot:=0;
    ELSIF max_ot>0 AND N_OT_TIME>max_ot THEN --CO DUNG MAX OT  
        l_out_ot:=max_ot;
    ELSE
        l_out_ot:=N_OT_TIME;
    END IF;

    return l_out_ot;


    EXCEPTION
    WHEN  OTHERS THEN
        raise;

END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PARTNERLOC_NM;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_partnerloc_nm (
   p_tco_partnerloc_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_loc_nm   tco_partnerloc.loc_nm%TYPE   := '';
BEGIN
   SELECT a.loc_nm
     INTO l_loc_nm
     FROM tco_partnerloc a
    WHERE a.pk = p_tco_partnerloc_pk;

   RETURN l_loc_nm;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END sf_get_partnerloc_nm;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PAYMENTBANK_YN;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_paymentbank_yn(
    p_tac_hgtrh_pk          varchar2    
) 
RETURN VARCHAR2 
IS

/******************************************************************************
   NAME:       sf_get_paymentbank_yn
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/6/2011   Van Le       1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_paymentbank_yn
      Sysdate:         10/6/2011
      Date and Time:   10/6/2011, 12:49:21 PM, and 10/6/2011 12:49:21 PM
      Username:        Administrator (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
    v_count     number;
    v_payment_yn     varchar2(1);
    v_amount_level number ;
BEGIN        
        select sum(net_amt) + sum(tax_amt) into v_amount_level 
        from tac_mtvat
        where tac_hgtrh_pk = p_tac_hgtrh_pk
        and del_if = 0 ;
        v_count := 0 ;
        if v_amount_level >= 20000000 then
            select count(*) into v_count
            from tfn_eppay p, tfn_eppaytr t, tfn_eppaytrh h, tac_hgtrh m
            where p.tac_hgtrd_pk in (select pk from tac_hgtrd where tac_hgtrh_pk = p_tac_hgtrh_pk and del_if = 0)
            and p.del_if = 0
            and p.pk = t.tfn_eppay_pk
            and t.del_if = 0
--            and t.pay_famt >= p_amount_level
            and t.pay_type in ('03', '04')
            and t.tfn_eppaytrh_pk = h.pk
            and h.del_if = 0        
            and h.tr_status in ('2', '0')
            and m.tr_tablenm = 'TFN_EPPAYTRH'
            and h.pk= m.tr_table_pk
            and m.del_if = 0
            and m.tr_status in ('2', '0') ;
        else
            select count(*) into v_count
            from tfn_eppay p, tfn_eppaytr t, tfn_eppaytrh h, tac_hgtrh m
            where p.tac_hgtrd_pk in (select pk from tac_hgtrd where tac_hgtrh_pk = p_tac_hgtrh_pk and del_if = 0)
            and p.del_if = 0
            and p.pk = t.tfn_eppay_pk
            and t.del_if = 0                      
--            and t.pay_famt < p_amount_level  
            and t.tfn_eppaytrh_pk = h.pk
            and h.del_if = 0        
            and h.tr_status in ('2', '0')
            and m.tr_tablenm = 'TFN_EPPAYTRH'
            and h.pk= m.tr_table_pk
            and m.del_if = 0
            and m.tr_status in ('2', '0') ;        
        end if;             
                 
        if v_count > 0 then
            v_payment_yn := 'Y';
        else
            v_payment_yn := 'N';
        end if;
        return v_payment_yn ;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_paymentbank_yn;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PAYMENT_PAYTHOD;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_payment_paythod (p_code IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (200);
BEGIN
   SELECT NAME
     INTO l_rtn_value
     FROM tco_commcode
    WHERE del_if = 0 AND parent_code = 'PMT' AND code = p_code;

   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PAYMENT_PAYTHOD2;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_payment_paythod2 (p_code IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (200);
BEGIN
   SELECT NAME
     INTO l_rtn_value
     FROM comm.tco_commcode
    WHERE del_if = 0 AND parent_code = 'PMT' and code in('AO00','AO30') AND code = p_code ;

   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PAYMENT_PAYTHOD3;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_payment_paythod3 (p_code IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (200);
BEGIN 
    SELECT NAME  INTO l_rtn_value FROM  COMM.TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='PTYPE' and code in('PTYPE-01','PTYPE-02') and code=p_code;
   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PAYMENT_PAYTHOD4;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_payment_paythod4 (p_code in VARCHAR2)
   return VARCHAR2
is
   l_rtn_value   VARCHAR2 (200);
begin 
    --select name  into l_rtn_value from  comm.tco_commcode where del_if=0 and parent_code='PTYPE' and code=p_code;
    if p_code= 'PTYPE-01' then
    
     return 'TM';
    elsif  p_code= 'PTYPE-02' then
       return 'CK';
    else
       return 'TM/CK';
    end if;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PAYMENT_PAYTHOD5;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_payment_paythod5 (p_code IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (200);
BEGIN
  SELECT  NAME into l_rtn_value FROM  COMM.TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='GTD' and CODE=p_code;

   RETURN l_rtn_value;
END sf_get_payment_paythod5;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PAYMENT_PAYTHOD_FULL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_payment_paythod_full (p_code IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (200);
BEGIN 
    SELECT NAME  INTO l_rtn_value FROM  TCO_COMMCODE WHERE DEL_IF=0 AND PARENT_CODE='PTYPE' and code=p_code;
   RETURN l_rtn_value;
END sf_get_payment_paythod_full;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PL_PLCENTER_ABCENTER;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_pl_plcenter_abcenter (p_plcenter_pk IN VARCHAR2)
   RETURN VARCHAR2
IS
/**=================================================================================
=================================================================================*/
   l_rtn_value   VARCHAR2 (1000) := NULL;

BEGIN
   l_rtn_value :='';
    SELECT a.PL_NM||' '||c.PLC_NM  into l_rtn_value
      FROM TAC_ABPL a, tac_abplcenter b,TAC_ABCENTER c
     WHERE a.PK     = b.tac_abpl_pk
       and b.TAC_ABCENTER_pk    = c.pk 
       AND a.DEL_IF = 0
       AND b.DEL_IF = 0
       AND c.DEL_IF = 0
       and b.pk = p_plcenter_pk;      
   RETURN  l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END sf_get_pl_plcenter_abcenter;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PRICE_BIMC00060;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_price_bimc00060 (
   p_tco_item_pk    NUMBER,
   p_warehouse_pk   NUMBER,
   p_stock_date     VARCHAR2
)
   RETURN NUMBER
IS
   l_unit_price      NUMBER;
   l_parent_wh_pk    NUMBER;
   l_alter_qty       NUMBER;
   l_alter_item_pk   NUMBER;
/******************************************************************************
******************************************************************************/
BEGIN
   BEGIN
      SELECT w.parent_pk
        INTO l_parent_wh_pk
        FROM tlg_in_warehouse w
       WHERE w.del_if = 0 AND w.pk = p_warehouse_pk;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         l_parent_wh_pk := p_warehouse_pk;
   END;

   /* tim gia o kho cha */
   SELECT MAX (b.unit_price)
     INTO l_unit_price
     FROM tlg_sa_stock_closing_m a, tlg_sa_stock_closing_d b
    WHERE a.del_if = 0
      AND a.tlg_in_warehouse_pk = l_parent_wh_pk
      AND a.stock_date =
             (SELECT MAX (c.stock_date)
                FROM tlg_sa_stock_closing_m c, tlg_sa_stock_closing_d d
               WHERE c.del_if = 0
                 AND c.tlg_in_warehouse_pk = l_parent_wh_pk
                 AND c.stock_date <= p_stock_date
                 AND d.del_if = 0
                 AND d.tlg_it_item_pk = p_tco_item_pk
                 AND c.pk = d.tlg_sa_stock_closing_m_pk)
      AND b.del_if = 0
      AND b.tlg_it_item_pk = p_tco_item_pk
      AND a.pk = b.tlg_sa_stock_closing_m_pk;

   IF l_unit_price IS NULL OR l_unit_price = 0
   THEN
      /*neu cha khong co gia thi tim  gia cua item tuong ung cua item do trong kho cha */
      BEGIN
         SELECT al.tco_item_pk, al.alter_qty
           INTO l_alter_item_pk, l_alter_qty
           FROM tpr_alter_item al
          WHERE al.del_if = 0 AND al.alter_item_pk = p_tco_item_pk;

         SELECT MAX (b.unit_price) / l_alter_qty
           INTO l_unit_price
           FROM tlg_sa_stock_closing_m a, tlg_sa_stock_closing_d b
          WHERE a.del_if = 0
            AND b.del_if = 0
            AND b.tlg_it_item_pk = l_alter_item_pk
            AND a.pk = b.tlg_sa_stock_closing_m_pk
            AND a.tlg_in_warehouse_pk = l_parent_wh_pk
            AND a.stock_date =
                   (SELECT MAX (c.stock_date)
                      FROM tlg_sa_stock_closing_m c, tlg_sa_stock_closing_d d
                     WHERE c.del_if = 0
                       AND c.tlg_in_warehouse_pk = l_parent_wh_pk
                       AND c.stock_date <= p_stock_date
                       AND d.del_if = 0
                       AND d.tlg_it_item_pk = l_alter_item_pk
                       AND c.pk = d.tlg_sa_stock_closing_m_pk);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_unit_price := 0;
      END;
   END IF;

   RETURN l_unit_price;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_PRIORITY;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_priority (p_chr varchar2)
   return number
is
begin
   if (p_chr = '(')
   then
      return -1;
   elsif (p_chr = ')')
   then
      return 0;
   elsif (p_chr in ('+', '-'))
   then
      return 1;
   elsif (p_chr in ('*', '/'))
   then
      return 2;
   end if;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_RANKTYPE_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_ranktype_name (p_ranktype in varchar2)
    RETURN  varchar
  IS
    l_rtn_value varchar2(200);
BEGIN
    select decode (p_ranktype,10,
               'HANDICAP DIVISION', 20,
               'CALLAWAY DIVISION', 30,
               'BEST GROSS', 40,
               'NEAREST PIN', 50,
               'LONGEST DRIVE',140,'SYSTEM 36','') into l_rtn_value
  from dual;
RETURN    l_rtn_value ;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_RATE2;

CREATE OR REPLACE FUNCTION HPDQ.Sf_Get_Rate2
(
    v_ymd                IN      VARCHAR2,      -- yyyymm
    v_currency          IN      VARCHAR2      -- currency
)

  RETURN  NUMBER

  IS
/*=================================================================================
    Ham nay sai nha , phai lay theo cty, sua tam thoi cho chay thoi 
=================================================================================*/
l_lRate                NUMBER;                  -- H/@2


BEGIN

SELECT Max(TTS_RATE)
  INTO l_lRate
  FROM ACNT.TAC_BFEXRATES
 WHERE STD_YMD = v_ymd --SUBSTR(STD_YMD,1,6) = SUBSTR(v_ymd,1,6)
   AND CCY = v_currency
   AND DEL_IF = 0;

RETURN    l_lRate;

EXCEPTION
   WHEN OTHERS THEN
        RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_RATE_PLANS_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_RATE_PLANS_name(
  p_THT_RATE_PLANS_pk  varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_customer_name varchar2(500);
begin
  SELECT a.RATE_CODE || ' - ' || a.RATE_NAME
    INTO l_customer_name
    FROM THT_RATE_PLANS a
   WHERE a.DEL_IF = 0 AND a.pk = p_THT_RATE_PLANS_pk
ORDER BY a.RATE_CODE                                          ;
 RETURN l_customer_name;
end sf_get_RATE_PLANS_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_REC_NO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_rec_no
 RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;

/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from thr_rec_request
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;


   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and UPPER(id)='REC' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            
            if l_type ='SYSDATE' then
                l_temp:=to_char(sysdate,l_characters);
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV
      l_temp:=0;
   else
        select max(substr(APP_NO,-l_len)) into l_emp_id_max from thr_rec_request
        where del_if=0 ;
        l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_rec_no;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_REQUEST_TASK_PLAN;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_request_task_plan (
   p_room           IN VARCHAR2,
   p_dt_task_plan   IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (300);
BEGIN
   SELECT TASK_DESC
     INTO l_rtn_value
     FROM tht_taskplan
    WHERE del_if = 0 AND ROOM_NO = p_room AND TASK_DATE >= p_dt_task_plan;
   RETURN l_rtn_value;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_REVIEWER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_reviewer_name (p_thr_eva_reviewer_pk varchar)
   return varchar2
is
   tmpvar        number;
/******************************************************************************
   NAME:       sf_get_reviewer_name
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/7/2009          1. Created this function.
******************************************************************************/
   l_rtn_value   varchar2 (200);
begin
   select b.emp_id || '-' || full_name
     into l_rtn_value
     from thr_eva_reviewer a, thr_employee b
    where a.thr_employee_pk = b.pk and a.pk = p_thr_eva_reviewer_pk;

   return l_rtn_value;
end sf_get_reviewer_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROLENAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_rolename (p_tco_bsrole_pk number)
   return varchar2
is
/******************************************************************************
   NAME:       sf_get_rolename
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/7/2005   Nguyen Van Thai       1. Created this function.

******************************************************************************/
   l_role_nm   varchar2 (200);
begin
   select role_nm
     into l_role_nm
     from tco_bsrole
    where pk = p_tco_bsrole_pk;

   return l_role_nm;
exception
   when others
   then
      return '';
end sf_get_rolename;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROOMS_FREE;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_ROOMS_FREE(
 p_room_type IN VARCHAR
)
 RETURN  NUMBER
IS
    l_number number;
BEGIN
    select   count(a.room_type) into l_number 
    from     tht_room a
    where    a.del_if = 0
    and      a.room_status = 'RSTA-AVA'
    and      a.room_type = p_room_type;
    
    return l_number;
EXCEPTION
WHEN  OTHERS  THEN
  RETURN 'SF_GET_ROWS error:- ' || RTRIM(SUBSTR(SQLERRM,10,90)) || '[' || TO_CHAR(SQLCODE) || ']';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROOM_AVG_RATE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_room_avg_rate(p_tht_room_allocate_pk varchar, p_date varchar) 
RETURN NUMBER IS

/******************************************************************************
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2010   Nguyen Van Thai       1. Created this function.

******************************************************************************/
l_rtn_value number;
BEGIN

   select nvl (avg (in_room_amt), 0)
  into l_rtn_value
  from tht_nightaudit
 where del_if = 0 and tht_room_allocate_pk = p_tht_room_allocate_pk
       and audit_date <=p_date;
               
   return l_rtn_value;
END sf_get_room_avg_rate;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROOM_CHARGE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_room_charge(p_tht_room_allocate_pk varchar, p_date varchar) 
RETURN NUMBER IS

/******************************************************************************
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2010   Nguyen Van Thai       1. Created this function.

******************************************************************************/
l_rtn_value number;
BEGIN

   select nvl (sum (end_bal), 0)
  into l_rtn_value
  from tht_nightaudit
 where del_if = 0 and tht_room_allocate_pk = p_tht_room_allocate_pk
       and (tht_room_allocate_pk, audit_date) in
              (  select tht_room_allocate_pk, max (audit_date)
                   from tht_nightaudit
                  where del_if = 0 and audit_date <= p_date and tht_room_allocate_pk = p_tht_room_allocate_pk
               group by tht_room_allocate_pk);
               
   return l_rtn_value;
END sf_get_room_charge;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROOM_STATUS2;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_room_status2 (p_tht_room_pk varchar, p_date varchar)
   return varchar2
is
   /******************************************************************************
       REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        23/sep/2010   Nguyen Van Thai       1. Created this function.

      NOTES:

   ******************************************************************************/
   l_cnt           number;
   l_rtn_value     varchar2 (100);
   l_room_status   varchar2 (10);
begin
   select count (*)
     into l_cnt
     from tht_room_status
    where tht_room_pk = p_tht_room_pk and del_if = 0 and p_date between out_of_order_fr and out_of_order_to;

   select room_status
     into l_room_status
     from tht_room
    where pk = p_tht_room_pk;

   if (l_cnt > 0 and l_room_status = 'OOO')
   then
      return 'OOO';                                                                                  --out of order
   end if;

   select count (*)
     into l_cnt
     from tht_room_allocate
    where     tht_room_pk = p_tht_room_pk
          and del_if = 0
          and p_date between checkin_date and to_char (to_date (departure_date, 'yyyymmdd') - 1, 'yyyymmdd')
          and checkout_date is null;

   if l_cnt > 0
   then
      return 'OCC';                                                                                       --inhouse
   end if;


   select count (*)
     into l_cnt
     from tht_booking a, tht_bookingd b
    where     b.tht_room_pk = p_tht_room_pk
          and a.del_if = 0
          and b.del_if = 0
          and a.pk = b.tht_booking_pk
          and a.guarantee_type is not null
          and a.status = '10'
          and p_date between from_date and to_char (to_date (date_to, 'yyyymmdd') - 1, 'yyyymmdd')
          and not exists
                 (select tht_bookingd_pk
                    from tht_room_allocate
                   where del_if = 0 and tht_bookingd_pk = b.pk);

   if l_cnt > 0
   then
      return 'GU';                                                                                     --guaranteed
   end if;

   select count (*)
     into l_cnt
     from tht_booking a, tht_bookingd b
    where     b.tht_room_pk = p_tht_room_pk
          and a.del_if = 0
          and b.del_if = 0
          and a.pk = b.tht_booking_pk
          and a.guarantee_type is not null
          and a.status = '20'
          and (a.release_date > to_char (sysdate, 'yyyymmdd') or a.release_date is null)
          and p_date between from_date and to_char (to_date (date_to, 'yyyymmdd') - 1, 'yyyymmdd')
          and not exists
                 (select tht_bookingd_pk
                    from tht_room_allocate
                   where del_if = 0 and tht_bookingd_pk = b.pk);

   if l_cnt > 0
   then
      return 'GU';                                                                                     --guaranteed
   end if;


   select count (*)
     into l_cnt
     from tht_booking a, tht_bookingd b
    where     b.tht_room_pk = p_tht_room_pk
          and a.del_if = 0
          and b.del_if = 0
          and a.pk = b.tht_booking_pk
          and a.status = '10'
          and p_date between from_date and to_char (to_date (date_to, 'yyyymmdd') - 1, 'yyyymmdd')
          and not exists
                 (select tht_bookingd_pk
                    from tht_room_allocate
                   where del_if = 0 and tht_bookingd_pk = b.pk);

   if l_cnt > 0
   then
      return 'RE';                                                                                       --reserved
   end if;

   select count (*)
     into l_cnt
     from tht_booking a, tht_bookingd b
    where     b.tht_room_pk = p_tht_room_pk
          and a.del_if = 0
          and b.del_if = 0
          and a.pk = b.tht_booking_pk
          and a.status = '20'
          and (a.release_date > to_char (sysdate, 'yyyymmdd') or a.release_date is null)
          and p_date between from_date and to_char (to_date (date_to, 'yyyymmdd') - 1, 'yyyymmdd')
          and not exists
                 (select tht_bookingd_pk
                    from tht_room_allocate
                   where del_if = 0 and tht_bookingd_pk = b.pk);

   if l_cnt > 0
   then
      return 'RE';                                                                                       --reserved
   end if;

   return '';                                                                                          --available;
end sf_get_room_status2;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROOM_STATUS_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_room_status_name(
  p_code_room_sataus varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_code_room_sataus varchar2(50);
begin
   select name
  into l_code_room_sataus
  from comm.tco_commcode
 where del_if = 0 and parent_code = 'RSTA' and code = p_code_room_sataus;

 return l_code_room_sataus;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROOM_TOTAL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_room_total(
  p_room_type varchar2
) 
return 
                 number 
is
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
l_num_room_total number;
begin
    select count (c.room_type) room_type
        into l_num_room_total
      from tht_room_allocate b, tht_room c
     where     b.del_if = 0
           and c.del_if = 0
           and b.tht_room_pk = c.pk
           and c.room_type = p_room_type;

               return l_num_room_total;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROOM_TYPE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_room_type(
  p_code_room_type varchar2
) 
return 
                 varchar2 
is
/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.
******************************************************************************/
l_code_room_type varchar2(50);
begin
/* Formatted on 2010/10/28 11:52 (Formatter Plus v4.8.8) */
SELECT NAME
  INTO l_code_room_type
  FROM tco_commcode
 WHERE del_if = 0
   AND parent_code = 'RTYPE'
   AND code =p_code_room_type;
 return l_code_room_type;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ROUNDORD;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_ROUNDORD
(    v_ORD        IN    NUMBER )

  RETURN  NUMBER IS l_NUMBER    NUMBER(10);

  w_num             NUMBER(10) := 0;
BEGIN
    w_num := v_ORD / 10;
    w_num := Round(w_num,1);
    l_NUMBER := w_num * 10;
    return    l_NUMBER;

--------------
  EXCEPTION
--------------
   WHEN  NO_DATA_FOUND      THEN
        return '';
   WHEN OTHERS  THEN
        return '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_SELL_EX_RATE_ACC;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_sell_ex_rate_acc (p_date varchar, p_tco_company_pk varchar, p_ccy varchar)
   return number
is
   /******************************************************************************
         REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        7/9/2010   Nguyen Van Thai       1. Created this function.

      NOTES:

   ******************************************************************************/
   l_rtn_value   number;
begin
   select max(a.ttb_rate)
     into l_rtn_value
     from acnt.tac_abexrates a
    where     a.del_if = 0
          and a.tco_company_pk = p_tco_company_pk
          and a.std_ymd = p_date
          and ccy = upper (p_ccy);

   return l_rtn_value;
exception
   when others
   then
      return -1;
end sf_get_sell_ex_rate_acc;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_SELL_EX_RATE_DATE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_sell_ex_rate_date (p_date varchar, p_tco_company_pk varchar, p_ccy varchar)
   return number
is
   /******************************************************************************
         REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        7/9/2010   Nguyen Van Thai       1. Created this function.

      NOTES:

   ******************************************************************************/
   l_rtn_value   number;
begin
   select a.internal_sell_rate
     into l_rtn_value
     from tac_abexrates a
    where     a.del_if = 0
          and a.tco_company_pk = p_tco_company_pk
          and a.std_ymd = p_date
          and ccy = upper (p_ccy);

   return l_rtn_value;
exception
   when others
   then
      return -1;
end sf_get_sell_ex_rate_date;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_SLIP_NO;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_slip_no (
   p_table_name   VARCHAR,
   p_slip_date    VARCHAR,
   p_paralist     VARCHAR
)
   RETURN VARCHAR
IS
/******************************************************************************
 ---
******************************************************************************/
   l_cnt                 NUMBER;
   l_idx                 NUMBER;
   l_idx_start           NUMBER;
   l_tco_buspartner_pk   NUMBER;
   l_tpr_line_pk         NUMBER;
   l_tac_abpl_pk         NUMBER;
   l_tin_warehouse_pk    NUMBER;
   l_yy                  VARCHAR2 (2);
   l_mm                  VARCHAR2 (2);
   l_dd                  VARCHAR2 (2);
   l_slip_no             VARCHAR2 (20);
   l_prefix              VARCHAR2 (10);
BEGIN
   SELECT SUBSTR (p_slip_date, 3, 2), SUBSTR (p_slip_date, 5, 2),
          SUBSTR (p_slip_date, 7, 2)
     INTO l_yy, l_mm,
          l_dd
     FROM DUAL;

   SELECT INSTR (p_paralist, '|', 1) + 1
     INTO l_idx_start
     FROM DUAL;

   SELECT INSTR (p_paralist, '|', 2)
     INTO l_idx
     FROM DUAL;

   IF l_idx = 0
   THEN
      l_tco_buspartner_pk := -1;
   ELSE
      SELECT SUBSTR (p_paralist, l_idx_start, l_idx - 1)
        INTO l_tco_buspartner_pk
        FROM DUAL;
   END IF;

   SELECT INSTR (p_paralist, '|', 2) + 1
     INTO l_idx_start
     FROM DUAL;

   SELECT INSTR (p_paralist, '|', 3)
     INTO l_idx
     FROM DUAL;

   IF l_idx = 0
   THEN
      l_tpr_line_pk := -1;
   ELSE
      SELECT SUBSTR (p_paralist, l_idx_start, l_idx - 1)
        INTO l_tpr_line_pk
        FROM DUAL;
   END IF;

   SELECT INSTR (p_paralist, '|', 3) + 1
     INTO l_idx_start
     FROM DUAL;

   SELECT INSTR (p_paralist, '|', 4)
     INTO l_idx
     FROM DUAL;

   IF l_idx = 0
   THEN
      l_tac_abpl_pk := -1;
   ELSE
      SELECT SUBSTR (p_paralist, l_idx_start, l_idx - 1)
        INTO l_tac_abpl_pk
        FROM DUAL;
   END IF;

   IF l_idx = 0
   THEN
      l_tin_warehouse_pk := -1;
   ELSE
      SELECT SUBSTR (p_paralist, l_idx)
        INTO l_tin_warehouse_pk
        FROM DUAL;
   END IF;

   SELECT MAX (prefix)
     INTO l_prefix
     FROM tco_slipnoconf
    WHERE UPPER (table_name) = UPPER (p_table_name) AND del_if = 0;

   IF l_prefix IS NULL
   THEN
      l_prefix := '';
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 'slip error';
END sf_get_slip_no;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_SLIP_NO_1;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_slip_no_1 (
   p_table_name   varchar,
   p_slip_date    varchar,
   p_paralist     varchar
)
   return varchar
is
/******************************************************************************
 ---
******************************************************************************/
   l_cnt                 number;
   l_idx                 number;
   l_idx_start           number;
   l_tco_buspartner_pk   number;
   l_tpr_line_pk         number;
   l_tac_abpl_pk         number;
   l_tin_warehouse_pk    number;
   l_yy                  varchar2 (2);
   l_mm                  varchar2 (2);
   l_dd                  varchar2 (2);
   l_slip_no             varchar2 (20);
   l_prefix              varchar2 (10);
begin
   select substr (p_slip_date, 3, 2), substr (p_slip_date, 5, 2),
          substr (p_slip_date, 7, 2)
     into l_yy, l_mm,
          l_dd
     from dual;

   select instr (p_paralist, '|', 1) + 1
     into l_idx_start
     from dual;

   select instr (p_paralist, '|', 2)
     into l_idx
     from dual;

   if l_idx = 0
   then
      l_tco_buspartner_pk := -1;
   else
      select substr (p_paralist, l_idx_start, l_idx - 1)
        into l_tco_buspartner_pk
        from dual;
   end if;

   select instr (p_paralist, '|', 2) + 1
     into l_idx_start
     from dual;

   select instr (p_paralist, '|', 3)
     into l_idx
     from dual;

   if l_idx = 0
   then
      l_tpr_line_pk := -1;
   else
      select substr (p_paralist, l_idx_start, l_idx - 1)
        into l_tpr_line_pk
        from dual;
   end if;

   select instr (p_paralist, '|', 3) + 1
     into l_idx_start
     from dual;

   select instr (p_paralist, '|', 4)
     into l_idx
     from dual;

   if l_idx = 0
   then
      l_tac_abpl_pk := -1;
   else
      select substr (p_paralist, l_idx_start, l_idx - 1)
        into l_tac_abpl_pk
        from dual;
   end if;

   if l_idx = 0
   then
      l_tin_warehouse_pk := -1;
   else
      select substr (p_paralist, l_idx)
        into l_tin_warehouse_pk
        from dual;
   end if;

   select max (prefix)
     into l_prefix
     from tco_slipnoconf
    where upper (table_name) = upper (p_table_name) and del_if = 0;

   if l_prefix is null
   then
      l_prefix := '';
   end if;

   ---------------------------generate sale order number--------------------------------------------------------------
   if upper (p_table_name) = 'TSA_SALEORDER'
   then
      select max (substr (slip_no, -2)) + 1
        into l_cnt
        from sale.tsa_saleorder
       where substr (order_dt, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate sale order number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_STOCKLOTADJUST'
   then
      select max (substr (adjust_no, -2)) + 1
        into l_cnt
        from inv.tin_stocklotadjust
       where substr (adjust_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate take out request number--------------------------------------------------------------
   if upper (p_table_name) = 'TSA_SOTAKEOUTREQ'
   then
      select max (req_no)
        into l_slip_no
        from sale.tsa_sotakeoutreq
       where substr (takeout_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate sale order take out number--------------------------------------------------------------
   if upper (p_table_name) = 'TSA_SOTAKEOUT'
   then
      select max (slip_no)
        into l_slip_no
        from sale.tsa_sotakeout
       where substr (takeout_dt, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate material request number--------------------------------------------------------------
   if upper (p_table_name) = 'TPR_POREQ'
   then
      select max (mr_no)
        into l_slip_no
        from prod.tpr_poreq
       where substr (doc_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate purchasing order number--------------------------------------------------------------
   if upper (p_table_name) = 'TPR_PURORD'
   then
      select max (po_no)
        into l_slip_no
        from prod.tpr_purord
       where substr (po_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate IQC request number--------------------------------------------------------------
   if upper (p_table_name) = 'TPR_REQIQC'
   then
      select max (req_no)
        into l_slip_no
        from prod.tpr_reqiqc
       where substr (req_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate IQC request number--------------------------------------------------------------
   if upper (p_table_name) = 'TPR_REQOQC'
   then
      select max (req_no)
        into l_slip_no
        from prod.tpr_reqoqc
       where substr (req_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate product result number--------------------------------------------------------------
   if upper (p_table_name) = 'TPR_PRODRESULT'
   then
      select max (slip_no)
        into l_slip_no
        from prod.tpr_prodresult
       where substr (prod_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate stock reserve number--------------------------------------------------------------
   if upper (p_table_name) = 'TPR_STOCKRESERVE'
   then
      select max (substr (slip_no, -3)) + 1
        into l_cnt
        from prod.tpr_stockreserve
       where substr (reserve_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '000'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate material take in request number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_MATTAKEIN'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_mattakein
       where substr (doc_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -3)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '000'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate product take in number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_PRODTAKEIN'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_prodtakein
       where substr (takein_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate stock adjust number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_STOCKADJUST'
   then
      select max (adjust_no)
        into l_slip_no
        from inv.tin_stockadjust
       where substr (adjust_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate stock move out number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_STOCKMOVEOUT'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_stockmoveout
       where substr (out_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate stock move in number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_STOCKMOVEIN'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_stockmovein
       where substr (in_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate stock in out number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_IOSTOCKOTHER'
   then
      select max (substr (slip_no, -3)) + 1
        into l_cnt
        from inv.tin_iostockother
       where substr (other_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '000'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate line material request number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_LINEMATREQ'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_linematreq
       where substr (req_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate line material return number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_LINEMATRETURN'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_linematreturn
       where substr (return_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate line material take out number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_LINEMATTAKEOUT'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_linemattakeout
       where substr (doc_date, 0, 6) = substr (p_slip_date, 0, 6)
             and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -4)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '0000'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate material return  number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_MATRETURN'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_matreturn
       where substr (return_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return l_slip_no;
   end if;

   ---------------------------generate vendor return  number--------------------------------------------------------------
   if upper (p_table_name) = 'TIN_VENRETURN'
   then
      select max (slip_no)
        into l_slip_no
        from inv.tin_vendor_mat_return
       where substr (voucher_date, 0, 6) = substr (p_slip_date, 0, 6)
         and del_if = 0;

      if l_slip_no is not null
      then
         select to_number (substr (l_slip_no, -2)) + 1
           into l_cnt
           from dual;
      else
         l_cnt := 1;
      end if;

      select l_prefix || l_yy || l_mm || trim (to_char (l_cnt, '00'))
        into l_slip_no
        from dual;

      return 'VRTN'+l_slip_no;
   end if;
exception
   when others
   then
      return 'slip error';
end sf_get_slip_no_1;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_SPECGRP_SUBCODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_specgrp_subcode (p_specgrp_pk VARCHAR)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (50);
/******************************************************************************
   NAME:       sf_get_specgrp_subcode
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/9/2008   Huu Phuc       1. Created this function.

******************************************************************************/
BEGIN
   SELECT specgrp_nm
     INTO l_rtn_value
     FROM tlg_it_specgrp
    WHERE del_if = 0 AND pk = p_specgrp_pk;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END sf_get_specgrp_subcode;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_SPECIAL_SVC_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_special_svc_name (p_tht_bookingd_special_svc_pk VARCHAR)
   RETURN VARCHAR2
IS
   /******************************************************************************
      NAME:       sf_get_special_svc_name
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        8/23/2012   Nguyen Van Quyen       1. Created this function.

   ******************************************************************************/
   l_SERVICE_NAME   VARCHAR2 (500);
BEGIN
   IF p_tht_bookingd_special_svc_pk IS NULL
   THEN
      RETURN NULL;
   ELSE
      SELECT y.SERVICE_NAME
        INTO l_SERVICE_NAME
        FROM tht_bookingd_special_svc x, tht_special_service y
       WHERE x.del_if=0 and y.del_if=0 and x.tht_special_service_pk = y.pk AND x.pk = p_tht_bookingd_special_svc_pk;
   END IF;

   RETURN l_SERVICE_NAME;
END sf_get_special_svc_name;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_SPECIAL_SVC_QTY;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_special_svc_qty (p_tht_bookingd_special_svc_pk VARCHAR)
   RETURN VARCHAR2
IS
   /******************************************************************************
      NAME:       sf_get_special_svc_name
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        8/23/2012   Nguyen Van Quyen       1. Created this function.

   ******************************************************************************/
   l_qty   VARCHAR2 (500);
BEGIN
   IF p_tht_bookingd_special_svc_pk IS NULL
   THEN
      RETURN NULL;
   ELSE
      SELECT x.quantity
        INTO l_qty
        FROM tht_bookingd_special_svc x, tht_special_service y
       WHERE x.del_if=0 and y.del_if=0 and x.tht_special_service_pk = y.pk AND x.pk = p_tht_bookingd_special_svc_pk;
   END IF;

   RETURN l_qty;
END sf_get_special_svc_qty;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TAC_CRDA_AMT_AP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_tac_crda_amt_ap(
                 p_tac_crda_pk varchar2
) 
RETURN NUMBER 
IS

/******************************************************************************
   NAME:       sf_get_tac_crda_amt_ap
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/2/2009          1. Created this function.

   NOTES:

******************************************************************************/
    l_amt number;
            l_ap_tramt number;  
            l_imp_amt number ;  
            l_exc_amt number ;  
            l_impvat_amt    number ;
            l_clr_imptax_yn varchar2(1);
            l_clr_exctax_yn varchar2(1);
            l_clr_vattax_yn varchar2(1);
BEGIN
             l_amt := 0;
             select a.code into l_clr_imptax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK022' and a.def_yn = 'Y';

             select a.code into l_clr_exctax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK023' and a.def_yn = 'Y';

             select a.code into l_clr_vattax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK024' and a.def_yn = 'Y';
             
             BEGIN
                         select sum(d.ap_tramt) ap_tramt, 
                                         sum(decode(l_clr_imptax_yn, 'Y', d.imp_amt, 0)) imp_amt,
                                        sum(decode(l_clr_exctax_yn, 'Y', d.exc_amt, 0)) exc_amt,
                                        sum(decode(l_clr_vattax_yn, 'Y', d.impvat_amt, 0)) impvat_amt
                                        into l_ap_tramt, l_imp_amt, l_exc_amt, 
                                        l_impvat_amt                                        
                         from tac_crdad d                             
                         where d.del_if = 0 and d.tac_crda_pk = p_tac_crda_pk ;    
                         l_amt := nvl(l_ap_tramt, 0) + nvl(l_imp_amt, 0) + nvl(l_exc_amt, 0) + nvl(l_impvat_amt, 0) ;                     
                   EXCEPTION
                     WHEN NO_DATA_FOUND THEN
                         l_amt := 0;                          
             END;
             return l_amt ;             
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_tac_crda_amt_ap;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TAC_CRDA_FAMT_AP;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_tac_crda_famt_ap(
                 p_tac_crda_pk varchar2
) 
RETURN NUMBER 
IS

/******************************************************************************
   NAME:       sf_get_tac_crda_amt_ap
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/2/2009          1. Created this function.

   NOTES:

******************************************************************************/
    l_amt number;
            l_ap_trfamt number; 
            l_imp_famt number; 
            l_exc_famt number ; 
            l_impvat_famt number ; 
            l_clr_imptax_yn varchar2(1);
            l_clr_exctax_yn varchar2(1);
            l_clr_vattax_yn varchar2(1);
BEGIN
             l_amt := 0;
             select a.code into l_clr_imptax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK022' and a.def_yn = 'Y';

             select a.code into l_clr_exctax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK023' and a.def_yn = 'Y';

             select a.code into l_clr_vattax_yn
             from tac_commcode_detail a, tac_commcode_master b 
             where a.del_if = 0 and b.del_if = 0 and a.tac_commcode_master_pk = b.pk and b.id = 'EACBK024' and a.def_yn = 'Y';
             
             BEGIN
                         select sum(d.ap_trfamt) ap_trfamt, sum(decode(l_clr_imptax_yn, 'Y', d.imp_famt, 0)) imp_famt,
                                        sum(decode(l_clr_exctax_yn, 'Y', d.exc_famt, 0)) exc_famt, 
                                        sum(decode(l_clr_vattax_yn, 'Y', d.impvat_famt, 0)) impvat_famt
                                        into l_ap_trfamt, l_imp_famt, l_exc_famt, 
                                        l_impvat_famt                                        
                         from tac_crdad d                             
                         where d.del_if = 0 and d.tac_crda_pk = p_tac_crda_pk ;    
                         l_amt := nvl(l_ap_trfamt, 0) + nvl(l_imp_famt, 0) + nvl(l_exc_famt, 0) + nvl(l_impvat_famt, 0) ;                     
                   EXCEPTION
                     WHEN NO_DATA_FOUND THEN
                         l_amt := 0;                          
             END;
             return l_amt ;             
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_tac_crda_famt_ap;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TAX_BY_HSCODE;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_tax_by_hscode (
   p_tco_hscode_pk   IN   NUMBER,
   p_flag                 NUMBER                       -- 0 import rate, 1 vat
)
   RETURN VARCHAR2
IS
   l_rtn   VARCHAR2 (40);
BEGIN
   SELECT DECODE (p_flag, 0, max(v.hs_rate), 1, max(v.hs_vatrate))
     INTO l_rtn
     FROM comm.tco_hscoderate v
    WHERE del_if =0 and v.tco_hscode_pk = p_tco_hscode_pk 
     ;

   RETURN l_rtn;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TEST;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_test (
   p_org_pk        number

)
   return varchar2
is
    l_pk number;
   
    

begin
   select max(a.pk) into l_pk
      from tco_org a
     where a.del_if = 0 and nvl(a.p_pk,0)=0
     connect by prior  a.p_pk=a.pk
start with nvl(a.pk,0)=p_org_pk;
   
   return l_pk;
--============
exception
--============
   when others
   then
      raise_application_error(-20001,'Error:' ||SQLERRM);
      return null;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TOTAL_TIME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_total_time(p_start_time varchar, p_end_time varchar) return varchar2 is

/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/4/2010   Nguyen Van Thai       1. Created this function.

   NOTES:
   
******************************************************************************/
l_rtn_value varchar2(10);
l_hh number;
l_mi number;
begin
  
  if (p_start_time is not null and  p_end_time is not null) then
    select round (
          (to_date ('20101231 ' || p_end_time, 'yyyymmdd hh24:mi')
           - to_date ('20101231 ' || p_start_time, 'yyyymmdd hh24:mi'))
          * 24,
          2)
  into l_rtn_value
  from dual;
  else
     l_rtn_value:=null;
     return l_rtn_value;
  end if;
  
  l_hh := to_number(trunc(l_rtn_value));
  l_mi :=  round(to_number(mod(l_rtn_value,1))*60);
  
  if l_mi > 0 then
    l_rtn_value:= lpad(l_hh,2,'0')||':'||lpad(l_mi,2,'0');
  else
     if l_hh > 0 then 
            l_rtn_value:= lpad(l_hh,2,'0')||':00';
     else
            l_rtn_value:='';   
    end if;  
  end if;
  
  return l_rtn_value;
  
  exception
  when others then
  return '';
  
 
end sf_get_total_time;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TOTAL_TIME2;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_total_time2(p_time1 varchar, p_time2 varchar, p_time3 varchar) return varchar2 is

/******************************************************************************
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/4/2010   Nguyen Van Thai       1. Created this function.

   NOTES:
   
******************************************************************************/
l_rtn_value varchar2(10);
l_hh number:=0;
l_mi number:=0;
begin
  
  if p_time1 is not null then
        l_hh:=to_number(substr(p_time1,1,2));
        l_mi:=to_number(substr(p_time1,4,2));
  end if;
  
  if p_time2 is not null then
        l_hh:=l_hh+to_number(substr(p_time2,1,2));
        l_mi:=l_mi+to_number(substr(p_time2,4,2));
  end if;
  
  if p_time3 is not null then
        l_hh:=l_hh+to_number(substr(p_time3,1,2));
        l_mi:=l_mi+to_number(substr(p_time3,4,2));
  end if;
  
  if l_mi > 0 then
    l_rtn_value:= lpad(l_hh,2,'0')||':'||lpad(l_mi,2,'0');
  else
     if l_hh > 0 then 
            l_rtn_value:= lpad(l_hh,2,'0')||':00';
     else
            l_rtn_value:='';   
    end if;  
  end if;
  
  return l_rtn_value;
  
  exception
  when others then
  return '';
  
 
end sf_get_total_time2;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TOTAL_TRANS_BY_ACC;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_total_trans_by_acc (p_from_date            varchar,
                                                      p_to_date              varchar,
                                                      p_tac_abacctcode_pk    varchar,
                                                      p_drcr_type            varchar)
   return number
is
   l_rtn_value   number;
begin
   select sum (d.tr_bookamt)
     into l_rtn_value
     from tac_hgtrh h, tac_hgtrd d
    where     h.del_if = 0
          and d.del_if = 0
          and d.drcr_type = p_drcr_type
          and h.pk = d.tac_hgtrh_pk
          and d.tac_abacctcode_pk in (    select pk
                                            from tac_abacctcode
                                           where del_if = 0 and leaf_yn = 'Y'
                                      connect by pac_pk = prior pk
                                      start with pk = p_tac_abacctcode_pk)
          and h.tr_date between to_date (p_from_date, 'YYYYMMDD') and to_date (p_to_date, 'YYYYMMDD')
          and h.tr_status in (0, 2);

   return l_rtn_value;
end sf_get_total_trans_by_acc;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_TRAMT_COSTING;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_tramt_costing(p_tac_hgtrh_pk varchar2) 
RETURN NUMBER IS
    v_sum_trans_amt number ;
    
/******************************************************************************
   NAME:       sf_get_ar_costing
   PURPOSE:    Used for AR HISTORY 

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/8/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_ar_costing
      Sysdate:         1/8/2009
      Date and Time:   1/8/2009, 2:33:37 PM, and 1/8/2009 2:33:37 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   select sum(tr_amt)
   into v_sum_trans_amt
   from tac_hgtrd 
   where del_if = 0 
   and  tac_hgtrh_pk = p_tac_hgtrh_pk ;
   RETURN v_sum_trans_amt;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sf_get_tramt_costing;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_UPPER_DEPT;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_upper_dept (
   p_org_pk        number

)
   return varchar2
is
    l_org_id varchar(100);
    l_rtn_value   varchar(200);
    cursor c_upper_org is
    select org_id from
        (SELECT org_id,pk
        FROM tco_org
        WHERE del_if = 0
        CONNECT BY PRIOR p_pk= pk
        START WITH pk=p_org_pk)
    where pk<>p_org_pk;
    

begin
   open c_upper_org ;
   loop
        
        fetch c_upper_org into l_org_id;
        EXIT WHEN c_upper_org%NOTFOUND;
        l_rtn_value := l_rtn_value || l_org_id || '-';
    end loop    ;
   if c_upper_org%Rowcount=0 then
       l_rtn_value:='';
   end if;
   
   return l_rtn_value;
--============
exception
--============
   when others
   then
      raise_application_error(-20001,'Error:' ||SQLERRM);
      return null;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_UPPER_ORG;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_upper_org (
   p_org_pk        number

)
   return varchar2
is
    l_org_id varchar(100);
    l_rtn_value   varchar(200);
    cursor c_upper_org is
    select org_id from
        (SELECT org_id,pk
        FROM tco_org
        WHERE del_if = 0
        CONNECT BY PRIOR p_pk= pk
        START WITH pk=p_org_pk)
    where pk<>p_org_pk;
    

begin
   open c_upper_org ;
   loop
        
        fetch c_upper_org into l_org_id;
        EXIT WHEN c_upper_org%NOTFOUND;
        l_rtn_value := l_rtn_value || l_org_id || '-';
    end loop    ;
   if c_upper_org%Rowcount=0 then
       l_rtn_value:='';
   end if;
   
   return l_rtn_value;
--============
exception
--============
   when others
   then
      raise_application_error(-20001,'Error:' ||SQLERRM);
      return null;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_USERLOGIN_ID_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_userlogin_id_name (
   p_user_pk   VARCHAR2,
   p_flag      VARCHAR
)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (100);
BEGIN
   IF p_user_pk IS NULL
   THEN
      l_rtn_value := '';
   ELSE
      SELECT DECODE (p_flag, '0',t. emp_id, t.full_name)
        INTO l_rtn_value
        FROM hr.thr_employee t, comm.tco_bsuser u
       WHERE t.del_if = 0
         AND u.del_if = 0
         AND u.thr_abemp_pk = t.pk
         AND u.pk = p_user_pk;
   END IF;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20001, 'Error:' || SQLERRM);
      RETURN NULL;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_WAREHOUSE_ID;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_warehouse_id (
   p_tin_warehouse_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_wh_id   lin_warehouse.wh_id%TYPE   := '';
BEGIN
   SELECT a.wh_id
     INTO l_wh_id
     FROM lin_warehouse a
    WHERE a.pk = p_tin_warehouse_pk;

   RETURN l_wh_id;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END sf_get_warehouse_id;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA000250_21;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka000250_21 (
   p_tac_kafinanceform_pk   in varchar,
   p_column_type               varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        18-Aug-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (8000) := '';
   l_value       varchar2 (8000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select distinct a.*, b.operator_
            from tac_fsqd15 a, tac_kafinanceformd1 b
           where     b.del_if = 0
                 and a.ac_cd = b.ac_cd
                 and b.tac_abacctcode_pk is not null
                 and b.pk in
                        (    select pk
                               from tac_kafinanceformd1 a
                              where a.del_if = 0
                         start with     a.tac_kafinanceform_pk =
                                           p_tac_kafinanceform_pk
                                    and del_if = 0
                         connect by     prior tac_kafinanceform_sum_pk =
                                           tac_kafinanceform_pk
                                    and del_if = 0))
   loop
      if p_column_type = 'THIS'
      then
         begin
            select sum (m_ps)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'LAST'
      then
         begin
            select sum (m_ps1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'ACC'
      then
         begin
            select sum (m_acc)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'ACC1'
      then
         begin
            select sum (m_acc1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'BAL'
      then
         begin
            select sum (m_bal)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      elsif p_column_type = 'BAL1'
      then
         begin
            select sum (m_bal1)
              into l_value
              from tac_fsqd15
             where ac_cd = c1.ac_cd;
         exception
            when no_data_found
            then
               l_value := 0;
         end;
      end if;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00080_1;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00080_1 (p_kind              varchar2,
                                                p_status            varchar,
                                                p_tco_company_pk    varchar,
                                                p_date_fr           varchar,
                                                p_date_to           varchar,
                                                p_header            varchar)
   return number
is
   /******************************************************************************
      NAME:      sf_gfka00080_1
      PURPOSE:

      REVISIONS:
      Ver        Date          Author           Description
      ---------  ----------   ---------------  ------------------------------------
      1.0        27-May-2009   TTAL       1. Created this function.
   ******************************************************************************/
   l_len         number := 0;
   l_cnt         number := 0;
   l_formular    varchar (1000) := '';
   l_ac_cd       varchar (1000) := '';
   l_value       varchar (20) := '';
   l_buf         varchar (1) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   select nvl (b.total_bookamt, 0) * b.cf_operator total_bookamt
     into l_rtn_value
     from (select a.code,
                  a.prn_acnm,
                  a.prn_lacnm,
                  a.prn_kacnm,
                  a.prn_seq,
                  a.font_stype,
                  a.header,
                  a.prn_color,
                  a.form_type
             from tac_kafinanceform a
            where a.del_if = 0 and a.form_type = 24-- AND a.tco_company_pk = p_tco_company_pk
          ) a,
          (  select r.cf_code,
                    sum (r.tr_bookamt) total_bookamt,
                    max (cf_operator) cf_operator
               from tac_hgtrh h, tac_hgtrd_ref r
              where     h.del_if = 0
                    and r.del_if = 0
                    and h.pk = r.tac_hgtrh_pk
                    and r.drcr_type = 'D'
                    and decode (p_tco_company_pk, 0, 2, tco_company_pk) =
                           decode (p_tco_company_pk, 0, 2, p_tco_company_pk)
                    and to_char (h.tr_date, 'YYYYMMDD') between p_date_fr
                                                            and p_date_to
                    and h.tr_status in
                           (decode (p_status, 2, 2, p_status),
                            decode (p_status, 2, 0, p_status),
                            decode (p_status, 2, 4, p_status))
           group by cf_code) b,
          tac_kafinanceform c
    where     a.code = b.cf_code(+)
          and a.code is not null
          and a.header > '20'
          and c.form_type = p_kind
          and a.header = c.header
          and a.header = p_header;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00080_1;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_51;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_51 (
   p_tac_kafinanceform_pk   in varchar,
   p_date_type                 varchar,
   p_column_type               varchar,
   p_kind                      varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        28-Oct-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select a.*, b.operator_
            from tac_fsinter a, tac_kafinanceformd1 b
           where     b.del_if = 0
                 and a.ac_cd = b.ac_cd
                 and b.tac_kafinanceform_pk = p_tac_kafinanceform_pk)
   loop
      case
         when p_column_type = 'this'
         then
            begin
               select sum (nvl (this_month, 0))
                 into l_value
                 from tac_fsinter
                where ac_cd = c1.ac_cd;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00210_51;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_52;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_52 (
   p_tac_kafinanceform_pk   in varchar,
   p_date_type                 varchar,
   p_column_type               varchar,
   p_kind                      varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date                Author           Description
      ---------  ----------         ---------------  ------------------------------------
      1.0        09-Aug-2010    TTAL               1. Created this function.(VCSC)
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select a.*,
                 b.operator_,
                 b.ac_cd,
                 tac_kafinanceform_sum_pk
            from tac_kafinanceform a, tac_kafinanceformd1 b
           where     b.del_if = 0
                 and b.del_if = 0
                 and a.prn_seq = b.ac_cd
                 and a.pk = b.tac_kafinanceform_sum_pk
                 and b.tac_kafinanceform_pk = p_tac_kafinanceform_pk)
   loop
      case
         when p_column_type = 'this'
         then
            begin
               select max (nvl (m_ps, 0))
                 into l_value
                 from tac_kafinanceform
                where pk = c1.tac_kafinanceform_sum_pk and del_if = 0;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00210_52;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_53;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_53 (
   p_tac_kafinanceform_pk   in varchar,
   p_date_type                 varchar,
   p_column_type               varchar,
   p_kind                      varchar,
   p_balance                   varchar,
   p_month                     varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date                Author           Description
      ---------  ----------        ---------------  ------------------------------------
      1.0        10-Aug-2010   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (4000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select a.*, b.operator_
            from tac_ic_internal a, tac_kafinanceformd1 b
           where     b.del_if = 0
                 and a.ac_cd = b.ac_cd
                 and b.tac_kafinanceform_pk = p_tac_kafinanceform_pk)
   loop
      case
         when p_column_type = 'THIS'
         then
            case
               when    p_balance = 'L'
                    or p_balance = 'R'
                    or p_balance = 'B'
                    or p_balance = 'E'
                    or p_balance = 'O'
               then
                  begin
                       select decode (
                                 p_balance,
                                 'L', sum (nvl (dr_this_ps, 0)),
                                 'R', sum (nvl (cr_this_ps, 0)),
                                 'O', sum (nvl (dr_this_op, 0)),
                                 'E', decode (dc,
                                              1, sum (nvl (dr_this_bl, 0)),
                                              sum (nvl (cr_this_bl, 0))),
                                 decode (
                                    dc,
                                    1,   sum (nvl (dr_this_bl, 0))
                                       - sum (nvl (cr_this_op, 0)),
                                      sum (nvl (dr_this_bl, 0))
                                    - sum (nvl (cr_this_op, 0))))
                         into l_value
                         from tac_ic_internal
                        where     ac_cd = c1.ac_cd
                              and substr (std_ym, 5, 2) = p_month
                     group by dc;
                  exception
                     when no_data_found
                     then
                        l_value := 0;
                  end;
            end case;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00210_53;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_54;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_54 (
   p_tac_kafinanceform_pk   in varchar,
   p_date_type                 varchar,
   p_column_type               varchar,
   p_kind                      varchar,
   p_month                     varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date                Author           Description
      ---------  ----------         ---------------  ------------------------------------
      1.0        10-Aug-2010    TTAL               1. Created this function.(VCSC)
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select a.*,
                 b.operator_,
                 b.ac_cd,
                 tac_kafinanceform_sum_pk
            from tac_kafinanceform a, tac_kafinanceformd1 b
           where     b.del_if = 0
                 and b.del_if = 0
                 and a.prn_seq = b.ac_cd
                 and a.pk = b.tac_kafinanceform_sum_pk
                 and b.tac_kafinanceform_pk = p_tac_kafinanceform_pk)
   loop
      case
         when p_month = '01'
         then
            begin
               select max (nvl (num1, 0))
                 into l_value
                 from tac_kafinanceform
                where pk = c1.tac_kafinanceform_sum_pk and del_if = 0;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_month = '02'
         then
            begin
               select max (nvl (num2, 0))
                 into l_value
                 from tac_kafinanceform
                where pk = c1.tac_kafinanceform_sum_pk and del_if = 0;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_month = '03'
         then
            begin
               select max (nvl (num3, 0))
                 into l_value
                 from tac_kafinanceform
                where pk = c1.tac_kafinanceform_sum_pk and del_if = 0;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00210_54;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFOS00250_1;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfos00250_1 (
   p_tac_kafinanceform_pk   in varchar,
   p_column_type               varchar,
   p_kind                      varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        28-Oct-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select a.*, b.operator_
            from tac_tmptrialbal a, tac_kafinanceformd1 b
           where     b.del_if = 0
                 and a.ac_cd = b.ac_cd
                 and b.tac_abacctcode_pk is not null
                 and b.pk in
                        (    select pk
                               from tac_kafinanceformd1 a
                              where a.del_if = 0
                         start with     a.tac_kafinanceform_pk =
                                           p_tac_kafinanceform_pk
                                    and del_if = 0
                         connect by     prior tac_kafinanceform_sum_pk =
                                           tac_kafinanceform_pk
                                    and del_if = 0))
   loop
      case
         when p_column_type = 'Closing'
         then
            begin
               select decode (drcr_type, 1, nvl (dr_op, 0), nvl (cr_op, 0))
                 into l_value
                 from tac_tmptrialbal
                where ac_cd = c1.ac_cd;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'Openning'
         then
            begin
               select decode (drcr_type, 1, nvl (dr_bl, 0), nvl (cr_bl, 0))
                 into l_value
                 from tac_tmptrialbal
                where ac_cd = c1.ac_cd;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.operator_, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFOS_CUST_YN;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfos_cust_yn(
                 p_tac_abacctcoder_pk varchar
) 
RETURN 
                 VARCHAR2 
IS
        l_partner_id varchar2(200);
/******************************************************************************
   NAME:       sf_get_buspartner_nm
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/24/2009          1. Created this function.

   NOTES:

******************************************************************************/
BEGIN
             select nvl(cust_yn,'N') into  l_partner_id from tac_abacctcode where del_if = 0 and pk = p_tac_abacctcoder_pk ;
             return l_partner_id ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       return '';
END sf_gfos_cust_yn;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFPM_0001;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfpm_0001 (p_tr_code varchar)
   return varchar2
is
   l_rtn_value   varchar2 (500) := '';
begin
   select code_nm
     into l_rtn_value
     from thr_code_detail
    where del_if = 0 and use_yn = 'Y'
          and thr_code_master_pk in
                 (select pk
                    from thr_code_master
                   where del_if = 0 and id = 'HR0092')
          and code = p_tr_code;

 return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_MARKETSEGMENT_STATISTIC_REV;

CREATE OR REPLACE FUNCTION HPDQ.sf_marketsegment_statistic_rev (p_tht_room_allocate_pk    varchar,
                                                           p_from_date               varchar,
                                                           p_to_date                 varchar)
   return number
is
   /******************************************************************************
      NAME:       sf_marketsegment_statistic_rev
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        5/16/2012   Nguyen Van Thai       1. Created this function.


   ******************************************************************************/
   l_rtn_value   number;
begin
   select sum (amount)
     into l_rtn_value
     from (select round (a.in_room_amt) amount, round (a.daily_rate_usd, 2) amount_usd
             from tht_nightaudit a, tht_room_allocate b, tht_room c
            where     a.del_if = 0
                  and b.pk = p_tht_room_allocate_pk
                  and a.in_room_amt > 0
                  and a.tht_room_allocate_pk = b.pk
                  and b.pk = p_tht_room_allocate_pk
                  and b.tht_room_pk = c.pk
                  and a.audit_date between p_from_date and p_to_date
           union all
           select round (decode (x.ccy, 'USD', x.rate, 1) * x.total_amt) amount,
                  round (decode (x.ccy, 'USD', x.total_amt, x.total_amt / x.rate), 2) amount_usd
             from tcm_invoice x, tht_room_allocate b, tht_room c
            where     x.del_if = 0
                  and x.close_yn = 'Y'
                  and b.pk = p_tht_room_allocate_pk
                  and x.tht_room_allocate_pk = b.pk
                  and b.tht_room_pk = c.pk
                  and b.del_if = 0
                  and x.invoice_date between p_from_date and p_to_date
           union all
           select round (decode (a.ccy, 'USD', a.ex_rate, 1) * a.amount) amount,
                  round (decode (a.ccy, 'USD', a.amount, a.amount / a.ex_rate), 2) amount_usd
             from tht_phone_data a, tht_room_allocate b, tht_room c
            where     a.del_if = 0
                  and a.tht_room_allocate_pk = b.pk
                  and b.tht_room_pk = c.pk
                  and b.pk = p_tht_room_allocate_pk
                  and b.del_if = 0
                  and a.call_date between p_from_date and p_to_date
           union all
           select a.fee_amt amount, a.fee_amt_usd amount_usd
             from tht_other_fees a, tht_room_allocate b, tht_room c
            where     a.del_if = 0
                  and a.fee_amt > 0
                  and a.tht_room_allocate_pk = b.pk
                  and b.pk = p_tht_room_allocate_pk
                  and b.tht_room_pk = c.pk
                  and b.del_if = 0
                  and to_char (a.crt_dt, 'yyyymmdd') between p_from_date and p_to_date
           union all
           select round (y.adj_amt_vnd) amount, round (y.adj_amt_usd) amount_usd
             from tcm_invoice x, tht_invoice_adj y, tht_room_allocate b
            where     x.del_if = 0
                  and x.close_yn = 'Y'
                  and x.payed_yn = 'N'
                  and x.pk = y.tcm_invoice_pk
                  and y.del_if = 0
                  and b.pk = p_tht_room_allocate_pk
                  and x.tht_room_allocate_pk = b.pk
                  and b.del_if = 0
           union all
           select a.adj_amt_vnd amount, a.adj_amt_usd amount_usd
             from tht_roomfee_adjust a, tht_nightaudit b, tht_room c
            where     a.del_if = 0
                  and a.tht_nightaudit_pk = b.pk
                  and b.tht_room_allocate_pk = p_tht_room_allocate_pk
                  and b.tht_room_pk = c.pk
                  and b.del_if = 0
                  and a.adj_date between p_from_date and p_to_date
           union all
           select round (decode (a.ccy, 'USD', a.ex_rate, 1) * a.total_amt) amount,
                  round (decode (a.ccy, 'USD', 1, 1 / a.ex_rate) * a.total_amt, 2) amount_usd
             from tht_special_service_used a, tht_room_allocate b, tht_room c
            where     a.del_if = 0
                  and a.tht_room_allocate_pk = b.pk
                  and b.pk = p_tht_room_allocate_pk
                  and b.tht_room_pk = c.pk
                  and b.del_if = 0
                  and a.total_amt > 0
                  and a.trans_date between p_from_date and p_to_date);
                  return l_rtn_value;
end sf_marketsegment_statistic_rev;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_ROOM_LEDGER_OPEN;

CREATE OR REPLACE FUNCTION HPDQ.sf_room_ledger_open(p_date varchar)
 RETURN NUMBER IS

/******************************************************************************
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/16/2010   Nguyen Van Thai       1. Created this function.

******************************************************************************/
l_rtn_value number;
l_ex_rate number;
l_advance_amt number;

BEGIN

 select crm.sf_get_sell_ex_rate_date (p_date, 2, 'USD') into l_ex_rate from dual;

  select sum(total_amt * 1.155)
  into l_rtn_value
  from (select (  nvl ( (rate * total_day * l_ex_rate), 0)
                + nvl (fnb_amt, 0)
                + nvl (minibar_amt, 0)
                + nvl (laundry_amt, 0)
                + nvl (sport_amt, 0)
                + nvl (spa_amt, 0)
                + nvl (other_amt, 0))
                  total_amt
          from (select a.total_amt rate,                       
                      case
                          when to_date (p_date, 'yyyymmdd') - to_date (a.checkin_date, 'yyyymmdd') = 0 then 1
                          else to_date (p_date, 'yyyymmdd') - to_date (a.checkin_date, 'yyyymmdd')
                       end
                          total_day,
                       (select sum ( (total_amt - nvl (discount_amt, 0)))
                          from tcm_invoice x
                         where x.tht_room_allocate_pk = a.pk and x.del_if = 0 and x.loc = 'POINT-09'
                         and close_yn='Y' and payed_yn='N'
                         and x.invoice_date < p_date)
                          fnb_amt,
                       (select sum ( (total_amt - nvl (discount_amt, 0)))
                          from tcm_invoice x
                         where x.tht_room_allocate_pk = a.pk and x.del_if = 0 and x.loc = 'POINT-11'
                         and close_yn='Y' and payed_yn='N'
                         and x.invoice_date < p_date)
                          minibar_amt,
                       (select sum ( (total_amt - nvl (discount_amt, 0)))
                          from tcm_invoice x
                         where x.tht_room_allocate_pk = a.pk and x.del_if = 0 and x.loc = 'POINT-12'
                         and close_yn='Y' and payed_yn='N'
                         and x.invoice_date < p_date)
                          laundry_amt,
                       (select sum ( (total_amt - nvl (discount_amt, 0)) * rate)
                          from tcm_invoice x
                         where x.tht_room_allocate_pk = a.pk and x.del_if = 0 and x.loc = 'POINT-14'
                         and close_yn='Y' and payed_yn='N'
                         and x.invoice_date < p_date)
                          sport_amt,
                       (select sum ( (total_amt - nvl (discount_amt, 0)) * rate)
                          from tcm_invoice x
                         where x.tht_room_allocate_pk = a.pk and x.del_if = 0 and x.loc = 'POINT-17'
                         and close_yn='Y' and payed_yn='N'
                         and x.invoice_date < p_date)
                          spa_amt,
                       (select sum ( (total_amt - nvl (discount_amt, 0)) * rate)
                          from tcm_invoice x
                         where x.tht_room_allocate_pk = a.pk and x.del_if = 0 and x.loc = 'POINT-18'
                         and close_yn='Y' and payed_yn='N'
                         and x.invoice_date < p_date)
                          other_amt
                  from crm.tht_room_allocate a, crm.tht_room b
                 where a.tht_room_pk = b.pk and a.del_if = 0 and b.del_if = 0 
                 and ((a.checkout_date < to_char(to_date(p_date,'yyyymmdd')-1,'yyyymmdd')) 
                        or (checkin_date < p_date and checkout_date is null)
                     )
                  )
                );

   select sum(ADVANCE_AMT_VND) into l_advance_amt from THT_GUEST_ADVANCE WHERE DEL_if=0 and ADVANCE_DATE < p_date;

   return nvl(l_rtn_value,0)- nvl(l_advance_amt,0);
   
END sf_room_ledger_open;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_ROOM_OVERLAP;

CREATE OR REPLACE FUNCTION HPDQ.sf_room_overlap(p_fr_date varchar, p_to_date varchar, p_tht_bookingd_pk varchar)
 return NUMBER is

/******************************************************************************
   
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/7/2011   Nguyen Van Thai       1. Created this function.

******************************************************************************/
l_rtn_value number;
l_fr_date date;
l_to_date date;
l_days number;
l_cnt number;
l_tht_room_pk number;
l_ymd varchar2(8);
l_book_qty number;
l_occupied_qty number;
l_room_type varchar2(10);
begin
   select to_date(p_fr_date, 'yyyymmdd'),to_date(p_to_date, 'yyyymmdd') into l_fr_date,l_to_date from dual;
   select round(l_to_date - l_fr_date) into l_days from dual;
   
   select tht_room_pk, room_type into l_tht_room_pk, l_room_type from tht_bookingd where pk=p_tht_bookingd_pk;
      
   if  l_tht_room_pk is null then
        select sf_available_room_type(p_fr_date,p_to_date,l_room_type ) into l_rtn_value from dual;
        return l_rtn_value;
   else
    
   for l_cnt in 0..l_days-1
   loop
     select to_char(l_fr_date+l_cnt,'yyyymmdd') into l_ymd from dual;
     
   select  count (a.pk) into l_book_qty
    from tht_bookingd a,  tht_booking c
   where     a.del_if = 0
          and c.del_if = 0
          and a.tht_booking_pk = c.pk
          and c.status = '10'
          and not exists (select 1 from tht_room_allocate where del_if=0 and tht_bookingd_pk=a.pk)
         and l_ymd between c.from_date and nvl(to_char(to_date(c.date_to,'yyyymmdd')-1,'yyyymmdd'),c.from_date)
         and a.tht_room_pk=l_tht_room_pk;
    
    ----------------------------------------------------
    select count (*)
      into l_occupied_qty
      from tht_room_allocate
     where l_ymd between to_char (sysdate, 'yyyymmdd')
                           and to_char (to_date (departure_date, 'yyyymmdd') - 1, 'yyyymmdd')
       and checkout_date is null
       and del_if = 0
       and tht_room_pk=l_tht_room_pk;
    --------------------------------------------   
       
    if l_book_qty > 0 and l_occupied_qty >0 then
        l_rtn_value := 0;
        return l_rtn_value;
    else
        l_rtn_value := 1;     
    end if;
    
   end loop;
   
   end if;
   return l_rtn_value;
   
end sf_room_overlap;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_SEL_TCO_FUNCCHARGER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_sel_tco_funccharger_name (p_func_code varchar)
   return number
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/23/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value   varchar2 (20);
begin
   select nvl (b.full_name, a.user_id)
     into l_rtn_value
     from tco_funccharger a, hr.thr_employee b
    where a.thr_employee_pk = b.pk(+) and func_code = p_func_code and a.del_if = 0 and a.use_yn = 'Y';

   return l_rtn_value;
exception
   when others
   then
      raise;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_SEL_TCO_FUNCCHARGER_PK;

CREATE OR REPLACE FUNCTION HPDQ.sf_sel_tco_funccharger_pk (p_func_code varchar)
   return number
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/23/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value   varchar2 (20);
begin
   select nvl (thr_employee_pk, user_id)
     into l_rtn_value
     from tco_funccharger
    where func_code = p_func_code and del_if = 0 and use_yn = 'Y';

   return l_rtn_value;
exception
   when others
   then
      raise;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SPLIT;

CREATE OR REPLACE FUNCTION HPDQ.split (p_list    varchar2,
                                       p_del     varchar2 := ',')
   return split_tbl
   pipelined
is
   l_idx     pls_integer;
   l_list    varchar2 (32767) := p_list;

   l_value   varchar2 (32767) := '';
begin
   loop
      l_idx := instr (l_list, p_del);

      if l_idx > 0
      then
         pipe row (substr (l_list, 1, l_idx - 1));
         l_list := substr (l_list, l_idx + length (p_del));
      else
         pipe row (l_list);
         exit;
      end if;
   end loop;

   return;
end split;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SP_DROP_ALL_PUBLIC_OBJECT;

CREATE OR REPLACE FUNCTION HPDQ.sp_drop_all_public_object(p_user in varchar)
   return varchar2
is
   pragma autonomous_transaction;
   l_sql   varchar2(4000) := null;
   l_cnt   number := 0;
--------
begin
   --------
   for cur in (select object_name
                 from all_objects
                where owner = upper(p_user) and object_type in ('FUNCTION', 'PROCEDURE'))
   loop
      begin
         l_sql   := 'REVOKE EXECUTE ON ' || upper(p_user) || '.' || cur.object_name || ' FROM PUBLIC';

         execute immediate l_sql;
      exception
         when others
         then
            null;
      end;
   end loop;

   for cur in (select object_name
                 from all_objects
                where owner = upper(p_user) and object_type in ('TABLE', 'VIEW', 'SEQUENCE'))
   loop
      begin
         l_sql   := 'REVOKE SELECT  ' || p_user || '.' || cur.object_name || ' FROM PUBLIC';

         execute immediate l_sql;
      exception
         when others
         then
            null;
      end;
   end loop;

   return 'grant all object to public  is successful';
exception
   when others
   then
      return l_sql || sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SP_PUBLIC_ALL_OBJECT;

CREATE OR REPLACE FUNCTION HPDQ.sp_public_all_object (p_user in varchar)
   return varchar2
is
   pragma autonomous_transaction;
/******************************************************************************
   NAME:       f_sequence
   PURPOSE: reset sequence number to maximun pk of table 
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/09/2006   Nguyen Van Thai       1. Created this procedure. 
******************************************************************************/
   l_sql   varchar2 (4000) := null;
   l_cnt   number          := 0;
--------
begin
--------
   for cur in (select object_name
                 from all_objects
                where owner = upper (p_user) and object_type in ('FUNCTION', 'PROCEDURE' ))
   loop
      begin
         l_sql := 'GRANT EXECUTE ON ' || upper (p_user) || '.' || cur.object_name || ' TO PUBLIC'; 
         execute immediate l_sql;
      exception
         when others
         then
            null;
      end;
   end loop; 
   for cur in (select object_name
                 from all_objects
                where owner = upper (p_user) and object_type in ('TABLE','VIEW','SEQUENCE'))
   loop
      begin
         l_sql := 'grant select on ' || p_user || '.' || cur.object_name || ' to public'; 
         execute immediate l_sql;
      exception
         when others
         then
            null;
      end;
   end loop; 
 
   return 'grant all object to public  is successful';
exception
   when others
   then
      return l_sql || sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SP_SUM_FROM_POLISH;

CREATE OR REPLACE FUNCTION HPDQ.sp_sum_from_polish (v_formular varchar2)
   return varchar2
is
   v_tmp      varchar2 (2000);
   last_str   varchar2 (2000);
   v_one      varchar2 (1);
   v_next     varchar2 (1);

   v_num      number := 1;
   v_stack    varchar2 (2000) := '';
   v_vt       number;
   v_pt1      varchar2 (200);
   v_pt2      varchar2 (200);
   v_pt3      varchar2 (100);
begin
   v_tmp := v_formular || ';';

   while (v_num <= length (v_formular))
   loop
      select substr (v_tmp, 1, 1) into v_one from dual;

      select substr (v_tmp, 2, 1) into v_next from dual;

      if v_one in ('+', '-', '*', '/') and (v_next = ';')
      then
         select instr (v_stack, ';', -2) into v_vt from dual;

         select substr (v_stack, v_vt + 1, length (v_stack) - (v_vt + 1))
           into v_pt1
           from dual;

         select substr (v_stack, 1, v_vt) into v_stack from dual;

         select instr (v_stack, ';', -2) into v_vt from dual;

         select substr (v_stack, v_vt + 1, length (v_stack) - (v_vt + 1))
           into v_pt2
           from dual;

         select substr (v_stack, 1, v_vt) into v_stack from dual;

         if (v_one = '+')
         then
            select to_char (
                      nvl (to_number (v_pt2), 0) + nvl (to_number (v_pt1), 0))
              into v_pt3
              from dual;
         elsif (v_one = '-')
         then
            select to_char (
                      nvl (to_number (v_pt2), 0) - nvl (to_number (v_pt1), 0))
              into v_pt3
              from dual;
         elsif (v_one = '*')
         then
            select to_char (
                      nvl (to_number (v_pt2), 0) * nvl (to_number (v_pt1), 0))
              into v_pt3
              from dual;
         elsif (v_one = '/')
         then
            select to_char (
                      nvl (to_number (v_pt2), 0) / nvl (to_number (v_pt1), 0))
              into v_pt3
              from dual;
         end if;

         v_stack := v_stack || v_pt3;
      else
         v_stack := v_stack || v_one;
      end if;

      v_num := v_num + 1;
      last_str := substr (v_formular || ';', v_num, length (v_formular) + 1);
      v_tmp := last_str;
   end loop;

   return v_stack;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.ST_HR_CLASSIFICATION_MONEY;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_Classification_Money(p_salary  IN  NUMBER
  ) RETURN A_MONEY_TYPE IS
  l_money number;
  l_mod_number number;
  l_div_number number;
  l_money_type   A_MONEY_TYPE:=A_MONEY_TYPE();
  text varchar2(100);
  l_i number;
BEGIN
    l_mod_number:=p_salary;
    l_i:=1;
   for l_money in (select num_2 from vhr_hr_code where id='HR0045' order by num_1)
   loop
       l_div_number:=trunc(l_mod_number/l_money.num_2);
       l_mod_number:=mod(l_mod_number,l_money.num_2);
       l_money_type.EXTEND;

       l_money_type(l_i):=l_div_number;
       l_i:=l_i+1;
   end loop;
   return l_money_type;
   EXCEPTION
     WHEN OTHERS THEN
           Raise_application_error(-20001,'Loi: ' || SQLERRM);
       RAISE;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_HR_F_CHECK_MONTH_CLOSE_2;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_f_check_month_close_2
(p_month varchar2,
p_sal_kind   varchar2, --active hay resign
p_id           varchar2,  --id sal  
p_org_pk varchar2
)
   RETURN varchar2
IS
   l_flag_exist   BOOLEAN;
   l_cur_rec      NUMBER;
   l_cur          sys_refcursor;


BEGIN
   --check close month
   OPEN l_cur FOR
      SELECT 1
        FROM thr_close t
       WHERE del_if = 0
         AND t.close_yn = 'Y'
         AND T.MONTH_CLOSE=p_month
         and T.TCO_COMPANY_PK=(select max(b.tco_company_pk) from tco_org b where b.del_if=0 and decode(p_org_pk,'ALL','ALL',b.pk)=p_org_pk) --XAC DINH THEO COMPANY
         and T.KIND_OF_SALARY=to_number(p_sal_kind)
         AND (t.ID = p_id or p_id='');

   FETCH l_cur
    INTO l_cur_rec;

   l_flag_exist := l_cur%FOUND;

   CLOSE l_cur;
    if l_flag_exist then
        return 'Y';
    else
        return 'N';
    end if;


EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END;
 
 
 
 
 
/

DROP FUNCTION HPDQ.ST_HR_F_PERIOD_MONTH_2;

CREATE OR REPLACE FUNCTION HPDQ.ST_hr_f_period_month_2(
P_DATE IN VARCHAR2
,P_ID IN VARCHAR2
)RETURN VARCHAR2 IS
AV_MMMMDD  VARCHAR2(6);
p_yn    varchar(1);
p_from  varchar(8);
p_to  varchar(8);
p_month varchar(6);
l_from  varchar(8);
l_to  varchar(8);
BEGIN

    
    SELECT DECODE(A.CHAR_1,'FIRST','01',A.CHAR_1)
        ,DECODE(A.CHAR_2,'END','31',A.CHAR_2)
         INTO p_from,p_to
    FROM VHR_HR_CODE A
    WHERE A.ID='HR0030' AND A.CODE=P_ID;
    
    p_month:=    SUBSTR(P_DATE,1,6);
    
    if p_from >p_to then
    l_from:= to_char(add_months(to_date(p_month,'yyyymm'),-1),'yyyymm')||p_from;
    l_to:=p_month||p_to;
    else
    l_from:= p_month||p_from;
    l_to:=p_month||p_to;
         
    end if;
    
    
    
   -- IF p_yn='N' THEN 
     --   AV_MMMMDD:=SUBSTR(P_DATE,1,6);
   --- ELSE
        IF P_DATE  between l_from and l_to   THEN
            AV_MMMMDD:=p_month;
            
        ELSE    
               AV_MMMMDD:=to_char(add_months(to_date(p_month,'yyyymm'),1),'yyyymm');
        
        END IF;    
        
  --  END IF;
    
    RETURN AV_MMMMDD;
EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ;
 
 
 
 
 
/

DROP FUNCTION HPDQ.ST_HR_GET_HRCODE;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_GET_HRCODE (hrcode IN VARCHAR2, LANG IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
   l_select    VARCHAR2(100) :='';
--------
BEGIN
--------
   FOR cur IN (SELECT   b.code, decode(lang, 'VIE', nvl(b.code_fnm, b.code_nm), b.code_nm)  code_nm
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.del_if=0 and b.del_if=0
                  and a.pk = b.thr_code_master_pk
                  and upper(a.id)= upper(hrcode)
                  and b.use_yn = 'Y'
               ORDER BY b.code, nvl(b.code_fnm, b.code_nm) DESC)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

    IF LANG = 'VIE' THEN
        l_select := 'ALL|Tất cả' ;
   ELSE
        l_select := 'ALL|Select All' ;
   END IF;  
  
   RETURN lsvreturn||l_select;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_GET_HRCODE;
 
/

DROP FUNCTION HPDQ.ST_HR_GET_HRCODE2;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_GET_HRCODE2 (hrcode IN VARCHAR2, LANG IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
   l_select    VARCHAR2(100) :='';
--------
BEGIN
--------
   FOR cur IN (SELECT   b.code, decode(lang, 'VIE', nvl(b.code_fnm, b.code_nm), b.code_nm)  code_nm
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.del_if=0 and b.del_if=0
                  and a.pk = b.thr_code_master_pk
                  and nvl(b.use_yn,'N') = 'Y'
                  and upper(a.id)= upper(hrcode)
               ORDER BY nvl(b.code_fnm, b.code_nm) )
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   l_select := ' | ' ;
   
   
  
   RETURN lsvreturn||l_select;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_GET_HRCODE2;
 
 
/

DROP FUNCTION HPDQ.ST_HR_GET_HRCODE3;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_GET_HRCODE3 (hrcode IN VARCHAR2, LANG IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
   l_select    VARCHAR2(100) :='';
--------
BEGIN

   
        FOR cur IN (SELECT   b.code, decode(lang, 'VIE', nvl(b.code_fnm, b.code_nm), b.code_nm)  code_nm
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.del_if=0 and b.del_if=0
                  and a.pk = b.thr_code_master_pk
                  and nvl(b.use_yn,'N') = 'Y'
                  and upper(a.id)= upper(hrcode)
               ORDER BY b.seq, nvl(b.code_fnm, b.code_nm) )
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
 
   

   
   
  
   RETURN lsvreturn||l_select;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_GET_HRCODE3;
 
 
/

DROP FUNCTION HPDQ.ST_HR_GET_LIST;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_GET_LIST (TABLE_NAME IN VARCHAR2, LANG IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
   l_select    VARCHAR2(100) :='';
--------
BEGIN
--------
   IF TABLE_NAME = 'ORG' THEN
       FOR cur IN (
            select a.pk code,lpad('.',level*2-1,'.')|| decode(lang, 'VIE', nvl(a.org_lnm, a.org_nm), a.org_nm) code_nm 
                        from tco_org a  where a.del_if = 0 
                        AND NVL(A.END_DATE,TO_CHAR(SYSDATE+1,'YYYYMMDD')) >  TO_CHAR(SYSDATE,'YYYYMMDD') 
                        connect by prior a.pk = a.p_pk start with nvl(a.p_pk,0)=0 order siblings by a.org_id 
                        )
 
   
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       
   
   ELSIF TABLE_NAME= 'ORG2' THEN
   
        FOR cur IN (
            select a.pk code,lpad('.',level*2-1,'.')|| decode(lang, 'VIE', nvl(a.org_lnm, a.org_nm), a.org_nm) code_nm 
                        from tco_org a  where a.del_if = 0 
                        AND NVL(A.END_DATE,TO_CHAR(SYSDATE+1,'YYYYMMDD')) >  TO_CHAR(SYSDATE,'YYYYMMDD') 
                        connect by prior a.pk = a.p_pk start with nvl(a.p_pk,0)=0 order siblings by a.org_id 
                        )
 
   
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
    
       RETURN lsvreturn;
        
   ELSIF TABLE_NAME = 'GROUP' THEN
    
       FOR cur IN (
                     select a.pk code, decode(lang, 'VIE', nvl(a.workgroup_fnm, a.workgroup_nm), a.workgroup_nm)  code_nm
                     from thr_work_group a where a.del_if=0 order by a.workgroup_nm 
                   )
 
   
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       
   ELSIF TABLE_NAME = 'WSHIFT' THEN
    
       FOR cur IN (
                     select a.pk code, decode(lang, 'VIE', nvl(a.description, a.description), a.description)  code_nm
                     from thr_work_shift a where a.del_if=0 order by a.shift 
                   )
 
   
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;    
       
   ELSIF TABLE_NAME = 'YN' THEN
   
        SELECT decode(lang, 'VIE', 'Y|Có|N|Không|', 'Y|Yes|N|No|') into lsvreturn FROM DUAL ;
        
   ELSIF TABLE_NAME = 'COMPANY' THEN
        
       FOR cur IN (
                     SELECT A.PK CODE, DECODE(lang, 'VIE', nvl(A.PARTNER_LNAME, A.PARTNER_NAME), A.PARTNER_NAME) CODE_NM
                        FROM TCO_COMPANY A 
                     WHERE A.DEL_IF=0 AND NVL(A.ACTIVE_YN,'N')='Y' 
                     ORDER BY A.PARTNER_ID 
                   )
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       
   ELSIF TABLE_NAME = 'SALARY PERIOD' THEN
       --HR0030
       FOR cur IN (
                     SELECT A.CODE CODE, DECODE(lang, 'VIE', nvl(A.CODE_FNM, A.CODE_NM), A.CODE_NM) ||' '|| A.CHAR_1||'->'||A.CHAR_2  CODE_NM
                        FROM VHR_HR_CODE A 
                     WHERE A.ID='HR0030'
                   )
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       
   ELSIF TABLE_NAME = 'SALARY_PERIOD2' THEN
       --HR0030
       FOR cur IN (
                     SELECT A.CODE CODE, DECODE(lang, 'VIE', nvl(A.CODE_FNM, A.CODE_NM), A.CODE_NM) ||' '|| A.CHAR_1||'->'||A.CHAR_2  CODE_NM
                        FROM VHR_HR_CODE A 
                     WHERE A.ID='HR0030'
                   )
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       RETURN lsvreturn;
       
   ELSIF TABLE_NAME = 'APPOINTMENT BY' THEN
       SELECT decode(lang, 'VIE', '1|Tổ chức|2|Chức vụ|3|Trình độ|', '1|Organization|2|Position|3|Education|') into lsvreturn FROM DUAL ;
   
   ELSIF TABLE_NAME = 'PARTNER' THEN
       
       FOR cur IN (
                     SELECT A.PK CODE, DECODE(lang, 'VIE', nvl(A.PARTNER_LNAME, A.PARTNER_NAME), A.PARTNER_NAME) CODE_NM
                        FROM TCO_BUSPARTNER A 
                     WHERE A.DEL_IF=0 AND NVL(A.ACTIVE_YN,'N')='Y' 
                     AND A.PARTNER_TYPE = '80' -- contractors
                     ORDER BY A.PARTNER_ID 
                   )
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       RETURN lsvreturn;
   
   ELSIF TABLE_NAME = 'MEAL_TYPE' THEN
       
       FOR cur IN (
                     SELECT A.PK CODE, DECODE(lang, 'VIE', NVL(A.GRP_FNM, A.GRP_NM), A.GRP_NM ) CODE_NM
                        FROM TLG_IT_ITEMGRP A , TLG_IT_ITEMGRP B
                     WHERE A.DEL_IF=0 AND B.DEL_IF=0
                     AND A.P_PK = B.PK 
                     AND B.GRP_CD ='MN'
                     ORDER BY A.GRP_CD
                   )
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       RETURN lsvreturn;
   
   END IF;

    
   IF LANG = 'VIE' THEN
        l_select := 'ALL|Tất cả' ;
   ELSE
        l_select := 'ALL|Select All' ;
   END IF;  
  
   RETURN lsvreturn||l_select;
   
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_GET_LIST;
 
/

DROP FUNCTION HPDQ.ST_HR_GET_LIST2;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_GET_LIST2 (TABLE_NAME IN VARCHAR2, LANG IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
   l_select    VARCHAR2(100) :='';
--------
BEGIN
--------
   IF TABLE_NAME = 'ORG' THEN
       FOR cur IN (
            select a.pk code,lpad('.',level*2-1,'.')|| decode(lang, 'VIE', nvl(a.org_lnm, a.org_nm), a.org_nm) code_nm 
                        from tco_org a  where a.del_if = 0 
                        AND NVL(A.END_DATE,TO_CHAR(SYSDATE+1,'YYYYMMDD')) >  TO_CHAR(SYSDATE,'YYYYMMDD') 
                        connect by prior a.pk = a.p_pk start with nvl(a.p_pk,0)=0 order siblings by a.org_id 
                        )
 
   
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
   
   ELSIF TABLE_NAME = 'GROUP' THEN
    
       FOR cur IN (
                     select a.pk code, decode(lang, 'VIE', nvl(a.workgroup_fnm, a.workgroup_nm), a.workgroup_nm)  code_nm
                     from thr_work_group a where a.del_if=0 order by a.workgroup_nm 
                   )
 
   
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       
   ELSIF TABLE_NAME = 'SALARY PERIOD' THEN
       --HR0030
       FOR cur IN (
                     SELECT A.CODE CODE, DECODE(lang, 'VIE', nvl(A.CODE_FNM, A.CODE_NM), A.CODE_NM) ||' '|| A.CHAR_1||'->'||A.CHAR_2  CODE_NM
                        FROM VHR_HR_CODE A 
                     WHERE A.ID='HR0030'
                   )
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
       
   ELSIF TABLE_NAME = 'YN' THEN
   
        SELECT decode(lang, 'VIE', 'Y|Có|N|Không|', 'Y|Yes|N|No|') into lsvreturn FROM DUAL ;
        
   ELSIF TABLE_NAME = 'MARITAL' THEN
   
        SELECT decode(lang, 'VIE', 'Y|Có gia đình|N|Độc thân|', 'Y|Married|N|Single|') into lsvreturn FROM DUAL ;
       
   ELSIF TABLE_NAME = 'COMPANY' THEN
    
       FOR cur IN (
                     SELECT A.PK CODE, DECODE(lang, 'VIE', nvl(A.PARTNER_LNAME, A.PARTNER_NAME), A.PARTNER_NAME) CODE_NM
                        FROM TCO_COMPANY A 
                     WHERE A.DEL_IF=0 AND NVL(A.ACTIVE_YN,'N')='Y' 
                     ORDER BY A.PARTNER_ID 
                   )
 
   
       LOOP
          -- process row here
          lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
       END LOOP;
   
   END IF;

   l_select := ' | ' ; 
   
  
   RETURN lsvreturn||l_select;
   
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_GET_LIST2;
 
 
/

DROP FUNCTION HPDQ.ST_HR_GET_LIST3;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_GET_LIST3 (FORM_NAME IN VARCHAR2, SEQ IN VARCHAR, LANG IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
   l_select    VARCHAR2(100) :='';
--------
BEGIN
--------
   IF FORM_NAME = 'HREM00500' THEN
       
        SELECT decode(lang, 'VIE', '1|Ngày bắt đầu thử việc|2|Ngày kết thúc thử việc|3|Ngày bắt đầu hợp đồng|4|Ngày kết thúc hợp đồng'
                          , '1|Begin Probation|2|End Probation|3|Begin Contract|4|End Contract') 
        into lsvreturn FROM DUAL ;
   
   END IF;

   IF FORM_NAME = 'HREM00700' THEN
       
        SELECT decode(lang, 'VIE', '1|Ngày vào|2|Ngày hiệu lực'
                          , '1|Join Date|2|Effect Date') 
        into lsvreturn FROM DUAL ;
   
   END IF;
   
   IF FORM_NAME = 'HREM01600' THEN
       
        SELECT decode(lang, 'VIE', '1|Ngày bắt đầu thử việc|2|Ngày kết thúc thử việc|3|Ngày bắt đầu hợp đồng|4|Ngày kết thúc hợp đồng'
                          , '1|Begin Probation|2|End Probation|3|Begin Contract|4|End Contract') 
        into lsvreturn FROM DUAL ;
   
   END IF;
  
   RETURN lsvreturn;
   
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_GET_LIST3;
 
 
/

DROP FUNCTION HPDQ.ST_HR_GET_UNFIX_ALLOW;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_GET_UNFIX_ALLOW (LANG IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
   l_select    VARCHAR2(100) :='';
--------
BEGIN
--------
   FOR cur IN (SELECT   a.kind as code, a.name  code_nm
                   FROM thr_allowance_master a
                  WHERE a.del_if=0
               ORDER BY a.name )
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

    IF LANG = 'VIE' THEN
        l_select := 'ALL|Tất cả' ;
   ELSE
        l_select := 'ALL|Select All' ;
   END IF;  
  
   RETURN lsvreturn||l_select;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_GET_UNFIX_ALLOW;
 
 
/

DROP FUNCTION HPDQ.ST_HR_HRCODE;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_HRCODE (hrcode IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   b.code, b.code_nm
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.del_if=0 and b.del_if=0
                  and a.pk = b.thr_code_master_pk
                  and upper(a.id)= upper(hrcode)
               ORDER BY b.seq DESC)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_HRCODE;
 
 
 
 
 
/

DROP FUNCTION HPDQ.ST_HR_HRCODE_REPORT;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_HRCODE_REPORT (
   hrcode IN VARCHAR2,
   form_id   IN VARCHAR2, -- char_1
   tab_num   IN NUMBER   -- number 2
)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   b.code,  b.code_nm
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.del_if=0 and b.del_if=0
                  and a.pk = b.thr_code_master_pk
                  and upper(a.id)= upper(hrcode)
                  and upper(b.char_1) = upper(form_id)
                  and nvl(b.num_2, 1) = nvl(tab_num, 1)
                  and b.use_yn ='Y'
               ORDER BY b.num_1 )
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_HRCODE_REPORT;
 
 
/

DROP FUNCTION HPDQ.ST_HR_HRCODE_REPORT2;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_HRCODE_REPORT2 (
   hrcode IN VARCHAR2,
   form_id   IN VARCHAR2, -- char_1
   tab_num   IN NUMBER,   -- number 2
   lang      IN VARCHAR2
)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   b.code, decode(lang, 'VIE', nvl(b.code_fnm, b.code_nm), b.code_nm) code_nm
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.del_if=0 and b.del_if=0
                  and a.pk = b.thr_code_master_pk
                  and upper(a.id)= upper(hrcode)
                  and upper(b.char_1) = upper(form_id)
                  and nvl(b.num_2, 1) = nvl(tab_num, 1)
                  and b.use_yn ='Y'
               ORDER BY b.num_1 )
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_HRCODE_REPORT2;
 
 
/

DROP FUNCTION HPDQ.ST_HR_HRCODE_V;

CREATE OR REPLACE FUNCTION HPDQ.ST_HR_HRCODE_V (hrcode IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   b.code, nvl(b.code_fnm, b.code_nm) code_nm
                   FROM thr_code_master a, thr_code_detail b
                  WHERE a.del_if=0 and b.del_if=0
                  and a.pk = b.thr_code_master_pk
                  and upper(a.id)= upper(hrcode)
               ORDER BY b.seq DESC)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END ST_HR_HRCODE_V;
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_90100020_ESTIMATION;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_90100020_estimation (  p_teb_est_mst_pk   varchar)
    return   varchar                                                            
is
 
   /******************************************************************************
      NAME:       st_lg_sel_teb_est_mst
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        05/04/2013   Pham Duy Tan       1. Created this procedure.

   ******************************************************************************/
   l_count_pk_mst  number;
   l_count_est  number;
begin

   
      select count(TEB_EST_MST_PK),sum(decode(ESTIMATION_YN,'Y',1,0))  into l_count_pk_mst, 
             l_count_est
             
        from TEB_EST_SHORTLIST 
        where del_if=0 and TEB_EST_MST_PK= p_teb_est_mst_pk;
        
     return   l_count_est||'/'||l_count_pk_mst;
  exception
   when others then 
        raise;
end st_lg_f_90100020_estimation;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_90100020_VIEW;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_90100020_view (  p_teb_est_mst_pk   varchar)
    return   varchar                                                            
is
 
   /******************************************************************************
      NAME:       st_lg_sel_teb_est_mst
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        05/04/2013   Pham Duy Tan       1. Created this procedure.

   ******************************************************************************/
   l_count_pk_mst  number;
   l_count_view  number;
begin

   
      select count(TEB_EST_MST_PK),sum(decode(VIEW_YN,'Y',1,0))  into l_count_pk_mst, 
             l_count_view
             
        from TEB_EST_SHORTLIST 
        where del_if=0 and TEB_EST_MST_PK= p_teb_est_mst_pk;
        
     return   l_count_view||'/'||l_count_pk_mst;
  exception
   when others then 
        raise;
end st_lg_f_90100020_view;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_CONVERT_UOM_QTY;

CREATE OR REPLACE FUNCTION HPDQ.ST_LG_F_CONVERT_UOM_QTY(
    p_item_pk           NUMBER,
    p_qty               NUMBER,
    p_in_uom            VARCHAR2,
    p_out_uom           VARCHAR2
) RETURN NUMBER
IS
    l_rtn_value     NUMBER;
BEGIN
--    SELECT (CASE WHEN A.UOM=p_in_uom THEN p_qty
--                WHEN A.REF_UOM=p_in_uom THEN 
--                            (CASE WHEN NVL(A.RATE_UOM,0)=0 THEN p_qty
--                                ELSE ROUND(p_qty/A.RATE_UOM,10) END)
--                WHEN A.REF_UOM_2=p_in_uom THEN 
--                            (CASE WHEN NVL(A.RATE_UOM_2,0)=0 THEN p_qty
--                                ELSE ROUND(p_qty/A.RATE_UOM_2,10) END)
--                ELSE 0 END)
--           *(CASE WHEN A.UOM=p_out_uom THEN 1
--                  WHEN A.REF_UOM=p_out_uom THEN NVL(A.RATE_UOM,0)
--                  WHEN A.REF_UOM_2=p_out_uom THEN NVL(A.RATE_UOM_2,0)
--                  ELSE 0 END)  INTO l_rtn_value
--     FROM TLG_IT_ITEM A
--    WHERE A.DEL_IF=0 AND A.PK=p_item_pk;
    
    RETURN l_rtn_value;
END;
 
/

DROP FUNCTION HPDQ.ST_LG_F_ECUS_TCVN2UNICODE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_ecus_TCVN2Unicode(
arg_StrInput varchar2
) RETURN varchar2 IS
/******************************************************************************
   NAME:       st_lg_f_ecus_TCVN2Unicode
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04/05/2013   ntxuan       1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     st_lg_f_ecus_TCVN2Unicode
      Sysdate:         04/05/2013
      Date and Time:   04/05/2013, 1:08:28 PM, and 04/05/2013 1:08:28 PM
      Username:        ntxuan (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
l_TCVN  varchar2(671);
l_UNICODE varchar2(671);

l_strOutput varchar2(4000);
l_COUNTER number;
l_POSITION number;

BEGIN
    l_TCVN := ',184 ,181 ,182 ,183 ,185 ,168 ,190 ,187 ,188 ,189 ,198 ,169 ,202 ,199 ,200 ,201 ,203 ,208 ,204 ,206 ,207 ,209 ,170 ,213 ,210 ,211 ,212 ,214 ,221 ,215 ,216 ,220 ,222 ,227 ,223 ,225 ,226 ,228 ,171 ,232 ,229 ,230 ,231 ,233 ,172 ,237 ,234 ,235 ,236 ,238 ,243 ,239 ,241 ,242 ,244 ,173 ,248 ,245 ,246 ,247 ,249 ,253 ,250 ,251 ,252 ,254 ,174 ,184 ,181 ,182 ,183 ,185 ,161 ,190 ,187 ,188 ,189 ,198 ,162 ,202 ,199 ,200 ,201 ,203 ,208 ,204 ,206 ,207 ,209 ,163 ,213 ,210 ,211 ,212 ,214 ,221 ,215 ,216 ,220 ,222 ,227 ,223 ,225 ,226 ,228 ,164 ,232 ,229 ,230 ,231 ,233 ,165 ,237 ,234 ,235 ,236 ,238 ,243 ,239 ,241 ,242 ,244 ,166 ,248 ,245 ,246 ,247 ,249 ,253 ,250 ,251 ,252 ,254 ,167 ,';
    l_UNICODE := ',225 ,224 ,7843,227 ,7841,259 ,7855,7857,7859,7861,7863,226 ,7845,7847,7849,7851,7853,233 ,232 ,7867,7869,7865,234 ,7871,7873,7875,7877,7879,237 ,236 ,7881,297 ,7883,243 ,242 ,7887,245 ,7885,244 ,7889,7891,7893,7895,7897,417 ,7899,7901,7903,7905,7907,250 ,249 ,7911,361 ,7909,432 ,7913,7915,7917,7919,7921,253 ,7923,7927,7929,7925,273 ,193 ,192 ,7842,195 ,7840,258 ,7854,7856,7858,7860,7862,194 ,7844,7846,7848,7850,7852,201 ,200 ,7866,7868,7864,202 ,7870,7872,7874,7876,7878,205 ,204 ,7880,296 ,7882,211 ,210 ,7886,213 ,7884,212 ,7888,7890,7892,7894,7896,416 ,7898,7900,7902,7904,7906,218 ,217 ,7910,360 ,7908,431 ,7912,7914,7916,7918,7920,221 ,7922,7926,7928,7924,272 ,';
    
    if arg_StrInput is null then
        return null;
    end if;
    
    if arg_StrInput = '' or arg_StrInput = ' ' then
        return null;
    end if;
    
    l_COUNTER := 1;
    l_strOutput := ' ';
    
    WHILE l_COUNTER <= LENGTH(arg_StrInput)
    loop
        select instr(','||to_char(ASCII(substr(arg_StrInput, l_COUNTER, 1)))||',', l_TCVN,1)
        into l_POSITION
        from dual;
        
        if l_POSITION > 0 then
            l_strOutput := l_strOutput + VARCHAR2(to_number(substr(l_UNICODE, l_POSITION+1, 4)));
        ELSE
            l_strOutput := l_strOutput + substr(arg_StrInput, l_COUNTER, 1);
            end if;
        l_COUNTER := l_COUNTER + 1;
    END loop; 
    
    RETURN l_strOutput;
    
  
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END st_lg_f_ecus_TCVN2Unicode;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_FPPR00313;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_fppr00313 (
   p_prod_date         IN VARCHAR2,
   p_work_shift        IN VARCHAR2,
   p_tlg_pb_line_pk    IN NUMBER,
   p_work_process_pk   IN NUMBER,
   p_item_pk           IN NUMBER)
   RETURN VARCHAR2
IS
   l_charger   VARCHAR (200);
   l_comma     VARCHAR2 (3);
BEGIN
   FOR l_cur
      IN (  SELECT b.emp_id, b.full_name
              FROM tlg_pr_prod_income_emp a, thr_employee b
             WHERE     a.del_if = 0
                   AND a.prod_date = p_prod_date
                   AND a.work_shift = p_work_shift
                   AND a.tlg_pb_line_pk = p_tlg_pb_line_pk
                   AND NVL (a.TLG_PB_WORK_PROCESS_PK, 0) =
                          NVL (p_work_process_pk, 0)
                   AND a.tlg_it_item_pk = p_item_pk
                   AND b.del_if(+) = 0
                   AND a.charger_pk = b.pk(+)
          ORDER BY a.seq)
   LOOP
      l_charger := l_charger || l_comma || l_cur.full_name;

      l_comma := ' ; ';
   END LOOP;

   RETURN l_charger;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_fppr00313;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GETTIME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_F_GETTIME(
  p_from_hour   IN  varchar2, --'YYYYMMDDHH24:MI'
  p_to_hour   IN  varchar2
  ) return varchar IS --dd:hh:mm 
  l_temp varchar2(100);
  l_remember number :=0;
  l_number  number;
  l_numday  number;
  l_day_f varchar(8);
  l_day_t varchar(8);
  l_hh_f varchar(2);  
  l_hh_t varchar(2);
  l_mm_f varchar(2);  
  l_mm_t varchar(2);
BEGIN
   if TO_DATE (p_to_hour, 'YYYYMMDDHH24:MI')
                  > TO_DATE (p_from_hour, 'YYYYMMDDHH24:MI')
                  then
                        select 
                            substr(p_from_hour,1,8),
                            substr(p_to_hour,1,8),
                            substr(p_from_hour,9,2),
                            substr(p_to_hour,9,2),
                            substr(p_from_hour,12,2),
                            substr(p_to_hour,12,2)
                        into 
                          l_day_f,
                          l_day_t,
                          l_hh_f ,  
                          l_hh_t ,
                          l_mm_f , 
                          l_mm_t 
                        from dual;
                        
                      select to_Date(l_day_t,'yyyymmdd') - to_Date(l_day_f,'yyyymmdd')   into  l_numday from dual;
                        
                        if l_mm_t < l_mm_f then
                           l_number := 60 +  to_number(l_mm_t) - to_number(l_mm_f) ;
                           l_remember :=1;
                            l_temp := lpad(l_number,2,'0');
                        else
                           l_number := to_number(l_mm_t) - to_number(l_mm_f) ;
                           l_remember :=0;
                            l_temp := lpad(l_number,2,'0');
                        end if;
                        
                         if l_hh_t < l_hh_f then
                           l_number := 24 +  to_number( l_hh_t) - to_number(l_hh_f)  - l_remember;
                           l_remember :=1;                           
                        else
                           l_number := to_number( l_hh_t) - to_number(l_hh_f)  - l_remember;
                           l_remember :=0;                                                   
                        end if;                          
                          l_numday := l_numday - l_remember  ;               
                         l_temp := ((l_numday * 24 ) + l_number)||':'|| l_temp; 
                        
                    return l_temp;    
                  else
                    return null;
                  end if;
    
   EXCEPTION
     WHEN OTHERS THEN
           return null;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_AGCI00091;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_agci00091 (
   p_tco_stitem_pk    NUMBER,
   p_tco_spec_pk_01   NUMBER,
   p_tco_spec_pk_02   NUMBER,
   p_tco_spec_pk_03   NUMBER,
   p_tco_spec_pk_04   NUMBER,
   p_tco_spec_pk_05   NUMBER,
   p_tco_spec_pk_06   NUMBER,
   p_tco_spec_pk_07   NUMBER,
   p_tco_spec_pk_08   NUMBER,
   p_tco_spec_pk_09   NUMBER,
   p_tco_spec_pk_10   NUMBER,
   p_tco_spec_pk_11   NUMBER,
   p_tco_spec_pk_12   NUMBER,
   p_tco_spec_pk_13   NUMBER,
   p_tco_spec_pk_14   NUMBER,
   p_tco_spec_pk_15   NUMBER,
   p_tco_spec_pk_16   NUMBER,
   p_tco_spec_pk_17   NUMBER,
   p_tco_spec_pk_18   NUMBER,
   p_tco_spec_pk_19   NUMBER,
   p_tco_spec_pk_20   NUMBER
)
   RETURN NUMBER
IS
   l_status        VARCHAR2 (100);
--------------------------
   l_rtn_item_pk   NUMBER;
--------------------------
   l_count         NUMBER         := 0;
--------------------------
BEGIN
--------------------------------------------------------------
   IF p_tco_spec_pk_01 IS NOT NULL AND p_tco_spec_pk_01 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_02 IS NOT NULL AND p_tco_spec_pk_02 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_03 IS NOT NULL AND p_tco_spec_pk_03 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_04 IS NOT NULL AND p_tco_spec_pk_04 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_05 IS NOT NULL AND p_tco_spec_pk_05 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_06 IS NOT NULL AND p_tco_spec_pk_06 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_07 IS NOT NULL AND p_tco_spec_pk_07 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_08 IS NOT NULL AND p_tco_spec_pk_08 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_09 IS NOT NULL AND p_tco_spec_pk_09 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_10 IS NOT NULL AND p_tco_spec_pk_10 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_11 IS NOT NULL AND p_tco_spec_pk_11 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_12 IS NOT NULL AND p_tco_spec_pk_12 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_13 IS NOT NULL AND p_tco_spec_pk_13 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_14 IS NOT NULL AND p_tco_spec_pk_14 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_15 IS NOT NULL AND p_tco_spec_pk_15 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_16 IS NOT NULL AND p_tco_spec_pk_16 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_17 IS NOT NULL AND p_tco_spec_pk_17 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_18 IS NOT NULL AND p_tco_spec_pk_18 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_19 IS NOT NULL AND p_tco_spec_pk_19 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_20 IS NOT NULL AND p_tco_spec_pk_20 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

----------------------------------------------------------------------
   IF l_count = 0
   THEN
      IF l_rtn_item_pk IS NULL OR l_rtn_item_pk = 0
      THEN
         SELECT COUNT (gr.pk)
           INTO l_count
           FROM tlg_it_stitem st, tlg_it_grpspecgrp gr
          WHERE st.del_if = 0
            AND gr.del_if = 0
            AND st.tlg_it_itemgrp_pk = gr.tlg_it_itemgrp_pk
            AND st.pk = p_tco_stitem_pk;

         IF l_count = 0
         THEN
            SELECT MAX (a.pk)
              INTO l_rtn_item_pk
              FROM tlg_it_item a
             WHERE a.del_if = 0 AND a.tlg_it_stitem_pk = p_tco_stitem_pk;
         END IF;
      END IF;

      RETURN l_rtn_item_pk;
   END IF;

   l_status := 'Select item error !!!';

----------------------------------------------------------------------
   SELECT MAX (tlg_it_item_pk)
     INTO l_rtn_item_pk
     FROM (SELECT   a.tlg_it_item_pk
               FROM tlg_it_itemspec a, tlg_it_item b
              WHERE a.del_if = 0
                AND a.tlg_it_spec_pk IN
                       (NVL (p_tco_spec_pk_01, 0),
                        NVL (p_tco_spec_pk_02, 0),
                        NVL (p_tco_spec_pk_03, 0),
                        NVL (p_tco_spec_pk_04, 0),
                        NVL (p_tco_spec_pk_05, 0),
                        NVL (p_tco_spec_pk_06, 0),
                        NVL (p_tco_spec_pk_07, 0),
                        NVL (p_tco_spec_pk_08, 0),
                        NVL (p_tco_spec_pk_09, 0),
                        NVL (p_tco_spec_pk_10, 0),
                        NVL (p_tco_spec_pk_11, 0),
                        NVL (p_tco_spec_pk_12, 0),
                        NVL (p_tco_spec_pk_13, 0),
                        NVL (p_tco_spec_pk_14, 0),
                        NVL (p_tco_spec_pk_15, 0),
                        NVL (p_tco_spec_pk_16, 0),
                        NVL (p_tco_spec_pk_17, 0),
                        NVL (p_tco_spec_pk_18, 0),
                        NVL (p_tco_spec_pk_19, 0),
                        NVL (p_tco_spec_pk_20, 0)
                       )
                AND a.tlg_it_item_pk NOT IN (
                       SELECT DISTINCT tlg_it_item_pk
                                  FROM tlg_it_itemspec c
                                 WHERE c.del_if = 0
                                   AND c.tlg_it_spec_pk NOT IN
                                          (NVL (p_tco_spec_pk_01, 0),
                                           NVL (p_tco_spec_pk_02, 0),
                                           NVL (p_tco_spec_pk_03, 0),
                                           NVL (p_tco_spec_pk_04, 0),
                                           NVL (p_tco_spec_pk_05, 0),
                                           NVL (p_tco_spec_pk_06, 0),
                                           NVL (p_tco_spec_pk_07, 0),
                                           NVL (p_tco_spec_pk_08, 0),
                                           NVL (p_tco_spec_pk_09, 0),
                                           NVL (p_tco_spec_pk_10, 0),
                                           NVL (p_tco_spec_pk_11, 0),
                                           NVL (p_tco_spec_pk_12, 0),
                                           NVL (p_tco_spec_pk_13, 0),
                                           NVL (p_tco_spec_pk_14, 0),
                                           NVL (p_tco_spec_pk_15, 0),
                                           NVL (p_tco_spec_pk_16, 0),
                                           NVL (p_tco_spec_pk_17, 0),
                                           NVL (p_tco_spec_pk_18, 0),
                                           NVL (p_tco_spec_pk_19, 0),
                                           NVL (p_tco_spec_pk_20, 0)
                                          ))
                AND b.del_if = 0
                AND a.tlg_it_item_pk = b.pk
                AND b.tlg_it_stitem_pk = p_tco_stitem_pk
           GROUP BY a.tlg_it_item_pk
             HAVING COUNT (*) = l_count);

-------------------------------------------------------------------------
   RETURN NVL (l_rtn_item_pk, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_agci00091;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_AGCI00100;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_agci00100 (
   p_tco_itemgrp_pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_check            NUMBER;
--------------------------------
   l_itemseq_length   NUMBER;
   l_item_seq         NUMBER;
   l_item_code        VARCHAR2 (50);
--------------------------------
BEGIN
   SELECT MAX (itemseq_length)
     INTO l_itemseq_length
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF l_itemseq_length > 0
   THEN
      SELECT MAX (item_seq)
        INTO l_item_seq
        FROM tlg_it_item
       WHERE del_if = 0
         AND tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND tlg_it_stitem_pk = p_tco_stitem_pk
         AND item_code LIKE UPPER (p_item_code) || '%';

      IF TO_NUMBER (l_item_seq) >=
                     TO_NUMBER (LPAD (' ', NVL (l_itemseq_length, 0) + 1, '9'))
      THEN
         raise_application_error (-20999,
                                  'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                                 );
      END IF;

      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                  UPPER (p_item_code)
                  || LPAD (l_item_seq, l_itemseq_length, 0);
   ELSE
      l_item_code := p_item_code;
   END IF;

   SELECT MAX (pk)
     INTO l_check
     FROM tlg_it_item
    WHERE del_if = 0 AND item_code = UPPER (l_item_code);

   WHILE (l_check > 0 AND NVL (l_item_seq, 0) < 10000)
   LOOP
      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                 UPPER (p_item_code)
                 || LPAD (l_item_seq, l_itemseq_length, 0);

      SELECT MAX (pk)
        INTO l_check
        FROM tlg_it_item
       WHERE del_if = 0 AND item_code = UPPER (l_item_code);
   END LOOP;

-------------------------------------
   RETURN l_item_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_agci00100;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_AGCI00110;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_agci00110 (
   p_tco_itemgrp_pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_agci00110;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_AGCI00150;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_agci00150 (
   p_tco_itemgrp_pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_agci00150;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_AGCI00190;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_agci00190 (p_it_itemcombine_m_pk NUMBER)
   RETURN VARCHAR2
IS
   l_detail    VARCHAR2 (500) := '';
   l_connect   VARCHAR2 (3);
/*--------

*/
BEGIN
   FOR l_cur IN (SELECT DISTINCT description
                            FROM tlg_it_itemcombine_d a
                           WHERE del_if = 0
                             AND tlg_it_itemcombine_m_pk =
                                                         p_it_itemcombine_m_pk)
   LOOP
      l_detail := l_detail || l_connect || l_cur.description;
      l_connect := ' ; ';
   END LOOP;

   RETURN l_detail;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_agci00190;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_BEGIN_STOCK;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_begin_stock (
   p_tco_item_pk        VARCHAR,
   p_stock_date         VARCHAR,
   p_tin_warehouse_pk   VARCHAR,
   p_wh_type            VARCHAR
)
   RETURN NUMBER
IS
   tmpvar   NUMBER;
/******************************************************************************
******************************************************************************/
BEGIN
   tmpvar := 0;

   SELECT (NVL (a2.begin_qty, 0) + NVL (a2.in_qty, 0) - NVL (a2.out_qty, 0))
                                                                    begin_qty
     INTO tmpvar
     FROM (SELECT   tlg_it_item_pk, SUM (begin_qty) begin_qty,
                    SUM (in_qty) in_qty, SUM (out_qty) out_qty
               FROM (SELECT a.tlg_in_warehouse_pk, b.tlg_it_item_pk,
                            b.end_qty begin_qty, NULL in_qty, NULL out_qty
                       FROM tlg_sa_stock_closing_m a,
                            tlg_sa_stock_closing_d b,
                            tlg_in_warehouse wh
                      WHERE a.del_if = 0
                        AND wh.del_if = 0
                        AND wh.pk = a.tlg_in_warehouse_pk
                        AND b.tlg_it_item_pk = p_tco_item_pk
                        AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                             OR p_tin_warehouse_pk IS NULL
                            )
                        AND (wh.wh_type = p_wh_type OR p_wh_type IS NULL)
                        AND (a.tlg_in_warehouse_pk, a.stock_date) IN (
                               SELECT   b.tlg_in_warehouse_pk,
                                        MAX (b.stock_date)
                                   FROM tlg_sa_stock_closing_m b
                                  WHERE b.del_if = 0
                                    AND b.stock_date < p_stock_date
                                    AND b.tlg_in_warehouse_pk =
                                                         a.tlg_in_warehouse_pk
                               GROUP BY b.tlg_in_warehouse_pk)
                        AND b.del_if = 0
                        AND a.pk = b.tlg_sa_stock_closing_m_pk
                     UNION ALL
                     SELECT a.tlg_in_warehouse_pk, a.tlg_it_item_pk,
                            NULL begin_qty, a.input_qty in_qty,
                            a.output_qty out_qty
                       FROM tlg_in_stocktr a, tlg_in_warehouse wh
                      WHERE a.del_if = 0
                        AND wh.del_if = 0
                        AND wh.pk = a.tlg_in_warehouse_pk
                        AND a.tlg_it_item_pk = p_tco_item_pk
                        AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                             OR p_tin_warehouse_pk IS NULL
                            )
                        AND (wh.wh_type = p_wh_type OR p_wh_type IS NULL)
                        AND a.tr_date >
                               NVL ((SELECT MAX (b.stock_date)
                                       FROM tlg_sa_stock_closing_m b
                                      WHERE b.del_if = 0
                                        AND b.stock_date < p_stock_date
                                        AND b.tlg_in_warehouse_pk =
                                                         a.tlg_in_warehouse_pk),
                                    '0'
                                   )
                        AND a.tr_date < p_stock_date)
           GROUP BY tlg_it_item_pk) a2;

   RETURN tmpvar;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN 0;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN 0;
END st_lg_f_get_begin_stock;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_BUSPARTNER_ID;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_buspartner_id (
   p_tco_buspartner_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   partner_id   tco_buspartner.partner_id%TYPE   := '';
BEGIN
   SELECT a.partner_id
     INTO partner_id
     FROM tco_buspartner a
    WHERE a.pk = p_tco_buspartner_pk;

   RETURN partner_id;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN ' ';
   WHEN OTHERS
   THEN
      RETURN ' ';
END st_lg_f_get_buspartner_id;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_BUSPARTNER_LOC_NM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_buspartner_loc_nm (
   p_tco_partnerloc_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_loc_nm   tco_partnerloc.loc_nm%TYPE   := '';
BEGIN
   SELECT a.loc_nm
     INTO l_loc_nm
     FROM tco_partnerloc a
    WHERE a.pk = p_tco_partnerloc_pk;

   RETURN l_loc_nm;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_buspartner_loc_nm;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_BUSPARTNER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_buspartner_name (
   p_tco_buspartner_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   partner_name   tco_buspartner.partner_name%TYPE   := '';
BEGIN
   SELECT a.partner_name
     INTO partner_name
     FROM tco_buspartner a
    WHERE a.pk = p_tco_buspartner_pk;

   RETURN partner_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN ' ';
   WHEN OTHERS
   THEN
      RETURN ' ';
END st_lg_f_get_buspartner_name;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_CURRENT_STOCK;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_current_stock (
   p_tco_item_pk        NUMBER,
   p_tin_warehouse_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_rtn_value   NUMBER;
BEGIN
   SELECT SUM (stock_qty)
     INTO l_rtn_value
     FROM vlg_in_sumcurstock
    WHERE tlg_it_item_pk = p_tco_item_pk
      AND (   tlg_in_warehouse_pk = p_tin_warehouse_pk
           OR p_tin_warehouse_pk IS NULL
          );

   RETURN NVL (l_rtn_value, 0);
END st_lg_f_get_current_stock;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_DOMESTIC_PORT;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_domestic_port (p_code IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
   l_rtn_value := '';
  SELECT    (code || ' ' || code_nm) into l_rtn_value
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = 'LGCM0230'--domestic_port 'LGCM0230'
                    and code=p_code
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0;
   RETURN l_rtn_value;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_DSEP00070_1;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_dsep00070_1 (
   p_pa_packing_wi_pk           NUMBER,
   p_pack_type             IN   VARCHAR2,
   p_pa_packages_type_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_array_packages   VARCHAR2 (200) := '';
   l_cur_num          NUMBER         := -1;
/*--------

*/
BEGIN
   FOR l_cur IN (SELECT DISTINCT a.package_seq
                            FROM tlg_pa_packages a
                           WHERE del_if = 0
                             AND tlg_pa_packing_wi_pk = p_pa_packing_wi_pk
                             AND pack_type = p_pack_type
                             AND tlg_pa_packages_type_pk =
                                                         p_pa_packages_type_pk
                        ORDER BY a.package_seq)
   LOOP
      IF l_cur_num + 1 = l_cur.package_seq
      THEN
         l_cur_num := l_cur.package_seq;
      ELSE
         IF LENGTH (l_array_packages) <> 0
         THEN
            l_array_packages :=
                  l_array_packages
               || '-->'
               || l_cur_num
               || ' ; '
               || l_cur.package_seq;
         ELSE
            l_array_packages := l_cur.package_seq;
         END IF;

         l_cur_num := l_cur.package_seq;
      END IF;
   END LOOP;

   l_array_packages := l_array_packages || '-->' || l_cur_num;
   RETURN l_array_packages;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_dsep00070_1;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_DSOS00030_STYLE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_dsos00030_style (p_array_so_pk VARCHAR2)
   RETURN VARCHAR2
IS
   l_style       VARCHAR2 (1000);
   l_connect     VARCHAR2 (1);
   l_item_name   VARCHAR (200);
   l_rtn_cur     SYS_REFCURSOR;
   l_sql         VARCHAR2 (4000);
/******************************************************************************
 ******************************************************************************/
BEGIN
   l_sql :=
         'SELECT  distinct   c.item_name   from  vlg_sa_SALE_ORDER a, tlg_it_item b , tlg_it_stitem c
         where  b.del_if(+) = 0 and a.tlg_it_item_pk = b.pk(+) and c.del_if(+) = 0 and b.tlg_it_stitem_pk = c.pk(+) and
         a.tlg_sa_saleorder_m_pk in ('
      || NVL (substr (p_array_so_pk, 2, LENGTH (p_array_so_pk - 1)), 0)
      || ')   ';

   OPEN l_rtn_cur FOR l_sql;

   LOOP
      FETCH l_rtn_cur INTO l_item_name;

      l_style := l_style || l_connect || l_item_name;
      l_connect := ',';
   END LOOP;

   RETURN l_style;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_f_get_dsos00030_style;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_EX_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_ex_item (
   p_out_item_pk        VARCHAR,
   p_from_date          VARCHAR,
   p_to_date            VARCHAR,
   p_tin_warehouse_pk   VARCHAR
)
   RETURN VARCHAR
IS
   l_return   VARCHAR (1000);
   l_count    NUMBER         := 1;
/******************************************************************************
******************************************************************************/
BEGIN
   FOR l_cur IN (SELECT DISTINCT i.item_code
                            FROM tlg_st_exchange_m m,
                                 tlg_st_exchange_d d,
                                 tlg_it_item i
                           WHERE m.del_if = 0
                             AND d.del_if = 0
                             AND i.del_if = 0
                             AND i.pk = d.ex_item_pk
                             AND d.out_item_pk = p_out_item_pk
                             AND m.pk = d.tlg_st_exchange_m_pk
                             AND (   p_tin_warehouse_pk = m.ex_wh_pk
                                  OR p_tin_warehouse_pk IS NULL
                                 )
                             AND m.ex_date BETWEEN p_from_date AND p_to_date
                             AND m.status = '30')
   LOOP
      IF l_count = 1
      THEN
         l_return := l_cur.item_code;
      ELSE
         l_return := l_return || ',' || l_cur.item_code;
      END IF;

      l_count := l_count + 1;
   END LOOP;

   RETURN l_return;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END st_lg_f_get_ex_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FORMAT;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_format (p_value IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_mask   VARCHAR (50);
--------
BEGIN
   CASE p_value
      WHEN '-2'
      THEN
         l_mask := '###,###,###,#00';
      WHEN '-1'
      THEN
         l_mask := '###,###,###,##0';
      WHEN '0'
      THEN
         l_mask := '###,###,###,###';
      WHEN '1'
      THEN
         l_mask := '###,###,###,##0.#';
      WHEN '2'
      THEN
         l_mask := '###,###,###,##0.##';
      WHEN '3'
      THEN
         l_mask := '###,###,###,##0.###';
      WHEN '4'
      THEN
         l_mask := '###,###,###,##0.####';
      WHEN '5'
      THEN
         l_mask := '###,###,###,##0.#####';
      WHEN '6'
      THEN
         l_mask := '###,###,###,##0.######';
      WHEN '7'
      THEN
         l_mask := '###,###,###,##0.#######';
      WHEN '8'
      THEN
         l_mask := '###,###,###,##0.########';
      WHEN '9'
      THEN
         l_mask := '###,###,###,##0.#########';
      WHEN '10'
      THEN
         l_mask := '###,###,###,##0.##########';
      WHEN '11'
      THEN
         l_mask := '###,###,###,##0.###########';
      WHEN '12'
      THEN
         l_mask := '###,###,###,##0.############';
   END CASE;

   RETURN l_mask;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_f_get_format;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FPFO00040;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_fpfo00040 (p_qc_outgo_d_pk NUMBER)
   RETURN VARCHAR2
IS
/******************************************************************************
 ******************************************************************************/
   l_defect   VARCHAR2 (1000);
BEGIN
   FOR l_cur IN (SELECT b.defect_name
                   FROM tlg_qc_outgo_def a, tlg_qc_defect b
                  WHERE a.del_if = 0
                    AND b.del_if = 0
                    AND a.tlg_qc_defect_pk = b.pk
                    AND a.tlg_qc_outgo_d_pk = p_qc_outgo_d_pk)
   LOOP
      l_defect := l_defect || '-' || l_cur.defect_name;
   END LOOP;

   RETURN l_defect;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '-';
END st_lg_f_get_fpfo00040;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FPGM10030_YARN;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_fpgm10030_yarn (p_wi_m_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_yarn    VARCHAR2 (100);
   l_comma   VARCHAR (1);
BEGIN
   FOR l_cur IN
      (SELECT DISTINCT (lg_f_get_spec_name_02_item (1, a.item_pk)
                       ) yarn_name
                  FROM tlg_wi_line_op_cons a
                 WHERE a.del_if = 0 AND a.tlg_wi_line_m_pk = p_wi_m_pk
              ORDER BY 1)
   LOOP
      l_yarn := l_yarn || l_comma || l_cur.yarn_name;
      l_comma := ',';
   END LOOP;

   RETURN NVL (l_yarn, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_fpgm10030_yarn;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FPGM10030_YARN_2;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_fpgm10030_yarn_2 (
   p_card_id   IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_yarn    VARCHAR2 (100);
   l_comma   VARCHAR (1);
BEGIN
   FOR l_cur IN
      (SELECT DISTINCT (lg_f_get_spec_name_02_item (1, a.item_pk)
                       ) yarn_name
                  FROM tlg_wi_line_op_cons a, tlg_pr_line_output_d b
                 WHERE a.del_if = 0
                   AND b.del_if = 0
                   AND b.table_name = 'TLG_WI_LINE_M'
                   AND b.table_pk = a.tlg_wi_line_m_pk
                   AND b.card_id = p_card_id
              ORDER BY 1)
   LOOP
      l_yarn := l_yarn || l_comma || l_cur.yarn_name;
      l_comma := ',';
   END LOOP;

   RETURN NVL (l_yarn, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_fpgm10030_yarn_2;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FPPR00220;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_fppr00220 (
   p_os_type                VARCHAR2,
   p_partner_pk             NUMBER,
   p_style_pk               NUMBER,
   p_pt_component_pk   IN   NUMBER
)
   RETURN NUMBER
IS
   l_unit_price   NUMBER;
--------
BEGIN
   SELECT MAX (a.unit_price)
     INTO l_unit_price
     FROM tlg_pr_os_price a
    WHERE (a.os_type = p_os_type OR a.os_type IS NULL)
      AND (a.partner_pk = p_partner_pk OR a.partner_pk IS NULL)
      AND (a.style_pk = p_style_pk OR a.style_pk IS NULL)
      AND (   a.tlg_pt_component_pk = p_pt_component_pk
           OR p_pt_component_pk IS NULL
          )
      AND a.use_yn = 'Y';

   RETURN l_unit_price;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_fppr00220;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FPPR00270;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_fppr00270 (
   p_tlg_wi_line_ordplan_m_pk   NUMBER,
   p_pt_component_pk            NUMBER,
   p_select                     NUMBER
)
   RETURN VARCHAR
IS
/******************************************************************************
******************************************************************************/
   l_next_component   VARCHAR2 (100);
   l_select           NUMBER;
BEGIN
   l_select := p_select;

   FOR l_cur IN (SELECT DISTINCT d.pk, d.component_id, d.component_name
                            FROM tlg_wi_line_op_cons a,
                                 tlg_pt_process_comp_in b,
                                 tlg_pt_process_comp_out c,
                                 tlg_pt_component d
                           WHERE a.del_if = 0
                             AND a.tlg_wi_line_m_pk =
                                                    p_tlg_wi_line_ordplan_m_pk)
   LOOP
      IF p_select = 1
      THEN
         SELECT l_cur.pk
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 2
      THEN
         SELECT l_cur.component_id
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 3
      THEN
         SELECT l_cur.component_name
           INTO l_next_component
           FROM DUAL;
      END IF;
   END LOOP;

   RETURN l_next_component;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_fppr00270;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FPPR00270_YARN;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_fppr00270_yarn (
   p_style_pk       NUMBER,
   p_component_pk   NUMBER
)
   RETURN VARCHAR2
IS
/******************************************************************************
******************************************************************************/
   l_mat_name   VARCHAR (220);
BEGIN
   SELECT MAX (mat_out.item_name)
     INTO l_mat_name
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_it_stitem mat_out
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND b.close_yn = 'N'
      AND a.pk = b.tlg_pt_process_comp_pk
      AND c.del_if = 0
      AND c.close_yn = 'N'
      AND a.pk = c.tlg_pt_process_comp_pk
      AND c.tlg_pt_component_pk = p_component_pk
      AND mat_out.del_if = 0
      AND b.st_item_pk = mat_out.pk;

   RETURN SUBSTR (l_mat_name, 1, 15);
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_fppr00270_yarn;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_FPPR00270_Y_COUNT;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_fppr00270_y_count (
   p_style_pk       NUMBER,
   p_component_pk   NUMBER
)
   RETURN VARCHAR2
IS
/******************************************************************************
******************************************************************************/
   l_card_qty   NUMBER;
BEGIN
   SELECT MAX (c.card_qty)
     INTO l_card_qty
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND b.close_yn = 'N'
      AND a.pk = b.tlg_pt_process_comp_pk
      AND c.del_if = 0
      AND c.close_yn = 'N'
      AND a.pk = c.tlg_pt_process_comp_pk
      AND c.tlg_pt_component_pk = p_component_pk;

   RETURN l_card_qty;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_fppr00270_y_count;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_ITEMCODE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_itemcode (p_tco_item_pk IN VARCHAR)
   RETURN VARCHAR2
IS
   l_item_code   VARCHAR2 (100);
BEGIN
   SELECT i.item_code
     INTO l_item_code
     FROM tlg_it_item i
    WHERE i.del_if = 0 AND i.pk = p_tco_item_pk;

   RETURN l_item_code;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_f_get_itemcode;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_ITEMNAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_itemname (p_pk IN VARCHAR)
   RETURN VARCHAR2
IS
   l_item_nm   VARCHAR2 (100);
BEGIN
   SELECT i.item_name
     INTO l_item_nm
     FROM tlg_it_item i
    WHERE i.del_if = 0 AND i.pk = p_pk;

   RETURN l_item_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_f_get_itemname;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_ITEM_FROM_SPEC;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_item_from_spec (
   p_tco_stitem_pk    NUMBER,
   p_tco_spec_pk_01   NUMBER,
   p_tco_spec_pk_02   NUMBER,
   p_tco_spec_pk_03   NUMBER,
   p_tco_spec_pk_04   NUMBER,
   p_tco_spec_pk_05   NUMBER,
   p_tco_spec_pk_06   NUMBER,
   p_tco_spec_pk_07   NUMBER,
   p_tco_spec_pk_08   NUMBER,
   p_tco_spec_pk_09   NUMBER,
   p_tco_spec_pk_10   NUMBER,
   p_tco_spec_pk_11   NUMBER,
   p_tco_spec_pk_12   NUMBER,
   p_tco_spec_pk_13   NUMBER,
   p_tco_spec_pk_14   NUMBER,
   p_tco_spec_pk_15   NUMBER,
   p_tco_spec_pk_16   NUMBER,
   p_tco_spec_pk_17   NUMBER,
   p_tco_spec_pk_18   NUMBER,
   p_tco_spec_pk_19   NUMBER,
   p_tco_spec_pk_20   NUMBER
)
   RETURN NUMBER
IS
   l_status        VARCHAR2 (100);
--------------------------
   l_rtn_item_pk   NUMBER;
--------------------------
   l_count         NUMBER         := 0;
--------------------------
BEGIN
--------------------------------------------------------------
   IF p_tco_spec_pk_01 IS NOT NULL AND p_tco_spec_pk_01 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_02 IS NOT NULL AND p_tco_spec_pk_02 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_03 IS NOT NULL AND p_tco_spec_pk_03 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_04 IS NOT NULL AND p_tco_spec_pk_04 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_05 IS NOT NULL AND p_tco_spec_pk_05 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_06 IS NOT NULL AND p_tco_spec_pk_06 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_07 IS NOT NULL AND p_tco_spec_pk_07 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_08 IS NOT NULL AND p_tco_spec_pk_08 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_09 IS NOT NULL AND p_tco_spec_pk_09 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_10 IS NOT NULL AND p_tco_spec_pk_10 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_11 IS NOT NULL AND p_tco_spec_pk_11 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_12 IS NOT NULL AND p_tco_spec_pk_12 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_13 IS NOT NULL AND p_tco_spec_pk_13 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_14 IS NOT NULL AND p_tco_spec_pk_14 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_15 IS NOT NULL AND p_tco_spec_pk_15 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_16 IS NOT NULL AND p_tco_spec_pk_16 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_17 IS NOT NULL AND p_tco_spec_pk_17 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_18 IS NOT NULL AND p_tco_spec_pk_18 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_19 IS NOT NULL AND p_tco_spec_pk_19 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

   IF p_tco_spec_pk_20 IS NOT NULL AND p_tco_spec_pk_20 <> 0
   THEN
      l_count := l_count + 1;
   END IF;

----------------------------------------------------------------------
   IF l_count = 0
   THEN
      IF l_rtn_item_pk IS NULL OR l_rtn_item_pk = 0
      THEN
         SELECT COUNT (gr.pk)
           INTO l_count
           FROM tlg_it_stitem st, tlg_it_grpspecgrp gr
          WHERE st.del_if = 0
            AND gr.del_if = 0
            AND st.tlg_it_itemgrp_pk = gr.tlg_it_itemgrp_pk
            AND st.pk = p_tco_stitem_pk;

         IF l_count = 0
         THEN
            SELECT MAX (a.pk)
              INTO l_rtn_item_pk
              FROM tlg_it_item a
             WHERE a.del_if = 0 AND a.tlg_it_stitem_pk = p_tco_stitem_pk;
         END IF;
      END IF;

      RETURN l_rtn_item_pk;
   END IF;

   l_status := 'Select item error !!!';

----------------------------------------------------------------------
   SELECT MAX (tlg_it_item_pk)
     INTO l_rtn_item_pk
     FROM (SELECT   a.tlg_it_item_pk
               FROM tlg_it_itemspec a, tlg_it_item b
              WHERE a.del_if = 0
                AND a.tlg_it_spec_pk IN
                       (NVL (p_tco_spec_pk_01, 0),
                        NVL (p_tco_spec_pk_02, 0),
                        NVL (p_tco_spec_pk_03, 0),
                        NVL (p_tco_spec_pk_04, 0),
                        NVL (p_tco_spec_pk_05, 0),
                        NVL (p_tco_spec_pk_06, 0),
                        NVL (p_tco_spec_pk_07, 0),
                        NVL (p_tco_spec_pk_08, 0),
                        NVL (p_tco_spec_pk_09, 0),
                        NVL (p_tco_spec_pk_10, 0),
                        NVL (p_tco_spec_pk_11, 0),
                        NVL (p_tco_spec_pk_12, 0),
                        NVL (p_tco_spec_pk_13, 0),
                        NVL (p_tco_spec_pk_14, 0),
                        NVL (p_tco_spec_pk_15, 0),
                        NVL (p_tco_spec_pk_16, 0),
                        NVL (p_tco_spec_pk_17, 0),
                        NVL (p_tco_spec_pk_18, 0),
                        NVL (p_tco_spec_pk_19, 0),
                        NVL (p_tco_spec_pk_20, 0)
                       )
                AND a.tlg_it_item_pk NOT IN (
                       SELECT DISTINCT tlg_it_item_pk
                                  FROM tlg_it_itemspec c
                                 WHERE c.del_if = 0
                                   AND c.tlg_it_spec_pk NOT IN
                                          (NVL (p_tco_spec_pk_01, 0),
                                           NVL (p_tco_spec_pk_02, 0),
                                           NVL (p_tco_spec_pk_03, 0),
                                           NVL (p_tco_spec_pk_04, 0),
                                           NVL (p_tco_spec_pk_05, 0),
                                           NVL (p_tco_spec_pk_06, 0),
                                           NVL (p_tco_spec_pk_07, 0),
                                           NVL (p_tco_spec_pk_08, 0),
                                           NVL (p_tco_spec_pk_09, 0),
                                           NVL (p_tco_spec_pk_10, 0),
                                           NVL (p_tco_spec_pk_11, 0),
                                           NVL (p_tco_spec_pk_12, 0),
                                           NVL (p_tco_spec_pk_13, 0),
                                           NVL (p_tco_spec_pk_14, 0),
                                           NVL (p_tco_spec_pk_15, 0),
                                           NVL (p_tco_spec_pk_16, 0),
                                           NVL (p_tco_spec_pk_17, 0),
                                           NVL (p_tco_spec_pk_18, 0),
                                           NVL (p_tco_spec_pk_19, 0),
                                           NVL (p_tco_spec_pk_20, 0)
                                          ))
                AND b.del_if = 0
                AND a.tlg_it_item_pk = b.pk
                AND b.tlg_it_stitem_pk = p_tco_stitem_pk
           GROUP BY a.tlg_it_item_pk
             HAVING COUNT (*) = l_count);

-------------------------------------------------------------------------
   RETURN NVL (l_rtn_item_pk, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_item_from_spec;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_KBCH00040;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_kbch00040 (
   p_tin_warehouse_pk    NUMBER,
   p_from_ym             VARCHAR2)
   RETURN NUMBER
IS
   /******************************************************************************
   ******************************************************************************/
   l_rtn_val   NUMBER;
BEGIN
   SELECT SUM (begin_qty) begin_qty
     INTO l_rtn_val
     FROM (SELECT (  NVL (a2.begin_qty, 0)
                   + NVL (a2.in_qty, 0)
                   - NVL (a2.out_qty, 0))
                     begin_qty,
                  NULL in_qty,
                  NULL or_in_qty,
                  NULL out_qty,
                  NULL or_out_qty
             FROM (SELECT SUM (begin_qty) begin_qty,
                          SUM (in_qty) in_qty,
                          SUM (out_qty) out_qty
                     FROM (SELECT b.end_qty begin_qty,
                                  NULL in_qty,
                                  NULL out_qty
                             FROM tlg_sa_stock_closing_m a,
                                  tlg_sa_stock_closing_d b
                            WHERE     a.del_if = 0
                                  AND (   a.tlg_in_warehouse_pk =
                                             p_tin_warehouse_pk
                                       OR p_tin_warehouse_pk IS NULL)
                                  AND (a.tlg_in_warehouse_pk, a.stock_date) IN
                                         (  SELECT b.tlg_in_warehouse_pk,
                                                   MAX (b.stock_date)
                                              FROM tlg_sa_stock_closing_m b
                                             WHERE     b.del_if = 0
                                                   AND b.stock_date <
                                                          p_from_ym || '01'
                                                   AND (   b.tlg_in_warehouse_pk =
                                                              p_tin_warehouse_pk
                                                        OR p_tin_warehouse_pk
                                                              IS NULL)
                                          GROUP BY b.tlg_in_warehouse_pk)
                                  AND b.del_if = 0
                                  AND a.pk = b.tlg_sa_stock_closing_m_pk
                                  AND NVL (b.end_qty, 0) <> 0
                           UNION ALL
                           SELECT NULL begin_qty,
                                  a.input_qty in_qty,
                                  a.output_qty out_qty
                             FROM tlg_in_stocktr a
                            WHERE     a.del_if = 0
                                  AND (   a.tlg_in_warehouse_pk =
                                             p_tin_warehouse_pk
                                       OR p_tin_warehouse_pk IS NULL)
                                  AND a.tr_date >
                                         NVL (
                                            (SELECT MAX (b.stock_date)
                                               FROM tlg_sa_stock_closing_m b
                                              WHERE     b.del_if = 0
                                                    AND b.stock_date <
                                                           p_from_ym || '01'
                                                    AND b.tlg_in_warehouse_pk =
                                                           a.tlg_in_warehouse_pk),
                                            '0')
                                  AND a.tr_date < p_from_ym || '01')) a2
           UNION ALL
           SELECT NULL begin_qty,
                  a.input_qty in_qty,
                  NULL or_in_qty,
                  NULL out_qty,
                  NULL or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trin_type IN ('I10', 'I20', 'I120')
           UNION ALL
           SELECT NULL begin_qty,
                  NULL in_qty,
                  NULL or_in_qty,
                  a.output_qty out_qty,
                  NULL or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trout_type IN ('O10', 'O20', 'O100', 'O120')
           UNION ALL
           SELECT NULL begin_qty,
                  NULL in_qty,
                  a.input_qty or_in_qty,
                  NULL out_qty,
                  NULL or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trin_type NOT IN ('I10', 'I20', 'I120')
           UNION ALL
           SELECT NULL begin_qty,
                  NULL in_qty,
                  NULL or_in_qty,
                  NULL out_qty,
                  a.output_qty or_out_qty
             FROM tlg_in_stocktr a
            WHERE     a.del_if = 0
                  AND a.tr_date BETWEEN p_from_ym || '01'
                                    AND p_from_ym || '31'
                  AND (   a.tlg_in_warehouse_pk = p_tin_warehouse_pk
                       OR p_tin_warehouse_pk IS NULL)
                  AND a.trout_type NOT IN ('O10', 'O20', 'O100', 'O120'));

   RETURN l_rtn_val;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END st_lg_f_get_kbch00040;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_LOGISTIC_CODENAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_logistic_codename (
   v_grpcode   IN   VARCHAR,
   v_code      IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_code_nm   VARCHAR2 (100);
BEGIN
   SELECT a.code_nm
     INTO l_code_nm
     FROM tlg_lg_code a, tlg_lg_code_group g
    WHERE a.tlg_lg_code_group_pk = g.pk
      AND g.GROUP_ID = v_grpcode
      AND a.del_if = 0
      AND a.code = v_code;

   RETURN l_code_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_f_get_logistic_codename;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_OVERSEA_PORT;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_oversea_port (p_code IN STRING)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
/******************************************************************************
   NAME:       SF_A_GET_ACNM
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        27/02/2008          1. Created this function.
******************************************************************************/
BEGIN
   l_rtn_value := '';
  SELECT    (code || ' ' || code_nm) into l_rtn_value
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = 'LGCM0240'--oversea_port
                    and code=p_code
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0;
   RETURN l_rtn_value;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PACKAGE_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_package_seq (
   p_pa_packing_wi_pk      NUMBER,
   p_pa_packages_type_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_package_seq   NUMBER;
BEGIN
   SELECT MAX (package_seq)
     INTO l_package_seq
     FROM tlg_pa_packages a
    WHERE del_if = 0
      AND close_yn = 'N'
      AND tlg_pa_packing_wi_pk = p_pa_packing_wi_pk
      AND tlg_pa_packages_type_pk = p_pa_packages_type_pk;

   RETURN NVL (l_package_seq, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_package_seq;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PARENT_COMP_PK;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_parent_comp_pk (
   p_style_pk          NUMBER,
   p_pt_component_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   rtn_parent_comp_pk   NUMBER;
   l_comp_level_00      NUMBER;
   l_comp_level_01      NUMBER;
   l_comp_level_02      NUMBER;
   l_comp_level_03      NUMBER;
   l_comp_level_04      NUMBER;
   l_comp_level_05      NUMBER;
BEGIN
   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_00
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = p_pt_component_pk
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk;

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_01
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = p_pt_component_pk
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_02
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_01
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_03
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_02
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_04
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_03
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   SELECT MAX (c.tlg_pt_component_pk)
     INTO l_comp_level_05
     FROM tlg_pt_process_comp a,
          tlg_pt_process_comp_in b,
          tlg_pt_process_comp_out c,
          tlg_pb_work_process d,
          tlg_pb_process e
    WHERE a.del_if = 0
      AND a.style_pk = p_style_pk
      AND b.del_if = 0
      AND a.pk = b.tlg_pt_process_comp_pk
      AND b.tlg_pt_component_pk = l_comp_level_04
      AND c.del_if = 0
      AND a.pk = c.tlg_pt_process_comp_pk
      AND d.del_if = 0
      AND a.tlg_pb_work_process_pk = d.pk
      AND e.del_if = 0
      AND d.tlg_pb_process_pk = e.pk
      AND e.process_type <> '30'
      AND e.process_type <> '40'
      AND e.process_type <> '50';

   IF (l_comp_level_05 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_05;
   ELSIF (l_comp_level_04 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_04;
   ELSIF (l_comp_level_03 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_03;
   ELSIF (l_comp_level_02 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_02;
   ELSIF (l_comp_level_01 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_01;
   ELSIF (l_comp_level_00 > 0)
   THEN
      rtn_parent_comp_pk := l_comp_level_00;
   END IF;

   RETURN rtn_parent_comp_pk;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END st_lg_f_get_parent_comp_pk;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PARTNER_ITEM_NAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_partner_item_name (
   p_partner_pk   IN   NUMBER,
   p_item_pk      IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_partner_item_name   VARCHAR2 (100);
BEGIN
   SELECT ctn.item_name
     INTO l_partner_item_name
     FROM tlg_it_partner_item ctn
    WHERE ctn.del_if = 0
      AND ctn.tco_buspartner_pk = p_partner_pk
      AND ctn.tlg_it_item_pk = p_item_pk;

   RETURN l_partner_item_name;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
END st_lg_f_get_partner_item_name;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PARTNER_ITEM_VALUE;

CREATE OR REPLACE FUNCTION HPDQ.ST_lg_f_get_partner_item_value(
   p_item_pk        IN  NUMBER,
   p_field_name     IN  VARCHAR2
)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (100);
BEGIN
    CASE WHEN UPPER(p_field_name) = 'ITEM_NAME' THEN
            SELECT A.ITEM_NAME INTO l_rtn_value
            FROM TLG_IT_PARTNER_ITEM A
            WHERE A.DEL_IF = 0 AND A.TLG_IT_ITEM_PK = p_item_pk
              AND ROWNUM = 1;
              
         WHEN UPPER(p_field_name) = 'ATT01' THEN
            SELECT A.ATT01 INTO l_rtn_value
            FROM TLG_IT_PARTNER_ITEM A
            WHERE A.DEL_IF = 0 AND A.TLG_IT_ITEM_PK = p_item_pk
              AND ROWNUM = 1;
              
         WHEN UPPER(p_field_name) = 'ATT02' THEN
            SELECT A.ATT02 INTO l_rtn_value
            FROM TLG_IT_PARTNER_ITEM A
            WHERE A.DEL_IF = 0 AND A.TLG_IT_ITEM_PK = p_item_pk
              AND ROWNUM = 1;
              
         WHEN UPPER(p_field_name) = 'ATT03' THEN
            SELECT A.ATT03 INTO l_rtn_value
            FROM TLG_IT_PARTNER_ITEM A
            WHERE A.DEL_IF = 0 AND A.TLG_IT_ITEM_PK = p_item_pk
              AND ROWNUM = 1;
              
    END CASE;

   RETURN l_rtn_value;
   
EXCEPTION
   WHEN NO_DATA_FOUND THEN RETURN NULL;
END;
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PATTERN;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_pattern (
   p_style_pk           IN   NUMBER,
   p_out_component_pk   IN   NUMBER
)
   RETURN VARCHAR
IS
   l_pattern   VARCHAR2 (100);
   l_comma     VARCHAR2 (1);
--------
BEGIN
   FOR l_cur IN (SELECT   c.seq
                     FROM tlg_pt_process_comp a,
                          tlg_pt_process_comp_out b,
                          tlg_pt_process_comp_in c
                    WHERE a.del_if = 0
                      AND a.close_yn = 'N'
                      AND a.style_pk = p_style_pk
                      AND b.del_if = 0
                      AND b.close_yn = 'N'
                      AND b.tlg_pt_component_pk > 0
                      AND b.tlg_pt_component_pk = p_out_component_pk
                      AND a.pk = b.tlg_pt_process_comp_pk
                      AND c.del_if = 0
                      AND c.close_yn = 'N'
                      AND a.pk = c.tlg_pt_process_comp_pk
                      AND c.seq IS NOT NULL
                 ORDER BY seq)
   LOOP
      l_pattern := l_pattern || l_comma || l_cur.seq;
      l_comma := ',';
   END LOOP;

   RETURN l_pattern;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_POP_PROD030;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_pop_prod030 (p_pt_process_comp_in_pk NUMBER)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   rtn_tes_lgpicture_pk   NUMBER;
BEGIN
   SELECT MAX (d.tlg_pt_picture_pk)
     INTO rtn_tes_lgpicture_pk
     FROM tlg_pt_process_comp_in a,
          tlg_pt_process_comp b,
          tlg_pt_process_comp c,
          tlg_pt_process_comp_out d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tlg_pt_process_comp_pk = b.pk
      AND c.del_if = 0
      AND b.style_pk = c.style_pk
      AND c.pk = d.tlg_pt_process_comp_pk
      AND a.tlg_pt_component_pk = d.tlg_pt_component_pk
      AND a.pk = p_pt_process_comp_in_pk;

   IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
   THEN
      SELECT MAX (c.tlg_pt_picture_pk)
        INTO rtn_tes_lgpicture_pk
        FROM tlg_pt_style_consumption a,
             tlg_pt_pattern_group b,
             tlg_pt_pattern_grpcom c,
             tlg_pt_process_comp_in d,
             tlg_pt_process_comp e
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_pt_pattern_group_pk = b.pk
         AND c.del_if = 0
         AND b.pk = c.tlg_pt_pattern_group_pk
         AND d.del_if = 0
         AND e.pk = d.tlg_pt_process_comp_pk
         AND a.st_prod_pk = e.style_pk
         AND d.tlg_pt_component_pk = c.tlg_pt_component_pk
         AND d.pk = p_pt_process_comp_in_pk;

      IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
      THEN
         SELECT MAX (b.tlg_pt_picture_pk)
           INTO rtn_tes_lgpicture_pk
           FROM tlg_pt_process_comp_in a, tlg_pt_component b
          WHERE a.del_if = 0
            AND b.del_if = 0
            AND a.tlg_pt_component_pk = b.pk
            AND a.pk = p_pt_process_comp_in_pk;
      END IF;
   END IF;

   RETURN rtn_tes_lgpicture_pk;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END st_lg_f_get_pop_prod030;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_POP_PROD270;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_pop_prod270 (
   p_style_pk          NUMBER,
   p_pt_component_pk   NUMBER,
   p_select            NUMBER
)
   RETURN VARCHAR
IS
/******************************************************************************
******************************************************************************/
   l_next_component   VARCHAR2 (100);
   l_select           NUMBER;
BEGIN
   l_select := p_select;

   FOR l_cur IN (SELECT DISTINCT d.pk, d.component_id, d.component_name
                            FROM tlg_pt_process_comp a,
                                 tlg_pt_process_comp_in b,
                                 tlg_pt_process_comp_out c,
                                 tlg_pt_component d
                           WHERE a.del_if = 0
                             AND a.style_pk = p_style_pk
                             AND b.del_if = 0
                             AND a.pk = b.tlg_pt_process_comp_pk
                             AND b.tlg_pt_component_pk = p_pt_component_pk
                             AND c.del_if = 0
                             AND a.pk = c.tlg_pt_process_comp_pk
                             AND d.del_if = 0
                             AND c.tlg_pt_component_pk = d.pk)
   LOOP
      IF p_select = 1
      THEN
         SELECT l_cur.pk
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 2
      THEN
         SELECT l_cur.component_id
           INTO l_next_component
           FROM DUAL;
      ELSIF p_select = 3
      THEN
         SELECT l_cur.component_name
           INTO l_next_component
           FROM DUAL;
      END IF;
   END LOOP;

   RETURN l_next_component;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_pop_prod270;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PO_STATUS;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_po_status (p_po_m_pk NUMBER)
   RETURN VARCHAR
IS
   l_value    VARCHAR2 (100);
   l_count    NUMBER;
   l_po_qty   NUMBER;
   l_in_qty   NUMBER;
   l_status   VARCHAR (2);
/*--------
   RETURN GRAVITY FOR ITEM
---------*/
BEGIN
   l_value := 'NOT PROCESS';

   SELECT   SUM (d.po_qty) po_qty, m.status
       INTO l_po_qty, l_status
       FROM tlg_po_po_d d, tlg_po_po_m m
      WHERE d.del_if = 0
        AND d.tlg_po_po_m_pk = p_po_m_pk
        AND m.del_if = 0
        AND m.pk = d.tlg_po_po_m_pk
   GROUP BY m.status;

   CASE l_status
      WHEN '1'
      THEN
         l_value := 'SAVE';
      WHEN '2'
      THEN
         l_value := 'SUBMIT';
      WHEN '3'
      THEN
         l_value := 'APPROVE';
      WHEN '4'
      THEN
         l_value := 'CANCEL';
   END CASE;

   SELECT SUM (d.in_qty)
     INTO l_in_qty
     FROM tlg_st_income_d d, tlg_po_po_d pod
    WHERE d.del_if = 0
      AND d.tlg_po_po_d_pk = pod.pk
      AND pod.del_if = 0
      AND pod.tlg_po_po_m_pk = p_po_m_pk;

   --- cannot get return data at this time ----
   IF NVL (l_in_qty, 0) = 0
   THEN
      RETURN l_value;
   ELSE
      IF NVL (l_po_qty, 0) > NVL (l_in_qty, 0)
      THEN
         l_value := 'PROCESSING';
      ELSE
         l_value := 'FINISHED';
      END IF;
   END IF;

   RETURN l_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_f_get_po_status;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PROCESS_PRICE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_process_price (
   p_partner_pk   NUMBER,
   p_style_pk     NUMBER,
   p_spec01_pk    NUMBER,
   p_spec02_pk    NUMBER,
   p_spec03_pk    NUMBER,
   p_spec04_pk    NUMBER,
   p_spec05_pk    NUMBER
)
   RETURN NUMBER
IS
   l_numofspec   NUMBER;
/******************************************************************************
******************************************************************************/
   l_price       NUMBER  := 0;
   l_valid       BOOLEAN := TRUE;
   l_count       NUMBER  := 0;
BEGIN
   FOR l_price_m IN (SELECT m.pk, NVL (m.specgrp01_pk, 0) specgrp01_pk,
                            NVL (m.specgrp02_pk, 0) specgrp02_pk,
                            NVL (m.specgrp03_pk, 0) specgrp03_pk,
                            NVL (m.specgrp04_pk, 0) specgrp04_pk,
                            NVL (m.specgrp05_pk, 0) specgrp05_pk, m.st_price,
                            m.partner_chk, m.item_chk
                       FROM tlg_it_process_price_m m
                      WHERE m.del_if = 0 AND m.use_yn = 'Y')
   LOOP
      l_valid := TRUE;

      /*----------count spec-------------*/
      FOR l_price_d IN (SELECT d.tlg_it_stitem_pk, d.tco_buspartner_pk,
                               d.spec01_pk, d.spec02_pk, d.spec03_pk,
                               d.spec04_pk, d.spec05_pk, d.process_fee
                          FROM tlg_it_process_price_d d
                         WHERE d.del_if = 0
                           AND d.use_yn = 'Y'
                           AND d.tlg_it_process_price_m_pk = l_price_m.pk)
      LOOP
         /*----------count spec-------------*/
         l_numofspec := 0;

         IF l_price_d.spec01_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec02_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec03_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec04_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         IF l_price_d.spec05_pk <> 0
         THEN
            l_numofspec := l_numofspec + 1;
         END IF;

         /*------------partner --------------*/
         IF l_price_m.partner_chk = 'Y'
         THEN
            IF NVL (l_price_d.tco_buspartner_pk, 0) = NVL (p_partner_pk, 0)
            THEN
               l_valid := TRUE;
            ELSE
               l_valid := FALSE;
            END IF;
         ELSE
            l_valid := TRUE;
         END IF;

         /*style*/
         IF l_price_m.item_chk = 'Y'
         THEN
            IF NVL (l_price_d.tlg_it_stitem_pk, 0) = NVL (p_style_pk, 0)
            THEN
               l_valid := l_valid AND TRUE;
            ELSE
               l_valid := FALSE;
            END IF;
         ELSE
            l_valid := l_valid AND TRUE;
         END IF;

         /*spec*/
         SELECT COUNT (*)
           INTO l_count
           FROM (SELECT p_spec01_pk spec
                   FROM DUAL
                  WHERE p_spec01_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec02_pk spec
                   FROM DUAL
                  WHERE p_spec02_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec03_pk spec
                   FROM DUAL
                  WHERE p_spec03_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec04_pk spec
                   FROM DUAL
                  WHERE p_spec04_pk IS NOT NULL
                 UNION ALL
                 SELECT p_spec05_pk spec
                   FROM DUAL
                  WHERE p_spec05_pk IS NOT NULL) in_data
          WHERE in_data.spec IN
                   (l_price_d.spec01_pk,
                    l_price_d.spec02_pk,
                    l_price_d.spec03_pk,
                    l_price_d.spec04_pk,
                    l_price_d.spec05_pk
                   );

         IF l_count = l_numofspec
         THEN
            l_valid := l_valid AND TRUE;
         ELSE
            l_valid := FALSE;
         END IF;

         IF l_valid = TRUE
         THEN
            l_price := l_price + NVL (l_price_d.process_fee, 0);
            EXIT;
         END IF;
      END LOOP;

      IF l_valid = FALSE
      THEN
         l_price := l_price + NVL (l_price_m.st_price, 0);
      END IF;
   END LOOP;

   RETURN l_price;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_process_price;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_PROD170_SW_SIZE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_prod170_sw_size (
   p__pk   NUMBER,
   p_tco_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tco_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_tco_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_get_prod170_sw_size;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_QTY_BY_UOM;

CREATE OR REPLACE FUNCTION HPDQ.ST_LG_F_GET_QTY_BY_UOM (
   P_QTY          NUMBER,
   P_UOM          VARCHAR2,
   P_BW           NUMBER,                                             --SPEC 1
   P_WIDTH        NUMBER,                                             --SPEC 2
   P_LENGTH       NUMBER,                                             --SPEC 3
   P_F_BW         NUMBER,                                             --SPEC 4
   P_GLUE         NUMBER,                                             --SPEC 5
   P_BW_NONE      NUMBER,                                             --SPEC 6
   P_WIDTH_NONE   NUMBER,                                             --SPEC 7
   P_OUT_UOM      VARCHAR2                             --SUPPORT FOR ROLL,M,KG
                          )
   RETURN NUMBER
IS
   L_RTN_VALUE  NUMBER;
BEGIN
 /*  IF NVL (P_GLUE, 0) = 0
   OR NVL (P_BW_NONE, 0) = 0
   OR NVL (P_WIDTH_NONE, 0) = 0
   THEN
      IF P_OUT_UOM = P_UOM
      OR NVL (P_BW, 0) = 0
      OR NVL (P_WIDTH, 0) = 0
      OR NVL (P_LENGTH, 0) = 0
      THEN
         L_RTN_VALUE := P_QTY;
      ELSIF P_OUT_UOM = 'ROLL'
      THEN                                                    --DAU RA LA ROLL
         IF P_UOM = 'SQM'
         THEN
            L_RTN_VALUE := P_QTY * 1000 / (P_WIDTH * P_LENGTH);
         ELSE                                                             --KG
            L_RTN_VALUE := P_QTY * 1000000 / (P_WIDTH * P_LENGTH * P_BW);
         END IF;
      ELSIF P_OUT_UOM = 'SQM'
      THEN                                                       --DAU RA LA M
         IF P_UOM = 'ROLL'
         THEN
            L_RTN_VALUE := P_QTY * (P_WIDTH * P_LENGTH) / 1000;
         ELSE                                                             --KG
            L_RTN_VALUE := ROUND (P_QTY * 1000 / P_BW, 6);
         END IF;
      ELSIF P_OUT_UOM = 'KG'
      THEN                                                      --DAU RA LA KG
         IF P_UOM = 'ROLL'
         THEN
            L_RTN_VALUE := P_QTY * (P_WIDTH / 1000000 * P_LENGTH * P_BW);
         ELSE                                                            --SQM
            L_RTN_VALUE := ROUND (P_QTY * P_BW / 1000, 6);
         END IF;
      ELSE
         L_RTN_VALUE := 0;
      END IF;
   ELSE                     -- // truong hop: full va haft half lami co 6 spec
      IF P_OUT_UOM = P_UOM
      OR NVL (P_F_BW, 0) = 0
      OR NVL (P_WIDTH, 0) = 0
      OR NVL (P_LENGTH, 0) = 0
      THEN
         L_RTN_VALUE := P_QTY;
      ELSIF P_OUT_UOM = 'ROLL'
      THEN                                                    --DAU RA LA ROLL
         IF P_UOM = 'SQM'
         THEN
            L_RTN_VALUE := P_QTY * 1000 / (P_WIDTH_NONE * P_LENGTH);
         ELSE                                                             --KG
            L_RTN_VALUE      :=
                 P_QTY
               * 1000000
               / (  ( (P_F_BW + P_GLUE) * P_WIDTH + (P_BW_NONE * P_WIDTH_NONE))
                  * P_LENGTH);
         END IF;
      ELSIF P_OUT_UOM = 'SQM'
      THEN                                                       --DAU RA LA M
         IF P_UOM = 'ROLL'
         THEN
            L_RTN_VALUE := P_QTY * (P_WIDTH_NONE * P_LENGTH) / 1000;
         ELSE                                                             --KG
            L_RTN_VALUE      :=
               ROUND (
                    P_QTY
                  * (  (  (  (P_F_BW + P_GLUE) * P_WIDTH
                           + (P_BW_NONE * P_WIDTH_NONE))
                        * P_LENGTH
                        / 1000000)
                     / ( (P_WIDTH_NONE * P_LENGTH) / 1000)),
                  6);
         END IF;
      ELSIF P_OUT_UOM = 'KG'
      THEN                                                      --DAU RA LA KG
         IF P_UOM = 'ROLL'
         THEN
            L_RTN_VALUE      :=
                 P_QTY
               * (  ( (P_F_BW + P_GLUE) * P_WIDTH + (P_BW_NONE * P_WIDTH_NONE))
                  * P_LENGTH
                  / 1000000);
         ELSE                                                            --SQM
            L_RTN_VALUE      :=
               ROUND (
                    P_QTY
                  * (  ( (P_WIDTH_NONE * P_LENGTH) / 1000)
                     / (  (  (P_F_BW + P_GLUE) * P_WIDTH
                           + (P_BW_NONE * P_WIDTH_NONE))
                        * P_LENGTH
                        / 1000000)),
                  6);
         END IF;
      ELSE
         L_RTN_VALUE := 0;
      END IF;
   END IF;
*/
   RETURN ROUND (L_RTN_VALUE, 6);
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_QUO_UNIT_PRICE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_quo_unit_price (
   p_tlg_it_item_pk       NUMBER,
   p_tco_buspartner_pk    NUMBER,
   p_tlg_po_dept_pk       NUMBER,
   p_price_date           VARCHAR2,
   p_uom                  VARCHAR2)
   RETURN NUMBER
IS
   l_unit_price   NUMBER;
BEGIN
   SELECT MAX (b1.unit_price)
     INTO l_unit_price
     FROM TLG_MT_PUR_PRICE_M a1, TLG_MT_PUR_PRICE_d b1
    WHERE     b1.del_if = 0
          AND b1.tlg_it_item_pk = p_tlg_it_item_pk
          AND a1.pk = b1.tlg_mt_pur_price_m_pk
          AND p_price_date BETWEEN NVL (a1.start_date, p_price_date)
                               AND NVL (a1.end_date, p_price_date)
          AND (   NVL (b1.tlg_po_dept_pk, a1.tlg_po_dept_pk) =
                     p_tlg_po_dept_pk
               OR NVL (b1.tlg_po_dept_pk, a1.tlg_po_dept_pk) IS NULL)
          AND a1.tco_buspartner_pk = p_tco_buspartner_pk;

   RETURN NVL (l_unit_price, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_quo_unit_price;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_REPORT_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_report_seq (
   p_report_id   VARCHAR,
   p_slip_no     VARCHAR,
   p_user        VARCHAR
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_seq   NUMBER;
BEGIN
   SELECT COUNT (a.pk)
     INTO l_seq
     FROM tlg_lg_report_print_hist a
    WHERE a.del_if = 0
      AND a.report_id = p_report_id
      AND a.slip_no = p_slip_no
      AND a.user_id = p_user;

   RETURN NVL (l_seq, 1);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 1;
END st_lg_f_get_report_seq;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SALE080;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_sale080 (
   p_tlg_sa_saleorder_d_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_package_seq   NUMBER;
BEGIN
   SELECT MAX (a.package_seq)
     INTO l_package_seq
     FROM tlg_pa_packages a, tlg_pa_packages_item b
    WHERE a.del_if = 0
      AND a.close_yn = 'N'
      AND b.del_if = 0
      AND a.pk = b.tlg_pa_packages_pk
      AND b.tlg_sa_saleorder_d_pk = p_tlg_sa_saleorder_d_pk;

   RETURN NVL (l_package_seq, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_sale080;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SALE090_PO_NO;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_sale090_po_no (p_pa_packages_pk NUMBER)
   RETURN VARCHAR2
IS
   l_po_no     VARCHAR2 (1000);
   l_connect   VARCHAR2 (1);
/******************************************************************************
 ******************************************************************************/
BEGIN
   FOR l_cur IN (SELECT DISTINCT b.po_no
                            FROM tlg_pa_packages_item a, vlg_sa_sale_order b
                           WHERE a.del_if = 0
                             AND a.tlg_pa_packages_pk = p_pa_packages_pk
                             AND a.tlg_sa_saleorder_d_pk =
                                                       b.tlg_sa_saleorder_d_pk
                        ORDER BY b.po_no)
   LOOP
      l_po_no := l_po_no || l_connect || l_cur.po_no;
      l_connect := '*';
   END LOOP;

   RETURN l_po_no;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_f_get_sale090_po_no;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SLIPNO_DORCO;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_slipno_dorco (
   p_slip_type   VARCHAR,
   p_yyyymmdd    VARCHAR,
   p_wh_pk       NUMBER
)
   RETURN VARCHAR
IS
   l_slipno   VARCHAR (20);
   l_seq      NUMBER       := NULL;
   l_date     VARCHAR (6)  := SUBSTR (p_yyyymmdd, 1, 6);
   l_wh_id    VARCHAR (10);
/******************************************************************************
******************************************************************************/
BEGIN
   SELECT MAX (wh_id)
     INTO l_wh_id
     FROM tlg_in_warehouse
    WHERE del_if = 0 AND pk = p_wh_pk;

   CASE p_slip_type
      WHEN 'IN'
      THEN                                                          --incoming
         l_slipno := 'PNI';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_income_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.in_date, 1, 6) = l_date
            AND m.tlg_in_warehouse_pk = p_wh_pk;

         l_seq := NVL (l_seq, 0) + 1;
         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'OUT'
      THEN                                                         -- outgoing
         l_slipno := 'PXO';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_outgo_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.out_date, 1, 6) = l_date
            AND m.out_wh_pk = p_wh_pk;

         -- AND m.out_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'PROD-OUT'
      THEN                                                         -- outgoing
         l_slipno := 'PXO';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_pr_prod_outgo_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.prod_date, 1, 6) = l_date
            AND m.tlg_in_warehouse_pk = p_wh_pk;

         -- AND m.out_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'RS'
      THEN                                               -- return to supplier
         l_slipno := 'PXR';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_outgo_return_m m
          WHERE m.del_if = 0 AND SUBSTR (m.re_date, 1, 6) = l_date;

         -- AND m.re_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'RL'
      THEN                                                 -- return from line
         l_slipno := 'PNR';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_income_return_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.re_date, 1, 6) = l_date
            AND re_wh_pk = p_wh_pk;

         --  AND m.re_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'EX'
      THEN                                                   -- stock exchange
         l_slipno := 'PE';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_exchange_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.ex_date, 1, 6) = l_date
            AND m.ex_wh_pk = p_wh_pk;

         -- AND m.tr_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'TRANS'
      THEN                                                    -- stock tranfer
         l_slipno := 'PT';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_transfer_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.tr_date, 1, 6) = l_date
            AND m.out_wh_pk = p_wh_pk;

         -- AND m.ex_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'DISCARD'
      THEN                                                    -- stock discard
         l_slipno := 'PXD';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_st_discard_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.out_date, 1, 6) = l_date
            AND m.out_wh_pk = p_wh_pk;

         -- AND m.out_date > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
--------------------------------------------------------------------------
   WHEN 'PRO-IN'
      THEN                                                   -- PRODUCT INCOMe
         l_slipno := 'PNP';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_pr_prod_income_m m
          WHERE m.del_if = 0
            AND SUBSTR (m.prod_date, 1, 6) = l_date
            AND tlg_in_warehouse_pk = p_wh_pk;

         --  AND m.PROD_DATE  > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || l_wh_id
            || LPAD (l_seq, 4, '0');
      WHEN 'DELI'
      THEN                                                -- PRODUCT  Delivery
         l_slipno := 'PXD';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_gd_outgo_m m
          WHERE m.del_if = 0 AND SUBSTR (m.out_date, 1, 6) = l_date;

         -- AND m.OUT_DATE > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
            l_slipno || SUBSTR (p_yyyymmdd, 3, 4) || '-'
            || LPAD (l_seq, 4, '0');
      WHEN 'GDR'
      THEN                                        -- PRODUCT  Delivery Request
         l_slipno := 'PYD';

         SELECT MAX (SUBSTR (m.slip_no, -4))
           INTO l_seq
           FROM tlg_gd_req_m m
          WHERE m.del_if = 0 AND SUBSTR (m.req_date, 1, 6) = l_date;

         -- AND m.OUT_DATE > '20111031';
         IF l_seq IS NULL
         THEN
            l_seq := 1;
         ELSE
            l_seq := l_seq + 1;
         END IF;

         l_slipno :=
               l_slipno
            || SUBSTR (p_yyyymmdd, 3, 4)
            || '-'
            || 'F1'
            || LPAD (l_seq, 4, '0');
   END CASE;

   RETURN l_slipno;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN NULL;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_code (p_tco_spec_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (a.spec_id)
     INTO l_spec_id
     FROM tlg_it_spec a
    WHERE a.del_if = 0 AND a.pk = p_tco_spec_pk;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_code;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_CODE_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_code_01_item (
   p_seq           IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_id)
     INTO l_spec_id
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND e.tlg_it_specgrp_pk = b.tlg_it_specgrp_pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND e.seq = p_seq;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_code_01_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_CODE_01_ST;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_code_01_st (
   p_seq             IN   VARCHAR2,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_id)
     INTO l_spec_id
     FROM tlg_it_stitemspec a,
          tlg_it_spec b,
          tlg_it_stitem c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_stitem_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_code_01_st;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_CODE_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_code_02_item (
   p_specgrp_type   IN   VARCHAR2,
   p_tco_item_pk    IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_id   VARCHAR2 (50);
--------
BEGIN
   SELECT MAX (b.spec_id)
     INTO l_spec_id
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND f.del_if = 0
      AND b.tlg_it_specgrp_pk = f.pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_id;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_code_02_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_name (p_tco_spec_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT a.spec_nm
     INTO l_spec_nm
     FROM tlg_it_spec a
    WHERE a.del_if = 0 AND pk = p_tco_spec_pk;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_spec_name;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NAME_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_name_01_item (
   p_specgrp_nm    IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND f.del_if = 0
      AND b.tlg_it_specgrp_pk = f.pk
      AND f.specgrp_nm = UPPER (p_specgrp_nm);

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_name_01_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NAME_01_ST;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_name_01_st (
   p_specgrp_type    IN   NUMBER,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_stitemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_name_01_st;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NAME_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_name_02_item (
   p_seq           IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_name_02_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NAME_02_ST;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_name_02_st (
   p_seq             IN   VARCHAR2,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_stitemspec a,
          tlg_it_spec b,
          tlg_it_stitem c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_stitem_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_name_02_st;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NAME_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_name_03_item (
   p_specgrp_type   IN   NUMBER,
   p_tco_item_pk    IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_name_03_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NAME_04_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_name_04_item (
   p_plan_spec_seq   IN   VARCHAR2,
   p_tco_item_pk     IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.plan_spec_seq = p_plan_spec_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_name_04_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_NM_BY_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_nm_by_seq (
   p_tlg_it_item_pk           IN   VARCHAR2,
   p_specgrp_seq                  IN   varchar2
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
    
    select c.spec_nm into l_spec_nm from tlg_it_item a,tlg_it_itemspec b,tlg_it_spec c,tlg_it_specgrp d,tlg_it_grpspecgrp e
    where a.del_if=0 and b.del_if=0 and c.del_if=0 and d.del_if=0 and e.del_if=0 
    and a.pk=b.tlg_it_item_pk and B.TLG_IT_SPEC_PK=c.pk 
    and E.TLG_IT_SPECGRP_PK=d.pk 
    and a.tlg_it_itemgrp_pk=e.tlg_it_itemgrp_pk
    and C.TLG_IT_SPECGRP_PK=d.pk
    and a.pk=p_tlg_it_item_pk
    and e.seq=p_specgrp_seq;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_spec_nm_by_seq;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_PK_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_pk_01_item (
   p_specgrp_type   IN   NUMBER,
   p_tco_item_pk    IN   NUMBER
)
   RETURN NUMBER
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND f.del_if = 0
      AND b.tlg_it_specgrp_pk = f.pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_pk;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_pk_01_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_PK_01_ST;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_pk_01_st (
   p_seq                  VARCHAR2,
   p_tco_stitem_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_stitemspec a,
          tlg_it_spec b,
          tlg_it_stitem c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_stitem_pk = p_tco_stitem_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_stitem_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_pk;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_get_spec_pk_01_st;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_PK_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_pk_02_item (
   p_seq                VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN l_spec_pk;
END st_lg_f_get_spec_pk_02_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_PK_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_pk_03_item (
   p_plan_spec_seq        VARCHAR2,
   p_tco_item_pk     IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_pk   NUMBER;
--------
BEGIN
   SELECT MAX (a.tlg_it_spec_pk)
     INTO l_spec_pk
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.plan_spec_seq = p_plan_spec_seq;

   RETURN l_spec_pk;
END st_lg_f_get_spec_pk_03_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_VALUE_01_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_value_01_item (
   p_seq           IN   VARCHAR2,
   p_tco_item_pk   IN   NUMBER
)
   RETURN NUMBER
IS
   l_spec_value   NUMBER;
--------
BEGIN
   SELECT MAX (b.spec_value)
     INTO l_spec_value
     FROM tlg_it_itemspec a,
          tlg_it_spec b,
          tlg_it_item c,
          tlg_it_grpspecgrp e
    WHERE a.del_if = 0
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND b.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND c.del_if = 0
      AND a.tlg_it_item_pk = c.pk
      AND e.del_if = 0
      AND c.tlg_it_itemgrp_pk = e.tlg_it_itemgrp_pk
      AND b.tlg_it_specgrp_pk = e.tlg_it_specgrp_pk
      AND e.seq = p_seq;

   RETURN NVL (l_spec_value, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_spec_value_01_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_VALUE_02_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_value_02_item (
   p_specgrp_type   IN   VARCHAR2,
   p_tco_item_pk    IN   NUMBER
)
   RETURN NUMBER
IS
   l_spec_value   NUMBER;
BEGIN
   SELECT MAX (b.spec_value)
     INTO l_spec_value
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN NVL (l_spec_value, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 0;
END st_lg_f_get_spec_value_02_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_SPEC_VALUE_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_spec_value_03_item (p_tco_spec_pk IN NUMBER)
   RETURN NUMBER
IS
   l_spec_value   NUMBER;
--------
BEGIN
   SELECT MAX (a.spec_value)
     INTO l_spec_value
     FROM tlg_it_spec a
    WHERE a.del_if = 0 AND a.pk = p_tco_spec_pk;

   RETURN NVL (l_spec_value, 0);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_spec_value_03_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_TIME_DIFF;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_time_diff (date_1   IN DATE,
                                               date_2   IN DATE)
   RETURN NUMBER
IS
   ndate_1     NUMBER;
   ndate_2     NUMBER;
   nsecond_1   NUMBER (5, 0);
   nsecond_2   NUMBER (5, 0);
   /*-----------------------------*/
   l_date_1    DATE;
   l_date_2    DATE;
BEGIN
   IF date_2 > date_1
   THEN
      ndate_1 := TO_NUMBER (TO_CHAR (date_1, 'J'));
      ndate_2 := TO_NUMBER (TO_CHAR (date_2, 'J'));

      IF (ndate_2 = ndate_1)
      THEN
         IF (TO_CHAR (date_1, 'HH24:MI') < '07:30')
         THEN
            l_date_1 := TO_DATE ('07:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_1, 'HH24:MI') > '11:30'
                AND TO_CHAR (date_1, 'HH24:MI') < '12:30')
         THEN
            l_date_1 := TO_DATE ('12:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_1, 'HH24:MI') > '18:20'
                AND TO_CHAR (date_1, 'HH24:MI') < '18:50')
         THEN
            l_date_1 := TO_DATE ('18:50', 'HH24:30');
         ELSIF (TO_CHAR (date_1, 'HH24:MI') > '20:20')
         THEN
            l_date_1 := TO_DATE ('20:20', 'HH24:30');
         ELSE
            l_date_1 := date_1;
         END IF;

         IF (TO_CHAR (date_2, 'HH24:MI') < '07:30')
         THEN
            l_date_2 := TO_DATE ('07:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_2, 'HH24:MI') > '11:30'
                AND TO_CHAR (date_2, 'HH24:MI') < '12:30')
         THEN
            l_date_2 := TO_DATE ('12:30', 'HH24:30');
         ELSIF (    TO_CHAR (date_2, 'HH24:MI') > '18:20'
                AND TO_CHAR (date_2, 'HH24:MI') < '18:50')
         THEN
            l_date_2 := TO_DATE ('18:50', 'HH24:30');
         ELSIF (TO_CHAR (date_2, 'HH24:MI') > '20:20')
         THEN
            l_date_2 := TO_DATE ('20:20', 'HH24:30');
         ELSE
            l_date_2 := date_2;
         END IF;

         nsecond_1 := TO_NUMBER (TO_CHAR (l_date_1, 'SSSSS'));
         nsecond_2 := TO_NUMBER (TO_CHAR (l_date_2, 'SSSSS'));
         RETURN (nsecond_2 - nsecond_1);
      ELSE
         nsecond_1 := TO_NUMBER (TO_CHAR (date_1, 'SSSSS'));
         nsecond_2 := TO_NUMBER (TO_CHAR (date_2, 'SSSSS'));
         RETURN ( ( (ndate_2 - ndate_1) * 86400) + (nsecond_2 - nsecond_1));
      END IF;
   END IF;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_GET_WAREHOUSE_NM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_get_warehouse_nm (
   p_tin_warehouse_pk   IN   VARCHAR2
)
   RETURN VARCHAR2
IS
   l_wh_name   VARCHAR (100);
BEGIN
   SELECT a.wh_name
     INTO l_wh_name
     FROM tlg_in_warehouse a
    WHERE a.pk = p_tin_warehouse_pk;

   RETURN l_wh_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_get_warehouse_nm;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_IE_GETSYSDATE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_F_IE_GETsysdate
   RETURN date
IS
/******************************************************************************
   ---
******************************************************************************/
   l_rtn_val        date;
--------------------------------
BEGIN
   l_rtn_val := sysdate;
-------------------------------------
   RETURN l_rtn_val;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_F_IE_GETsysdate;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_LOGISTIC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_logistic_code (v_grp IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   code, (code || ' ' || code_nm) code_nm
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = v_grp
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY a.def_yn DESC, ord)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_f_logistic_code;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_MEASURE_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_measure_convert (p_tco_item_pk   IN NUMBER,
                                                 p_trans_uom     IN VARCHAR2)
   RETURN NUMBER
IS
   l_trans_rate   NUMBER;

   l_item_code    VARCHAR2 (100);
   l_item_uom     VARCHAR2 (50);
BEGIN
   SELECT MAX (c.trans_rate), MAX (d.uom), MAX (d.item_code)
     INTO l_trans_rate, l_item_uom, l_item_code
     FROM tlg_it_itemmeasure c, tlg_it_item d
    WHERE     c.del_if = 0
          AND c.trans_uom = p_trans_uom
          AND c.tlg_it_item_pk = p_tco_item_pk
          AND d.del_if = 0
          AND c.tlg_it_item_pk = d.pk
          AND c.trans_uom <> d.uom;

   IF     (l_trans_rate <= 0 OR l_trans_rate IS NULL)
      AND (l_item_uom <> p_trans_uom)
   THEN
      raise_application_error (
         -20999,
         'PLS CHECK MEASUREMENT EXCHANGE FOR ITEM ' || l_item_code);
   END IF;

   RETURN NVL (l_trans_rate, 1);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 1;
END st_lg_f_measure_convert;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_RPT_FPPR00313;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_rpt_fppr00313 (
   p_prod_date         IN VARCHAR2,
   p_work_shift        IN VARCHAR2,
   p_tlg_pb_line_pk    IN NUMBER,
   p_work_process_pk   IN NUMBER,
   p_item_pk           IN NUMBER)
   RETURN VARCHAR2
IS
   l_charger   VARCHAR (200);
   l_comma     VARCHAR2 (3);
BEGIN
   FOR l_cur
      IN (  SELECT b.emp_id, b.full_name
              FROM tlg_pr_prod_income_emp a, thr_employee b
             WHERE     a.del_if = 0
                   AND a.prod_date = p_prod_date
                   AND a.work_shift = p_work_shift
                   AND a.tlg_pb_line_pk = p_tlg_pb_line_pk
                   AND NVL (a.TLG_PB_WORK_PROCESS_PK, 0) =
                          NVL (p_work_process_pk, 0)
                   AND a.tlg_it_item_pk = p_item_pk
                   AND b.del_if(+) = 0
                   AND a.charger_pk = b.pk(+)
          ORDER BY a.seq)
   LOOP
      IF (l_charger = '' OR l_charger IS NULL)
      THEN
         l_charger := l_cur.emp_id || ' - ' || l_cur.full_name;
      ELSE
         l_charger :=
            l_charger || CHR (10) || l_cur.emp_id || ' - ' || l_cur.full_name;
      END IF;
   END LOOP;

   RETURN l_charger;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_rpt_fppr00313;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_RPT_FPPR00313_1;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_rpt_fppr00313_1 (
   p_prod_date         IN VARCHAR2,
   p_work_shift        IN VARCHAR2,
   p_tlg_pb_line_pk    IN NUMBER,
   p_work_process_pk   IN NUMBER,
   p_item_pk           IN NUMBER)
   RETURN VARCHAR2
IS
   l_remark   VARCHAR (200);
   l_comma    VARCHAR2 (3);
BEGIN
   FOR l_cur
      IN (  SELECT a.description
              FROM tlg_pr_none_work a
             WHERE     a.del_if = 0
                   AND a.fr_dt = p_prod_date
                   AND a.work_shift = p_work_shift
                   AND a.tlg_pb_line_pk = p_tlg_pb_line_pk
                   AND NVL (a.TLG_PB_WORK_PROCESS_PK, 0) =
                          NVL (p_work_process_pk, 0)
                   AND a.tlg_it_item_pk = p_item_pk
          ORDER BY a.seq)
   LOOP
      l_remark := l_remark || l_comma || l_cur.description;

      l_comma := ' ; ';
   END LOOP;

   RETURN l_remark;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_f_rpt_fppr00313_1;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_SEQUENCE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_sequence (v_user IN VARCHAR2)
   RETURN VARCHAR2
IS
   PRAGMA AUTONOMOUS_TRANSACTION;
/******************************************************************************



   select st_lg_f_sequence('GENUWIN') from dual

******************************************************************************/
   l_sql   VARCHAR2 (4000) := NULL;
   l_cnt   NUMBER          := 0;
--------
BEGIN
--------
   FOR c1 IN (SELECT table_name
                FROM all_all_tables
               WHERE owner = UPPER (v_user) AND table_name LIKE 'TLG_%')
   LOOP
      SELECT COUNT (*)
        INTO l_cnt
        FROM all_objects
       WHERE owner = UPPER (v_user)
         AND object_type = 'SEQUENCE'
         AND object_name = UPPER (c1.table_name) || '_SEQ';

      IF l_cnt > 0
      THEN
         BEGIN
            l_sql :=
                 'DROP SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ';

            EXECUTE IMMEDIATE l_sql;

            l_sql := 'SELECT nvl(MAX(PK),0)+1 from ' || c1.table_name;

            EXECUTE IMMEDIATE l_sql
                         INTO l_cnt;

            l_sql :=
                  'create SEQUENCE '
               || v_user
               || '.'
               || c1.table_name
               || '_SEQ start with '
               || l_cnt;

            EXECUTE IMMEDIATE l_sql;

            IF UPPER (v_user) = 'COMM'
            THEN
               SELECT COUNT (*)
                 INTO l_cnt
                 FROM all_objects
                WHERE owner = 'PUBLIC'
                  AND object_type = 'SYNONYM'
                  AND object_name = UPPER (c1.table_name) || '_SEQ';

               IF l_cnt = 0
               THEN
                  l_sql :=
                        'CREATE PUBLIC SYNONYM '
                     || c1.table_name
                     || '_SEQ FOR '
                     || v_user
                     || '.'
                     || c1.table_name
                     || '_SEQ';

                  EXECUTE IMMEDIATE l_sql;
               END IF;

               l_sql :=
                     'grant select on '
                  || v_user
                  || '.'
                  || c1.table_name
                  || '_SEQ to public';

               EXECUTE IMMEDIATE l_sql;

               SELECT COUNT (*)
                 INTO l_cnt
                 FROM all_objects
                WHERE owner = 'PUBLIC'
                  AND object_type = 'SYNONYM'
                  AND object_name = UPPER (c1.table_name);

               IF l_cnt = 0
               THEN
                  l_sql :=
                        'CREATE PUBLIC SYNONYM '
                     || c1.table_name
                     || ' FOR '
                     || v_user
                     || '.'
                     || c1.table_name;

                  EXECUTE IMMEDIATE l_sql;
               END IF;

               l_sql :=
                     'grant select on '
                  || v_user
                  || '.'
                  || c1.table_name
                  || ' to public';

               EXECUTE IMMEDIATE l_sql;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;
      ELSE
         BEGIN
            l_sql :=
               'create SEQUENCE ' || v_user || '.' || c1.table_name || '_SEQ';

            EXECUTE IMMEDIATE l_sql;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;
      END IF;
   END LOOP;

   RETURN 'reset sequence is successful';
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN l_sql || SQLERRM;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_F_UOM_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_f_uom_convert (
   p_item_uom   IN   VARCHAR2,
   p_cnv_uom    IN   VARCHAR2
)
   RETURN NUMBER
IS
   l_trans_rate   NUMBER;
BEGIN
   SELECT MAX (c.cnv_ratio_01)
     INTO l_trans_rate
     FROM tlg_it_uom c
    WHERE c.del_if = 0 AND c.uom_code = p_item_uom
          AND c.cnv_uom_01 = p_cnv_uom;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_02)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_02 = p_cnv_uom;
   END IF;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_03)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_03 = p_cnv_uom;
   END IF;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_04)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_04 = p_cnv_uom;
   END IF;

   IF (l_trans_rate <= 0 OR l_trans_rate IS NULL)
   THEN
      SELECT MAX (c.cnv_ratio_05)
        INTO l_trans_rate
        FROM tlg_it_uom c
       WHERE c.del_if = 0
         AND c.uom_code = p_item_uom
         AND c.cnv_uom_05 = p_cnv_uom;
   END IF;

   RETURN l_trans_rate;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_f_uom_convert;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_AGCI00100;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_agci00100 (
   p_tlg_it_itemgrp_pk   NUMBER,
   p_tlg_it_stitem_pk    NUMBER,
   p_item_code           VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_check            NUMBER;
--------------------------------
   l_itemseq_length   NUMBER;
   l_item_seq         NUMBER;
   l_item_code        VARCHAR2 (50);
--------------------------------
BEGIN
   SELECT MAX (itemseq_length)
     INTO l_itemseq_length
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_tlg_it_itemgrp_pk;

   IF l_itemseq_length > 0
   THEN
      SELECT MAX (item_seq)
        INTO l_item_seq
        FROM tlg_it_item
       WHERE del_if = 0
         AND tlg_it_itemgrp_pk = p_tlg_it_itemgrp_pk
         AND tlg_it_stitem_pk = p_tlg_it_stitem_pk
         AND item_code LIKE UPPER (p_item_code) || '%';

      IF TO_NUMBER (l_item_seq) >=
                     TO_NUMBER (LPAD (' ', NVL (l_itemseq_length, 0) + 1, '9'))
      THEN
         raise_application_error (-20999,
                                  'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                                 );
      END IF;

      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                  UPPER (p_item_code)
                  || LPAD (l_item_seq, l_itemseq_length, 0);
   ELSE
      l_item_code := p_item_code;
   END IF;

   SELECT MAX (pk)
     INTO l_check
     FROM tlg_it_item
    WHERE del_if = 0 AND item_code = UPPER (l_item_code);

   WHILE (l_check > 0 AND NVL (l_item_seq, 0) < 10000)
   LOOP
      l_item_seq := NVL (l_item_seq, 0) + 1;
      l_item_code :=
                 UPPER (p_item_code)
                 || LPAD (l_item_seq, l_itemseq_length, 0);

      SELECT MAX (pk)
        INTO l_check
        FROM tlg_it_item
       WHERE del_if = 0 AND item_code = UPPER (l_item_code);
   END LOOP;

-------------------------------------
   RETURN l_item_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_get_agci00100;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_AGCI00110;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_agci00110 (
   p_lit_itemgrp_pk   NUMBER,
   p_lit_stitem_pk    NUMBER,
   p_item_code        VARCHAR2
)
   RETURN VARCHAR2
IS
/******************************************************************************
   ---
******************************************************************************/
   l_generate_code   VARCHAR (220);
--------------------------------
   l_check           NUMBER;
--------------------------------
   l_stseq_length    NUMBER;
   l_max_seq         NUMBER;
   l_grp_cd          VARCHAR2 (50);
--------------------------------
BEGIN
-------------------------------
   SELECT NVL (MAX (stseq_length), 0),
          MAX (DECODE (grpcode_display_yn, 'Y', grp_cd, ''))
     INTO l_stseq_length,
          l_grp_cd
     FROM tlg_it_itemgrp
    WHERE del_if = 0 AND pk = p_lit_itemgrp_pk;

   IF TO_NUMBER (l_stseq_length) <= 0
   THEN
      raise_application_error (-20999,
                               'PLS INPUT SEQUENCE LENGTH FOR THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   BEGIN
      SELECT   TO_NUMBER (NVL (MAX (SUBSTR (a.item_code,
                                            LENGTH (p_item_code) + 1,
                                            NVL (stseq_length, 0)
                                           )
                                   ),
                               0
                              )
                         )
             + 1
        INTO l_max_seq
        FROM tlg_it_stitem a, tlg_it_itemgrp b
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_it_itemgrp_pk = b.pk
         AND a.tlg_it_itemgrp_pk = p_lit_itemgrp_pk
         AND a.item_code LIKE UPPER (p_item_code) || '%';
   EXCEPTION
      WHEN OTHERS
      THEN
         l_max_seq := 1;
   END;

   IF TO_NUMBER (l_max_seq) >=
                       TO_NUMBER (LPAD (' ', NVL (l_stseq_length, 0) + 1, '9'))
   THEN
      raise_application_error (-20999,
                               'PLS INCREASE SEQ NUMBER IN THIS GROUP '
                              );
   END IF;

-----------------------------------------------------------------
   l_check := 1;

-----------------------------------------------------------------
   WHILE l_check > 0 AND l_max_seq < 10000
   LOOP
      l_generate_code :=
            UPPER (NVL (p_item_code, l_grp_cd))
         || UPPER (LPAD (TO_CHAR (l_max_seq), NVL (l_stseq_length, 0), '0'));

      SELECT COUNT (pk)
        INTO l_check
        FROM tlg_it_stitem
       WHERE del_if = 0 AND item_code LIKE UPPER (l_generate_code);

      l_max_seq := NVL (l_max_seq, 0) + 1;
   END LOOP;

-------------------------------------
   RETURN l_generate_code;
-------------------------------------
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_get_agci00110;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_AGCI00190;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_agci00190 (p_tco_itemcombine_m_pk NUMBER)
   RETURN VARCHAR2
IS
   l_detail    VARCHAR2 (500) := '';
   l_connect   VARCHAR2 (3);
/*--------

*/
BEGIN
   FOR l_cur IN (SELECT DISTINCT description
                            FROM tlg_it_itemcombine_d a
                           WHERE del_if = 0
                             AND tlg_it_itemcombine_m_pk = p_tco_itemcombine_m_pk)
   LOOP
      l_detail := l_detail || l_connect || l_cur.description;
      l_connect := ' ; ';
   END LOOP;

   RETURN l_detail;
EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20999, SQLERRM);
END st_lg_get_agci00190;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_CHECK_SLIP_NO;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_check_slip_no (
   p_slip_type   IN   VARCHAR2,
   p_value       IN   VARCHAR2
)
   RETURN VARCHAR
IS
   lcode_pks         VARCHAR (100);
   lchars            VARCHAR (100);
   l_temp_code_pks   VARCHAR (100);
   lpost             NUMBER         := -1;
   l_pk              VARCHAR (10);
   l_data_type       VARCHAR (100);
   l_format          VARCHAR (100);
   l_len_of_pks      NUMBER;
   l_feild_nm        VARCHAR (100);
   l_length          VARCHAR2 (100);
   l_cent            VARCHAR (1);
   l_value           VARCHAR (50);
   l_all_length      NUMBER;
   l_char_post       NUMBER         := 1;
   l_part            VARCHAR (100);
   temp              VARCHAR (100);
/******************************************************************************
   NAME:       SF_GET_CHECK_SLIP_NO
******************************************************************************/
BEGIN
   BEGIN
      SELECT a.code_pk, a.code_description
        INTO lcode_pks, lchars
        FROM tlg_lg_code_template a
       WHERE a.del_if = 0 AND a.code_type = p_slip_type
             AND a.current_used = 'Y';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         lcode_pks := '';
         lchars := '';
         RETURN 'ERROR';
   END;

   l_value := lcode_pks;

   IF LENGTH (lcode_pks) > 0
   THEN
      l_temp_code_pks := lcode_pks;
      l_len_of_pks := LENGTH (lcode_pks);
      l_all_length := 0;

      --Check length
      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         BEGIN
            SELECT charater_len
              INTO l_length
              FROM tlg_lg_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         l_all_length := l_all_length + l_length;
      END LOOP;

      IF l_all_length <> LENGTH (TRIM (p_value))
      THEN
         RETURN 'ERROR';
      END IF;

      l_temp_code_pks := lcode_pks;

      WHILE LENGTH (l_temp_code_pks) > 0
      LOOP
         lpost := INSTR (l_temp_code_pks, ',');

         IF lpost > 0
         THEN
            l_pk := SUBSTR (l_temp_code_pks, 1, lpost - 1);
            l_temp_code_pks :=
                            SUBSTR (l_temp_code_pks, lpost + 1, l_len_of_pks);
         ELSE
            l_pk := l_temp_code_pks;
            l_temp_code_pks := '';
         END IF;

         --get data type and fomat of each element in a list of character pk
         BEGIN
            SELECT data_type, CHARACTERS, field_nm, charater_len, c_end
              INTO l_data_type, l_format, l_feild_nm, l_length, l_cent
              FROM tlg_lg_character
             WHERE del_if = 0 AND pk = l_pk;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RETURN 'ERROR';
         END;

         CASE l_data_type
            WHEN 'C'
            THEN
               IF (SUBSTR (p_value, l_char_post, l_length) <> l_format)
               THEN
                  RETURN 'ERROR';
               END IF;
            WHEN 'D'
            THEN
               BEGIN
                  SELECT TO_DATE (SUBSTR (p_value, l_char_post, l_length),
                                  l_format
                                 )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            WHEN 'N'
            THEN
               BEGIN
                  SELECT TO_NUMBER (SUBSTR (p_value, l_char_post, l_length),
                                    l_format
                                   )
                    INTO temp
                    FROM DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RETURN 'ERROR';
               END;
            ELSE
               l_value := lcode_pks;
         END CASE;

         l_char_post := l_char_post + l_length;
      END LOOP;
   END IF;

   RETURN l_value;
END st_lg_get_check_slip_no;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_FORMAT;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_format (p_value IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_mask   VARCHAR (20);
--------
BEGIN
   CASE p_value
      WHEN '-2'
      THEN
         l_mask := '###,###,###,#00';
      WHEN '-1'
      THEN
         l_mask := '###,###,###,##0';
      WHEN '0'
      THEN
         l_mask := '###,###,###,###';
      WHEN '1'
      THEN
         l_mask := '###,###,###,##0.#';
      WHEN '2'
      THEN
         l_mask := '###,###,###,##0.##';
      WHEN '3'
      THEN
         l_mask := '###,###,###,##0.###';
      WHEN '4'
      THEN
         l_mask := '###,###,###,##0.####';
      WHEN '5'
      THEN
         l_mask := '###,###,###,##0.#####';
      WHEN '6'
      THEN
         l_mask := '###,###,###,##0.######';
      WHEN '7'
      THEN
         l_mask := '###,###,###,##0.#######';
      WHEN '8'
      THEN
         l_mask := '###,###,###,##0.########';
      WHEN '9'
      THEN
         l_mask := '###,###,###,##0.#########';
      WHEN '10'
      THEN
         l_mask := '###,###,###,##0.##########';
      WHEN '11'
      THEN
         l_mask := '###,###,###,##0.###########';
      WHEN '12'
      THEN
         l_mask := '###,###,###,##0.############';
   END CASE;

   RETURN l_mask;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_ITEM_INFO;

CREATE OR REPLACE FUNCTION HPDQ.ST_LG_GET_ITEM_INFO (P_PK      VARCHAR,
                                                      P_TYPE    VARCHAR)
   RETURN VARCHAR2
IS
   /******************************************************************************
   CREATE BY: TRANGTQ
   DESC:
   TYPE=0: GET ITEM CODE
   TYPE=1: GET ITEM NAME,
   TYPE=2: GET PK ST ITEM
   
   ******************************************************************************/
   L_RESULT   VARCHAR2 (200);
BEGIN
   IF (P_TYPE = '0')
   THEN
      SELECT MAX (ITEM_CODE)
        INTO L_RESULT
        FROM TLG_IT_ITEM
       WHERE DEL_IF = 0 AND PK = P_PK;
   ELSIF (P_TYPE = '1')
   THEN
      SELECT MAX (ITEM_NAME)
        INTO L_RESULT
        FROM TLG_IT_ITEM
       WHERE DEL_IF = 0 AND PK = P_PK;
   ELSIF (P_TYPE = '2')
   THEN
      SELECT MAX (TLG_IT_STITEM_PK)
        INTO L_RESULT
        FROM TLG_IT_ITEM
       WHERE DEL_IF = 0 AND PK = P_PK;
    ELSIF (P_TYPE = '3')
   THEN
      SELECT MAX (UOM)
        INTO L_RESULT
        FROM TLG_IT_ITEM
       WHERE DEL_IF = 0 AND PK = P_PK;
   END IF;

   RETURN NVL (L_RESULT, '');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END ST_LG_GET_ITEM_INFO;
 
/

DROP FUNCTION HPDQ.ST_LG_GET_LOGISTIC_CODENAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_logistic_codename (
   v_grpcode   IN   VARCHAR,
   v_code      IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_code_nm   VARCHAR2 (100);
BEGIN
   SELECT a.code_nm
     INTO l_code_nm
     FROM tlg_lg_code a, tlg_lg_code_group g
    WHERE a.tlg_lg_code_group_pk = g.pk
      AND g.GROUP_ID = v_grpcode
      AND a.del_if = 0
      AND a.code = v_code;

   RETURN l_code_nm;
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_get_logistic_codename;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_PARTNER_ITEM_NAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_partner_item_name (
   p_partner_pk   IN   NUMBER,
   p_item_pk      IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_partner_item_name   VARCHAR2 (100);
BEGIN
   SELECT ctn.item_name
     INTO l_partner_item_name
     FROM tlg_it_partner_item ctn
    WHERE ctn.del_if = 0
      AND ctn.tco_buspartner_pk = p_partner_pk
      AND ctn.tlg_it_item_pk = p_item_pk;

   RETURN l_partner_item_name;                        --sf_get_salemannamebyid
--============
EXCEPTION
--============
   WHEN NO_DATA_FOUND
   THEN
      RETURN NULL;
END st_lg_get_partner_item_name;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_PO_STATUS;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_po_status (p_po_m_pk NUMBER)
   RETURN VARCHAR
IS
   l_value    VARCHAR2 (100);
   l_count    NUMBER;
   l_po_qty   NUMBER;
   l_in_qty   NUMBER;
   l_status   VARCHAR (2);
/*--------
   RETURN GRAVITY FOR ITEM
---------*/
BEGIN
   l_value := 'NOT PROCESS';

   SELECT   SUM (d.po_qty_01) po_qty, m.status
       INTO l_po_qty, l_status
       FROM tlg_po_po_d d, tlg_po_po_m m
      WHERE d.del_if = 0
        AND d.tlg_po_po_m_pk = p_po_m_pk
        AND m.del_if = 0
        AND m.pk = d.tlg_po_po_m_pk
   GROUP BY m.status;

   CASE l_status
      WHEN '1'
      THEN
         l_value := 'SAVE';
      WHEN '2'
      THEN
         l_value := 'SUBMIT';
      WHEN '3'
      THEN
         l_value := 'APPROVE';
      WHEN '4'
      THEN
         l_value := 'CANCEL';
   END CASE;

   SELECT SUM (d.in_qty)
     INTO l_in_qty
     FROM tlg_st_income_d d, tlg_po_po_d pod
    WHERE d.del_if = 0
      AND d.po_po_d_pk = pod.pk
      AND pod.del_if = 0
      AND pod.tlg_po_po_m_pk = p_po_m_pk;

   --- cannot get return data at this time ----
   IF NVL (l_in_qty, 0) = 0
   THEN
      RETURN l_value;
   ELSE
      IF NVL (l_po_qty, 0) > NVL (l_in_qty, 0)
      THEN
         l_value := 'PROCESSING';
      ELSE
         l_value := 'FINISHED';
      END IF;
   END IF;

   RETURN l_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN NULL;
END st_lg_get_po_status;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_PRICE_BIMC00060;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_price_bimc00060 (
   p_tco_item_pk    NUMBER,
   p_warehouse_pk   NUMBER,
   p_stock_date     VARCHAR2
)
   RETURN NUMBER
IS
   l_unit_price      NUMBER;
   l_parent_wh_pk    NUMBER;
   l_alter_qty       NUMBER;
   l_alter_item_pk   NUMBER;
/******************************************************************************
******************************************************************************/
BEGIN
   BEGIN
      SELECT w.parent_pk
        INTO l_parent_wh_pk
        FROM tlg_in_warehouse w
       WHERE w.del_if = 0 AND w.pk = p_warehouse_pk;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         l_parent_wh_pk := p_warehouse_pk;
   END;

   /* tim gia o kho cha */
   SELECT MAX (b.unit_price)
     INTO l_unit_price
     FROM tlg_sa_stock_closing_m a, tlg_sa_stock_closing_d b
    WHERE a.del_if = 0
      AND a.tlg_in_warehouse_pk = l_parent_wh_pk
      AND a.stock_date =
             (SELECT MAX (c.stock_date)
                FROM tlg_sa_stock_closing_m c, tlg_sa_stock_closing_d d
               WHERE c.del_if = 0
                 AND c.tlg_in_warehouse_pk = l_parent_wh_pk
                 AND c.stock_date <= p_stock_date
                 AND d.del_if = 0
                 AND d.tlg_it_item_pk = p_tco_item_pk
                 AND c.pk = d.tlg_sa_stock_closing_m_pk)
      AND b.del_if = 0
      AND b.tlg_it_item_pk = p_tco_item_pk
      AND a.pk = b.tlg_sa_stock_closing_m_pk;

   IF l_unit_price IS NULL OR l_unit_price = 0
   THEN
      /*neu cha khong co gia thi tim  gia cua item tuong ung cua item do trong kho cha */
      BEGIN
         SELECT al.tlg_it_item_pk, al.alter_qty
           INTO l_alter_item_pk, l_alter_qty
           FROM tlg_alter_item al
          WHERE al.del_if = 0 AND al.alter_item_pk = p_tco_item_pk;

         SELECT MAX (b.unit_price) / l_alter_qty
           INTO l_unit_price
           FROM tlg_sa_stock_closing_m a, tlg_sa_stock_closing_d b
          WHERE a.del_if = 0
            AND b.del_if = 0
            AND b.tlg_it_item_pk = l_alter_item_pk
            AND a.pk = b.tlg_sa_stock_closing_m_pk
            AND a.tlg_in_warehouse_pk = l_parent_wh_pk
            AND a.stock_date =
                   (SELECT MAX (c.stock_date)
                      FROM tlg_sa_stock_closing_m c, tlg_sa_stock_closing_d d
                     WHERE c.del_if = 0
                       AND c.tlg_in_warehouse_pk = l_parent_wh_pk
                       AND c.stock_date <= p_stock_date
                       AND d.del_if = 0
                       AND d.tlg_it_item_pk = l_alter_item_pk
                       AND c.pk = d.tlg_sa_stock_closing_m_pk);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            l_unit_price := 0;
      END;
   END IF;

   RETURN l_unit_price;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RETURN 0;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_REPORT_LST2;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_report_lst2 
(p_form IN VARCHAR2,
 p_option_num in number   
)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (select v.CHA_VALUE2,v.CODE_NM 
                from vlg_code v where v.group_id='LGCM0050' 
                and upper(v.CHA_VALUE1)=upper(p_form) and nvl(v.NUM_VALUE2,p_option_num)=p_option_num 
                order by nvl(v.NUM_VALUE1,0))
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.CHA_VALUE2 || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_get_report_lst2;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_REPORT_SEQ;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_report_seq (
   p_report_id   VARCHAR,
   p_slip_no     VARCHAR,
   p_user        VARCHAR
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   l_seq   NUMBER;
BEGIN
   SELECT COUNT (a.pk)
     INTO l_seq
     FROM tlg_report_print_hist a
    WHERE a.del_if = 0
      AND a.report_id = p_report_id
      AND a.slip_no = p_slip_no
      AND a.user_id = p_user;

   RETURN NVL (l_seq, 1);
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 1;
END st_lg_get_report_seq;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_SPEC_NAME_03_ITEM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_spec_name_03_item (
   p_specgrp_type   IN   NUMBER,
   p_tco_item_pk    IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_spec_nm   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (b.spec_nm)
     INTO l_spec_nm
     FROM tlg_it_itemspec a, tlg_it_spec b, tlg_it_specgrp f
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND f.del_if = 0
      AND a.tlg_it_spec_pk = b.pk
      AND b.tlg_it_specgrp_pk = f.pk
      AND a.tlg_it_item_pk = p_tco_item_pk
      AND f.specgrp_type = p_specgrp_type;

   RETURN l_spec_nm;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END st_lg_get_spec_name_03_item;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_TRANS_NM;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_trans_nm (
   p_tr_code   VARCHAR,
   p_tr_type   VARCHAR
)
   RETURN VARCHAR2
IS
   l_tr_nm   VARCHAR2 (100);
/******************************************************************************
******************************************************************************/
BEGIN
   SELECT a.trans_name
     INTO l_tr_nm
     FROM tlg_in_trans_code a
    WHERE a.del_if = 0 AND a.trans_code = p_tr_code AND a.TYPE = p_tr_type;

   RETURN l_tr_nm;
/*EXCEPTION

   THEN
      -- Consider logging the error and then re-raise
      RAISE; */
END st_lg_get_trans_nm;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_GET_WAREHOUSE_NAME;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_get_warehouse_name (p_tin_warehouse_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_wh_name   VARCHAR2 (100);
BEGIN
   SELECT a.wh_name
     INTO l_wh_name
     FROM tlg_in_warehouse a
    WHERE a.pk = p_tin_warehouse_pk AND del_if = 0;

   RETURN l_wh_name;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
   WHEN OTHERS
   THEN
      RETURN '';
END st_lg_get_warehouse_name;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_LOGISTIC_CODE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_logistic_code (v_grp IN VARCHAR2)
   RETURN VARCHAR2
IS
   lsvreturn   VARCHAR2 (5000) := '';
--------
BEGIN
--------
   FOR cur IN (SELECT   code, (code || ' ' || code_nm) code_nm
                   FROM tlg_lg_code a, tlg_lg_code_group b
                  WHERE a.tlg_lg_code_group_pk = b.pk
                    AND b.GROUP_ID = v_grp
                    AND a.use_if = 'Y'
                    AND a.del_if = 0
                    AND b.del_if = 0
               ORDER BY a.def_yn DESC, ord)
   LOOP
      -- process row here
      lsvreturn := lsvreturn || '' || cur.code || '|' || cur.code_nm || '|';
   END LOOP;

   RETURN lsvreturn;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN SQLERRM;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_PRO_90100020_PREBID;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_pro_90100020_prebid (  p_teb_est_mst_pk       varchar
                                                           )
    return   varchar                                                            
is
 
   /******************************************************************************
      NAME:       st_lg_sel_teb_est_mst
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        04/04/2013   Pham Duy Tan       1. Created this procedure.

   ******************************************************************************/
   l_count_pk_mst  number;
   l_count_pre_bid  number;
begin

   
      select count(TEB_EST_MST_PK),sum(decode(PRE_BID_MEETING_YN,'Y',1,0))  into l_count_pk_mst, 
             l_count_pre_bid
             
        from TEB_EST_SHORTLIST 
        where del_if=0 and TEB_EST_MST_PK= p_teb_est_mst_pk;
        
     return   l_count_pre_bid||'/'||l_count_pk_mst;
  exception
   when others then 
        raise;
end st_lg_pro_90100020_prebid;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_SF_GET_FPDP00120;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_sf_get_fpdp00120 (
   p_pt_process_comp_in_pk   NUMBER
)
   RETURN NUMBER
IS
/******************************************************************************
******************************************************************************/
   rtn_tes_lgpicture_pk   NUMBER;
BEGIN
   SELECT MAX (d.tlg_pt_picture_pk)
     INTO rtn_tes_lgpicture_pk
     FROM tlg_pt_process_comp_in a,
          tlg_pt_process_comp b,
          tlg_pt_process_comp c,
          tlg_pt_process_comp_out d
    WHERE a.del_if = 0
      AND b.del_if = 0
      AND a.tlg_pt_process_comp_pk = b.pk
      AND c.del_if = 0
      AND b.style_pk = c.style_pk
      AND c.pk = d.tlg_pt_process_comp_pk
      AND a.tlg_pt_component_pk = d.tlg_pt_component_pk
      AND a.pk = p_pt_process_comp_in_pk;

   IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
   THEN
      SELECT MAX (c.tlg_pt_picture_pk)
        INTO rtn_tes_lgpicture_pk
        FROM tlg_pt_style_consumption a,
             tlg_pt_pattern_group b,
             tlg_pt_pattern_grpcom c,
             tlg_pt_process_comp_in d,
             tlg_pt_process_comp e
       WHERE a.del_if = 0
         AND b.del_if = 0
         AND a.tlg_pt_pattern_group_pk = b.pk
         AND c.del_if = 0
         AND b.pk = c.tlg_pt_pattern_group_pk
         AND d.del_if = 0
         AND e.pk = d.tlg_pt_process_comp_pk
         AND a.st_prod_pk = e.style_pk
         AND d.tlg_pt_component_pk = c.tlg_pt_component_pk
         AND d.pk = p_pt_process_comp_in_pk;

      IF (rtn_tes_lgpicture_pk = 0 OR rtn_tes_lgpicture_pk IS NULL)
      THEN
         SELECT MAX (b.tlg_pt_picture_pk)
           INTO rtn_tes_lgpicture_pk
           FROM tlg_pt_process_comp_in a, tlg_pt_component b
          WHERE a.del_if = 0
            AND b.del_if = 0
            AND a.tlg_pt_component_pk = b.pk
            AND a.pk = p_pt_process_comp_in_pk;
      END IF;
   END IF;

   RETURN rtn_tes_lgpicture_pk;
/*EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;*/
END st_lg_sf_get_fpdp00120;
 
 
 
 
/

DROP FUNCTION HPDQ.ST_LG_TEST_REENCODE;

CREATE OR REPLACE FUNCTION HPDQ.st_lg_test_reencode(string IN VARCHAR2) RETURN VARCHAR2
AS
    encoded VARCHAR2(32767);
    type  array_t IS varray(3) OF VARCHAR2(15);
    array array_t := array_t('AL32UTF8', 'WE8MSWIN1252', 'WE8ISO8859P1');
BEGIN
    FOR I IN 1..array.count LOOP
        encoded := CASE array(i)
            WHEN 'AL32UTF8' THEN string
            ELSE CONVERT(string, 'AL32UTF8', array(i))
        END;
        IF instr(
            rawtohex(
                utl_raw.cast_to_raw(
                    utl_i18n.raw_to_char(utl_raw.cast_to_raw(encoded), 'utf8')
                )
            ),
            'EFBFBD'
        ) = 0 THEN
            RETURN encoded;
        END IF;
    END LOOP;
    RAISE VALUE_ERROR;
END;
 
 
 
 
/

DROP FUNCTION HPDQ.SYS_F_CHECK_USER;

CREATE OR REPLACE FUNCTION HPDQ.SYS_F_CHECK_USER(
    p_user_id        varchar2,
    p_menu_id        varchar2     
    )
RETURN NUMBER IS
     l_result      number;
BEGIN

    SELECT NVL(MAX(HR.C1),0) INTO l_result
        FROM(  
        SELECT 1 C1
        FROM TES_ROLE_OBJ A,GASP.TES_USER B,TES_OBJ C,TES_USER_ROLE D,TES_ROLE E,THR_EMPLOYEE F
        WHERE A.DEL_IF=0 AND B.DEL_IF=0 AND C.DEL_IF=0 AND D.DEL_IF=0 AND E.DEL_IF=0 AND F.DEL_IF=0
        AND B.PK=D.TES_USER_PK AND C.PK=A.TES_OBJ_PK  AND F.PK=B.THR_ABEMP_PK AND F.STATUS='A'
        AND E.PK=A.TES_ROLE_PK AND E.PK=D.TES_ROLE_PK
        AND upper(trim(B.USER_ID))=upper(trim(p_user_id))
        AND upper(trim(C.MENU_ID))=upper(trim(p_menu_id )) 
        UNION ALL
        SELECT 1 C1 FROM GASP.TES_USER B
        WHERE B.DEL_IF=0 AND NVL(B.SYSADMIN_YN,'N')='Y'
        AND B.USER_ID=p_user_id) HR;
   
   RETURN l_result ;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN       
       RAISE;
END ;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.TIC_GET_COMM;

CREATE OR REPLACE FUNCTION HPDQ.tic_GET_comm (p_code           VARCHAR2,
                                                 p_PARENT_CODE    VARCHAR2,
                                                 p_lang           VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (255);
BEGIN
   SELECT DECODE (p_lang,  'ENG', name,  'VIE', name,  'KOR', fname)
     INTO l_rtn_value
     FROM TCO_COMMCODE
    WHERE code = p_code AND PARENT_CODE = p_PARENT_CODE AND DEL_IF = 0;

   RETURN l_rtn_value;
---------
EXCEPTION
   ---------
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.TIC_SEL_BEGIN_BALANCE;

CREATE OR REPLACE FUNCTION HPDQ.tic_sel_begin_balance (p_branch_pk varchar, p_date varchar)
   return number
is
   /******************************************************************************
      NAME:       tic_sel_begin_balance
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        9/1/2014   Administrator       1. Created this function.

   ******************************************************************************/
   v_rtn_value   number;
begin
   select SUM (in_qty) - SUM (out_qty)
     into v_rtn_value
     from tic_stocktr
    where stock_date < p_date and del_if = 0 and tic_branch_pk = p_branch_pk;

   return NVL (v_rtn_value, 0);
end tic_sel_begin_balance;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.TIC_SF_GET_PAYMENT_METHOD;

CREATE OR REPLACE FUNCTION HPDQ.tic_sf_get_payment_method (p_code IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_rtn_value   VARCHAR2 (200);
BEGIN
   SELECT  (NAME)
     INTO l_rtn_value
     FROM tco_commcode
    WHERE parent_code = 'PAYMT' AND del_if = 0 AND use_yn = 'Y' AND code = p_code;

   RETURN l_rtn_value;
END tic_sf_get_payment_method;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_60080240_REVERSE_POLISH;

CREATE OR REPLACE FUNCTION HPDQ.ac_60080240_REVERSE_POLISH
                                    (
                                        v_formular          VARCHAR2,
                                        v_type              VARCHAR2,
                                        v_year              VARCHAR2
                                    )
RETURN VARCHAR2
IS

    v_tmp       VARCHAR2(2000);
    firsr_str   VARCHAR2(2000);
    last_str    VARCHAR2(2000);
    v_num       NUMBER := 1;    
    v_one       VARCHAR2(1);
    v_stack     VARCHAR2(100);
    v_one_stack VARCHAR2(1);
    K           NUMBER;
    v_ngoacmo   NUMBER;
    v_bt_ngoac  VARCHAR2(100);
    v_bt        VARCHAR2(2000);
    v_num_tb    NUMBER;
    
    v_count     NUMBER;
    
BEGIN

    v_tmp := v_formular;
    k := 1;
    WHILE (v_num <= length(v_formular)) LOOP

        SELECT SUBSTR(v_tmp, 1, 1) INTO v_one
          FROM DUAL;
        
        IF v_one IN ( '+', '-', '*', '/', '(', ')') THEN
          
          SELECT SUBSTR(v_stack, -1) INTO v_one_stack
            FROM DUAL;

          IF firsr_str IS NULL THEN
             firsr_str := SUBSTR(v_formular, k, v_num - k);
             IF firsr_str IS NOT NULL THEN
                 
                SELECT COUNT(*) INTO v_count
                  FROM TAC_TMPTRIALBAL
                 WHERE AC_CD = firsr_str;
                
                IF v_count > 0 THEN
                    SELECT DECODE(v_type,  '21', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_op , 0),  NVL(cr_op , 0)),
                                                                1, DECODE(DRCR_TYPE, 1, NVL(dr_bl , 0),  NVL(cr_bl , 0))),
                                           '22', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_acc_last, 0), NVL(cr_acc_last, 0)),
                                                                1, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0)),
                                                                2, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0))),
                                           '23', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_bl_last_1, 0) - NVL(dr_bl_last_2, 0), NVL(cr_bl_last_1, 0) - NVL(cr_bl_last_2, 0)),
                                                                1, DECODE(DRCR_TYPE, 1, NVL(dr_bl, 0) - NVL(dr_bl_last_1, 0), (NVL(cr_bl, 0) - NVL(cr_bl_last_1, 0))))
                                  )
                      INTO v_num_tb
                      FROM TAC_TMPTRIALBAL
                     WHERE AC_CD = firsr_str;
                ELSE
                    v_num_tb := 0;
                END IF;
                v_bt := v_bt || v_num_tb;
             END IF;
          ELSE
             BEGIN
                  IF (k <> v_num) THEN
                      firsr_str := firsr_str || ';' || SUBSTR(v_formular, K, v_num - k);

                      SELECT COUNT(*) INTO v_count
                        FROM TAC_TMPTRIALBAL
                       WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);

                      IF v_count > 0 THEN
                          SELECT DECODE(v_type, '21', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_op, 0),  NVL(cr_op, 0)),
                                                                     1, DECODE(DRCR_TYPE, 1, NVL(dr_bl , 0),  NVL(cr_bl , 0))),
                                                '22', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_acc_last, 0), NVL(cr_acc_last, 0)),
                                                                     1, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0)),
                                                                     2, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0))),
                                                '23', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_bl_last_1, 0) - NVL(dr_bl_last_2, 0), NVL(cr_bl_last_1, 0) - NVL(cr_bl_last_2, 0)),
                                                                     1, DECODE(DRCR_TYPE, 1, NVL(dr_bl, 0) - NVL(dr_bl_last_1, 0), (NVL(cr_bl, 0) - NVL(cr_bl_last_1, 0))))
                                       )
                            INTO v_num_tb
                            FROM TAC_TMPTRIALBAL
                           WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);
                      ELSE
                          v_num_tb := 0;
                      END IF;
                      v_bt := v_bt || ';' || v_num_tb;
                  END IF;
             END;
          END IF;
          k := v_num + 1;
          IF v_one_stack IS NULL THEN
             v_stack := v_one;
          ELSE
            BEGIN
              IF (v_one = ')') THEN
              
                 SELECT instr(v_stack, '(', -1) INTO v_ngoacmo
                   FROM dual;
                 
                 SELECT SUBSTR(v_stack, v_ngoacmo + 1, length(v_stack)) INTO v_bt_ngoac
                   FROM DUAL;
                   
                 SELECT SUBSTR(v_stack, 1, length(v_stack) - NVL(LENGTH(v_bt_ngoac),0) - 1) INTO v_stack
                   FROM DUAL;
                 
                 IF (v_stack = '(') THEN
                    v_stack := '';
                 END IF;
                 
                 WHILE (v_bt_ngoac IS NOT NULL) LOOP
                    SELECT SUBSTR(v_bt_ngoac, -1) INTO v_one_stack
                      FROM DUAL;
                    firsr_str := firsr_str || ';' || v_one_stack;
                    v_bt      := v_bt || ';' || v_one_stack;
                    SELECT SUBSTR(v_bt_ngoac, 1, length(v_bt_ngoac) - 1) INTO v_bt_ngoac
                      FROM DUAL;
                 END LOOP;
              ELSE
                 BEGIN
                    IF (v_one = '(') THEN
                       v_stack := v_stack || v_one;
                    ELSE
                       BEGIN 
                          IF ac_GET_PRIORITY(v_one) > ac_GET_PRIORITY(v_one_stack) THEN
                             v_stack := v_stack || v_one;
                          ELSE
                             SELECT SUBSTR(v_stack, -1) INTO v_one_stack
                               FROM DUAL;
                             firsr_str := firsr_str || ';' || v_one_stack;
                             v_bt      := v_bt || ';' || v_one_stack;
                             SELECT SUBSTR(v_stack, 1, length(v_stack) - 1) INTO v_stack
                               FROM DUAL;
                             v_stack := v_stack || v_one;
                          END IF;
                        END;
                    END IF;
                 END;
              END IF;
              
            END;
          END IF;
        END IF;
        v_num       := v_num + 1;
        last_str    := SUBSTR(v_formular, v_num, Length(v_formular));
        v_tmp       := last_str;
    END LOOP;
    IF (k <> v_num) THEN
        firsr_str := firsr_str || ';' || SUBSTR(v_formular, k, Length(v_formular));
        SELECT COUNT(*) INTO v_count
          FROM TAC_TMPTRIALBAL
         WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);
        
        IF v_count > 0 THEN
                       
            SELECT DECODE(v_type, '21', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_op, 0),  NVL(cr_op, 0)),
                                                       1, DECODE(DRCR_TYPE, 1, NVL(dr_bl , 0),  NVL(cr_bl , 0))),
                                  '22', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_acc_last, 0), NVL(cr_acc_last, 0)),
                                                       1, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0)),
                                                       2, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0))),
                                  '23', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_bl_last_1, 0) - NVL(dr_bl_last_2, 0), NVL(cr_bl_last_1, 0) - NVL(cr_bl_last_2, 0)),
                                                       1, DECODE(DRCR_TYPE, 1, NVL(dr_bl, 0) - NVL(dr_bl_last_1, 0), (NVL(cr_bl, 0) - NVL(cr_bl_last_1, 0))))
                         ) 
              INTO v_num_tb
              FROM TAC_TMPTRIALBAL
             WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);
        ELSE
            v_num_tb := 0;
        END IF;
        v_bt := v_bt || ';' || v_num_tb;
    END IF;
    WHILE (v_stack IS NOT NULL) LOOP
       SELECT SUBSTR(v_stack, -1) INTO v_one_stack
         FROM DUAL;
       firsr_str := firsr_str || ';' || v_one_stack;
       v_bt      := v_bt || ';' || v_one_stack;
       SELECT SUBSTR(v_stack, 1, length(v_stack) - 1) INTO v_stack
         FROM DUAL;
    END LOOP;
    
    SELECT ac_SUM_FROM_POLISH(v_bt) INTO v_bt FROM DUAL;
    RETURN v_bt;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_FORMULAR_EXECUTE_21_36;

CREATE OR REPLACE FUNCTION HPDQ.ac_formular_execute_21_36(
   p_formular      in   varchar
 , p_date_type          varchar
 , p_column_type        varchar
 , p_balabce            varchar
 , p_header             varchar)
   return number
is
/******************************************************************************
   NAME:       SF_CAL_POLYNOMINAL
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        09-Jun-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular varchar(4000) := '';
   l_value varchar(4000) := '';
   l_rtn_value number;
   l_status varchar(300);
begin
   


   for c1 in (select substr(column_value, 0, 1) col1
                   , substr(column_value, 2, length(column_value) - 1)  ac_cd
                from table(ac_split(p_formular, ',') )
               where column_value is not null)
    loop
       case
               when p_column_type = 'THIS'
               then
                  case
                     when p_balabce = 'L' or p_balabce = 'R'
                          or p_balabce = 'B'
                     then
                        select   decode(p_balabce
                                      , 'L', sum(dr_ps)
                                      , 'R', sum(cr_ps)
                                      , decode(dc
                                             , 1, sum(nvl(dr_bl, 0) )
                                                - sum(nvl(dr_op, 0) )
                                             , sum(nvl(cr_bl, 0) )
                                               - sum(nvl(cr_op, 0) ) ) )
                            into l_value
                            from tac_cf_indirect
                           where ac_cd = c1.ac_cd
                        group by dc;
                     when p_balabce = 'C'
                     then
                       select 0 
                       into l_value
                            from tac_cf_indirect
                           where ac_cd = c1.ac_cd;
                  end case;
               when p_column_type = 'LAST'
               then
                  select   decode(p_balabce
                                , 'L', sum(dr_ps1)
                                , 'R', sum(cr_ps1)
                                , decode(dc
                                       , 1, sum(nvl(dr_bl1, 0) )
                                          - sum(nvl(dr_op1, 0) )
                                       , sum(nvl(cr_bl1, 0) )
                                         - sum(nvl(cr_op1, 0) ) ) )
                      into l_value
                      from tac_cf_indirect
                     where ac_cd = c1.ac_cd
                  group by dc;
               when p_column_type = 'ACC'
               then
                  select decode(p_balabce, 'L', sum(dr_ps), sum(cr_ps) )
                    into l_value
                    from tac_cf_indirect
                   where ac_cd = c1.ac_cd;
            end case;
             l_value := nvl(c1.col1, '+') || '(' || l_value || ')';
      

      l_formular := l_formular || l_value;
    end loop;           


   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
                into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end ;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACCT_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_acct_openbal (p_compk        varchar2,
                                                     p_acc_pk       varchar2,
                                                     p_ccy          varchar2,
                                                     p_ymd          varchar2,
                                                     p_status       varchar2,
                                                     p_tran_book    varchar2                              ---TRANS--BOOK
                                                                            )
   return number
is
   l_rtn_value   number;
   l_dc          number;
   l_total_amt   number;
   l_mm_bal      number;
   l_dd_bal      number;
   l_mm_fbal     number;
   l_dd_fbal     number;
begin
   select decode (drcr_type, 'D', 1, -1)
     into l_dc
     from tac_abacctcode
    where pk = p_acc_pk; 

   select l_dc * (sum (nvl(this_dramt,0)) - sum (nvl(this_cramt,0))), l_dc * (sum (nvl(this_drfamt,0)) - sum (nvl(this_crfamt,0)))
     into l_mm_bal, l_mm_fbal
     from tac_hgmmbal m
    where     m.del_if = 0
          and m.tco_company_pk = p_compk
          and m.tr_status = p_status
          --and m.ccy like decode (p_ccy, 'ALL', '%', p_ccy)
          and m.std_ym = substr (sf_get_lastclosemm (p_ymd, p_compk), 1, 6)
          and m.tac_abacctcode_pk like decode (p_acc_pk, '', '%', p_acc_pk);

   select l_dc * (sum (nvl(ymd_drbooks,0)) - sum (nvl(ymd_crbooks,0))), l_dc * (sum (nvl(ymd_drtrans,0)) - sum (nvl(ymd_crtrans,0)))
     into l_dd_bal, l_dd_fbal
     from tac_hgddbal d
    where     d.del_if = 0
          and d.tco_company_pk = p_compk
          and d.tr_status = p_status
          --and d.ccy like decode (p_ccy, 'ALL', '%', p_ccy)
          and d.tac_abacctcode_pk like decode (p_acc_pk, '', '%', p_acc_pk)
          and d.std_ymd >=
                 to_char (add_months (to_date (sf_get_lastclosemm (p_ymd, p_compk), 'YYYYMMDD'), +1), 'YYYYMMDD')
          and d.std_ymd < p_ymd;

   if p_tran_book = 'TRANS'
   then
      l_total_amt := nvl (l_mm_fbal, 0) + nvl (l_dd_fbal, 0);
   else
      l_total_amt := nvl (l_mm_bal, 0) + nvl (l_dd_bal, 0);
   end if;

   l_rtn_value := l_total_amt;
   return l_rtn_value;
end ac_get_acct_openbal;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_ACC_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_acc_openbal (p_tco_company_pk       varchar,
                                                    p_tac_abacctcode_pk    varchar,
                                                    p_ymd                  varchar,
                                                    p_status               varchar)
   return number
is
   l_rtn_value   number;
   l_cnt         number;
   l_total_amt   number;
   l_mm_bal      number;
   l_dd_bal      number;
   l_dc          number;
begin
   select decode (drcr_type, 'D', 1, -1)
     into l_dc
     from tac_abacctcode
    where pk = p_tac_abacctcode_pk;

   select l_dc * (sum (nvl (this_dramt, 0)) - sum (nvl (this_cramt, 0)))
     into l_mm_bal
     from tac_hgmmbal m
    where     m.del_if = 0
          and m.tco_company_pk = p_tco_company_pk
          and m.tr_status = p_status
          and m.std_ym = substr (sf_get_lastclosemm (p_ymd, p_tco_company_pk), 1, 6)
          and m.tac_abacctcode_pk like decode (p_tac_abacctcode_pk, '', '%', p_tac_abacctcode_pk);

   select l_dc * (sum (nvl (ymd_drbooks, 0)) - sum (nvl (ymd_crbooks, 0)))
     into l_dd_bal
     from tac_hgddbal d
    where     d.del_if = 0
          and d.tco_company_pk = p_tco_company_pk
          and d.tr_status = p_status
          and d.tac_abacctcode_pk like decode (p_tac_abacctcode_pk, '', '%', p_tac_abacctcode_pk)
          and d.std_ymd >=
                 to_char (add_months (to_date (sf_get_lastclosemm (p_ymd, p_tco_company_pk), 'YYYYMMDD'), +1), 'YYYYMMDD')
          and d.std_ymd < p_ymd;

   l_total_amt := nvl (l_mm_bal, 0) + nvl (l_dd_bal, 0);


   l_rtn_value := l_total_amt;
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_BANK_OPENBAL_MONTH;

CREATE OR REPLACE FUNCTION HPDQ.AC_GET_BANK_OPENBAL_MONTH (
   p_compk      IN   VARCHAR2,
   p_bank_pk    IN   VARCHAR2,
   p_ymd        IN   VARCHAR2,
   p_ccy        IN   VARCHAR2,
   p_status     IN   VARCHAR2,         
   p_type       IN   VARCHAR2 --TRANS OR BOOKS                             
)
   RETURN NUMBER
IS
  p_rtn_value       NUMBER :=0;
  l_row_count       NUMBER;
  l_total_amt       NUMBER;
  l_mm_bal          NUMBER;
  l_dd_bal          NUMBER;

--------
BEGIN
--------
    l_row_count := 0;
    l_total_amt := 0;
    l_mm_bal := 0;
    l_dd_bal := 0;

    
    
    SELECT COUNT(*) INTO l_row_count 
        FROM TAC_HGDEPOMMBAL M
        WHERE M.DEL_IF =0
        AND M.TCO_COMPANY_PK = p_compk
        AND M.TR_STATUS = p_status
        AND ((p_ccy IS NULL) OR (M.CCY = p_ccy))
        AND M.TAC_ABACCTCODE_PK IN (
                SELECT PK
            FROM TAC_ABACCTCODE A
                WHERE A.DEL_IF= 0
                AND A.TCO_COMPANY_PK = p_compk
                AND A.LEAF_YN ='Y'
                CONNECT BY PRIOR PK = PAC_PK 
                START WITH (PK IN (
                    SELECT B.PK
                        FROM TAC_ABACCTCODE B
                        WHERE B.DEL_IF= 0
                            AND B.TCO_COMPANY_PK = p_compk
                            AND B.AC_CD IN ('112000','311000')
                    ))
                   )

        AND (M.STD_YM||'01') = SF_GET_LASTCLOSEMM (p_ymd,p_compk)
        AND DECODE(p_bank_pk,'',1,M.TAC_ABDEPOMT_PK) = DECODE(p_bank_pk,'',1,p_bank_pk);

    IF (l_row_count >0) THEN
    
        SELECT NVL(SUM(l_mm_bal*CRDR),0) INTO l_mm_bal
        FROM
        (
        SELECT M.TAC_ABACCTCODE_PK,NVL((SUM(DECODE(p_type,'TRANS',NVL(M.THIS_DRFAMT,0),NVL(M.THIS_DRAMT,0))) -
                SUM(DECODE(p_type,'TRANS',NVL(M.THIS_CRFAMT,0),NVL(M.THIS_CRAMT,0))) ),0)  l_mm_bal,
                TO_NUMBER(DECODE(AC_GET_DRCRTYPE(p_compk,M.TAC_ABACCTCODE_PK),'C','-1','1')) CRDR
            FROM TAC_HGDEPOMMBAL M
            WHERE M.DEL_IF =0
        AND M.TCO_COMPANY_PK = p_compk
        AND M.TR_STATUS = p_status
        AND ((p_ccy IS NULL) OR (M.CCY = p_ccy))
        
        AND M.TAC_ABACCTCODE_PK IN (
                SELECT PK
            FROM TAC_ABACCTCODE A
                WHERE A.DEL_IF= 0
                AND A.TCO_COMPANY_PK = p_compk
                AND A.LEAF_YN ='Y'
                CONNECT BY PRIOR PK = PAC_PK 
                START WITH (PK IN (
                    SELECT B.PK
                        FROM TAC_ABACCTCODE B
                        WHERE B.DEL_IF= 0
                            AND B.TCO_COMPANY_PK = p_compk
                            AND B.AC_CD IN ('112000','311000')
                    ))
                   )
        
        AND (M.STD_YM||'01') = SF_GET_LASTCLOSEMM (p_ymd,p_compk)
        AND DECODE(p_bank_pk,'',1,M.TAC_ABDEPOMT_PK) = DECODE(p_bank_pk,'',1,p_bank_pk)
        GROUP BY M.TAC_ABACCTCODE_PK
        )
        ;
        
        
        SELECT NVL(SUM(l_dd_bal*CRDR),0) INTO l_dd_bal
        FROM
        (
        SELECT D.TAC_ABACCTCODE_PK, NVL((SUM(DECODE(p_type,'TRANS',NVL(D.YMD_DRTRANS,0),NVL(D.YMD_DRBOOKS,0))) -
                SUM(DECODE(p_type,'TRANS',NVL(D.YMD_CRTRANS,0),NVL(D.YMD_CRBOOKS,0))) ),0) l_dd_bal,
                TO_NUMBER(DECODE(AC_GET_DRCRTYPE(p_compk,D.TAC_ABACCTCODE_PK),'C','-1','1')) CRDR
            FROM TAC_HGDEPODDBAL D
            WHERE D.DEL_IF =0
            AND D.TCO_COMPANY_PK =p_compk
            AND D.TR_STATUS = p_status
            AND ((p_ccy IS NULL) OR (D.CCY = p_ccy))
            
            AND D.TAC_ABACCTCODE_PK IN (
                SELECT PK
            FROM TAC_ABACCTCODE A
                WHERE A.DEL_IF= 0
                AND A.TCO_COMPANY_PK = p_compk
                AND A.LEAF_YN ='Y'
                CONNECT BY PRIOR PK = PAC_PK 
                START WITH (PK IN (
                    SELECT B.PK
                        FROM TAC_ABACCTCODE B
                        WHERE B.DEL_IF= 0
                            AND B.TCO_COMPANY_PK = p_compk
                            AND B.AC_CD IN ('112000','311000')
                    ))
                   )
            
            AND DECODE(p_bank_pk,'',1,D.TAC_ABDEPOMT_PK) = DECODE(p_bank_pk,'',1,p_bank_pk)
            AND D.STD_YMD >= TO_CHAR(ADD_MONTHS(TO_DATE(SF_GET_LASTCLOSEMM (p_ymd,p_compk),'YYYYMMDD'),+1),'YYYYMMDD')
            AND D.STD_YMD < p_ymd
            GROUP BY D.TAC_ABACCTCODE_PK)
            
            ;
        
       l_total_amt := l_mm_bal + l_dd_bal; 
        
    ELSE
            SELECT NVL(SUM(l_total_amt*CRDR),0) INTO l_total_amt
            FROM (
            SELECT D.TAC_ABACCTCODE_PK,NVL((SUM(DECODE(p_type,'TRANS',NVL(D.YMD_DRTRANS,0),NVL(D.YMD_DRBOOKS,0))) -
                SUM(DECODE(p_type,'TRANS',NVL(D.YMD_CRTRANS,0),NVL(D.YMD_CRBOOKS,0))) ),0) l_total_amt,
                TO_NUMBER(DECODE(AC_GET_DRCRTYPE(p_compk,D.TAC_ABACCTCODE_PK),'C','-1','1')) CRDR
            FROM TAC_HGDEPODDBAL D
            WHERE D.DEL_IF =0
            AND D.TCO_COMPANY_PK =p_compk
            AND D.TR_STATUS = p_status
            AND ((p_ccy IS NULL) OR (D.CCY = p_ccy))
            
            AND D.TAC_ABACCTCODE_PK IN (
                SELECT PK
            FROM TAC_ABACCTCODE A
                WHERE A.DEL_IF= 0
                AND A.TCO_COMPANY_PK = p_compk
                AND A.LEAF_YN ='Y'
                CONNECT BY PRIOR PK = PAC_PK 
                START WITH (PK IN (
                    SELECT B.PK
                        FROM TAC_ABACCTCODE B
                        WHERE B.DEL_IF= 0
                            AND B.TCO_COMPANY_PK = p_compk
                            AND B.AC_CD IN ('112000','311000')
                    ))
                   )
            
            AND DECODE(p_bank_pk,'',1,D.TAC_ABDEPOMT_PK) = DECODE(p_bank_pk,'',1,p_bank_pk)
            AND D.STD_YMD < p_ymd
            GROUP BY D.TAC_ABACCTCODE_PK
            );
            
    
    END IF;
    p_rtn_value := l_total_amt;

    
    RETURN p_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_CUST_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_cust_openbal (p_compk     in varchar2,
                                                         p_acc_pk    in varchar2,
                                                         p_cust_pk   in varchar2,
                                                         p_ymd       in varchar2,
                                                         p_ccy       in varchar2,
                                                         p_status    in varchar2,
                                                         p_type      in varchar2                                  --TRANS OR BOOKS
                                                                                )
   return number
is
   p_rtn_value   number := 0;
   l_row_count   number;
   l_total_amt   number;
   l_mm_bal      number;
   l_dd_bal      number;
   l_cd_dr_num   number;
--------
begin
   --------
   l_row_count := 0;
   l_total_amt := 0;
   l_mm_bal := 0;
   l_dd_bal := 0;
   l_cd_dr_num := 1;

   select to_number (decode (ac_get_drcrtype (p_compk, p_acc_pk), 'C', '-1', '1')) into l_cd_dr_num from dual;


   select nvl (
               (  sum (decode (p_type, 'TRANS', nvl (m.this_drfamt, 0), nvl (m.this_dramt, 0)))
                - sum (decode (p_type, 'TRANS', nvl (m.this_crfamt, 0), nvl (m.this_cramt, 0))))
             * l_cd_dr_num,
             0)
     into l_mm_bal
     from tac_hgcustmmbal m
    where     m.del_if = 0
          AND m.tco_company_pk like  DECODE (p_compk, 0, '%%', p_compk)
          and m.tr_status = p_status
          and m.ccy like decode (p_ccy, null, '%', p_ccy)
          and m.tac_abacctcode_pk like decode (p_acc_pk, '', '%', p_acc_pk)
          and m.std_ym = substr (ac_get_lastclosemm (p_ymd, p_compk), 1, 6)
          and m.tco_buspartner_pk like decode (p_cust_pk, '', '%', p_cust_pk);

   select nvl (
               (  sum (decode (p_type, 'TRANS', nvl (d.ymd_drtrans, 0), nvl (d.ymd_drbooks, 0)))
                - sum (decode (p_type, 'TRANS', nvl (d.ymd_crtrans, 0), nvl (d.ymd_crbooks, 0))))
             * l_cd_dr_num,
             0)
     into l_dd_bal
     from tac_hgcustddbal d
    where     d.del_if = 0
          AND d.tco_company_pk like  DECODE (p_compk, 0, '%%', p_compk)
          and d.tr_status = p_status
          and d.ccy like decode (p_ccy, null, '%', p_ccy)
          and d.tac_abacctcode_pk like decode (p_acc_pk, '', '%', p_acc_pk)
          and d.tco_buspartner_pk like decode (p_cust_pk, '', '%', p_cust_pk)
          and d.std_ymd >= to_char (add_months (to_date (ac_get_lastclosemm (p_ymd, p_compk), 'YYYYMMDD'), +1), 'YYYYMMDD')
          and d.std_ymd < p_ymd;

   l_total_amt := l_mm_bal + l_dd_bal;

   p_rtn_value := l_total_amt;


   return p_rtn_value;
exception
   when others
   then
      raise;
end;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_DRCR_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.ac_GET_DRCR_OPENBAL
(
    p_compk         VARCHAR2,
    p_acc_pk        VARCHAR2,
    p_ccy           VARCHAR2,
    p_ymd           VARCHAR2,
    p_status        VARCHAR2,
    p_crdr          VARCHAR2, -- D: DEBIT -- C:CREDIT
    p_tran_book     VARCHAR2    ---TRANS--BOOK
)
RETURN NUMBER
IS
  l_rtn_value       NUMBER;
  l_row_count       NUMBER;
  l_total_amt       NUMBER;
  l_mm_bal          NUMBER;
  l_dd_bal          NUMBER;
BEGIN
    l_row_count := 0;
    l_total_amt := 0;
    l_mm_bal := 0;
    l_dd_bal := 0;

    SELECT COUNT(*) into l_row_count 
        FROM TAC_HGMMBAL M 
        WHERE M.DEL_IF =0
            AND M.TCO_COMPANY_PK = p_compk
            AND M.TR_STATUS = p_status
            AND ((p_ccy IS NULL) OR (M.CCY = p_ccy))
            AND DECODE(p_acc_pk,'',1,M.TAC_ABACCTCODE_PK) = DECODE(p_acc_pk,'',1,p_acc_pk)
            AND (M.STD_YM||'01') = ac_GET_LASTCLOSEMM (p_ymd,p_compk);
            
    IF (l_row_count > 0) THEN
        
            SELECT NVL(SUM(DECODE(p_tran_book,'TRANS',DECODE(p_crdr,'D',NVL(THIS_DRFAMT,0),NVL(THIS_CRFAMT,0))
                                                 ,DECODE(p_crdr,'D',NVL(THIS_DRAMT ,0),NVL(THIS_CRAMT ,0))
                         )),0) into l_mm_bal
                FROM TAC_HGMMBAL M 
                WHERE M.DEL_IF =0
                    AND M.TCO_COMPANY_PK = p_compk
                    AND M.TR_STATUS = p_status
                    AND ((p_ccy IS NULL) OR (M.CCY = p_ccy))
                    AND (M.STD_YM||'01') = ac_GET_LASTCLOSEMM (p_ymd,p_compk)
                    AND DECODE(p_acc_pk,'',1,M.TAC_ABACCTCODE_PK) = DECODE(p_acc_pk,'',1,p_acc_pk);
                    
            SELECT NVL(SUM(DECODE(p_tran_book,'TRANS',DECODE(p_crdr,'D',NVL(YMD_DRTRANS,0),NVL(YMD_CRTRANS,0))
                                                 ,DECODE(p_crdr,'D',NVL(YMD_DRBOOKS,0),NVL(YMD_CRBOOKS,0)) 
                         )),0) into l_dd_bal
                FROM TAC_HGDDBAL D
                    WHERE D.DEL_IF = 0
                    AND D.TCO_COMPANY_PK = p_compk
                    AND D.TR_STATUS = p_status
                    AND ((p_ccy IS NULL) OR (D.CCY = p_ccy))
                    AND DECODE(p_acc_pk,'',1,D.TAC_ABACCTCODE_PK) = DECODE(p_acc_pk,'',1,p_acc_pk)
                    AND D.STD_YMD >= TO_CHAR(ADD_MONTHS(TO_DATE(ac_GET_LASTCLOSEMM (p_ymd,p_compk),'YYYYMMDD'),+1),'YYYYMMDD')
                    AND D.STD_YMD < p_ymd;
        
        l_total_amt := l_mm_bal + l_dd_bal;
        
    ELSE
        SELECT NVL(SUM(DECODE(p_tran_book,'TRANS',DECODE(p_crdr,'D',NVL(YMD_DRTRANS,0),NVL(YMD_CRTRANS,0))
                                             ,DECODE(p_crdr,'D',NVL(YMD_DRBOOKS,0),NVL(YMD_CRBOOKS,0)) 
                         )),0) into l_total_amt
                FROM TAC_HGDDBAL D
                    WHERE D.DEL_IF =0
                    AND D.TCO_COMPANY_PK = p_compk
                    AND D.TR_STATUS = p_status
                    AND ((p_ccy IS NULL) OR (D.CCY = p_ccy))
                    AND DECODE(p_acc_pk,'',1,D.TAC_ABACCTCODE_PK) = DECODE(p_acc_pk,'',1,p_acc_pk)
                    AND (D.STD_YMD < p_ymd and D.STD_YMD > ac_GET_LASTCLOSEMM (p_ymd,p_compk));
        l_total_amt := NVL(l_total_amt,0);
    END IF;

    l_rtn_value := l_total_amt;
  RETURN l_rtn_value;
---------
EXCEPTION
---------
  WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GET_EMP_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.ac_get_emp_openbal (p_compk        varchar2,
                                                        p_acc_pk       varchar2,
                                                        p_emp_pk       varchar2,
                                                        p_ccy          varchar2,
                                                        p_ymd          varchar2,
                                                        p_status       varchar2,
                                                        p_crdr         varchar2,                           -- D: DEBIT -- C:CREDIT
                                                        p_tran_book    varchar2                                     ---TRANS--BOOK
                                                                               )
   return number
is
   l_rtn_value   number;
   l_row_count   number;
   l_total_amt   number;
   l_mm_bal      number;
   l_dd_bal      number;
begin
   l_row_count := 0;
   l_total_amt := 0;
   l_mm_bal := 0;
   l_dd_bal := 0;


   select nvl (
             sum (
                decode (p_tran_book,
                        'TRANS', decode (p_crdr, 'D', nvl (this_drfamt, 0), nvl (this_crfamt, 0)),
                        decode (p_crdr, 'D', nvl (this_dramt, 0), nvl (this_cramt, 0)))),
             0)
     into l_mm_bal
     from tac_hgempmmbal m
    where     m.del_if = 0
          and m.tco_company_pk = p_compk
          and m.tr_status = p_status
          and m.ccy like decode (p_ccy, null, '%', p_ccy)
          and m.std_ym = substr (ac_get_lastclosemm (p_ymd, p_compk), 1, 6)
          and m.tac_abacctcode_pk like decode (p_acc_pk, '', '%', p_acc_pk)
          and m.vhr_emp_pk like decode (p_emp_pk, '', '%', p_emp_pk);

   select nvl (
             sum (
                decode (p_tran_book,
                        'TRANS', decode (p_crdr, 'D', nvl (ymd_drtrans, 0), nvl (ymd_crtrans, 0)),
                        decode (p_crdr, 'D', nvl (ymd_drbooks, 0), nvl (ymd_crbooks, 0)))),
             0)
     into l_dd_bal
     from tac_hgempddbal d
    where     d.del_if = 0
          and d.tco_company_pk = p_compk
          and d.tr_status = p_status
          and d.ccy like decode (p_ccy, null, '%', p_ccy)
          and d.tac_abacctcode_pk like decode (p_acc_pk, '', '%', p_acc_pk)
          and d.vhr_emp_pk like decode (p_emp_pk, '', '%', p_emp_pk)
          and d.std_ymd >= to_char (add_months (to_date (ac_get_lastclosemm (p_ymd, p_compk), 'YYYYMMDD'), +1), 'YYYYMMDD')
          and d.std_ymd < p_ymd;

   l_total_amt := nvl (l_mm_bal, 0) + nvl (l_dd_bal, 0);


   l_rtn_value := l_total_amt;
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_GFKA00130_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_gfka00130_1 (p_tac_kafinanceform_pk   in varchar,
                                           p_std_ym                    varchar2,
                                           p_tco_company_pk            varchar2,
                                           p_status                    varchar2,
                                           p_type                      varchar2,          --ACC: ACCUMMULATE, MONTH : SUM BY MONTH
                                           p_rate1                     varchar2,
                                           p_rate2                     varchar2,
                                           p_rate3                     varchar2)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        23-Sep-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular      varchar2 (8000) := '';
   l_value         varchar2 (8000) := '';
   l_rtn_value     number;
   l_status        varchar (300);
   l_prn_lr        varchar2 (10);
   l_ac_cd         varchar2 (1000) := '';
   l_ac_drcr_num   number := 1;
   l_ac_drcr       varchar (2) := '';
   l_ac_pk         varchar2 (30) := '';
   l_row_count     number := 0;
   l_close_ym      varchar2 (10) := '';
   l_dd_sum        number := 0;
   l_mm_sum        number := 0;
   l_next_mm       varchar2 (8);
begin
   select prn_lr
     into l_prn_lr
     from tac_kafinanceform
    where pk = p_tac_kafinanceform_pk;

   if l_prn_lr = 'C'
   then
      ---------lay doi ung----------------------
      select sum (b.tr_bookamt)
        into l_rtn_value
        from tac_hgtrh a, tac_hgtrd_ref b
       where     a.pk = b.tac_hgtrh_pk
             and a.del_if = 0
             and a.tr_status in (0, 2)
             and b.del_if = 0
             and b.drcr_type = 'D'
             and a.tr_date between to_date (p_std_ym || '01', 'yyyymmdd') and last_day (to_date (p_std_ym || '01', 'yyyymmdd'))
             and b.tac_abacctcode_pk_dr in
                    (    select pk
                           from tac_abacctcode
                          where del_if = 0 and leaf_yn = 'Y'
                     start with     pk in (select tac_abacctcode_pk_dr
                                             from tac_kafinanceformd
                                            where tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0)
                                and del_if = 0
                     connect by prior pk = pac_pk and del_if = 0)
             and b.tac_abacctcode_pk_cr in
                    (    select pk
                           from tac_abacctcode
                          where del_if = 0 and leaf_yn = 'Y'
                     start with     pk in (select tac_abacctcode_pk_cr
                                             from tac_kafinanceformd
                                            where tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0)
                                and del_if = 0
                     connect by prior pk = pac_pk and del_if = 0);

      return round (l_rtn_value * p_rate1 / p_rate2 / p_rate3, 2);
   elsif l_prn_lr = 'O'
   then
      --  sf_get_acct_openbal
      --------lay so du dau ky------------
      l_formular := '';

      for c1 in (    select *
                       from tac_kafinanceformd1 a
                      where a.del_if = 0
                 start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0
                 connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk and del_if = 0)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.ac_cd = c1.ac_cd and a.del_if = 0;

         if upper (p_type) = 'MONTH'
         then
            select ac_get_acct_openbal (p_tco_company_pk,
                                             l_ac_pk,
                                             'VND',
                                             p_std_ym || '01',
                                             p_status,
                                             'BOOKS')
              into l_value
              from dual;
         end if;                                                                                                 --p_type ='MONTH'


         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;

      return round (l_rtn_value * p_rate1 / p_rate2 / p_rate3, 2);
   elsif l_prn_lr = 'E'
   then
      --  sf_get_acct_openbal
      --------lay so du cuoi ky------------
      l_formular := '';
      l_next_mm := to_char (add_months (to_date (p_std_ym || '01', 'yyyymmdd'), 1), 'yyyymmdd');

      for c1 in (    select *
                       from tac_kafinanceformd1 a
                      where a.del_if = 0
                 start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0
                 connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk and del_if = 0)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.ac_cd = c1.ac_cd and a.del_if = 0;

         if upper (p_type) = 'MONTH'
         then
            select ac_get_acct_openbal (p_tco_company_pk,
                                             l_ac_pk,
                                             'VND',
                                             l_next_mm,
                                             p_status,
                                             'BOOKS')
              into l_value
              from dual;
         end if;                                                                                                 --p_type ='MONTH'


         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;

      return round (l_rtn_value * p_rate1 / p_rate2 / p_rate3, 2);
   elsif l_prn_lr = 'L' or l_prn_lr = 'R'
   then
      --------lay phat sinh------------
      for c1 in (    select *
                       from tac_kafinanceformd1 a
                      where a.del_if = 0
                 start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0
                 connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk and del_if = 0)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.ac_cd = c1.ac_cd and a.del_if = 0;

         if upper (p_type) = 'MONTH'
         then
            select count (*),
                   decode (l_ac_drcr,  'D', sum (nvl (ym_drsum, 0)),  'C', sum (nvl (ym_crsum, 0))) * p_rate1 / p_rate2 / p_rate3
              into l_row_count, l_value
              from tac_hgmmbal m
             where     m.del_if = 0
                   and m.tco_company_pk = p_tco_company_pk
                   and m.tr_status = p_status
                   and m.tac_abacctcode_pk = l_ac_pk
                   and m.std_ym = p_std_ym;

            if (l_row_count = 0)
            then
               select   nvl (decode (l_ac_drcr,  'D', sum (nvl (ymd_drbooks, 0)),  'C', sum (nvl (ymd_crbooks, 0))), 0)
                      * p_rate1
                      / p_rate2
                      / p_rate3
                 into l_value
                 from tac_hgddbal d
                where     d.del_if = 0
                      and d.tco_company_pk = p_tco_company_pk
                      and d.tr_status = p_status
                      and d.tac_abacctcode_pk = l_ac_pk
                      and d.std_ymd between (p_std_ym || '01')
                                        and to_char (last_day (to_date (p_std_ym || '01', 'YYYYMMDD')), 'YYYYMMDD');
            end if;

            l_ac_cd := '';
         else                                                                                               --p_type='ACCUMULDATE'
            select substr (sf_get_lastclosemm (p_std_ym || '01', p_tco_company_pk), 0, 6) into l_close_ym from dual;

            if (l_close_ym < p_std_ym)
            then
               if (l_close_ym < substr (p_std_ym, 0, 4) || '01')
               then
                  select   decode (l_ac_drcr,  'D', sum (nvl (ymd_drbooks, 0)),  'C', sum (nvl (ymd_crbooks, 0)))
                         * p_rate1
                         / p_rate2
                         / p_rate3
                    into l_value
                    from tac_hgddbal d
                   where     d.del_if = 0
                         and d.tac_abacctcode_pk = l_ac_pk
                         and d.tco_company_pk = p_tco_company_pk
                         and d.std_ymd between (substr (p_std_ym, 0, 4) || '0101')
                                           and to_char (last_day (to_date (p_std_ym || '01', 'YYYYMMDD')), 'YYYYMMDD')
                         and d.tr_status = p_status;
               else
                  select   decode (l_ac_drcr,  'D', sum (nvl (ym_drsum, 0)),  'C', sum (nvl (ym_crsum, 0)))
                         * p_rate1
                         / p_rate2
                         / p_rate3
                    into l_mm_sum
                    from tac_hgmmbal m
                   where     m.del_if = 0
                         and m.tco_company_pk = p_tco_company_pk
                         and m.tr_status = p_status
                         and m.tac_abacctcode_pk = l_ac_pk
                         and m.std_ym >= (substr (p_std_ym, 0, 4) || '01')
                         and m.std_ym <= l_close_ym;

                  select   decode (l_ac_drcr,  'D', sum (nvl (ymd_drbooks, 0)),  'C', sum (nvl (ymd_crbooks, 0)))
                         * p_rate1
                         / p_rate2
                         / p_rate3
                    into l_dd_sum
                    from tac_hgddbal d
                   where     d.del_if = 0
                         and d.tac_abacctcode_pk = l_ac_pk
                         and d.tco_company_pk = p_tco_company_pk
                         and d.std_ymd between to_char (last_day (to_date (l_close_ym || '01', 'YYYYMMDD')) + 1, 'YYYYMMDD')
                                           and to_char (last_day (to_date (p_std_ym || '01', 'YYYYMMDD')), 'YYYYMMDD')
                         and d.tr_status = p_status;


                  l_value := nvl (l_dd_sum, 0) + nvl (l_mm_sum, 0);
               end if;
            else
               select   decode (l_ac_drcr,  'D', sum (nvl (ym_drsum, 0)),  'C', sum (nvl (ym_crsum, 0)))
                      * p_rate1
                      / p_rate2
                      / p_rate3
                 into l_value
                 from tac_hgmmbal m
                where     m.del_if = 0
                      and m.tco_company_pk = p_tco_company_pk
                      and m.tr_status = p_status
                      and m.tac_abacctcode_pk = l_ac_pk
                      and m.std_ym <= p_std_ym
                      and m.std_ym >= substr (p_std_ym, 0, 4) || '01';
            end if;

            l_ac_cd := '';
         end if;                                                                                                 --p_type ='MONTH'


         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;



      return l_rtn_value;
   end if;

   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_PRO_REVERSE_POLISH;

CREATE OR REPLACE FUNCTION HPDQ.AC_PRO_REVERSE_POLISH
                                    (
                                        v_formular          VARCHAR2,
                                        v_type              VARCHAR2,
                                        v_year              VARCHAR2
                                    )
RETURN VARCHAR2
IS

    v_tmp       VARCHAR2(2000);
    firsr_str   VARCHAR2(2000);
    last_str    VARCHAR2(2000);
    v_num       NUMBER := 1;    
    v_one       VARCHAR2(1);
    v_stack     VARCHAR2(100);
    v_one_stack VARCHAR2(1);
    K           NUMBER;
    v_ngoacmo   NUMBER;
    v_bt_ngoac  VARCHAR2(100);
    v_bt        VARCHAR2(2000);
    v_num_tb    NUMBER;
    
    v_count     NUMBER;
    
BEGIN

    v_tmp := v_formular;
    k := 1;
    WHILE (v_num <= length(v_formular)) LOOP

        SELECT SUBSTR(v_tmp, 1, 1) INTO v_one
          FROM DUAL;
        
        IF v_one IN ( '+', '-', '*', '/', '(', ')') THEN
          
          SELECT SUBSTR(v_stack, -1) INTO v_one_stack
            FROM DUAL;

          IF firsr_str IS NULL THEN
             firsr_str := SUBSTR(v_formular, k, v_num - k);
             IF firsr_str IS NOT NULL THEN
                 
                SELECT COUNT(*) INTO v_count
                  FROM TAC_TMPTRIALBAL
                 WHERE AC_CD = firsr_str;
                
                IF v_count > 0 THEN
                    SELECT DECODE(v_type,  '21', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_op , 0),  NVL(cr_op , 0)),
                                                                1, DECODE(DRCR_TYPE, 1, NVL(dr_bl , 0),  NVL(cr_bl , 0))),
                                           '22', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_acc_last, 0), NVL(cr_acc_last, 0)),
                                                                1, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0)),
                                                                2, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0))),
                                           '23', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_bl_last_1, 0) - NVL(dr_bl_last_2, 0), NVL(cr_bl_last_1, 0) - NVL(cr_bl_last_2, 0)),
                                                                1, DECODE(DRCR_TYPE, 1, NVL(dr_bl, 0) - NVL(dr_bl_last_1, 0), (NVL(cr_bl, 0) - NVL(cr_bl_last_1, 0))))
                                  )
                      INTO v_num_tb
                      FROM TAC_TMPTRIALBAL
                     WHERE AC_CD = firsr_str;
                ELSE
                    v_num_tb := 0;
                END IF;
                v_bt := v_bt || v_num_tb;
             END IF;
          ELSE
             BEGIN
                  IF (k <> v_num) THEN
                      firsr_str := firsr_str || ';' || SUBSTR(v_formular, K, v_num - k);

                      SELECT COUNT(*) INTO v_count
                        FROM TAC_TMPTRIALBAL
                       WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);

                      IF v_count > 0 THEN
                          SELECT DECODE(v_type, '21', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_op, 0),  NVL(cr_op, 0)),
                                                                     1, DECODE(DRCR_TYPE, 1, NVL(dr_bl , 0),  NVL(cr_bl , 0))),
                                                '22', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_acc_last, 0), NVL(cr_acc_last, 0)),
                                                                     1, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0)),
                                                                     2, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0))),
                                                '23', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_bl_last_1, 0) - NVL(dr_bl_last_2, 0), NVL(cr_bl_last_1, 0) - NVL(cr_bl_last_2, 0)),
                                                                     1, DECODE(DRCR_TYPE, 1, NVL(dr_bl, 0) - NVL(dr_bl_last_1, 0), (NVL(cr_bl, 0) - NVL(cr_bl_last_1, 0))))
                                       )
                            INTO v_num_tb
                            FROM TAC_TMPTRIALBAL
                           WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);
                      ELSE
                          v_num_tb := 0;
                      END IF;
                      v_bt := v_bt || ';' || v_num_tb;
                  END IF;
             END;
          END IF;
          k := v_num + 1;
          IF v_one_stack IS NULL THEN
             v_stack := v_one;
          ELSE
            BEGIN
              IF (v_one = ')') THEN
              
                 SELECT instr(v_stack, '(', -1) INTO v_ngoacmo
                   FROM dual;
                 
                 SELECT SUBSTR(v_stack, v_ngoacmo + 1, length(v_stack)) INTO v_bt_ngoac
                   FROM DUAL;
                   
                 SELECT SUBSTR(v_stack, 1, length(v_stack) - NVL(LENGTH(v_bt_ngoac),0) - 1) INTO v_stack
                   FROM DUAL;
                 
                 IF (v_stack = '(') THEN
                    v_stack := '';
                 END IF;
                 
                 WHILE (v_bt_ngoac IS NOT NULL) LOOP
                    SELECT SUBSTR(v_bt_ngoac, -1) INTO v_one_stack
                      FROM DUAL;
                    firsr_str := firsr_str || ';' || v_one_stack;
                    v_bt      := v_bt || ';' || v_one_stack;
                    SELECT SUBSTR(v_bt_ngoac, 1, length(v_bt_ngoac) - 1) INTO v_bt_ngoac
                      FROM DUAL;
                 END LOOP;
              ELSE
                 BEGIN
                    IF (v_one = '(') THEN
                       v_stack := v_stack || v_one;
                    ELSE
                       BEGIN 
                          IF AC_SF_GET_PRIORITY(v_one) > AC_SF_GET_PRIORITY(v_one_stack) THEN
                             v_stack := v_stack || v_one;
                          ELSE
                             SELECT SUBSTR(v_stack, -1) INTO v_one_stack
                               FROM DUAL;
                             firsr_str := firsr_str || ';' || v_one_stack;
                             v_bt      := v_bt || ';' || v_one_stack;
                             SELECT SUBSTR(v_stack, 1, length(v_stack) - 1) INTO v_stack
                               FROM DUAL;
                             v_stack := v_stack || v_one;
                          END IF;
                        END;
                    END IF;
                 END;
              END IF;
              
            END;
          END IF;
        END IF;
        v_num       := v_num + 1;
        last_str    := SUBSTR(v_formular, v_num, Length(v_formular));
        v_tmp       := last_str;
    END LOOP;
    IF (k <> v_num) THEN
        firsr_str := firsr_str || ';' || SUBSTR(v_formular, k, Length(v_formular));
        SELECT COUNT(*) INTO v_count
          FROM TAC_TMPTRIALBAL
         WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);
        
        IF v_count > 0 THEN
                       
            SELECT DECODE(v_type, '21', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_op, 0),  NVL(cr_op, 0)),
                                                       1, DECODE(DRCR_TYPE, 1, NVL(dr_bl , 0),  NVL(cr_bl , 0))),
                                  '22', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_acc_last, 0), NVL(cr_acc_last, 0)),
                                                       1, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0)),
                                                       2, DECODE(DRCR_TYPE, 1, NVL(dr_acc, 0), NVL(cr_acc, 0))),
                                  '23', DECODE(v_year, 0, DECODE(DRCR_TYPE, 1, NVL(dr_bl_last_1, 0) - NVL(dr_bl_last_2, 0), NVL(cr_bl_last_1, 0) - NVL(cr_bl_last_2, 0)),
                                                       1, DECODE(DRCR_TYPE, 1, NVL(dr_bl, 0) - NVL(dr_bl_last_1, 0), (NVL(cr_bl, 0) - NVL(cr_bl_last_1, 0))))
                         ) 
              INTO v_num_tb
              FROM TAC_TMPTRIALBAL
             WHERE AC_CD = SUBSTR(v_formular, K, v_num - k);
        ELSE
            v_num_tb := 0;
        END IF;
        v_bt := v_bt || ';' || v_num_tb;
    END IF;
    WHILE (v_stack IS NOT NULL) LOOP
       SELECT SUBSTR(v_stack, -1) INTO v_one_stack
         FROM DUAL;
       firsr_str := firsr_str || ';' || v_one_stack;
       v_bt      := v_bt || ';' || v_one_stack;
       SELECT SUBSTR(v_stack, 1, length(v_stack) - 1) INTO v_stack
         FROM DUAL;
    END LOOP;
    
    SELECT AC_SUM_FROM_POLISH(v_bt) INTO v_bt FROM DUAL;
    RETURN v_bt;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_REPORT_DESIGN;

CREATE OR REPLACE FUNCTION HPDQ.ac_report_design (p_tco_company_pk          varchar,
                                             p_tac_kafinanceform_pk    varchar,
                                             p_from_date               varchar,
                                             p_to_date                 varchar,
                                             p_status                  varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        23-Sep-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular      varchar2 (8000) := '';
   l_value         varchar2 (8000) := '';
   l_rtn_value     number;
   l_status        varchar (300);
   l_prn_lr        varchar2 (10);
   l_next_ymd      varchar2 (8);

   l_ac_cd         varchar2 (1000) := '';

   l_ac_drcr_num   number := 1;
   l_ac_drcr       varchar (2) := '';
   l_ac_pk         varchar2 (30) := '';
   l_row_count     number := 0;
   l_close_ym      varchar2 (10) := '';
   l_dd_sum        number := 0;
   l_mm_sum        number := 0;
begin
   select prn_lr
     into l_prn_lr
     from tac_kafinanceform
    where pk = p_tac_kafinanceform_pk;

   if l_prn_lr = 'C'
   then
      ---------lay doi ung----------------------
      select sum (b.tr_bookamt)
        into l_rtn_value
        from tac_hgtrh a, tac_hgtrd_ref b
       where     a.pk = b.tac_hgtrh_pk
             and a.del_if = 0
             and a.tr_status in (0, 2)
             and b.del_if = 0
             and b.drcr_type = 'D'
             and a.tr_date between to_date (p_from_date, 'yyyymmdd') and to_date (p_to_date, 'yyyymmdd')
             and b.tac_abacctcode_pk_dr in
                    (    select pk
                           from tac_abacctcode
                          where del_if = 0 and leaf_yn = 'Y'
                     start with     pk in (select tac_abacctcode_pk_dr
                                             from tac_kafinanceformd
                                            where tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0)
                                and del_if = 0
                     connect by prior pk = pac_pk and del_if = 0)
             and b.tac_abacctcode_pk_cr in
                    (    select pk
                           from tac_abacctcode
                          where del_if = 0 and leaf_yn = 'Y'
                     start with     pk in (select tac_abacctcode_pk_cr
                                             from tac_kafinanceformd
                                            where tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0)
                                and del_if = 0
                     connect by prior pk = pac_pk and del_if = 0);

      return l_rtn_value;
   elsif l_prn_lr = 'O'
   then
      --  acnt.sf_get_acct_openbal
      --------lay so du dau ky------------
      l_formular := '';

      for c1 in (select *
                   from tac_kafinanceformd1
                  where del_if = 0 and tac_kafinanceform_pk = p_tac_kafinanceform_pk and tac_abacctcode_pk is not null)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where  a.pk = c1.tac_abacctcode_pk and a.del_if = 0;


         select ac_get_acct_openbal (p_tco_company_pk,
                                     l_ac_pk,
                                     'VND',
                                     p_from_date,
                                     p_status,
                                     'BOOKS')
           into l_value
           from dual;

         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;

      return l_rtn_value;
   elsif l_prn_lr = 'E'
   then
      --  acnt.sf_get_acct_openbal
      --------lay so du cuoi ky------------
      l_formular := '';
      l_next_ymd := to_char (to_date (p_to_date, 'yyyymmdd') + 1, 'yyyymmdd');

      for c1 in (select *
                   from tac_kafinanceformd1
                  where del_if = 0 and tac_kafinanceform_pk = p_tac_kafinanceform_pk and tac_abacctcode_pk is not null)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.pk = c1.tac_abacctcode_pk and a.del_if = 0;


         select ac_get_acct_openbal (p_tco_company_pk,
                                     l_ac_pk,
                                     'VND',
                                     l_next_ymd,
                                     p_status,
                                     'BOOKS')
           into l_value
           from dual;


         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;

      return l_rtn_value;
   elsif l_prn_lr = 'L' or l_prn_lr = 'R'
   then
      --------lay phat sinh------------
      for c1 in (select *
                   from tac_kafinanceformd1
                  where del_if = 0 and tac_kafinanceform_pk = p_tac_kafinanceform_pk and tac_abacctcode_pk is not null)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.pk = c1.tac_abacctcode_pk and a.del_if = 0;


         select count (*), decode (l_ac_drcr,  'D', sum (nvl (ym_drsum, 0)),  'C', sum (nvl (ym_crsum, 0)))
           into l_row_count, l_value
           from tac_hgmmbal m
          where     m.del_if = 0
                and m.tco_company_pk = p_tco_company_pk
                and m.tr_status = p_status
                and m.tac_abacctcode_pk = l_ac_pk
                and m.std_ym between p_from_date and p_to_date;

         if (l_row_count = 0)
         then
            select nvl (decode (l_ac_drcr,  'D', sum (nvl (ymd_drbooks, 0)),  'C', sum (nvl (ymd_crbooks, 0))), 0)
              into l_value
              from tac_hgddbal d
             where     d.del_if = 0
                   and d.tco_company_pk = p_tco_company_pk
                   and d.tr_status = p_status
                   and d.tac_abacctcode_pk = l_ac_pk
                   and d.std_ymd between p_from_date and p_to_date;
         end if;


         l_value := nvl (c1.operator_, '+') || '(' || round (nvl (l_value, 0), 2) || ')';

         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      else
         l_rtn_value := 0;
      end if;

      return l_rtn_value;
   end if;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60080250_EXECUTE_21_36;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60080250_execute_21_36 (
   p_formular      IN VARCHAR,
   p_date_type        VARCHAR,
   p_column_type      VARCHAR,
   p_balabce          VARCHAR,
   p_header           VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        09-Jun-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    VARCHAR (4000) := '';
   l_value       VARCHAR (4000) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN
   FOR c1
      IN (SELECT SUBSTR (COLUMN_VALUE, 0, 1) col1,
                 SUBSTR (COLUMN_VALUE, 2, LENGTH (COLUMN_VALUE) - 1) ac_cd
            FROM TABLE (split (p_formular, ','))
           WHERE COLUMN_VALUE IS NOT NULL)
   LOOP
      CASE
         WHEN p_column_type = 'THIS'
         THEN
            CASE
               WHEN p_balabce = 'L' OR p_balabce = 'R' OR p_balabce = 'B'
               THEN
                    SELECT DECODE (
                              p_balabce,
                              'L', SUM (dr_ps),
                              'R', SUM (cr_ps),
                              DECODE (
                                 dc,
                                 1, SUM (NVL (dr_bl, 0)) - SUM (NVL (dr_op, 0)),
                                 SUM (NVL (cr_bl, 0)) - SUM (NVL (cr_op, 0))))
                      INTO l_value
                      FROM tac_cf_indirect
                     WHERE ac_cd = c1.ac_cd
                  GROUP BY dc;
               WHEN p_balabce = 'C'
               THEN
                  SELECT 0
                    INTO l_value
                    FROM tac_cf_indirect
                   WHERE ac_cd = c1.ac_cd;
            END CASE;
         WHEN p_column_type = 'LAST'
         THEN
              SELECT DECODE (
                        p_balabce,
                        'L', SUM (dr_ps1),
                        'R', SUM (cr_ps1),
                        DECODE (
                           dc,
                           1, SUM (NVL (dr_bl1, 0)) - SUM (NVL (dr_op1, 0)),
                           SUM (NVL (cr_bl1, 0)) - SUM (NVL (cr_op1, 0))))
                INTO l_value
                FROM tac_cf_indirect
               WHERE ac_cd = c1.ac_cd
            GROUP BY dc;
         WHEN p_column_type = 'ACC'
         THEN
            SELECT DECODE (p_balabce, 'L', SUM (dr_ps), SUM (cr_ps))
              INTO l_value
              FROM tac_cf_indirect
             WHERE ac_cd = c1.ac_cd;
      END CASE;

      l_value := NVL (c1.col1, '+') || '(' || l_value || ')';


      l_formular := l_formular || l_value;
   END LOOP;


   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
      INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_60190140_1;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_60190140_1 (
   p_tac_kafinanceform_pk   IN VARCHAR,
   p_date                      VARCHAR2,
   p_comp                      VARCHAR2,
   p_status                    VARCHAR2,
   p_type                      VARCHAR2, --ACC: ACCUMMULATE, MONTH : SUM BY MONTH
   p_rate1                     VARCHAR2,
   p_rate2                     VARCHAR2,
   p_rate3                     VARCHAR2)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        23-Sep-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular      VARCHAR2 (8000) := '';
   l_value         VARCHAR2 (8000) := '';
   l_rtn_value     NUMBER;
   l_status        VARCHAR (300);

   l_len           NUMBER := 0;
   l_cnt           NUMBER := 0;

   l_ac_cd         VARCHAR2 (1000) := '';

   l_buf           VARCHAR2 (1) := '';


   l_ac_drcr_num   NUMBER := 1;
   l_ac_drcr       VARCHAR (2) := '';
   l_ac_pk         VARCHAR2 (30) := '';
   l_row_count     NUMBER := 0;
   l_close_ym      VARCHAR2 (10) := '';
   l_dd_sum        NUMBER := 0;
   l_mm_sum        NUMBER := 0;
BEGIN
   FOR c1
      IN (    SELECT *
                FROM tac_kafinanceform_std a
               WHERE a.del_if = 0
          START WITH a.tac_kafinanceform_st_pk = p_tac_kafinanceform_pk
                     AND del_if = 0
          CONNECT BY PRIOR tac_kafinanceform_sum_pk = tac_kafinanceform_st_pk
                     AND del_if = 0)
   LOOP
      SELECT pk,
             a.drcr_type,
             TO_NUMBER (DECODE (a.drcr_type,  'D', '1',  'C', '-1'))
        INTO l_ac_pk, l_ac_drcr, l_ac_drcr_num
        FROM tac_stcode a
       WHERE     a.tco_company_pk = p_comp
             AND a.ac_cd = c1.ac_cd
             AND a.del_if = 0;

      IF UPPER (p_type) = 'MONTH'
      THEN
         SELECT COUNT (*),
                DECODE (l_ac_drcr,
                        'D', SUM (NVL (ym_drsum, 0)),
                        'C', SUM (NVL (ym_crsum, 0)))
                * p_rate1
                / p_rate2
                / p_rate3
           INTO l_row_count, l_value
           FROM tac_hgmmbal_st m
          WHERE     m.del_if = 0
                AND m.tco_company_pk = p_comp
                AND m.tr_status = p_status
                AND m.tac_stcode_pk = l_ac_pk
                AND m.std_ym = p_date;

         IF (l_row_count = 0)
         THEN
            SELECT NVL (
                      DECODE (l_ac_drcr,
                              'D', SUM (NVL (ymd_drbooks, 0)),
                              'C', SUM (NVL (ymd_crbooks, 0))),
                      0)
                   * p_rate1
                   / p_rate2
                   / p_rate3
              INTO l_value
              FROM tac_hgddbal_st d
             WHERE     d.del_if = 0
                   AND d.tco_company_pk = p_comp
                   AND d.tr_status = p_status
                   AND d.tac_stcode_pk = l_ac_pk
                   AND d.std_ymd BETWEEN (p_date || '01')
                                     AND TO_CHAR (
                                            LAST_DAY (
                                               TO_DATE (p_date || '01',
                                                        'YYYYMMDD')),
                                            'YYYYMMDD');
         END IF;

         l_ac_cd := '';
      ELSE                                              --p_type='ACCUMULDATE'
         SELECT SUBSTR (sf_get_lastclosemm (p_date || '01', p_comp), 0, 6)
           INTO l_close_ym
           FROM DUAL;

         IF (l_close_ym < p_date)
         THEN
            IF (l_close_ym < SUBSTR (p_date, 0, 4) || '01')
            THEN
               SELECT DECODE (l_ac_drcr,
                              'D', SUM (NVL (ymd_drbooks, 0)),
                              'C', SUM (NVL (ymd_crbooks, 0)))
                      * p_rate1
                      / p_rate2
                      / p_rate3
                 INTO l_value
                 FROM tac_hgddbal_st d
                WHERE     d.del_if = 0
                      AND d.tac_stcode_pk = l_ac_pk
                      AND d.tco_company_pk = p_comp
                      AND d.std_ymd BETWEEN (SUBSTR (p_date, 0, 4) || '0101')
                                        AND TO_CHAR (
                                               LAST_DAY (
                                                  TO_DATE (p_date || '01',
                                                           'YYYYMMDD')),
                                               'YYYYMMDD')
                      AND d.tr_status = p_status;
            ELSE
               SELECT DECODE (l_ac_drcr,
                              'D', SUM (NVL (ym_drsum, 0)),
                              'C', SUM (NVL (ym_crsum, 0)))
                      * p_rate1
                      / p_rate2
                      / p_rate3
                 INTO l_mm_sum
                 FROM tac_hgmmbal_st m
                WHERE     m.del_if = 0
                      AND m.tco_company_pk = p_comp
                      AND m.tr_status = p_status
                      AND m.tac_stcode_pk = l_ac_pk
                      AND m.std_ym >= (SUBSTR (p_date, 0, 4) || '01')
                      AND m.std_ym <= l_close_ym;

               SELECT DECODE (l_ac_drcr,
                              'D', SUM (NVL (ymd_drbooks, 0)),
                              'C', SUM (NVL (ymd_crbooks, 0)))
                      * p_rate1
                      / p_rate2
                      / p_rate3
                 INTO l_dd_sum
                 FROM tac_hgddbal_st d
                WHERE     d.del_if = 0
                      AND d.tac_stcode_pk = l_ac_pk
                      AND d.tco_company_pk = p_comp
                      AND d.std_ymd BETWEEN TO_CHAR (
                                               LAST_DAY (
                                                  TO_DATE (
                                                     l_close_ym || '01',
                                                     'YYYYMMDD'))
                                               + 1,
                                               'YYYYMMDD')
                                        AND TO_CHAR (
                                               LAST_DAY (
                                                  TO_DATE (p_date || '01',
                                                           'YYYYMMDD')),
                                               'YYYYMMDD')
                      AND d.tr_status = p_status;


               l_value := NVL (l_dd_sum, 0) + NVL (l_mm_sum, 0);
            END IF;
         ELSE
            SELECT DECODE (l_ac_drcr,
                           'D', SUM (NVL (ym_drsum, 0)),
                           'C', SUM (NVL (ym_crsum, 0)))
                   * p_rate1
                   / p_rate2
                   / p_rate3
              INTO l_value
              FROM tac_hgmmbal_st m
             WHERE     m.del_if = 0
                   AND m.tco_company_pk = p_comp
                   AND m.tr_status = p_status
                   AND m.tac_stcode_pk = l_ac_pk
                   AND m.std_ym <= p_date
                   AND m.std_ym >= SUBSTR (p_date, 0, 4) || '01';
         END IF;

         l_ac_cd := '';
      END IF;                                                --p_type ='MONTH'

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL (c1.operator_, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
      INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.AC_SF_FORMULAR_EXECUTE_IC;

CREATE OR REPLACE FUNCTION HPDQ.ac_sf_formular_execute_ic (
   p_formular      IN VARCHAR,
   p_date_type        VARCHAR,
   p_column_type      VARCHAR)
   RETURN NUMBER
IS
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  -----------  ---------------  ------------------------------------
      1.0        16-Nov-2009  TTAL        1. Created this function.
   ******************************************************************************/
   l_tmp         VARCHAR (5000) := TRIM (p_formular);
   l_len         NUMBER := 0;
   l_cnt         NUMBER := 0;
   l_formular    VARCHAR (1000) := '';
   l_ac_cd       VARCHAR (1000) := '';
   l_value       VARCHAR (1000) := '';
   l_buf         VARCHAR (1) := '';
   l_rtn_value   NUMBER;
   l_status      VARCHAR (300);
BEGIN

   FOR c1
      In (select substr (column_value, 0, 1) col1,
                 substr (column_value, 2, length (column_value) - 1) col2
            from table (split (p_formular, ','))
           where column_value is not null--                    select a.*, b.operator_
                                         --                      from tac_fsqd15 a, tac_kafinanceformd1 b
                                         --                     where b.del_if = 0 and a.ac_cd = b.ac_cd
                                         --                          and tac_abacctcode_pk is not null
                                         --                           and b.pk in
                                         --                                  (    select pk
                                         --                                         from tac_kafinanceformd1 a
                                         --                                        where a.del_if = 0
                                         --                                      start with a.tac_kafinanceform_pk = p_tac_kafinanceform_pk
                                         --                                      and del_if = 0
                                         --                                      connect by prior tac_kafinanceform_sum_pk = tac_kafinanceform_pk
                                         --                                   )
                                         --

         )
   LOOP
      IF p_column_type = 'THIS'
      THEN
         SELECT SUM (m_ps)
           INTO l_value
           FROM tac_fsqd15
          WHERE ac_cd = c1.col2;
      ELSIF p_column_type = 'LAST'
      THEN
         SELECT SUM (m_ps1)
           INTO l_value
           FROM tac_fsqd15
          WHERE ac_cd = c1.col2;
      ELSIF p_column_type = 'ACC'
      THEN
         SELECT SUM (m_acc)
           INTO l_value
           FROM tac_fsqd15
          WHERE ac_cd = c1.col2;
      ELSIF p_column_type = 'ACC1'
      THEN
         SELECT SUM (m_acc1)
           INTO l_value
           FROM tac_fsqd15
          WHERE ac_cd = c1.col2;
      ELSIF p_column_type = 'BAL'
      THEN
         SELECT SUM (m_bal)
           INTO l_value
           FROM tac_fsqd15
          WHERE ac_cd = c1.col2;
      ELSIF p_column_type = 'BAL1'
      THEN
         SELECT SUM (m_bal1)
           INTO l_value
           FROM tac_fsqd15
          WHERE ac_cd = c1.col2;
      END IF;

      -- END IF;
      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL (c1.col1, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
      INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_CAL_TAX_CONVERT;

CREATE OR REPLACE FUNCTION HPDQ.F_CAL_TAX_CONVERT
( 
   P_TN_CHUA_GT NUMBER,
   P_GT NUMBER,
   P_ADJ_AMT NUMBER,
   P_TYPE VARCHAR2    -- xem comment phia duoi
) 
RETURN NUMBER 
IS
L_NET_1 NUMBER;



L_AMT NUMBER;
L_KQ_TMP NUMBER;
L_FOUND  NUMBER;
L_CHECK  NUMBER;
L_RESULT NUMBER;  
j number;
l_new_tax number;

TYPE num_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    L_M num_array; 
    L_R num_array;
    L_C num_array;
    L_F num_array;
    
/*
 p_type= +: cong them mot so C => tim B
  
  cong thuc tong quat: 
  
  B=(X*A+C-Y)/Z
  
  TRONG DO: X LA RATE CHENH LECH BAC THUE CO TRONG CONG THUC QUI DOI NET GROSS
  Y: SO TIEN CHENH LECH GIUA CAC BAC THUE
  Z:CHENH LECH RATE THUE 
  
  
  L_KQ_TMP:=(L_C(i-j+1)*L_AMT+P_ADJ_AMT-(L_M(i)-L_M(j)))/L_R(j); --CONG THUC TONG QUAT
  
  
  
p_tyep=  -: tru them mot so C => tim B

B=(X*A+C-Y)/Z

L_KQ_TMP:=(L_C(j-i+1)*L_AMT+P_ADJ_AMT-(L_M(j)-L_M(i)))/L_R(j);
  
*/    
    
    
    
BEGIN
    L_M(1):=0;L_M(2):=250000;L_M(3):=750000;L_M(4):=1650000;L_M(5):=3250000;L_M(6):=5850000;L_M(7):=9850000;
    L_R(1):=0.95;L_R(2):=0.9;L_R(3):=0.85;L_R(4):=0.8;L_R(5):=0.75;L_R(6):=0.7;L_R(7):=0.65;
    L_C(1):=0;L_C(2):=0.05;L_C(3):=0.1;L_C(4):=0.15;L_C(5):=0.2;L_C(6):=0.25;L_C(7):=0.3;
    L_F(1):=0;L_F(2):=5000000;L_F(3):=10000000;L_F(4):=18000000;L_F(5):=32000000;L_F(6):=52000000;L_F(7):=80000000;

    L_AMT:=P_TN_CHUA_GT-P_GT; -- SO TIEN  DEM TINH THUE
    IF L_AMT<=0 THEN
       L_NET_1:=0;
    ELSE
       L_NET_1:=P_TN_CHUA_GT-HR_F_GET_TAX(L_AMT,'01','01',1); --TRUOC KHI ADJUST 
    END IF;    
    
    
    L_FOUND:=0;--CHUA TIM THAY
    
    IF P_TYPE='-' THEN --them vao gross mot so tien B de khi - C= Net  (C la so da biet truoc) 
    
    
                FOR i IN 1..7 LOOP --LAP QUA 7 MUC
                    IF L_FOUND=0 THEN
                                if i<7 then
                                    IF L_AMT>=L_F(i) and L_AMT<L_F(i+1) then --roi vao muc can tinh
                                        FOR j IN i..7 LOOP --LAP QUA tu muc i
                                            IF L_FOUND=0 THEN
                                                L_KQ_TMP:=(L_C(j-i+1)*L_AMT+P_ADJ_AMT-(L_M(j)-L_M(i)))/L_R(j);
                                                --TEST LAI
                                                l_new_tax:=F_GET_TAX(L_KQ_TMP+L_AMT,'01','01',1);
                                                
                                                L_CHECK:=L_KQ_TMP+P_TN_CHUA_GT-l_new_tax-P_ADJ_AMT-L_NET_1;
                                                
                                                IF ABS(L_CHECK)<10 THEN
                                                    --DA TIM DUOC
                                                    L_FOUND:=1;
                                                END IF;
                                                
                                                
                                            END IF;    
                                        END LOOP;
                                    end if;
                                    
                                ELSE
                                    IF L_AMT>=L_F(i) then --muc cao nhat
                                        j:=7;
                                            IF L_FOUND=0 THEN
                                                L_KQ_TMP:=(L_C(j-i+1)*L_AMT+P_ADJ_AMT-(L_M(j)-L_M(i)))/L_R(j);
                                                --TEST LAI
                                                l_new_tax:=F_GET_TAX(L_KQ_TMP+L_AMT,'01','01',1);
                                                
                                                L_CHECK:=L_KQ_TMP+P_TN_CHUA_GT-l_new_tax-P_ADJ_AMT-L_NET_1;
                                                
                                                
                                                IF ABS(L_CHECK)<10 THEN
                                                    --DA TIM DUOC
                                                    L_FOUND:=1;
                                                END IF;
                                                
                                                
                                            END IF;    
                                        
                                    end if;
                                        
                                end if; 
                     END IF;              
                END LOOP;
                
    ELSIF P_TYPE='+' THEN --bot vao gross mot so tien B de khi + C= Net  (C la so da biet truoc)
        FOR i IN REVERSE 1..7 LOOP --LAP QUA 7 MUC THEO CHIEU NGUOC LAI
            IF L_FOUND=0 THEN
                        if i=7 then
                            IF L_AMT>=L_F(i) then --roi vao muc can tinh
                                FOR j IN REVERSE 1..i LOOP --LAP QUA tu muc i
                                    IF L_FOUND=0 THEN
                                        L_KQ_TMP:=(L_C(i-j+1)*L_AMT+P_ADJ_AMT-(L_M(i)-L_M(j)))/L_R(j); --CONG THUC TONG QUAT
                                        
                                        --TEST LAI
                                        l_new_tax:=F_GET_TAX(L_AMT-L_KQ_TMP,'01','01',1);
                                        
                                        L_CHECK:=P_TN_CHUA_GT-L_KQ_TMP-l_new_tax+P_ADJ_AMT-L_NET_1;
                                        
                                        IF ABS(L_CHECK)<10 THEN
                                            --DA TIM DUOC
                                            L_FOUND:=1;
                                        END IF;
                                        
                                        
                                    END IF;    
                                END LOOP;
                            end if;  
                              
                        ELSE
                            IF L_AMT>=L_F(i) and L_AMT<L_F(i+1) then --roi vao muc can tinh
                                FOR j IN REVERSE 1..i LOOP --LAP QUA tu muc i
                                    IF L_FOUND=0 THEN
                                        L_KQ_TMP:=(L_C(i-j+1)*L_AMT+P_ADJ_AMT-(L_M(i)-L_M(j)))/L_R(j);
                                        --TEST LAI
                                        l_new_tax:=F_GET_TAX(L_AMT-L_KQ_TMP,'01','01',1);
                                        
                                        L_CHECK:=P_TN_CHUA_GT-L_KQ_TMP-l_new_tax+P_ADJ_AMT-L_NET_1;
                                        
                                        IF ABS(L_CHECK)<10 THEN
                                            --DA TIM DUOC
                                            L_FOUND:=1;
                                        END IF;
                                        
                                        
                                    END IF;    
                                END LOOP;
                            end if;
                            
                        
                                
                        end if; 
             END IF;              
        END LOOP;
    
    END IF;                
    
    IF L_FOUND=1 THEN
        L_RESULT:=ROUND(L_KQ_TMP,2);
    ELSE
       L_RESULT:=-1;
    END IF;        
    
    RETURN L_RESULT;    

END;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.F_GFBR00030_ACC;

CREATE OR REPLACE FUNCTION HPDQ.f_gfbr00030_acc (v_grp    in number, -- Group Code
                                                 v_case   in varchar2, -- sql case
                                                 v_par    in varchar2 -- parameter
                                                                     )
   return varchar2
is
   v_code       varchar2 (20);
   v_name       varchar2 (100);
   v_rpt_code   varchar2 (3000);

   cursor c1
   is
        select sf_a_get_accd (d.tac_abacctcode_pk, v_par)
          into v_code
          from tac_hgtrd d
         where d.del_if = 0 and d.tac_hgtrh_pk = v_grp and d.drcr_type = v_case
      group by d.drcr_type, d.tac_abacctcode_pk
      order by d.drcr_type desc;
begin
   open c1;

   loop
      fetch c1 into v_code;

      exit when c1%notfound;
      v_rpt_code := v_rpt_code || '' || v_code || ',';
   end loop;

   --    RETURN v_rpt_code;
   return substr (v_rpt_code, 1, length (v_rpt_code) - 1);
exception
   when others
   then
      return sqlerrm;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_CH0000000_00_GET_MON_WEEK;

CREATE OR REPLACE FUNCTION HPDQ.hr_f_ch0000000_00_get_mon_week(
    in_DATE IN VARCHAR2,
    in_tco_company_pk varchar2
    )
RETURN NUMBER IS
WEEK_NO NUMBER;
FROM_DATE VARCHAR2(10);

BEGIN


   WEEK_NO := 0 ;

   SELECT MIN(CAR_DATE) INTO FROM_DATE FROM THR_CALENDAR a
   WHERE DAY_TYPE=2 AND SUBSTR(CAR_DATE,1,6) = SUBSTR(in_DATE,1,6) 
   and del_if = 0 and A.TCO_COMPANY_PK = in_tco_company_pk
    ;

   WEEK_NO := HR_F_GET_WEEK(in_DATE, in_tco_company_pk)-HR_F_GET_WEEK(FROM_DATE, in_tco_company_pk) + 1 ;

   RETURN WEEK_NO;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END hr_f_ch0000000_00_GET_MON_WEEK;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_EMP_ID;

CREATE OR REPLACE FUNCTION HPDQ.HR_f_get_emp_id(p_join_dt varchar2) RETURN varchar2  IS
l_emp_id_max varchar2(100);
l_num    varchar2(10);
l_count_emp  number:=0;
l_code_pk   varchar2(100);
l_code_len  varchar2(100);
l_i         number:=0;
l_last      number:=0;
l_emp_id    varchar2(100);
l_start_pk     number:=0;
l_start_len     number:=0;
l_end       number:=0;
l_pk        number:=0;
l_len       number:=0;
l_characters    varchar2(100);
l_type    varchar2(100);
l_temp      varchar2(100);
l_last_comma_pos    number:=-1;
l_flag_exist boolean:=FALSE;
l_cur_rec number;
l_cur sys_refcursor;

/******************************************************************************
   NAME:       sf_get_emp_id
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/01/2008          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     sf_get_emp_id
      Sysdate:         18/01/2008
      Date and Time:   18/01/2008, 2:55:20 PM, and 18/01/2008 2:55:20 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
    l_emp_id:='';

    open l_cur for
            select 1 from THR_EMPLOYEE
   where del_if=0 ;

    FETCH l_cur INTO l_cur_rec;
      l_flag_exist := l_cur%FOUND;
    CLOSE l_cur;

   IF l_flag_exist=true THEN --DA CO NV 
        select max(substr(emp_id,-SF_GET_CARDIAL_NUM())) into l_emp_id_max from THR_EMPLOYEE
        where del_if=0;
   END IF;

   select code_len,code_pk into l_code_len,l_code_pk from thr_templates where del_if=0 and id='Emp' and template='N';
   select length(trim(translate(l_code_len,'a123456789',' '))) into l_last_comma_pos from dual; --lay phan tu dau phau cuoi cung
   if (l_last_comma_pos>=1) then
        select instr(l_code_len,',',1,l_last_comma_pos) into l_last from dual;
        l_start_pk:=1;
       l_start_len:=1;
       l_end:=1;
       while l_end <= l_last_comma_pos
       loop

            l_pk:=substr(l_code_pk,l_start_pk,instr(l_code_pk,',',1,l_end )-l_start_pk);
            l_len:=substr(l_code_len,l_start_len,instr(l_code_len,',',1,l_end )-l_start_len);
            select type,characters into l_type,l_characters
            from thr_characters
            where del_if=0 and pk=l_pk;
            if l_type ='SYSDATE' then
                l_temp:=to_char(to_date(p_join_dt,'yyyymmdd'),l_characters);
            else
                l_temp:=l_characters;
            end if;
            l_temp:=substr(l_temp,-l_len);
            l_emp_id:=l_emp_id || l_temp;
            l_start_pk:=instr(l_code_pk,',',1,l_end ) + 1 ;
            l_start_len:=instr(l_code_len,',',1,l_end ) + 1 ;
            l_end:=l_end+1;
       end loop;
   else
        select type,characters into l_type,l_characters
        from thr_characters
        where del_if=0 and pk=l_code_pk;
        if l_type='BYHAND' then
            return '';
        end if;
        l_last:=0;
   end if;

   --lay chieu dai cuoi cung cua ma 
   l_len:=substr(l_code_len,nvl(l_last,0)+1  ,length(l_code_len)-nvl(l_last,0));

   IF l_flag_exist=false THEN --CHUA CO NV 
      l_temp:=0;
   else
      l_temp:=substr(l_emp_id_max,-l_len); --phan cuoi cung cua emp id
   end if;

   l_num:=to_number(l_temp) + 1;
   l_emp_id:=l_emp_id || lpad(l_num,l_len ,'0');

   RETURN l_emp_id;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_F_GET_MONTH_WEEK;

CREATE OR REPLACE FUNCTION HPDQ.HR_F_GET_MONTH_WEEK(
    in_DATE IN VARCHAR2,
    in_tco_company_pk varchar2
    )
RETURN NUMBER IS
WEEK_NO NUMBER;
FROM_DATE VARCHAR2(10);

BEGIN


   WEEK_NO := 0 ;

   SELECT MIN(CAR_DATE) INTO FROM_DATE FROM THR_CALENDAR a
   WHERE DAY_TYPE=2 AND SUBSTR(CAR_DATE,1,6) = SUBSTR(in_DATE,1,6) 
   and del_if = 0 and A.TCO_COMPANY_PK = in_tco_company_pk
    ;

   WEEK_NO := HR_F_GET_WEEK(in_DATE, in_tco_company_pk)-HR_F_GET_WEEK(FROM_DATE, in_tco_company_pk) + 1 ;

   RETURN WEEK_NO;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END HR_F_GET_MONTH_WEEK;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.HR_SF_GET_MANAGER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.hr_sf_get_manager_name (p_thr_employee_pk varchar, p_level varchar)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/24/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value          varchar2 (100);
   l_thr_employee_pk    number;
   l_thr_employee_pk2   number;
begin
   if p_level = 1
   then
      select max (b.full_name), max (b.pk)
        into l_rtn_value, l_thr_employee_pk
        from tco_org a, thr_employee b
       where a.manager_pk = b.pk and a.pk = (select tco_org_pk
                                               from thr_employee
                                              where pk = p_thr_employee_pk);

      if l_thr_employee_pk = p_thr_employee_pk
      then
         select max (b.full_name), max (b.pk)
           into l_rtn_value, l_thr_employee_pk
           from tco_org a, thr_employee b
          where a.manager_pk = b.pk and a.pk = (select p_pk
                                                  from tco_org
                                                 where del_if = 0 and pk in (select tco_org_pk
                                                                               from thr_employee
                                                                              where pk = p_thr_employee_pk));
      end if;
   elsif p_level = 2
   then
      select max (b.full_name), max (b.pk)
        into l_rtn_value, l_thr_employee_pk
        from tco_org a, thr_employee b
       where a.manager_pk = b.pk and a.pk = (select p_pk
                                               from tco_org
                                              where del_if = 0 and pk in (select tco_org_pk
                                                                            from thr_employee
                                                                           where pk = p_thr_employee_pk));

      if l_thr_employee_pk = p_thr_employee_pk
      then
         select max (b.full_name), max (b.pk)
           into l_rtn_value, l_thr_employee_pk
           from tco_org a, thr_employee b
          where a.manager_pk = b.pk
            and a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;

      select hr_sf_get_manager_pk (p_thr_employee_pk, 1)
        into l_thr_employee_pk2
        from dual;

      if l_thr_employee_pk = l_thr_employee_pk2
      then
         select max (b.full_name)
           into l_rtn_value
           from tco_org a, thr_employee b
          where a.manager_pk = b.pk
            and a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;
   elsif p_level = 3
   then
      select max (b.full_name)
        into l_rtn_value
        from tco_org a, thr_employee b
       where a.manager_pk = b.pk
         and a.pk = (select p_pk
                       from tco_org
                      where del_if = 0 and pk in (select p_pk
                                                    from tco_org
                                                   where del_if = 0 and pk in (select tco_org_pk
                                                                                 from thr_employee
                                                                                where pk = p_thr_employee_pk)));
   end if;

   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FPGM10030_YARN;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_fpgm10030_yarn (p_wi_m_pk IN NUMBER)
   RETURN VARCHAR2
IS
   l_yarn    VARCHAR2 (100);
   l_comma   VARCHAR (1);
BEGIN
   FOR l_cur IN
      (SELECT DISTINCT (lg_f_get_spec_name_02_item (1, a.item_pk)
                       ) yarn_name
                  FROM tlg_wi_line_op_cons a
                 WHERE a.del_if = 0 AND a.tlg_wi_line_m_pk = p_wi_m_pk
              ORDER BY 1)
   LOOP
      l_yarn := l_yarn || l_comma || l_cur.yarn_name;
      l_comma := ',';
   END LOOP;

   RETURN NVL (l_yarn, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_fpgm10030_yarn;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_FPGM10030_YARN_2;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_fpgm10030_yarn_2 (
   p_card_id   IN   VARCHAR
)
   RETURN VARCHAR2
IS
   l_yarn    VARCHAR2 (100);
   l_comma   VARCHAR (1);
BEGIN
   FOR l_cur IN
      (SELECT DISTINCT (lg_f_get_spec_name_02_item (1, a.item_pk)
                       ) yarn_name
                  FROM tlg_wi_line_op_cons a, tlg_pr_line_output_d b
                 WHERE a.del_if = 0
                   AND b.del_if = 0
                   AND b.table_name = 'TLG_WI_LINE_M'
                   AND b.table_pk = a.tlg_wi_line_m_pk
                   AND b.card_id = p_card_id
              ORDER BY 1)
   LOOP
      l_yarn := l_yarn || l_comma || l_cur.yarn_name;
      l_comma := ',';
   END LOOP;

   RETURN NVL (l_yarn, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_fpgm10030_yarn_2;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.LG_F_GET_PROD170_SW_SIZING_01;

CREATE OR REPLACE FUNCTION HPDQ.lg_f_get_prod170_sw_sizing_01 (
   p_wi_m_pk   IN   NUMBER
)
   RETURN VARCHAR2
IS
   l_brand   VARCHAR2 (100);
--------
BEGIN
   SELECT MAX (lg_f_get_spec_name_02_item (3, a.item_pk))
     INTO l_brand
     FROM tlg_wi_line_op_cons a
    WHERE a.del_if = 0 AND a.tlg_wi_line_m_pk = p_wi_m_pk;

   RETURN NVL (l_brand, '-');
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN '';
END lg_f_get_prod170_sw_sizing_01;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_A_GET_BALANCE;

CREATE OR REPLACE FUNCTION HPDQ.SF_A_GET_BALANCE
                             (
                                p_compk             NUMBER,
                                p_date_to           VARCHAR2,
                                p_accd              VARCHAR2,
                                p_wh_pk             VARCHAR2
                             )
RETURN NUMBER
IS
    v_sum_balance       NUMBER(20):= 0;

BEGIN

    SELECT DECODE(DC, 1,(DC*(NVL(LAST_AMT,0)+NVL(YMAMT,0))+DC*(NVL(DR_PS,0)-NVL(CR_PS,0))),
                     -1,(DC*(NVL(LAST_AMT,0)+NVL(YMAMT,0))+DC*(NVL(DR_PS,0)-NVL(CR_PS,0))))
      INTO v_sum_balance               
      FROM (SELECT MAX(TAC_ABACCTCODE_PK) TAC_ABACCTCODE_PK,
                   NVL(SUM(THIS_DRBAL),0) - NVL(SUM(THIS_CRBAL),0) LAST_AMT
              FROM TAC_HGMMBAL
             WHERE STD_YM = SUBSTR(Sf_Get_Lastclosemm(TO_CHAR(p_date_to),p_compk), 1, 6)
               AND TCO_COMPANY_PK = p_compk
               AND DEL_IF         = 0
               AND TR_STATUS      = 2/*p_status*/
             GROUP BY TAC_ABACCTCODE_PK) A,
           (SELECT MAX(TAC_ABACCTCODE_PK) TAC_ABACCTCODE_PK, 
                    NVL(SUM(YMD_DRBOOKS),0) - NVL(SUM(YMD_CRBOOKS),0) YMAMT
              FROM TAC_HGDDBAL
             WHERE STD_YMD BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(Sf_Get_Lastclosemm(TO_CHAR(p_date_to)||'01',p_compk),'YYYYMMDD'),+1),'YYYYMMDD')
                   AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(TO_CHAR(p_date_to)||'01','YYYYMMDD'),-1)),'YYYYMMDD')
               AND TCO_COMPANY_PK = p_compk
               AND DEL_IF         = 0
               AND TR_STATUS      = 2/*p_status*/
             GROUP BY TAC_ABACCTCODE_PK) B,
           (SELECT MAX(TAC_ABACCTCODE_PK) TAC_ABACCTCODE_PK, 
                   NVL(SUM(YMD_DRBOOKS),0) DR_LK,
                   NVL(SUM(YMD_CRBOOKS),0) CR_LK
              FROM TAC_HGDDBAL
             WHERE STD_YMD BETWEEN TO_CHAR(p_date_to)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(p_date_to)||'01','YYYYMMDD')),'YYYYMMDD')
               AND TCO_COMPANY_PK = p_compk
               AND DEL_IF         = 0
               AND TR_STATUS      = 2/*p_status*/
             GROUP BY TAC_ABACCTCODE_PK) C,
           (SELECT MAX(TAC_ABACCTCODE_PK) TAC_ABACCTCODE_PK, 
                   NVL(SUM(YMD_DRBOOKS),0) DR_PS,
                   NVL(SUM(YMD_CRBOOKS),0) CR_PS
              FROM TAC_HGDDBAL
             WHERE STD_YMD BETWEEN TO_CHAR(p_date_to)||'01' AND TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(p_date_to)||'01','YYYYMMDD')),'YYYYMMDD')
               AND TCO_COMPANY_PK = p_compk
               AND DEL_IF         = 0
               AND TR_STATUS      = 2/*p_status*/
             GROUP BY TAC_ABACCTCODE_PK) D,
           (SELECT A.PK,AC_CD, DECODE(DRCR_TYPE,'D',1,-1) DC
              FROM TAC_ABACCTCODE A
             WHERE A.DEL_IF          = 0
               AND A.TCO_COMPANY_PK  = p_compk
               AND A.AC_CD           = p_accd) E
      WHERE E.PK = D.TAC_ABACCTCODE_PK(+)
        AND E.PK = C.TAC_ABACCTCODE_PK(+)
        AND E.PK = B.TAC_ABACCTCODE_PK(+)
        AND E.PK = A.TAC_ABACCTCODE_PK(+);

    RETURN v_sum_balance;
---------
EXCEPTION
---------
    WHEN OTHERS THEN RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_FORMULAR_EXECUTE_21_36;

CREATE OR REPLACE FUNCTION HPDQ.sf_formular_execute_21_36 (
   p_formular      in varchar,
   p_date_type        varchar,
   p_column_type      varchar,
   p_balabce          varchar,
   p_header           varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        09-Jun-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar (4000) := '';
   l_value       varchar (4000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select substr (column_value, 0, 1) col1,
                 substr (column_value, 2, length (column_value) - 1) ac_cd
            from table (split (p_formular, ','))
           where column_value is not null)
   loop
      case
         when p_column_type = 'THIS'
         then
            case
               when p_balabce = 'L' or p_balabce = 'R' or p_balabce = 'B'
               then
                    select decode (
                              p_balabce,
                              'L', sum (dr_ps),
                              'R', sum (cr_ps),
                              decode (
                                 dc,
                                 1, sum (nvl (dr_bl, 0)) - sum (nvl (dr_op, 0)),
                                 sum (nvl (cr_bl, 0)) - sum (nvl (cr_op, 0))))
                      into l_value
                      from tac_cf_indirect
                     where ac_cd = c1.ac_cd
                  group by dc;
               when p_balabce = 'C'
               then
                  select 0
                    into l_value
                    from tac_cf_indirect
                   where ac_cd = c1.ac_cd;
            end case;
         when p_column_type = 'LAST'
         then
              select decode (
                        p_balabce,
                        'L', sum (dr_ps1),
                        'R', sum (cr_ps1),
                        decode (
                           dc,
                           1, sum (nvl (dr_bl1, 0)) - sum (nvl (dr_op1, 0)),
                           sum (nvl (cr_bl1, 0)) - sum (nvl (cr_op1, 0))))
                into l_value
                from tac_cf_indirect
               where ac_cd = c1.ac_cd
            group by dc;
         when p_column_type = 'ACC'
         then
            select decode (p_balabce, 'L', sum (dr_ps), sum (cr_ps))
              into l_value
              from tac_cf_indirect
             where ac_cd = c1.ac_cd;
      end case;

      l_value := nvl (c1.col1, '+') || '(' || l_value || ')';


      l_formular := l_formular || l_value;
   end loop;


   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_FORMULAR_EXECUTE_IC;

CREATE OR REPLACE FUNCTION HPDQ.sf_formular_execute_ic (
   p_formular      in varchar,
   p_date_type        varchar,
   p_column_type      varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  -----------  ---------------  ------------------------------------
      1.0        16-Nov-2009  TTAL        1. Created this function.
   ******************************************************************************/
   l_tmp         varchar (5000) := trim (p_formular);
   l_len         number := 0;
   l_cnt         number := 0;
   l_formular    varchar (1000) := '';
   l_ac_cd       varchar (1000) := '';
   l_value       varchar (1000) := '';
   l_buf         varchar (1) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select substr (column_value, 0, 1) col1,
                 substr (column_value, 2, length (column_value) - 1) col2
            from table (split (p_formular, ','))
           where column_value is not null)
   loop
      if p_column_type = 'THIS'
      then
         select sum (m_ps)
           into l_value
           from tac_fsqd15
          where ac_cd = c1.col2;
      elsif p_column_type = 'LAST'
      then
         select sum (m_ps1)
           into l_value
           from tac_fsqd15
          where ac_cd = c1.col2;
      elsif p_column_type = 'ACC'
      then
         select sum (m_acc)
           into l_value
           from tac_fsqd15
          where ac_cd = c1.col2;
      elsif p_column_type = 'ACC1'
      then
         select sum (m_acc1)
           into l_value
           from tac_fsqd15
          where ac_cd = c1.col2;
      elsif p_column_type = 'BAL'
      then
         select sum (m_bal)
           into l_value
           from tac_fsqd15
          where ac_cd = c1.col2;
      elsif p_column_type = 'BAL1'
      then
         select sum (m_bal1)
           into l_value
           from tac_fsqd15
          where ac_cd = c1.col2;
      end if;

      -- END IF;
      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.col1, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_formular_execute_ic;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ACCT_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_acct_openbal (p_compk        varchar2,
                                                     p_acc_pk       varchar2,
                                                     p_ccy          varchar2,
                                                     p_ymd          varchar2,
                                                     p_status       varchar2,
                                                     p_tran_book    varchar2                                        ---TRANS--BOOK
                                                                            )
   return number
is
   l_rtn_value   number;
   l_dc          number;
   l_total_amt   number;
   l_mm_bal      number;
   l_dd_bal      number;
   l_mm_fbal     number;
   l_dd_fbal     number;
begin
   select decode (drcr_type, 'D', 1, -1)
     into l_dc
     from tac_abacctcode
    where pk = p_acc_pk;

   select l_dc * (sum (nvl (this_dramt, 0)) - sum (nvl (this_cramt, 0))),
          l_dc * (sum (nvl (this_drfamt, 0)) - sum (nvl (this_crfamt, 0)))
     into l_mm_bal, l_mm_fbal
     from tac_hgmmbal m
    where     m.del_if = 0
          and m.tco_company_pk = p_compk
          and m.tr_status = p_status
          --and m.ccy like decode (p_ccy, 'ALL', '%', p_ccy)
          and m.std_ym = substr (sf_get_lastclosemm (p_ymd, p_compk), 1, 6)
          and m.tac_abacctcode_pk like decode (p_acc_pk, '', '%', p_acc_pk);

   select l_dc * (sum (nvl (ymd_drbooks, 0)) - sum (nvl (ymd_crbooks, 0))),
          l_dc * (sum (nvl (ymd_drtrans, 0)) - sum (nvl (ymd_crtrans, 0)))
     into l_dd_bal, l_dd_fbal
     from tac_hgddbal d
    where     d.del_if = 0
          and d.tco_company_pk = p_compk
          and d.tr_status = p_status
          --and d.ccy like decode (p_ccy, 'ALL', '%', p_ccy)
          and d.tac_abacctcode_pk in (    select pk
                                            from tac_abacctcode
                                           where del_if = 0 and leaf_yn = 'Y'
                                      start with pk = p_acc_pk
                                      connect by prior pk = pac_pk)
          and d.std_ymd >= to_char (add_months (to_date (sf_get_lastclosemm (p_ymd, p_compk), 'YYYYMMDD'), +1), 'YYYYMMDD')
          and d.std_ymd < p_ymd;

   if p_tran_book = 'TRANS'
   then
      l_total_amt := nvl (l_mm_fbal, 0) + nvl (l_dd_fbal, 0);
   else
      l_total_amt := nvl (l_mm_bal, 0) + nvl (l_dd_bal, 0);
   end if;

   l_rtn_value := l_total_amt;
   return l_rtn_value;
end sf_get_acct_openbal;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_ACC_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_acc_openbal (p_tco_company_pk       varchar,
                                                    p_tac_abacctcode_pk    varchar,
                                                    p_ymd                  varchar,
                                                    p_status               varchar)
   return number
is
   l_rtn_value   number;
   l_cnt         number;
   l_total_amt   number;
   l_mm_bal      number;
   l_dd_bal      number;
   l_dc          number;
begin
   select decode (drcr_type, 'D', 1, -1)
     into l_dc
     from tac_abacctcode
    where pk = p_tac_abacctcode_pk;

   select l_dc * (sum (nvl (this_dramt, 0)) - sum (nvl (this_cramt, 0)))
     into l_mm_bal
     from tac_hgmmbal m
    where     m.del_if = 0
          and m.tco_company_pk = p_tco_company_pk
          and m.tr_status = p_status
          and m.std_ym = substr (sf_get_lastclosemm (p_ymd, p_tco_company_pk), 1, 6)
          and m.tac_abacctcode_pk like decode (p_tac_abacctcode_pk, '', '%', p_tac_abacctcode_pk);

   select l_dc * (sum (nvl (ymd_drbooks, 0)) - sum (nvl (ymd_crbooks, 0)))
     into l_dd_bal
     from tac_hgddbal d
    where     d.del_if = 0
          and d.tco_company_pk = p_tco_company_pk
          and d.tr_status = p_status
          and d.tac_abacctcode_pk like decode (p_tac_abacctcode_pk, '', '%', p_tac_abacctcode_pk)
          and d.std_ymd >=
                 to_char (add_months (to_date (sf_get_lastclosemm (p_ymd, p_tco_company_pk), 'YYYYMMDD'), +1), 'YYYYMMDD')
          and d.std_ymd < p_ymd;

   l_total_amt := nvl (l_mm_bal, 0) + nvl (l_dd_bal, 0);


   l_rtn_value := l_total_amt;
   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_CUST_OPENBAL;

CREATE OR REPLACE FUNCTION HPDQ.SF_GET_CUST_OPENBAL (
   p_compk      IN   VARCHAR2,
   p_acc_pk     IN   VARCHAR2,
   p_cust_pk    IN   VARCHAR2,
   p_ymd        IN   VARCHAR2,
   p_ccy        IN   VARCHAR2,
   p_status     IN   VARCHAR2,         
   p_type       IN   VARCHAR2 --TRANS OR BOOKS                             
)
   RETURN NUMBER
IS
  p_rtn_value       NUMBER :=0;
  l_row_count       NUMBER;
  l_total_amt       NUMBER;
  l_mm_bal          NUMBER;
  l_dd_bal          NUMBER;
  l_cd_dr_num       NUMBER;
--------
BEGIN
--------
    l_row_count := 0;
    l_total_amt := 0;
    l_mm_bal := 0;
    l_dd_bal := 0;
    l_cd_dr_num:=1;
    
    SELECT TO_NUMBER(DECODE(SF_GET_DRCRTYPE(p_compk,p_acc_pk),'C','-1','1'))  INTO l_cd_dr_num
        FROM DUAL;
    
        SELECT NVL((SUM(DECODE(p_type,'TRANS',NVL(M.THIS_DRFAMT,0),NVL(M.THIS_DRAMT,0))) -
                SUM(DECODE(p_type,'TRANS',NVL(M.THIS_CRFAMT,0),NVL(M.THIS_CRAMT,0))) )*l_cd_dr_num,0)
                INTO l_mm_bal
            FROM TAC_HGCUSTMMBAL M
            WHERE M.DEL_IF =0
        AND m.tco_company_pk like  DECODE (p_compk, 0, '%%', p_compk)
        AND M.TR_STATUS = p_status
        AND ((p_ccy IS NULL) OR (M.CCY = p_ccy))
        AND M.TAC_ABACCTCODE_PK like DECODE(p_acc_pk,'','%',p_acc_pk)
        AND M.STD_YM = substr(SF_GET_LASTCLOSEMM (p_ymd,p_compk),1,6)
        AND M.TCO_BUSPARTNER_PK like DECODE(p_cust_pk,'','%',p_cust_pk);
        
        SELECT NVL((SUM(DECODE(p_type,'TRANS',NVL(D.YMD_DRTRANS,0),NVL(D.YMD_DRBOOKS,0))) -
                SUM(DECODE(p_type,'TRANS',NVL(D.YMD_CRTRANS,0),NVL(D.YMD_CRBOOKS,0))) )*l_cd_dr_num,0)
            INTO l_dd_bal
            FROM TAC_HGCUSTDDBAL D
            WHERE D.DEL_IF =0
            AND d.tco_company_pk like  DECODE (p_compk, 0, '%%', p_compk)
            AND D.TR_STATUS = p_status
            AND ((p_ccy IS NULL) OR (D.CCY = p_ccy))
            AND D.TAC_ABACCTCODE_PK like DECODE(p_acc_pk,'','%',p_acc_pk)
            AND D.TCO_BUSPARTNER_PK like DECODE(p_cust_pk,'','%',p_cust_pk)
            AND D.STD_YMD >= TO_CHAR(ADD_MONTHS(TO_DATE(SF_GET_LASTCLOSEMM (p_ymd,p_compk),'YYYYMMDD'),+1),'YYYYMMDD')
            AND D.STD_YMD < p_ymd;
        
       l_total_amt := nvl(l_mm_bal,0) + nvl(l_dd_bal,0); 
        
   
    p_rtn_value := l_total_amt;

    
    RETURN p_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      RAISE;
END;
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GET_MANAGER_NAME;

CREATE OR REPLACE FUNCTION HPDQ.sf_get_manager_name (p_thr_employee_pk varchar, p_level varchar)
   return varchar2
is
/******************************************************************************
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/24/2009   Nguyen Van Thai       1. Created this function.
******************************************************************************/
   l_rtn_value          varchar2 (100);
   l_thr_employee_pk    number;
   l_thr_employee_pk2   number;
begin
   if p_level = 1
   then
      select max (b.full_name), max (b.pk)
        into l_rtn_value, l_thr_employee_pk
        from tco_org a, hr.thr_employee b
       where a.manager_pk = b.pk and a.pk = (select tco_org_pk
                                               from hr.thr_employee
                                              where pk = p_thr_employee_pk);

      if l_thr_employee_pk = p_thr_employee_pk
      then
         select max (b.full_name), max (b.pk)
           into l_rtn_value, l_thr_employee_pk
           from tco_org a, hr.thr_employee b
          where a.manager_pk = b.pk and a.pk = (select p_pk
                                                  from tco_org
                                                 where del_if = 0 and pk in (select tco_org_pk
                                                                               from hr.thr_employee
                                                                              where pk = p_thr_employee_pk));
      end if;
   elsif p_level = 2
   then
      select max (b.full_name), max (b.pk)
        into l_rtn_value, l_thr_employee_pk
        from tco_org a, hr.thr_employee b
       where a.manager_pk = b.pk and a.pk = (select p_pk
                                               from tco_org
                                              where del_if = 0 and pk in (select tco_org_pk
                                                                            from hr.thr_employee
                                                                           where pk = p_thr_employee_pk));

      if l_thr_employee_pk = p_thr_employee_pk
      then
         select max (b.full_name), max (b.pk)
           into l_rtn_value, l_thr_employee_pk
           from tco_org a, hr.thr_employee b
          where a.manager_pk = b.pk
            and a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from hr.thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;

      select sf_get_manager_pk (p_thr_employee_pk, 1)
        into l_thr_employee_pk2
        from dual;

      if l_thr_employee_pk = l_thr_employee_pk2
      then
         select max (b.full_name)
           into l_rtn_value
           from tco_org a, hr.thr_employee b
          where a.manager_pk = b.pk
            and a.pk = (select p_pk
                          from tco_org
                         where del_if = 0 and pk in (select p_pk
                                                       from tco_org
                                                      where del_if = 0 and pk in (select tco_org_pk
                                                                                    from hr.thr_employee
                                                                                   where pk = p_thr_employee_pk)));
      end if;
   elsif p_level = 3
   then
      select max (b.full_name)
        into l_rtn_value
        from tco_org a, hr.thr_employee b
       where a.manager_pk = b.pk
         and a.pk = (select p_pk
                       from tco_org
                      where del_if = 0 and pk in (select p_pk
                                                    from tco_org
                                                   where del_if = 0 and pk in (select tco_org_pk
                                                                                 from hr.thr_employee
                                                                                where pk = p_thr_employee_pk)));
   end if;

   return l_rtn_value;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00130_1;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00130_1 (p_tac_kafinanceform_pk   in varchar,
                                                p_std_ym                    varchar2,
                                                p_tco_company_pk            varchar2,
                                                p_status                    varchar2,
                                                p_type                      varchar2,     --ACC: ACCUMMULATE, MONTH : SUM BY MONTH
                                                p_rate1                     varchar2,
                                                p_rate2                     varchar2,
                                                p_rate3                     varchar2)
   return number
is
   /******************************************************************************
      NAME:       SF_CAL_POLYNOMINAL
      PURPOSE:

      REVISIONS:
      Ver        Date               Author           Description
      ---------  -----------       ---------------  ------------------------------------
      1.0        23-Sep-2010   TTAL        1. Created this function.
   ******************************************************************************/
   l_formular      varchar2 (8000) := '';
   l_value         varchar2 (8000) := '';
   l_rtn_value     number;
   l_status        varchar (300);
   l_prn_lr        varchar2 (10);
   l_ac_cd         varchar2 (1000) := '';
   l_ac_drcr_num   number := 1;
   l_ac_drcr       varchar (2) := '';
   l_ac_pk         varchar2 (30) := '';
   l_row_count     number := 0;
   l_close_ym      varchar2 (10) := '';
   l_dd_sum        number := 0;
   l_mm_sum        number := 0;
   l_next_mm       varchar2 (8);
begin
   select prn_lr
     into l_prn_lr
     from tac_kafinanceform
    where pk = p_tac_kafinanceform_pk;

   if l_prn_lr = 'C'
   then
      ---------lay doi ung----------------------
      select sum (b.tr_bookamt)
        into l_rtn_value
        from tac_hgtrh a, tac_hgtrd_ref b
       where     a.pk = b.tac_hgtrh_pk
             and a.del_if = 0
             and a.tr_status in (0, 2)
             and b.del_if = 0
             and b.drcr_type = 'D'
             and a.tr_date between to_date (p_std_ym || '01', 'yyyymmdd') and last_day (to_date (p_std_ym || '01', 'yyyymmdd'))
             and b.tac_abacctcode_pk_dr in
                    (    select pk
                           from tac_abacctcode
                          where del_if = 0 and leaf_yn = 'Y'
                     start with     pk in (select tac_abacctcode_pk_dr
                                             from tac_kafinanceformd
                                            where tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0)
                                and del_if = 0
                     connect by prior pk = pac_pk and del_if = 0)
             and b.tac_abacctcode_pk_cr in
                    (    select pk
                           from tac_abacctcode
                          where del_if = 0 and leaf_yn = 'Y'
                     start with     pk in (select tac_abacctcode_pk_cr
                                             from tac_kafinanceformd
                                            where tac_kafinanceform_pk = p_tac_kafinanceform_pk and del_if = 0)
                                and del_if = 0
                     connect by prior pk = pac_pk and del_if = 0);

      return round (l_rtn_value * p_rate1 / p_rate2 / p_rate3, 2);
   elsif l_prn_lr = 'O'
   then
      --  acnt.sf_get_acct_openbal
      --------lay so du dau ky------------
      l_formular := '';

      for c1 in (select *
                   from tac_kafinanceformd1
                  where del_if = 0 and tac_kafinanceform_pk = p_tac_kafinanceform_pk and tac_abacctcode_pk is not null)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.pk = c1.tac_abacctcode_pk and a.del_if = 0;

         if upper (p_type) = 'MONTH'
         then
            select sf_get_acct_openbal (p_tco_company_pk,
                                             l_ac_pk,
                                             'VND',
                                             p_std_ym || '01',
                                             p_status,
                                             'BOOKS')
              into l_value
              from dual;
         end if;                                                                                                 --p_type ='MONTH'


         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;

      return round (l_rtn_value * p_rate1 / p_rate2 / p_rate3, 2);
   elsif l_prn_lr = 'E'
   then
      --  acnt.sf_get_acct_openbal
      --------lay so du cuoi ky------------
      l_formular := '';
      l_next_mm := to_char (add_months (to_date (p_std_ym || '01', 'yyyymmdd'), 1), 'yyyymmdd');

      for c1 in (select *
                   from tac_kafinanceformd1
                  where del_if = 0 and tac_kafinanceform_pk = p_tac_kafinanceform_pk and tac_abacctcode_pk is not null)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.pk = c1.tac_abacctcode_pk and a.del_if = 0;

         if upper (p_type) = 'MONTH'
         then
            select sf_get_acct_openbal (p_tco_company_pk,
                                             l_ac_pk,
                                             'VND',
                                             l_next_mm,
                                             p_status,
                                             'BOOKS')
              into l_value
              from dual;
         end if;                                                                                                 --p_type ='MONTH'


         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;

      return round (l_rtn_value * p_rate1 / p_rate2 / p_rate3, 2);
   elsif l_prn_lr = 'L' or l_prn_lr = 'R'
   then
      --------lay phat sinh------------
      for c1 in (select *
                   from tac_kafinanceformd1
                  where del_if = 0 and tac_kafinanceform_pk = p_tac_kafinanceform_pk and tac_abacctcode_pk is not null)
      loop
         select pk, a.drcr_type, to_number (decode (a.drcr_type,  'D', '1',  'C', '-1'))
           into l_ac_pk, l_ac_drcr, l_ac_drcr_num
           from tac_abacctcode a
          where a.pk = c1.tac_abacctcode_pk and a.del_if = 0;

         if upper (p_type) = 'MONTH'
         then
            select count (*),
                   decode (l_ac_drcr,  'D', sum (nvl (ym_drsum, 0)),  'C', sum (nvl (ym_crsum, 0))) * p_rate1 / p_rate2 / p_rate3
              into l_row_count, l_value
              from tac_hgmmbal m
             where     m.del_if = 0
                   and m.tco_company_pk = p_tco_company_pk
                   and m.tr_status = p_status
                   and m.tac_abacctcode_pk = l_ac_pk
                   and m.std_ym = p_std_ym;

            if (l_row_count = 0)
            then
               select   nvl (decode (l_ac_drcr,  'D', sum (nvl (ymd_drbooks, 0)),  'C', sum (nvl (ymd_crbooks, 0))), 0)
                      * p_rate1
                      / p_rate2
                      / p_rate3
                 into l_value
                 from tac_hgddbal d
                where     d.del_if = 0
                      and d.tco_company_pk = p_tco_company_pk
                      and d.tr_status = p_status
                      and d.tac_abacctcode_pk = l_ac_pk
                      and d.std_ymd between (p_std_ym || '01')
                                        and to_char (last_day (to_date (p_std_ym || '01', 'YYYYMMDD')), 'YYYYMMDD');
            end if;

            l_ac_cd := '';
         else                                                                                               --p_type='ACCUMULDATE'
            select substr (sf_get_lastclosemm (p_std_ym || '01', p_tco_company_pk), 0, 6) into l_close_ym from dual;

            if (l_close_ym < p_std_ym)
            then
               if (l_close_ym < substr (p_std_ym, 0, 4) || '01')
               then
                  select   decode (l_ac_drcr,  'D', sum (nvl (ymd_drbooks, 0)),  'C', sum (nvl (ymd_crbooks, 0)))
                         * p_rate1
                         / p_rate2
                         / p_rate3
                    into l_value
                    from tac_hgddbal d
                   where     d.del_if = 0
                         and d.tac_abacctcode_pk = l_ac_pk
                         and d.tco_company_pk = p_tco_company_pk
                         and d.std_ymd between (substr (p_std_ym, 0, 4) || '0101')
                                           and to_char (last_day (to_date (p_std_ym || '01', 'YYYYMMDD')), 'YYYYMMDD')
                         and d.tr_status = p_status;
               else
                  select   decode (l_ac_drcr,  'D', sum (nvl (ym_drsum, 0)),  'C', sum (nvl (ym_crsum, 0)))
                         * p_rate1
                         / p_rate2
                         / p_rate3
                    into l_mm_sum
                    from tac_hgmmbal m
                   where     m.del_if = 0
                         and m.tco_company_pk = p_tco_company_pk
                         and m.tr_status = p_status
                         and m.tac_abacctcode_pk = l_ac_pk
                         and m.std_ym >= (substr (p_std_ym, 0, 4) || '01')
                         and m.std_ym <= l_close_ym;

                  select   decode (l_ac_drcr,  'D', sum (nvl (ymd_drbooks, 0)),  'C', sum (nvl (ymd_crbooks, 0)))
                         * p_rate1
                         / p_rate2
                         / p_rate3
                    into l_dd_sum
                    from tac_hgddbal d
                   where     d.del_if = 0
                         and d.tac_abacctcode_pk = l_ac_pk
                         and d.tco_company_pk = p_tco_company_pk
                         and d.std_ymd between to_char (last_day (to_date (l_close_ym || '01', 'YYYYMMDD')) + 1, 'YYYYMMDD')
                                           and to_char (last_day (to_date (p_std_ym || '01', 'YYYYMMDD')), 'YYYYMMDD')
                         and d.tr_status = p_status;


                  l_value := nvl (l_dd_sum, 0) + nvl (l_mm_sum, 0);
               end if;
            else
               select   decode (l_ac_drcr,  'D', sum (nvl (ym_drsum, 0)),  'C', sum (nvl (ym_crsum, 0)))
                      * p_rate1
                      / p_rate2
                      / p_rate3
                 into l_value
                 from tac_hgmmbal m
                where     m.del_if = 0
                      and m.tco_company_pk = p_tco_company_pk
                      and m.tr_status = p_status
                      and m.tac_abacctcode_pk = l_ac_pk
                      and m.std_ym <= p_std_ym
                      and m.std_ym >= substr (p_std_ym, 0, 4) || '01';
            end if;

            l_ac_cd := '';
         end if;                                                                                                 --p_type ='MONTH'


         l_value := nvl (c1.operator_, '+') || '(' || nvl (l_value, 0) || ')';


         l_formular := l_formular || l_value;
      end loop;

      if l_formular = '' or l_formular is null
      then
         l_rtn_value := null;
      else
         execute immediate 'SELECT ' || l_formular || ' FROM DUAL ' into l_rtn_value;
      end if;



      return l_rtn_value;
   end if;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_1;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_1 (p_formular      in varchar,
                                                p_date_type        varchar,
                                                p_column_type      varchar,
                                                p_kind             varchar,
                                                p_balance          varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00250_1
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        16-Sep-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select substr (column_value, 0, 1) col1,
                 substr (column_value, 2, length (column_value) - 1) col2
            from table (split (p_formular, ','))
           where column_value is not null)
   loop
      case
         when p_column_type = 'PRE_Y'
         then
            begin
               select sum (nvl (pre_year, 0))
                 into l_value
                 from tac_fsinter
                where ac_cd = c1.col2;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'PRE_M'
         then
            begin
               select sum (
                         decode (drcr_type,
                                 1, nvl (dr_op, 0),
                                 nvl (cr_op, 0)))   -- SUM(NVL(pre_month, 0) )
                 into l_value
                 from tac_tmptrialbal
                where ac_cd = c1.col2;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'THIS'
         then
            begin
               select sum (
                         decode (drcr_type,
                                 1, nvl (dr_bl, 0),
                                 nvl (cr_bl, 0))) --  SUM(NVL(this_month, 0) )
                 into l_value
                 from tac_tmptrialbal
                where ac_cd = c1.col2;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.col1, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00210_1;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_2;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_2 (p_formular      in varchar,
                                                p_date_type        varchar,
                                                p_column_type      varchar,
                                                p_kind             varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        17-Sep-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select substr (column_value, 0, 1) col1,
                 substr (column_value, 2, length (column_value) - 1) col2
            from table (split (p_formular, ','))
           where column_value is not null)
   loop
      case
         when p_column_type = 'PRE_Y'
         then
            begin
               select sum (nvl (y_bal, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'PRE_M'
         then
            begin
               select sum (nvl (m_bal, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'THIS'
         then
            begin
               select sum (nvl (m_ps, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.col1, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00210_2;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_3;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_3(
   p_formular      IN   VARCHAR
 , p_date_type          VARCHAR
 , p_column_type        VARCHAR
 , p_kind               VARCHAR
 , p_balance            VARCHAR)
   RETURN NUMBER
IS
/******************************************************************************
   NAME:       SF_GFKA00210_2
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        22-Sep-09   TTAL       1. Created this function.
******************************************************************************/
   l_formular VARCHAR2(32767) := '';
   l_value VARCHAR2(4000) := '';
   l_rtn_value NUMBER;
   l_status VARCHAR(300);
BEGIN
   FOR c1 IN (SELECT SUBSTR(COLUMN_VALUE, 0, 1) col1
                   , SUBSTR(COLUMN_VALUE, 2, LENGTH(COLUMN_VALUE) - 1) ac_cd
                FROM TABLE(SPLIT(p_formular, ',') )
               WHERE SUBSTR(COLUMN_VALUE, 2, LENGTH(COLUMN_VALUE) - 1) IS NOT NULL)
   LOOP
      CASE
         WHEN p_column_type = 'PRE_Y'
         THEN
            CASE
               WHEN p_balance = 'L' OR p_balance = 'R' OR p_balance = 'B'
                    OR p_balance = 'E' OR p_balance = 'O'
               THEN
                  BEGIN
                     SELECT   DECODE(p_balance
                                   , 'L', NVL(SUM(dr_pre_y_ps), 0)
                                   , 'R', SUM(NVL(cr_pre_y_ps, 0) )
                                   , 'O', SUM(NVL(cr_pre_y_op, 0) )
                                   , 'E', DECODE(dc
                                               , 1, SUM(NVL(dr_pre_y_bl, 0) )
                                               , SUM(NVL(cr_pre_y_bl, 0) ) )
                                   , DECODE(dc
                                          , 1, SUM(NVL(dr_pre_y_bl, 0) )
                                             - SUM(NVL(dr_pre_y_op, 0) )
                                          , SUM(NVL(cr_pre_y_bl, 0) )
                                            - SUM(NVL(cr_pre_y_op, 0) ) ) )
                         INTO l_value
                         FROM tac_ic_internal
                        WHERE ac_cd = c1.ac_cd
                     GROUP BY dc;
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        l_value := 0;
                  END;
            END CASE;
         WHEN p_column_type = 'PRE_M'
         THEN
            CASE
               WHEN p_balance = 'L' OR p_balance = 'R' OR p_balance = 'B'
                    OR p_balance = 'E' OR p_balance = 'O'
               THEN
                  BEGIN
                     SELECT   DECODE(p_balance
                                   , 'L', SUM(NVL(dr_pre_m_ps, 0) )
                                   , 'R', SUM(NVL(cr_pre_m_ps, 0) )
                                   , 'O', SUM(NVL(cr_pre_m_op, 0) )
                                   , 'E', DECODE(dc
                                               , 1, SUM(NVL(dr_pre_m_bl, 0) )
                                               , SUM(NVL(cr_pre_m_bl, 0) ) )
                                   , DECODE(dc
                                          , 1, SUM(NVL(dr_pre_m_bl, 0) )
                                             - SUM(NVL(dr_pre_m_op, 0) )
                                          , SUM(NVL(dr_pre_m_bl, 0) )
                                            - SUM(NVL(cr_pre_m_op, 0) ) ) )
                         INTO l_value
                         FROM tac_ic_internal
                        WHERE ac_cd = c1.ac_cd
                     GROUP BY dc;
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        l_value := 0;
                  END;
            END CASE;
         WHEN p_column_type = 'THIS'
         THEN
            CASE
               WHEN p_balance = 'L' OR p_balance = 'R' OR p_balance = 'B'
                    OR p_balance = 'E' OR p_balance = 'O'
               THEN
                  BEGIN
                     SELECT   DECODE(p_balance
                                   , 'L', SUM(NVL(dr_this_ps, 0) )
                                   , 'R', SUM(NVL(cr_this_ps, 0) )
                                   , 'O', SUM(NVL(dr_this_op, 0) )
                                   , 'E', DECODE(dc
                                               , 1, SUM(NVL(dr_this_bl, 0) )
                                               , SUM(NVL(cr_this_bl, 0) ) )
                                   , DECODE(dc
                                          , 1, SUM(NVL(dr_this_bl, 0) )
                                             - SUM(NVL(cr_this_op, 0) )
                                          , SUM(NVL(dr_this_bl, 0) )
                                            - SUM(NVL(cr_this_op, 0) ) ) )
                         INTO l_value
                         FROM tac_ic_internal
                        WHERE ac_cd = c1.ac_cd
                     GROUP BY dc;
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        l_value := 0;
                  END;
            END CASE;
         WHEN p_column_type = 'THIS_ACC'
         THEN
            CASE
               WHEN p_balance = 'L' OR p_balance = 'R' OR p_balance = 'B'
                    OR p_balance = 'E' OR p_balance = 'O'
               THEN
                  BEGIN
                     SELECT   DECODE(p_balance
                                   , 'L', SUM(NVL(dr_acc_this_ps, 0) )
                                   , 'R', SUM(NVL(cr_acc_this_ps, 0) )
                                   , 'O', SUM(NVL(dr_acc_this_op, 0) )
                                   , 'E', DECODE(dc
                                               , 1, SUM(NVL(dr_acc_this_bl, 0) )
                                               , SUM(NVL(cr_acc_this_bl, 0) ) )
                                   , DECODE(dc
                                          , 1, SUM(NVL(dr_acc_this_bl, 0) )
                                             - SUM(NVL(cr_acc_this_op, 0) )
                                          , SUM(NVL(dr_acc_this_bl, 0) )
                                            - SUM(NVL(cr_acc_this_op, 0) ) ) )
                         INTO l_value
                         FROM tac_ic_internal
                        WHERE ac_cd = c1.ac_cd
                     GROUP BY dc;
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        l_value := 0;
                  END;
            END CASE;
         WHEN p_column_type = 'PRE_ACC'
         THEN
            CASE
               WHEN p_balance = 'L' OR p_balance = 'R' OR p_balance = 'B'
                    OR p_balance = 'E' OR p_balance = 'O'
               THEN
                  BEGIN
                     SELECT   DECODE(p_balance
                                   , 'L', SUM(NVL(dr_acc_ps, 0) )
                                   , 'R', SUM(NVL(cr_acc_ps, 0) )
                                   , 'O', SUM(NVL(dr_acc_op, 0) )
                                   , 'E', DECODE(dc
                                               , 1, SUM(NVL(dr_acc_bl, 0) )
                                               , SUM(NVL(cr_acc_bl, 0) ) )
                                   , DECODE(dc
                                          , 1, SUM(NVL(dr_acc_bl, 0) )
                                             - SUM(NVL(cr_acc_op, 0) )
                                          , SUM(NVL(dr_acc_bl, 0) )
                                            - SUM(NVL(cr_acc_op, 0) ) ) )
                         INTO l_value
                         FROM tac_ic_internal
                        WHERE ac_cd = c1.ac_cd
                     GROUP BY dc;
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        l_value := 0;
                  END;
            END CASE;
      END CASE;

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL(c1.col1, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
                INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END sf_gfka00210_3;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_5;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_5 (p_formular      in varchar,
                                                p_date_type        varchar,
                                                p_column_type      varchar,
                                                p_kind             varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00210_2
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        17-Sep-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar (300);
begin
   for c1
      in (select substr (column_value, 0, 1) col1,
                 substr (column_value, 2, length (column_value) - 1) col2
            from table (split (p_formular, ','))
           where column_value is not null)
   loop
      case
         when p_column_type = 'PRE_Y'
         then
            begin
               select sum (nvl (y_ps, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'PRE_M'
         then
            begin
               select sum (nvl (m_bal, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'THIS'
         then
            begin
               select sum (nvl (m_ps, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'THIS_ACC'
         then
            begin
               select sum (nvl (m_acc, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'PRE_ACC'
         then
            begin
               select sum (nvl (m_acc1, 0))
                 into l_value
                 from tac_kafinanceform
                where prn_seq = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.col1, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00210_5;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00210_6;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00210_6 (p_formular      in varchar,
                                                p_date_type        varchar,
                                                p_column_type      varchar,
                                                p_kind             varchar)
   return number
is

 
   
   l_formular VARCHAR2(32767) := '';
   l_value VARCHAR2(2000) := '';
   l_rtn_value NUMBER;
   l_status VARCHAR(300);
BEGIN
   FOR c1 IN (SELECT SUBSTR(COLUMN_VALUE, 0, 1) col1
                   , SUBSTR(COLUMN_VALUE, 2, LENGTH(COLUMN_VALUE) - 1) col2
                FROM TABLE(SPLIT(p_formular, ',') )
               WHERE COLUMN_VALUE IS NOT NULL)
   LOOP
      CASE
         WHEN p_column_type = 'PRE_Y'
         THEN
            BEGIN
               SELECT SUM(NVL(y_ps, 0) )
                 INTO l_value
                 FROM tac_kafinanceform
                WHERE prn_seq = c1.col2 AND form_type = p_kind;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
         WHEN p_column_type = 'PRE_M'
         THEN
            BEGIN
               SELECT SUM(NVL(m_bal, 0) )
                 INTO l_value
                 FROM tac_kafinanceform
                WHERE prn_seq = c1.col2 AND form_type = p_kind;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
         WHEN p_column_type = 'THIS'
         THEN
            BEGIN
               SELECT SUM(NVL(m_ps, 0) )
                 INTO l_value
                 FROM tac_kafinanceform
                WHERE prn_seq = c1.col2 AND form_type = p_kind;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
         WHEN p_column_type = 'THIS_ACC'
         THEN
            BEGIN
               SELECT SUM(NVL(m_acc, 0) )
                 INTO l_value
                 FROM tac_kafinanceform
                WHERE prn_seq = c1.col2 AND form_type = p_kind;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
         WHEN p_column_type = 'PRE_ACC'
         THEN
            BEGIN
               SELECT SUM(NVL(m_acc1, 0) )
                 INTO l_value
                 FROM tac_kafinanceform
                WHERE prn_seq = c1.col2 AND form_type = p_kind;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  l_value := 0;
            END;
      END CASE;

      IF (l_value IS NULL OR l_value = '')
      THEN
         l_value := 0;
      ELSE
         l_value := NVL(c1.col1, '+') || '(' || l_value || ')';
      END IF;

      l_formular := l_formular || l_value;
   END LOOP;

   EXECUTE IMMEDIATE 'SELECT ' || l_formular || ' FROM DUAL '
                INTO l_rtn_value;

   RETURN l_rtn_value;
EXCEPTION
   WHEN OTHERS
   THEN
      l_status := SQLERRM;
      RETURN 0;
END sf_gfka00210_6;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SF_GFKA00250_1;

CREATE OR REPLACE FUNCTION HPDQ.sf_gfka00250_1 (p_formular      in varchar,
                                                p_date_type        varchar,
                                                p_column_type      varchar,
                                                p_kind             varchar)
   return number
is
   /******************************************************************************
      NAME:       SF_GFKA00250_1
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        30-Jun-09   TTAL       1. Created this function.
   ******************************************************************************/
   l_formular    varchar2 (32767) := '';
   l_value       varchar2 (2000) := '';
   l_rtn_value   number;
   l_status      varchar2 (300);
begin
   for c1
      in (select substr (column_value, 0, 1) col1,
                 substr (column_value, 2, length (column_value) - 1) col2
            from table (split (p_formular, ','))
           where column_value is not null)
   loop
      case
         when p_column_type = 'THIS'
         then
            begin
               select sum (nvl (m_ps, 0))
                 into l_value
                 from tac_kafinanceform
                where header = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'LAST'
         then
            begin
               select sum (nvl (m_ps1, 0))
                 into l_value
                 from tac_kafinanceform
                where header = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'ACC'
         then
            begin
               select sum (nvl (m_acc, 0))
                 into l_value
                 from tac_kafinanceform
                where header = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
         when p_column_type = 'ACC1'
         then
            begin
               select sum (nvl (m_acc1, 0))
                 into l_value
                 from tac_kafinanceform
                where header = c1.col2 and form_type = p_kind;
            exception
               when no_data_found
               then
                  l_value := 0;
            end;
      end case;

      if (l_value is null or l_value = '')
      then
         l_value := 0;
      else
         l_value := nvl (c1.col1, '+') || '(' || l_value || ')';
      end if;

      l_formular := l_formular || l_value;
   end loop;

   execute immediate 'SELECT ' || l_formular || ' FROM DUAL '
      into l_rtn_value;

   return l_rtn_value;
exception
   when others
   then
      l_status := sqlerrm;
      return 0;
end sf_gfka00250_1;
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.SP_REVERSE_POLISH;

CREATE OR REPLACE FUNCTION HPDQ.sp_reverse_polish (v_formular    varchar2,
                                                   v_type        varchar2,
                                                   v_year        varchar2)
   return varchar2
is
   v_tmp         varchar2 (2000);
   firsr_str     varchar2 (2000);
   last_str      varchar2 (2000);
   v_num         number := 1;
   v_one         varchar2 (1);
   v_stack       varchar2 (100);
   v_one_stack   varchar2 (1);
   k             number;
   v_ngoacmo     number;
   v_bt_ngoac    varchar2 (100);
   v_bt          varchar2 (2000);
   v_num_tb      number;

   v_count       number;
begin
   v_tmp := v_formular;
   k := 1;

   while (v_num <= length (v_formular))
   loop
      select substr (v_tmp, 1, 1) into v_one from dual;

      if v_one in ('+', '-', '*', '/', '(', ')')
      then
         select substr (v_stack, -1) into v_one_stack from dual;

         if firsr_str is null
         then
            firsr_str := substr (v_formular, k, v_num - k);

            if firsr_str is not null
            then
               select count (*)
                 into v_count
                 from tac_tmptrialbal
                where ac_cd = firsr_str;

               if v_count > 0
               then
                  select decode (
                            v_type,
                            '21', decode (
                                     v_year,
                                     0, decode (drcr_type,
                                                1, nvl (dr_op, 0),
                                                nvl (cr_op, 0)),
                                     1, decode (drcr_type,
                                                1, nvl (dr_bl, 0),
                                                nvl (cr_bl, 0))),
                            '22', decode (
                                     v_year,
                                     0, decode (drcr_type,
                                                1, nvl (dr_acc_last, 0),
                                                nvl (cr_acc_last, 0)),
                                     1, decode (drcr_type,
                                                1, nvl (dr_acc, 0),
                                                nvl (cr_acc, 0)),
                                     2, decode (drcr_type,
                                                1, nvl (dr_acc, 0),
                                                nvl (cr_acc, 0))),
                            '23', decode (
                                     v_year,
                                     0, decode (
                                           drcr_type,
                                           1,   nvl (dr_bl_last_1, 0)
                                              - nvl (dr_bl_last_2, 0),
                                             nvl (cr_bl_last_1, 0)
                                           - nvl (cr_bl_last_2, 0)),
                                     1, decode (
                                           drcr_type,
                                           1,   nvl (dr_bl, 0)
                                              - nvl (dr_bl_last_1, 0),
                                           (  nvl (cr_bl, 0)
                                            - nvl (cr_bl_last_1, 0)))))
                    into v_num_tb
                    from tac_tmptrialbal
                   where ac_cd = firsr_str;
               else
                  v_num_tb := 0;
               end if;

               v_bt := v_bt || v_num_tb;
            end if;
         else
            begin
               if (k <> v_num)
               then
                  firsr_str :=
                     firsr_str || ';' || substr (v_formular, k, v_num - k);

                  select count (*)
                    into v_count
                    from tac_tmptrialbal
                   where ac_cd = substr (v_formular, k, v_num - k);

                  if v_count > 0
                  then
                     select decode (
                               v_type,
                               '21', decode (
                                        v_year,
                                        0, decode (drcr_type,
                                                   1, nvl (dr_op, 0),
                                                   nvl (cr_op, 0)),
                                        1, decode (drcr_type,
                                                   1, nvl (dr_bl, 0),
                                                   nvl (cr_bl, 0))),
                               '22', decode (
                                        v_year,
                                        0, decode (drcr_type,
                                                   1, nvl (dr_acc_last, 0),
                                                   nvl (cr_acc_last, 0)),
                                        1, decode (drcr_type,
                                                   1, nvl (dr_acc, 0),
                                                   nvl (cr_acc, 0)),
                                        2, decode (drcr_type,
                                                   1, nvl (dr_acc, 0),
                                                   nvl (cr_acc, 0))),
                               '23', decode (
                                        v_year,
                                        0, decode (
                                              drcr_type,
                                              1,   nvl (dr_bl_last_1, 0)
                                                 - nvl (dr_bl_last_2, 0),
                                                nvl (cr_bl_last_1, 0)
                                              - nvl (cr_bl_last_2, 0)),
                                        1, decode (
                                              drcr_type,
                                              1,   nvl (dr_bl, 0)
                                                 - nvl (dr_bl_last_1, 0),
                                              (  nvl (cr_bl, 0)
                                               - nvl (cr_bl_last_1, 0)))))
                       into v_num_tb
                       from tac_tmptrialbal
                      where ac_cd = substr (v_formular, k, v_num - k);
                  else
                     v_num_tb := 0;
                  end if;

                  v_bt := v_bt || ';' || v_num_tb;
               end if;
            end;
         end if;

         k := v_num + 1;

         if v_one_stack is null
         then
            v_stack := v_one;
         else
            begin
               if (v_one = ')')
               then
                  select instr (v_stack, '(', -1) into v_ngoacmo from dual;

                  select substr (v_stack, v_ngoacmo + 1, length (v_stack))
                    into v_bt_ngoac
                    from dual;

                  select substr (
                            v_stack,
                            1,
                              length (v_stack)
                            - nvl (length (v_bt_ngoac), 0)
                            - 1)
                    into v_stack
                    from dual;

                  if (v_stack = '(')
                  then
                     v_stack := '';
                  end if;

                  while (v_bt_ngoac is not null)
                  loop
                     select substr (v_bt_ngoac, -1)
                       into v_one_stack
                       from dual;

                     firsr_str := firsr_str || ';' || v_one_stack;
                     v_bt := v_bt || ';' || v_one_stack;

                     select substr (v_bt_ngoac, 1, length (v_bt_ngoac) - 1)
                       into v_bt_ngoac
                       from dual;
                  end loop;
               else
                  begin
                     if (v_one = '(')
                     then
                        v_stack := v_stack || v_one;
                     else
                        begin
                           if sf_get_priority (v_one) >
                                 sf_get_priority (v_one_stack)
                           then
                              v_stack := v_stack || v_one;
                           else
                              select substr (v_stack, -1)
                                into v_one_stack
                                from dual;

                              firsr_str := firsr_str || ';' || v_one_stack;
                              v_bt := v_bt || ';' || v_one_stack;

                              select substr (v_stack,
                                             1,
                                             length (v_stack) - 1)
                                into v_stack
                                from dual;

                              v_stack := v_stack || v_one;
                           end if;
                        end;
                     end if;
                  end;
               end if;
            end;
         end if;
      end if;

      v_num := v_num + 1;
      last_str := substr (v_formular, v_num, length (v_formular));
      v_tmp := last_str;
   end loop;

   if (k <> v_num)
   then
      firsr_str :=
         firsr_str || ';' || substr (v_formular, k, length (v_formular));

      select count (*)
        into v_count
        from tac_tmptrialbal
       where ac_cd = substr (v_formular, k, v_num - k);

      if v_count > 0
      then
         select decode (
                   v_type,
                   '21', decode (
                            v_year,
                            0, decode (drcr_type,
                                       1, nvl (dr_op, 0),
                                       nvl (cr_op, 0)),
                            1, decode (drcr_type,
                                       1, nvl (dr_bl, 0),
                                       nvl (cr_bl, 0))),
                   '22', decode (
                            v_year,
                            0, decode (drcr_type,
                                       1, nvl (dr_acc_last, 0),
                                       nvl (cr_acc_last, 0)),
                            1, decode (drcr_type,
                                       1, nvl (dr_acc, 0),
                                       nvl (cr_acc, 0)),
                            2, decode (drcr_type,
                                       1, nvl (dr_acc, 0),
                                       nvl (cr_acc, 0))),
                   '23', decode (
                            v_year,
                            0, decode (
                                  drcr_type,
                                  1,   nvl (dr_bl_last_1, 0)
                                     - nvl (dr_bl_last_2, 0),
                                    nvl (cr_bl_last_1, 0)
                                  - nvl (cr_bl_last_2, 0)),
                            1, decode (
                                  drcr_type,
                                  1, nvl (dr_bl, 0) - nvl (dr_bl_last_1, 0),
                                  (nvl (cr_bl, 0) - nvl (cr_bl_last_1, 0)))))
           into v_num_tb
           from tac_tmptrialbal
          where ac_cd = substr (v_formular, k, v_num - k);
      else
         v_num_tb := 0;
      end if;

      v_bt := v_bt || ';' || v_num_tb;
   end if;

   while (v_stack is not null)
   loop
      select substr (v_stack, -1) into v_one_stack from dual;

      firsr_str := firsr_str || ';' || v_one_stack;
      v_bt := v_bt || ';' || v_one_stack;

      select substr (v_stack, 1, length (v_stack) - 1) into v_stack from dual;
   end loop;

   select sp_sum_from_polish (v_bt) into v_bt from dual;

   return v_bt;
end;
 
 
 
 
 
 
 
 
 
 
 
 
/

DROP FUNCTION HPDQ.ST_HR_CLASSIFICATION_DETAIL;

CREATE OR REPLACE FUNCTION HPDQ.ST_hr_Classification_Detail(
  p_salary number,
  p_number number
  ) RETURN number IS
  l_money_type a_money_type:=a_money_type();
BEGIN
   l_money_type:=ST_hr_Classification_Money(p_salary);
   return l_money_type(p_number);
   EXCEPTION
     WHEN OTHERS THEN
           Raise_application_error(-20001,'Loi: ' || SQLERRM);
       RAISE;
END;
 
 
 
 
/

GRANT EXECUTE ON HPDQ.F_SEQUENCE TO PUBLIC;

GRANT EXECUTE, DEBUG ON HPDQ.SF_GET_CURRENT_SELL_EX_RATE TO PUBLIC;

GRANT EXECUTE ON HPDQ.SF_GET_DAY_OF_MONTH TO PUBLIC;

GRANT DEBUG ON HPDQ.SF_GET_EMP_ID_NAME TO PUBLIC;

GRANT EXECUTE ON HPDQ.SF_GET_RATE2 TO PUBLIC;

GRANT EXECUTE ON HPDQ.SF_GET_ROOMS_FREE TO PUBLIC;
